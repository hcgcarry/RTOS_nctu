
Test.elf:     file format elf32-littlenios2
Test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00018710 memsz 0x00025230 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000164b4  040001bc  040001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000510  04016670  04016670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bb0  04016b80  04016b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000cb20  04018730  04018730  00019730  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00019730  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd0  00000000  00000000  00019758  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002224  00000000  00000000  0001a528  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00030c42  00000000  00000000  0001c74c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009525  00000000  00000000  0004d38e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b387  00000000  00000000  000568b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026b8  00000000  00000000  00071c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000244f  00000000  00000000  000742f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d2e3  00000000  00000000  00076743  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00083a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000988  00000000  00000000  00083a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00088d63  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00088d69  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00088d6c  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00088d6d  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00088d71  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00088d75  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00088d79  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00088d82  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00088d8b  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  00088d94  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000016  00000000  00000000  00088d9d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001bc l    d  .text	00000000 .text
04016670 l    d  .rodata	00000000 .rodata
04016b80 l    d  .rwdata	00000000 .rwdata
04018730 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
040002d0 l     F .text	000000b4 TaskStartCreateTasks
04018734 l     O .bss	00000004 i.2905
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04000828 l     F .text	00000058 __sprint_r
04016756 l     O .rodata	00000010 blanks.3452
04016746 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400288c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04004288 l     F .text	00000058 std
04004394 l     F .text	00000008 __fp_lock
0400439c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04016b80 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
04018678 l     O .rwdata	00000004 charset
0401678c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
040168d4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
04008528 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
04009654 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
04009ec8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04009f28 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400a028 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400a148 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0400a298 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0400a4e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0401869c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400a77c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
040186a0 l     O .rwdata	00000004 lockid
04018768 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
040186a4 l     O .rwdata	00000004 lockid
04018770 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0400c310 l     F .text	00000044 OS_InitMisc
0400c354 l     F .text	0000006c OS_InitRdyList
0400c4b8 l     F .text	000000e0 OS_InitTCBList
0400c234 l     F .text	000000dc OS_InitEventList
0400c3c0 l     F .text	0000007c OS_InitTaskIdle
0400c43c l     F .text	0000007c OS_InitTaskStat
0400c754 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0400e674 l     F .text	00000110 OS_FlagTaskRdy
0400e3cc l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401753c l     O .rwdata	000000c4 epcs
04017600 l     O .rwdata	0000106c jtag_uart
04012f68 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0401302c l     F .text	000001ec alt_epcs_flash_query
04012ff4 l     F .text	00000038 alt_flash_device_register
04013218 l     F .text	00000108 alt_epcs_flash_memcmp
040136a4 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04013b54 l     F .text	000002c4 altera_avalon_jtag_uart_irq
04013e18 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04014630 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
0401480c l     F .text	00000038 epcs_await_wip_released
04014844 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04014d98 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401525c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04015398 l     F .text	000000dc alt_file_locked
040155fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
040163e0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
04016594 l     F .text	00000040 alt_sim_halt
04006044 g     F .text	00000094 _mprec_log10
040186f2 g     O .rwdata	00000002 OSTaskNameSize
040135a0 g     F .text	00000090 alt_epcs_flash_get_info
04006130 g     F .text	00000088 __any_on
0400783c g     F .text	00000070 _isatty_r
040168ac g     O .rodata	00000028 __mprec_tinytens
0400a2f8 g     F .text	000000c8 alt_main
04000700 g     F .text	000000a0 _puts_r
04024fc0 g     O .bss	00000100 alt_irq
040078ac g     F .text	00000078 _lseek_r
0400ef68 g     F .text	000000d0 OS_MemInit
04012e6c g     F .text	00000064 OSTimeSet
04009048 g     F .text	00000088 __eqdf2
0400ad30 g     F .text	000006b4 OSEventPendMulti
04025250 g       *ABS*	00000000 __alt_heap_start
04015c04 g     F .text	00000020 OSTaskCreateHook
04000688 g     F .text	00000044 printf
040186ca g     O .rwdata	00000002 OSMboxEn
0400b438 g     F .text	0000007c OSIntEnter
04007308 g     F .text	00000068 __sseek
040042f0 g     F .text	000000a4 __sinit
040186da g     O .rwdata	00000002 OSQEn
04004fc8 g     F .text	00000084 _setlocale_r
040043f0 g     F .text	00000068 __sfmoreglue
0400a9ec g     F .text	000000d0 __malloc_unlock
04015c60 g     F .text	0000001c OSTaskStatHook
04018778 g     O .bss	00000001 OSLockNesting
04018718 g     O .rwdata	00000002 OSDataSize
04018779 g     O .bss	00000001 OSRunning
04005ac0 g     F .text	000000e0 memmove
04015c98 g     F .text	0000001c OSInitHookBegin
04018710 g     O .rwdata	00000002 OSTmrSize
040043e0 g     F .text	00000010 _cleanup
040061b8 g     F .text	000000bc _Balloc
0401877c g     O .bss	00000004 OSIdleCtr
04009158 g     F .text	00000088 __gtdf2
040158d0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0400ca88 g     F .text	000002e0 OS_TCBInit
04014790 g     F .text	0000007c epcs_sector_erase
00000000 g     F .entry	00000000 __reset
04018716 g     O .rwdata	00000002 OSTmrWheelTblSize
040186b6 g     O .rwdata	00000002 OSEventSize
04018780 g     O .bss	00000001 OSPrioHighRdy
040077c8 g     F .text	00000074 _fstat_r
04015c24 g     F .text	00000020 OSTaskDelHook
04018754 g     O .bss	00000004 errno
040158b0 g       .text	00000000 OSStartHighRdy
04011660 g     F .text	000001e4 OSTaskCreateExt
0400dee8 g     F .text	00000068 OSFlagPendGetFlagsRdy
040186f6 g     O .rwdata	00000002 OSTaskStatStkSize
0400cef4 g     F .text	00000334 OSFlagAccept
0400f6a0 g     F .text	000000c8 OSQFlush
0400f038 g     F .text	00000154 OSQAccept
04018760 g     O .bss	00000004 alt_argv
0402066c g       *ABS*	00000000 _gp
040114a8 g     F .text	000001b8 OSTaskCreate
04010f34 g     F .text	00000574 OSTaskChangePrio
04018774 g     O .bss	00000004 alt_heapsem
0400cd68 g     F .text	0000018c OSDebugInit
04011844 g     F .text	0000040c OSTaskDel
040173bc g     O .rwdata	00000180 alt_fd_list
04021d3c g     O .bss	00000370 OSFlagTbl
0400c010 g     F .text	000000b8 OS_EventTaskRemove
04014980 g     F .text	00000064 epcs_write_status_register
04015f44 g     F .text	00000094 alt_find_dev
04005a20 g     F .text	000000a0 memcpy
040186e0 g     O .rwdata	00000002 OSRdyTblSize
040043d4 g     F .text	0000000c _cleanup_r
040092f0 g     F .text	000000f8 __floatsidf
04015320 g     F .text	00000078 alt_io_redirect
04009268 g     F .text	00000088 __ltdf2
04016670 g       *ABS*	00000000 __DTOR_END__
040007a0 g     F .text	00000014 puts
0400aabc g     F .text	00000130 OSEventNameGet
040186c4 g     O .rwdata	00000002 OSFlagMax
04015804 g     F .text	00000020 altera_nios2_irq_init
04013738 g     F .text	00000110 alt_epcs_flash_write_block
04005f94 g     F .text	000000b0 __ratio
0400b5a0 g     F .text	00000128 OSIntExit
04000540 g     F .text	00000148 ArgumentSet
040186fe g     O .rwdata	00000002 OSTCBSize
04018781 g     O .bss	00000001 OSPrioCur
04014094 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
040006cc g     F .text	00000034 _printf_r
04009790 g     F .text	00000008 __udivsi3
0400a088 g     F .text	000000c0 isatty
040186e4 g     O .rwdata	00000002 OSStkWidth
040167bc g     O .rodata	000000c8 __mprec_tens
040186d8 g     O .rwdata	00000002 OSPtrSize
04004fa4 g     F .text	00000008 __locale_charset
040186b8 g     O .rwdata	00000002 OSEventTblSize
04015824 g       .text	00000000 OSCtxSw
04018748 g     O .bss	00000004 __malloc_top_pad
04018784 g     O .bss	00000004 OSTCBList
04018758 g     O .bss	00000004 alt_fd_list_lock
04018674 g     O .rwdata	00000004 __mb_cur_max
04004fac g     F .text	0000000c _localeconv_r
040068b0 g     F .text	0000003c __i2b
04004988 g     F .text	0000049c __sfvwrite_r
040220ac g     O .bss	00000c30 OSMemTbl
04018788 g     O .bss	00000001 OSTickStepState
04007290 g     F .text	00000070 _sbrk_r
040186dc g     O .rwdata	00000002 OSQMax
04022cdc g     O .bss	00000800 OSTaskStatStk
0400eb50 g     F .text	0000010c OSMemNameGet
040186bc g     O .rwdata	00000002 OSFlagEn
04007924 g     F .text	00000078 _read_r
04018702 g     O .rwdata	00000002 OSTimeTickHookEn
0400fc04 g     F .text	00000180 OSQPost
0400e784 g     F .text	000000ac OS_FlagUnlink
04016f80 g     O .rwdata	0000000c __lc_ctype
04018694 g     O .rwdata	00000004 alt_max_fd
0400c5ec g     F .text	0000006c OS_MemCopy
0400c658 g     F .text	000000fc OS_Sched
04009bcc g     F .text	00000138 __unpack_d
040076a4 g     F .text	00000110 _fclose_r
0400ea4c g     F .text	00000104 OSMemGet
04011f78 g     F .text	000001c4 OSTaskNameSet
04004254 g     F .text	00000034 fflush
0401874c g     O .bss	00000004 __malloc_max_sbrked_mem
0401878c g     O .bss	00000004 OSCtxSwCtr
04015c7c g     F .text	0000001c OSTimeTickHook
040186c6 g     O .rwdata	00000002 OSFlagNameSize
0400c0c8 g     F .text	00000104 OS_EventTaskRemoveMulti
040089b8 g     F .text	00000074 __adddf3
0400bebc g     F .text	00000154 OS_EventTaskWaitMulti
04013630 g     F .text	00000074 alt_epcs_flash_erase_block
04005e74 g     F .text	00000120 __b2d
040186de g     O .rwdata	00000002 OSQSize
04007f78 g     F .text	000005b0 __umoddi3
0400a1a8 g     F .text	000000f0 lseek
040107e0 g     F .text	0000027c OSSemPend
04018670 g     O .rwdata	00000004 _global_impure_ptr
04006c2c g     F .text	000005f4 _realloc_r
040186c8 g     O .rwdata	00000002 OSLowestPrio
04025250 g       *ABS*	00000000 __bss_end
04015164 g     F .text	000000f8 alt_iic_isr_register
04015cec g     F .text	00000020 OSTCBInitHook
0401870e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
040156f4 g     F .text	00000110 alt_tick
0400799c g     F .text	000005dc __udivdi3
040186b0 g     O .rwdata	00000002 OSEventEn
04016884 g     O .rodata	00000028 __mprec_bigtens
04006b0c g     F .text	00000120 __s2b
0401870a g     O .rwdata	00000002 OSTmrCfgNameSize
040094c0 g     F .text	00000194 __floatunsidf
04005d94 g     F .text	00000060 __mcmp
040043bc g     F .text	00000018 __fp_lock_all
0401511c g     F .text	00000048 alt_ic_irq_enabled
0400b4b4 g     F .text	000000ec getPrioHightRdy
0400e590 g     F .text	000000e4 OS_FlagInit
0401565c g     F .text	00000098 alt_alarm_stop
040186ec g     O .rwdata	00000002 OSTaskIdleStkSize
040187c8 g     O .bss	00000004 alt_irq_active
0401036c g     F .text	000000c0 OSSemAccept
0400ed7c g     F .text	000000f0 OSMemPut
0400e830 g     F .text	0000021c OSMemCreate
04018790 g     O .bss	00000004 OSIdleCtrMax
040000ec g     F .exceptions	000000d0 alt_irq_handler
04017394 g     O .rwdata	00000028 alt_dev_null
040187fc g     O .bss	00007530 CtxSwMessage
04018700 g     O .rwdata	00000002 OSTicksPerSec
04015824 g       .text	00000000 OSIntCtxSw
04005c60 g     F .text	00000070 __hi0bits
040093e8 g     F .text	000000d8 __fixdfsi
04018794 g     O .bss	00000004 OSTCBFreeList
04010a5c g     F .text	0000017c OSSemPendAbort
0401868c g     O .rwdata	00000008 alt_dev_list
0400a65c g     F .text	00000120 write
04018704 g     O .rwdata	00000002 OSVersionNbr
04009f54 g     F .text	000000d4 fstat
040186ac g     O .rwdata	00000004 OSEndiannessTest
040069ec g     F .text	00000120 __pow5mult
0401873c g     O .bss	00000004 __nlocale_changed
04009798 g     F .text	00000008 __umodsi3
04014abc g     F .text	0000006c epcs_read_electronic_signature
040186be g     O .rwdata	00000002 OSFlagGrpSize
04025250 g       *ABS*	00000000 end
04018730 g     O .bss	00000004 CtxSwMessageTop
04013a1c g     F .text	00000138 altera_avalon_jtag_uart_init
0400c8f8 g     F .text	000000c8 OS_TaskStat
0401666c g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
040146a0 g     F .text	00000090 alt_avalon_timer_sc_init
04009838 g     F .text	00000080 __clzsi2
04014354 g     F .text	000002dc altera_avalon_jtag_uart_write
040042e0 g     F .text	00000004 __sfp_lock_acquire
0400593c g     F .text	000000e4 memchr
0400c598 g     F .text	00000054 OS_MemClr
04000880 g     F .text	00001eac ___vfprintf_internal_r
040158f4 g     F .text	00000310 OSTaskStkInit
04004674 g     F .text	00000314 _free_r
0400bc18 g     F .text	00000194 OS_EventTaskRdy
040163e4 g     F .text	000001b0 __call_exitprocs
04018798 g     O .bss	00000001 OSCPUUsage
04018740 g     O .bss	00000004 __mlocale_changed
04018680 g     O .rwdata	00000004 __malloc_sbrk_base
040001bc g     F .text	00000038 _start
040187cc g     O .bss	00000004 _alt_tick_rate
0400f768 g     F .text	00000320 OSQPend
0401293c g     F .text	0000014c OSTimeDly
0400657c g     F .text	0000014c __lshift
04015d0c g     F .text	00000238 alt_avalon_spi_command
040187d0 g     O .bss	00000004 _alt_nticks
0400a3c0 g     F .text	00000120 read
04012f04 g     F .text	00000064 alt_sys_init
040162ac g     F .text	00000134 __register_exitproc
04018799 g     O .bss	00000001 OSTaskCtr
04012a88 g     F .text	00000170 OSTimeDlyHMSM
040066c8 g     F .text	000001e8 __multiply
04013f2c g     F .text	00000074 altera_avalon_jtag_uart_close
040004d8 g     F .text	00000068 printCtxSwMessage
040187d4 g     O .bss	00000028 __malloc_current_mallinfo
040186b2 g     O .rwdata	00000002 OSEventMax
04006274 g     F .text	0000017c __d2b
04010bd8 g     F .text	00000128 OSSemPost
04014730 g     F .text	00000060 epcs_read_status_register
0400b754 g     F .text	000000e4 OSSchedUnlock
040138d4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
040160f8 g     F .text	000000f4 alt_get_fd
0401879c g     O .bss	00000004 OSMemFreeList
0400b8b0 g     F .text	000000ac OSStatInit
0400e2f8 g     F .text	000000d4 OSFlagQuery
0401fd2c g     O .bss	00000800 TaskPrintCtxSwStk
04009d04 g     F .text	000000c8 __fpcmp_parts_d
040186e8 g     O .rwdata	00000002 OSTaskCreateExtEn
04007634 g     F .text	00000070 _close_r
04014b28 g     F .text	00000068 epcs_read_device_id
04016238 g     F .text	00000074 memcmp
0400bbfc g     F .text	0000001c OS_Dummy
04013984 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
04025250 g       *ABS*	00000000 __alt_stack_base
040139cc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
04002750 g     F .text	0000013c __swsetup_r
040234dc g     O .bss	000001e0 OSQTbl
04008df0 g     F .text	00000258 __divdf3
04004458 g     F .text	000000f0 __sfp
040060d8 g     F .text	00000058 __copybits
04016f8c g     O .rwdata	00000408 __malloc_av_
040042ec g     F .text	00000004 __sinit_lock_release
040187a0 g     O .bss	00000004 OSTCBHighRdy
04008a2c g     F .text	000003c4 __muldf3
040073ec g     F .text	00000060 __sread
040187a4 g     O .bss	00000004 OSQFreeList
04015fd8 g     F .text	00000120 alt_find_file
04014ce4 g     F .text	000000b4 alt_dev_llist_insert
0400a8e4 g     F .text	00000108 __malloc_lock
0400a5a0 g     F .text	000000bc sbrk
0400abec g     F .text	00000144 OSEventNameSet
04004058 g     F .text	000001fc _fflush_r
04007580 g     F .text	000000b4 _calloc_r
040187a8 g     O .bss	00000001 OSRdyGrp
0401871c g     O .rwdata	00000008 alt_flash_dev_list
04018730 g       *ABS*	00000000 __bss_start
04005ba0 g     F .text	00000098 memset
040001f4 g     F .text	0000007c main
04018764 g     O .bss	00000004 alt_envp
04018750 g     O .bss	00000004 __malloc_max_total_mem
0401392c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
04016a10 g     O .rodata	00000100 OSUnMapTbl
040186e2 g     O .rwdata	00000002 OSSemEn
0400df50 g     F .text	000003a8 OSFlagPost
04007300 g     F .text	00000008 __sclose
06000000 g       *ABS*	00000000 __alt_heap_limit
040077b4 g     F .text	00000014 fclose
0400bdac g     F .text	00000110 OS_EventTaskWait
0400c9c0 g     F .text	000000c8 OS_TaskStatStkChk
040250c0 g     O .bss	00000190 _atexit0
04011c50 g     F .text	00000170 OSTaskDelReq
04002aa4 g     F .text	000015b4 _dtoa_r
040051fc g     F .text	00000740 _malloc_r
04018698 g     O .rwdata	00000004 alt_errno
0400b838 g     F .text	00000078 OSStart
0400a888 g     F .text	0000005c __env_unlock
04004eec g     F .text	000000b8 _fwalk
0401213c g     F .text	00000218 OSTaskResume
0400ee6c g     F .text	000000fc OSMemQuery
040186f4 g     O .rwdata	00000002 OSTaskStatEn
040186ce g     O .rwdata	00000002 OSMemMax
0400fd84 g     F .text	00000188 OSQPostFront
04018738 g     O .bss	00000004 printCtxSwMbox
040096d0 g     F .text	00000060 __divsi3
040187a9 g     O .bss	00000003 OSRdyTbl
040186a8 g     O .rwdata	00000002 OSDebugEn
040168e0 g     O .rodata	00000014 __thenan_df
04004548 g     F .text	0000012c _malloc_trim_r
04016670 g       *ABS*	00000000 __CTOR_END__
040186c0 g     O .rwdata	00000002 OSFlagNodeSize
04018708 g     O .rwdata	00000002 OSTmrCfgMax
04013320 g     F .text	00000280 alt_epcs_flash_write
0400744c g     F .text	000000bc strcmp
0400f18c g     F .text	00000214 OSQCreate
04011dc0 g     F .text	000001b8 OSTaskNameGet
0400ff0c g     F .text	00000234 OSQPostOpt
0400b95c g     F .text	00000280 OSTimeTick
040186f0 g     O .rwdata	00000002 OSTaskMax
04016670 g       *ABS*	00000000 __DTOR_LIST__
0401042c g     F .text	00000114 OSSemCreate
04018714 g     O .rwdata	00000002 OSTmrWheelSize
0402052c g     O .bss	00000010 TaskData
040090d0 g     F .text	00000088 __nedf2
040186ea g     O .rwdata	00000002 OSTaskDelEn
04010d00 g     F .text	00000130 OSSemQuery
0400f3a0 g     F .text	00000300 OSQDel
0400fa88 g     F .text	0000017c OSQPendAbort
04012ed0 g     F .text	00000034 alt_irq_init
0400a540 g     F .text	00000060 alt_release_fd
040168f4 g     O .rodata	00000100 __clz_tab
04018744 g     O .bss	00000004 _PathLocale
040161ec g     F .text	00000014 atexit
04007508 g     F .text	00000078 _write_r
0400b6c8 g     F .text	0000008c OSSchedLock
0400504c g     F .text	0000001c setlocale
0400d228 g     F .text	0000013c OSFlagCreate
0401866c g     O .rwdata	00000004 _impure_ptr
0401875c g     O .bss	00000004 alt_argc
04014e5c g     F .text	00000064 _do_dtors
040186ba g     O .rwdata	00000002 OSEventMultiEn
0400d364 g     F .text	000002a8 OSFlagDel
040187ac g     O .bss	00000004 OSEventFreeList
04000020 g       .exceptions	00000000 alt_irq_entry
04005df4 g     F .text	00000080 __ulp
04007220 g     F .text	00000040 __isinfd
0400d8a4 g     F .text	00000644 OSFlagPend
04018706 g     O .rwdata	00000002 OSTmrEn
040043a4 g     F .text	00000018 __fp_unlock_all
04018684 g     O .rwdata	00000008 alt_fs_list
0400c7c4 g     F .text	00000080 OS_StrCopy
040186d0 g     O .rwdata	00000002 OSMemNameSize
04015cb4 g     F .text	0000001c OSInitHookEnd
040186fc g     O .rwdata	00000002 OSTCBPrioTblMax
04004fb8 g     F .text	00000010 localeconv
0401487c g     F .text	000000b4 epcs_read_buffer
040186f8 g     O .rwdata	00000002 OSTaskStatStkChkEn
04012fa0 g     F .text	00000054 alt_epcs_flash_init
04014f90 g     F .text	00000050 alt_ic_isr_register
040186cc g     O .rwdata	00000002 OSMemEn
040186d6 g     O .rwdata	00000002 OSMutexEn
04018730 g       *ABS*	00000000 _edata
04025250 g       *ABS*	00000000 _end
04014ec0 g     F .text	0000007c alt_flash_open_dev
040187b0 g     O .bss	00000001 OSIntNesting
04013fa0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0402053c g     O .bss	00000800 TaskStartStk
04012bf8 g     F .text	00000210 OSTimeDlyResume
0400d750 g     F .text	00000154 OSFlagNameSet
04012354 g     F .text	000001fc OSTaskStkChk
0401507c g     F .text	000000a0 alt_ic_irq_disable
040186d2 g     O .rwdata	00000002 OSMemSize
04007370 g     F .text	0000007c __swrite
0401867c g     O .rwdata	00000004 __malloc_trim_threshold
040187b4 g     O .bss	00000004 OSTCBCur
04016200 g     F .text	00000038 exit
040186d4 g     O .rwdata	00000002 OSMemTblSize
04004e24 g     F .text	000000c8 _fwalk_reent
040063f0 g     F .text	0000018c __mdiff
04014f3c g     F .text	00000054 alt_flash_close_dev
04009730 g     F .text	00000060 __modsi3
06000000 g       *ABS*	00000000 __alt_data_end
04020d3c g     O .bss	00001000 TaskStk
04000020 g     F .exceptions	00000000 alt_exception
040042e4 g     F .text	00000004 __sfp_lock_release
0400b3e4 g     F .text	00000054 OSInit
04000000 g       *ABS*	00000000 __alt_mem_sdram
0401277c g     F .text	00000144 OSTaskQuery
040102c0 g     F .text	000000ac OS_QInit
04000270 g     F .text	00000060 TaskStart
0400c844 g     F .text	00000058 OS_StrLen
0400ec5c g     F .text	00000120 OSMemNameSet
040186ee g     O .rwdata	00000002 OSTaskProfileEn
040187b8 g     O .bss	00000004 OSTime
040236bc g     O .bss	00000800 OSTaskIdleStk
040165d4 g     F .text	0000002c _exit
04007260 g     F .text	00000030 __isnand
04014b90 g     F .text	00000154 alt_alarm_start
0400d60c g     F .text	00000144 OSFlagNameGet
04012e08 g     F .text	00000064 OSTimeGet
040097a0 g     F .text	00000098 __muldi3
04005068 g     F .text	00000194 __smakebuf_r
040007b4 g     F .text	00000074 strlen
04014930 g     F .text	00000050 epcs_write_enable
04015c44 g     F .text	0000001c OSTaskSwHook
04015474 g     F .text	00000188 open
04023ebc g     O .bss	00000b40 OSEventTbl
040091e0 g     F .text	00000088 __gedf2
040249fc g     O .bss	00000570 OSTCBTbl
04010e30 g     F .text	00000104 OSSemSet
04018724 g     O .rwdata	00000004 alt_priority_mask
04010540 g     F .text	000002a0 OSSemDel
040187bc g     O .bss	00000004 OSFlagFreeList
04014fe0 g     F .text	0000009c alt_ic_irq_enable
040186b4 g     O .rwdata	00000002 OSEventNameSize
0400272c g     F .text	00000024 __vfprintf_internal
040187c0 g     O .bss	00000001 OSStatRdy
00000000 g       *ABS*	00000000 __alt_mem_epcs
04024f6c g     O .bss	00000054 OSTCBPrioTbl
0400a7dc g     F .text	000000ac __env_lock
040186fa g     O .rwdata	00000002 OSTaskSwHookEn
04008938 g     F .text	00000080 __subdf3
04013848 g     F .text	0000008c alt_epcs_flash_read
04005cd0 g     F .text	000000c4 __lo0bits
04018728 g     O .rwdata	00000008 alt_alarm_list
040186c2 g     O .rwdata	00000002 OSFlagWidth
04014df8 g     F .text	00000064 _do_ctors
04000384 g     F .text	00000154 Task
04009dcc g     F .text	000000fc close
0401876c g     O .bss	00000004 alt_envsem
040187c4 g     O .bss	00000004 OSIdleCtrRun
0400bbdc g     F .text	00000020 OSVersion
0401870c g     O .rwdata	00000002 OSTmrCfgWheelSize
040128c0 g     F .text	0000007c OS_TaskStkClr
040098b8 g     F .text	00000314 __pack_d
040186e6 g     O .rwdata	00000002 OSTaskCreateEn
0400c1cc g     F .text	00000068 OS_EventWaitListInit
04015cd0 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
040042e8 g     F .text	00000004 __sinit_lock_acquire
040149e4 g     F .text	000000d8 epcs_write_buffer
040068ec g     F .text	00000100 __multadd
04012550 g     F .text	0000022c OSTaskSuspend
04005c38 g     F .text	00000028 _Bfree
0400c89c g     F .text	0000005c OS_TaskIdle
04018712 g     O .rwdata	00000002 OSTmrTblSize
04010140 g     F .text	00000180 OSQQuery



Disassembly of section .exceptions:

04000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	400b4380 	call	400b438 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0ffff17 	ldw	r3,-4(fp)
 4000120:	e0bffe17 	ldw	r2,-8(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	1005003a 	cmpeq	r2,r2,zero
 400012c:	1000161e 	bne	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 4000130:	e0bffd17 	ldw	r2,-12(fp)
 4000134:	00c100b4 	movhi	r3,1026
 4000138:	18d3f004 	addi	r3,r3,20416
 400013c:	100490fa 	slli	r2,r2,3
 4000140:	10c5883a 	add	r2,r2,r3
 4000144:	11400017 	ldw	r5,0(r2)
 4000148:	e0bffd17 	ldw	r2,-12(fp)
 400014c:	00c100b4 	movhi	r3,1026
 4000150:	18d3f004 	addi	r3,r3,20416
 4000154:	100490fa 	slli	r2,r2,3
 4000158:	10c5883a 	add	r2,r2,r3
 400015c:	10800104 	addi	r2,r2,4
 4000160:	11000017 	ldw	r4,0(r2)
 4000164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000168:	0005313a 	rdctl	r2,ipending
 400016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 4000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 4000178:	e0bfff17 	ldw	r2,-4(fp)
 400017c:	1004c03a 	cmpne	r2,r2,zero
 4000180:	103fe31e 	bne	r2,zero,4000110 <alt_irq_handler+0x24>
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffe17 	ldw	r2,-8(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a4:	400b5a00 	call	400b5a0 <OSIntExit>
}
 40001a8:	e037883a 	mov	sp,fp
 40001ac:	dfc00117 	ldw	ra,4(sp)
 40001b0:	df000017 	ldw	fp,0(sp)
 40001b4:	dec00204 	addi	sp,sp,8
 40001b8:	f800283a 	ret

Disassembly of section .text:

040001bc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001bc:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 40001c0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001c4:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 40001c8:	d6819b14 	ori	gp,gp,1644
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001cc:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 40001d0:	10a1cc14 	ori	r2,r2,34608

    movhi r3, %hi(__bss_end)
 40001d4:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 40001d8:	18d49414 	ori	r3,r3,21072

    beq r2, r3, 1f
 40001dc:	10c00326 	beq	r2,r3,40001ec <_start+0x30>

0:
    stw zero, (r2)
 40001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001e8:	10fffd36 	bltu	r2,r3,40001e0 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001ec:	400a2f80 	call	400a2f8 <alt_main>

040001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001f0:	003fff06 	br	40001f0 <alt_after_alt_main>

040001f4 <main>:
void printCtxSwMessage();


/* The main function creates two task and starts multi-tasking */
int main(void)
{
 40001f4:	defffe04 	addi	sp,sp,-8
 40001f8:	dfc00115 	stw	ra,4(sp)
 40001fc:	df000015 	stw	fp,0(sp)
 4000200:	d839883a 	mov	fp,sp
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
    */
	OSInit();
 4000204:	400b3e40 	call	400b3e4 <OSInit>
    OSTCBPrioTbl[20]->deadLine = 1002;
 4000208:	008100b4 	movhi	r2,1026
 400020c:	1093db04 	addi	r2,r2,20332
 4000210:	10c01417 	ldw	r3,80(r2)
 4000214:	0080fa84 	movi	r2,1002
 4000218:	18800e8d 	sth	r2,58(r3)
	OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
 400021c:	018100b4 	movhi	r6,1026
 4000220:	31834e04 	addi	r6,r6,3384
 4000224:	01010034 	movhi	r4,1024
 4000228:	21009c04 	addi	r4,r4,624
 400022c:	000b883a 	mov	r5,zero
 4000230:	000f883a 	mov	r7,zero
 4000234:	40114a80 	call	40114a8 <OSTaskCreate>
    OSTCBPrioTbl[0]->deadLine = 1;
 4000238:	008100b4 	movhi	r2,1026
 400023c:	1093db04 	addi	r2,r2,20332
 4000240:	10c00017 	ldw	r3,0(r2)
 4000244:	00800044 	movi	r2,1
 4000248:	18800e8d 	sth	r2,58(r3)
    TaskStartCreateTasks();                                /* Create all the application tasks         */
 400024c:	40002d00 	call	40002d0 <TaskStartCreateTasks>
      ArgumentSet();
 4000250:	40005400 	call	4000540 <ArgumentSet>
  OSStart();
 4000254:	400b8380 	call	400b838 <OSStart>
  return 0;
 4000258:	0005883a 	mov	r2,zero
}
 400025c:	e037883a 	mov	sp,fp
 4000260:	dfc00117 	ldw	ra,4(sp)
 4000264:	df000017 	ldw	fp,0(sp)
 4000268:	dec00204 	addi	sp,sp,8
 400026c:	f800283a 	ret

04000270 <TaskStart>:

void  TaskStart (void *pdata)
{
 4000270:	deffe204 	addi	sp,sp,-120
 4000274:	dfc01d15 	stw	ra,116(sp)
 4000278:	df001c15 	stw	fp,112(sp)
 400027c:	df001c04 	addi	fp,sp,112
 4000280:	e13fff15 	stw	r4,-4(fp)
    pdata = pdata;                                         /* Prevent compiler warning                 */




    OSTimeSet(0);
 4000284:	0009883a 	mov	r4,zero
 4000288:	4012e6c0 	call	4012e6c <OSTimeSet>

    for (i=0;;i++) {
 400028c:	e03fe415 	stw	zero,-112(fp)

        #ifdef debug
    	printf("for enter taskStart\n");
 4000290:	01010074 	movhi	r4,1025
 4000294:	21199c04 	addi	r4,r4,26224
 4000298:	40007a00 	call	40007a0 <puts>
        #endif
        //TaskStartDisp();                                  /* Update the display                       */
        if(i!=0)printCtxSwMessage();
 400029c:	e0bfe417 	ldw	r2,-112(fp)
 40002a0:	1005003a 	cmpeq	r2,r2,zero
 40002a4:	1000011e 	bne	r2,zero,40002ac <TaskStart+0x3c>
 40002a8:	40004d80 	call	40004d8 <printCtxSwMessage>




        OSCtxSwCtr = 0;                                    /* Clear context switch counter             */
 40002ac:	008100b4 	movhi	r2,1026
 40002b0:	10a1e304 	addi	r2,r2,-30836
 40002b4:	10000015 	stw	zero,0(r2)
        //OSTimeDlyHMSM(0, 0, 3, 0);                         /* Wait one second                          */
        OSTimeDly (1000);  // delay and wait (P-C) times
 40002b8:	0100fa04 	movi	r4,1000
 40002bc:	401293c0 	call	401293c <OSTimeDly>



    OSTimeSet(0);

    for (i=0;;i++) {
 40002c0:	e0bfe417 	ldw	r2,-112(fp)
 40002c4:	10800044 	addi	r2,r2,1
 40002c8:	e0bfe415 	stw	r2,-112(fp)


        OSCtxSwCtr = 0;                                    /* Clear context switch counter             */
        //OSTimeDlyHMSM(0, 0, 3, 0);                         /* Wait one second                          */
        OSTimeDly (1000);  // delay and wait (P-C) times
    }
 40002cc:	003ff006 	br	4000290 <TaskStart+0x20>

040002d0 <TaskStartCreateTasks>:
}
static  void  TaskStartCreateTasks (void)
{
 40002d0:	defffd04 	addi	sp,sp,-12
 40002d4:	dfc00215 	stw	ra,8(sp)
 40002d8:	df000115 	stw	fp,4(sp)
 40002dc:	df000104 	addi	fp,sp,4
    err=OSTaskCreate(printCtxSwMessage, (void *)0, &TaskPrintCtxSwStk[TASK_STK_SIZE-1], 1);
    if(err!=OS_NO_ERR){
        printf("create task printCtxSwMessage errorno %d \n",err);
    }
    */
    for (i = 0; i < N_TASKS; i++) {                        /* Create N_TASKS identical tasks           */
 40002e0:	e03fff45 	stb	zero,-3(fp)
 40002e4:	00001f06 	br	4000364 <TaskStartCreateTasks+0x94>
        err=OSTaskCreate(Task, (void *)&TaskData[i], &TaskStk[i][TASK_STK_SIZE - 1],i+1 );
 40002e8:	e0bfff43 	ldbu	r2,-3(fp)
 40002ec:	100490fa 	slli	r2,r2,3
 40002f0:	1007883a 	mov	r3,r2
 40002f4:	008100b4 	movhi	r2,1026
 40002f8:	10814b04 	addi	r2,r2,1324
 40002fc:	188b883a 	add	r5,r3,r2
 4000300:	e0bfff43 	ldbu	r2,-3(fp)
 4000304:	100492fa 	slli	r2,r2,11
 4000308:	1007883a 	mov	r3,r2
 400030c:	008100b4 	movhi	r2,1026
 4000310:	10834f04 	addi	r2,r2,3388
 4000314:	1081ff04 	addi	r2,r2,2044
 4000318:	188d883a 	add	r6,r3,r2
 400031c:	e0bfff43 	ldbu	r2,-3(fp)
 4000320:	10800044 	addi	r2,r2,1
 4000324:	11c03fcc 	andi	r7,r2,255
 4000328:	01010034 	movhi	r4,1024
 400032c:	2100e104 	addi	r4,r4,900
 4000330:	40114a80 	call	40114a8 <OSTaskCreate>
 4000334:	e0bfff05 	stb	r2,-4(fp)
        if(err!=OS_NO_ERR){
 4000338:	e0bfff03 	ldbu	r2,-4(fp)
 400033c:	1005003a 	cmpeq	r2,r2,zero
 4000340:	1000051e 	bne	r2,zero,4000358 <TaskStartCreateTasks+0x88>
            printf("create task %d errorno %d \n",i,err);
 4000344:	e17fff43 	ldbu	r5,-3(fp)
 4000348:	e1bfff03 	ldbu	r6,-4(fp)
 400034c:	01010074 	movhi	r4,1025
 4000350:	2119a104 	addi	r4,r4,26244
 4000354:	40006880 	call	4000688 <printf>
    err=OSTaskCreate(printCtxSwMessage, (void *)0, &TaskPrintCtxSwStk[TASK_STK_SIZE-1], 1);
    if(err!=OS_NO_ERR){
        printf("create task printCtxSwMessage errorno %d \n",err);
    }
    */
    for (i = 0; i < N_TASKS; i++) {                        /* Create N_TASKS identical tasks           */
 4000358:	e0bfff43 	ldbu	r2,-3(fp)
 400035c:	10800044 	addi	r2,r2,1
 4000360:	e0bfff45 	stb	r2,-3(fp)
 4000364:	e0bfff43 	ldbu	r2,-3(fp)
 4000368:	108000b0 	cmpltui	r2,r2,2
 400036c:	103fde1e 	bne	r2,zero,40002e8 <TaskStartCreateTasks+0x18>
        err=OSTaskCreate(Task, (void *)&TaskData[i], &TaskStk[i][TASK_STK_SIZE - 1],i+1 );
        if(err!=OS_NO_ERR){
            printf("create task %d errorno %d \n",i,err);
        }
    }
}
 4000370:	e037883a 	mov	sp,fp
 4000374:	dfc00117 	ldw	ra,4(sp)
 4000378:	df000017 	ldw	fp,0(sp)
 400037c:	dec00204 	addi	sp,sp,8
 4000380:	f800283a 	ret

04000384 <Task>:
void Task(void *pdata)
{
 4000384:	defff804 	addi	sp,sp,-32
 4000388:	dfc00715 	stw	ra,28(sp)
 400038c:	df000615 	stw	fp,24(sp)
 4000390:	df000604 	addi	fp,sp,24
 4000394:	e13fff15 	stw	r4,-4(fp)
    int start;  //the start time
    int end;   //the end time
    int toDelay;
    struct period *tmpPdata = (struct period*)pdata;
 4000398:	e0bfff17 	ldw	r2,-4(fp)
 400039c:	e0bffb15 	stw	r2,-20(fp)
    int c = OSTCBCur->compTime;
 40003a0:	008100b4 	movhi	r2,1026
 40003a4:	10a1ed04 	addi	r2,r2,-30796
 40003a8:	10800017 	ldw	r2,0(r2)
 40003ac:	10800d8b 	ldhu	r2,54(r2)
 40003b0:	10bfffcc 	andi	r2,r2,65535
 40003b4:	e0bffa15 	stw	r2,-24(fp)
    ///OS_ENTER_CRITICAL();

    //OS_EXIT_CRITICAL();

    start=0;
 40003b8:	e03ffe15 	stw	zero,-8(fp)
 40003bc:	00000006 	br	40003c0 <Task+0x3c>
    {
        #ifdef debug

        //printf("---start OSPrioCur: %d , real C %d,period %d\n",OSPrioCur,OSTCBCur->compTime,OSTCBCur->period);
        #endif
        while(OSTCBCur->compTime>0)  //C ticks
 40003c0:	008100b4 	movhi	r2,1026
 40003c4:	10a1ed04 	addi	r2,r2,-30796
 40003c8:	10800017 	ldw	r2,0(r2)
 40003cc:	10800d8b 	ldhu	r2,54(r2)
 40003d0:	10bfffcc 	andi	r2,r2,65535
 40003d4:	1004c03a 	cmpne	r2,r2,zero
 40003d8:	103ff91e 	bne	r2,zero,40003c0 <Task+0x3c>
        {
        // do nothing
        	//end=OSTimeGet() ;
        	  //printf("time:%d task:%d exceed deadline\n",end,OSTCBCur->OSTCBPrio);
        }
        end=OSTimeGet() ; // end time
 40003dc:	4012e080 	call	4012e08 <OSTimeGet>
 40003e0:	e0bffd15 	stw	r2,-12(fp)
        toDelay=(OSTCBCur->period)-(end-start) ;
 40003e4:	008100b4 	movhi	r2,1026
 40003e8:	10a1ed04 	addi	r2,r2,-30796
 40003ec:	10800017 	ldw	r2,0(r2)
 40003f0:	10800e0b 	ldhu	r2,56(r2)
 40003f4:	113fffcc 	andi	r4,r2,65535
 40003f8:	e0fffd17 	ldw	r3,-12(fp)
 40003fc:	e0bffe17 	ldw	r2,-8(fp)
 4000400:	1885c83a 	sub	r2,r3,r2
 4000404:	2085c83a 	sub	r2,r4,r2
 4000408:	e0bffc15 	stw	r2,-16(fp)
        if(end > start+OSTCBCur->period){
 400040c:	008100b4 	movhi	r2,1026
 4000410:	10a1ed04 	addi	r2,r2,-30796
 4000414:	10800017 	ldw	r2,0(r2)
 4000418:	10800e0b 	ldhu	r2,56(r2)
 400041c:	10ffffcc 	andi	r3,r2,65535
 4000420:	e0bffe17 	ldw	r2,-8(fp)
 4000424:	1887883a 	add	r3,r3,r2
 4000428:	e0bffd17 	ldw	r2,-12(fp)
 400042c:	18800f0e 	bge	r3,r2,400046c <Task+0xe8>
            printf("time:%d task:%d exceed deadline\n",start+OSTCBCur->period,OSTCBCur->OSTCBPrio);
 4000430:	008100b4 	movhi	r2,1026
 4000434:	10a1ed04 	addi	r2,r2,-30796
 4000438:	10800017 	ldw	r2,0(r2)
 400043c:	10800e0b 	ldhu	r2,56(r2)
 4000440:	10ffffcc 	andi	r3,r2,65535
 4000444:	e0bffe17 	ldw	r2,-8(fp)
 4000448:	188b883a 	add	r5,r3,r2
 400044c:	008100b4 	movhi	r2,1026
 4000450:	10a1ed04 	addi	r2,r2,-30796
 4000454:	10800017 	ldw	r2,0(r2)
 4000458:	10800c83 	ldbu	r2,50(r2)
 400045c:	11803fcc 	andi	r6,r2,255
 4000460:	01010074 	movhi	r4,1025
 4000464:	2119a804 	addi	r4,r4,26272
 4000468:	40006880 	call	4000688 <printf>
        }
        #ifdef debug
        //printf(" end task,start time %d,end time %d,to delay %d,prio:%d,deadLine %d\n",(int)start,(int)end,(int)toDelay,(int)OSTCBCur->OSTCBPrio,(int)OSTCBCur->deadLine);
        #endif
        //OS_ENTER_CRITICAL();
        start+=(OSTCBCur->period) ;  // next start time
 400046c:	008100b4 	movhi	r2,1026
 4000470:	10a1ed04 	addi	r2,r2,-30796
 4000474:	10800017 	ldw	r2,0(r2)
 4000478:	10800e0b 	ldhu	r2,56(r2)
 400047c:	10ffffcc 	andi	r3,r2,65535
 4000480:	e0bffe17 	ldw	r2,-8(fp)
 4000484:	10c5883a 	add	r2,r2,r3
 4000488:	e0bffe15 	stw	r2,-8(fp)
        OSTCBCur->compTime=c ;// reset the counter (c ticks for computation)
 400048c:	008100b4 	movhi	r2,1026
 4000490:	10a1ed04 	addi	r2,r2,-30796
 4000494:	10c00017 	ldw	r3,0(r2)
 4000498:	e0bffa17 	ldw	r2,-24(fp)
 400049c:	18800d8d 	sth	r2,54(r3)
        OSTCBCur->deadLine=start + OSTCBCur->period ;// reset the deadline
 40004a0:	008100b4 	movhi	r2,1026
 40004a4:	10a1ed04 	addi	r2,r2,-30796
 40004a8:	11000017 	ldw	r4,0(r2)
 40004ac:	008100b4 	movhi	r2,1026
 40004b0:	10a1ed04 	addi	r2,r2,-30796
 40004b4:	10800017 	ldw	r2,0(r2)
 40004b8:	10c00e0b 	ldhu	r3,56(r2)
 40004bc:	e0bffe17 	ldw	r2,-8(fp)
 40004c0:	1885883a 	add	r2,r3,r2
 40004c4:	20800e8d 	sth	r2,58(r4)
        //OS_EXIT_CRITICAL();
        OSTimeDly (toDelay);  // delay and wait (P-C) times
 40004c8:	e0bffc17 	ldw	r2,-16(fp)
 40004cc:	113fffcc 	andi	r4,r2,65535
 40004d0:	401293c0 	call	401293c <OSTimeDly>
    }
 40004d4:	003fba06 	br	40003c0 <Task+0x3c>

040004d8 <printCtxSwMessage>:
}

void printCtxSwMessage(){
 40004d8:	defffe04 	addi	sp,sp,-8
 40004dc:	dfc00115 	stw	ra,4(sp)
 40004e0:	df000015 	stw	fp,0(sp)
 40004e4:	d839883a 	mov	fp,sp
        static int i=0;
        //OSMboxPend(printCtxSwMbox,0,0);
        for(;i<CtxSwMessageTop;i++)
 40004e8:	00000d06 	br	4000520 <printCtxSwMessage+0x48>
        printf("%s",CtxSwMessage[i]);
 40004ec:	d0a03217 	ldw	r2,-32568(gp)
 40004f0:	10801924 	muli	r2,r2,100
 40004f4:	1007883a 	mov	r3,r2
 40004f8:	008100b4 	movhi	r2,1026
 40004fc:	10a1ff04 	addi	r2,r2,-30724
 4000500:	1885883a 	add	r2,r3,r2
 4000504:	100b883a 	mov	r5,r2
 4000508:	01010074 	movhi	r4,1025
 400050c:	2119b104 	addi	r4,r4,26308
 4000510:	40006880 	call	4000688 <printf>
}

void printCtxSwMessage(){
        static int i=0;
        //OSMboxPend(printCtxSwMbox,0,0);
        for(;i<CtxSwMessageTop;i++)
 4000514:	d0a03217 	ldw	r2,-32568(gp)
 4000518:	10800044 	addi	r2,r2,1
 400051c:	d0a03215 	stw	r2,-32568(gp)
 4000520:	d0e03217 	ldw	r3,-32568(gp)
 4000524:	d0a03117 	ldw	r2,-32572(gp)
 4000528:	18bff016 	blt	r3,r2,40004ec <printCtxSwMessage+0x14>
        printf("%s",CtxSwMessage[i]);
}
 400052c:	e037883a 	mov	sp,fp
 4000530:	dfc00117 	ldw	ra,4(sp)
 4000534:	df000017 	ldw	fp,0(sp)
 4000538:	dec00204 	addi	sp,sp,8
 400053c:	f800283a 	ret

04000540 <ArgumentSet>:
* of California and by the laws of the United States of America.              *
* Altera does not recommend, suggest or require that this reference design    *
* file be used in conjunction or combination with any other product.          *
******************************************************************************/

void ArgumentSet(void){
 4000540:	defffd04 	addi	sp,sp,-12
 4000544:	dfc00215 	stw	ra,8(sp)
 4000548:	df000115 	stw	fp,4(sp)
 400054c:	df000104 	addi	fp,sp,4
    OS_TCB* ptcb;
    ptcb = OSTCBList;
 4000550:	008100b4 	movhi	r2,1026
 4000554:	10a1e104 	addi	r2,r2,-30844
 4000558:	10800017 	ldw	r2,0(r2)
 400055c:	e0bfff15 	stw	r2,-4(fp)
    while(ptcb->OSTCBPrio==1 || ptcb->OSTCBPrio==2 || ptcb->OSTCBPrio==3){
 4000560:	00003506 	br	4000638 <ArgumentSet+0xf8>
        printf("Priority: %d set argument\n", ptcb->OSTCBPrio);
 4000564:	e0bfff17 	ldw	r2,-4(fp)
 4000568:	10800c83 	ldbu	r2,50(r2)
 400056c:	11403fcc 	andi	r5,r2,255
 4000570:	01010074 	movhi	r4,1025
 4000574:	2119b204 	addi	r4,r4,26312
 4000578:	40006880 	call	4000688 <printf>
        if(ptcb->OSTCBPrio==1){
 400057c:	e0bfff17 	ldw	r2,-4(fp)
 4000580:	10800c83 	ldbu	r2,50(r2)
 4000584:	10803fcc 	andi	r2,r2,255
 4000588:	10800058 	cmpnei	r2,r2,1
 400058c:	10000a1e 	bne	r2,zero,40005b8 <ArgumentSet+0x78>
            ptcb->compTime = 1;
 4000590:	e0ffff17 	ldw	r3,-4(fp)
 4000594:	00800044 	movi	r2,1
 4000598:	18800d8d 	sth	r2,54(r3)
            ptcb->period = 3;
 400059c:	e0ffff17 	ldw	r3,-4(fp)
 40005a0:	008000c4 	movi	r2,3
 40005a4:	18800e0d 	sth	r2,56(r3)
            ptcb->deadLine = 3;
 40005a8:	e0ffff17 	ldw	r3,-4(fp)
 40005ac:	008000c4 	movi	r2,3
 40005b0:	18800e8d 	sth	r2,58(r3)
 40005b4:	00001d06 	br	400062c <ArgumentSet+0xec>
        }
        else if(ptcb->OSTCBPrio==2){
 40005b8:	e0bfff17 	ldw	r2,-4(fp)
 40005bc:	10800c83 	ldbu	r2,50(r2)
 40005c0:	10803fcc 	andi	r2,r2,255
 40005c4:	10800098 	cmpnei	r2,r2,2
 40005c8:	10000a1e 	bne	r2,zero,40005f4 <ArgumentSet+0xb4>
            ptcb->compTime = 3;
 40005cc:	e0ffff17 	ldw	r3,-4(fp)
 40005d0:	008000c4 	movi	r2,3
 40005d4:	18800d8d 	sth	r2,54(r3)
            ptcb->period = 5;
 40005d8:	e0ffff17 	ldw	r3,-4(fp)
 40005dc:	00800144 	movi	r2,5
 40005e0:	18800e0d 	sth	r2,56(r3)
            ptcb->deadLine = 5;
 40005e4:	e0ffff17 	ldw	r3,-4(fp)
 40005e8:	00800144 	movi	r2,5
 40005ec:	18800e8d 	sth	r2,58(r3)
 40005f0:	00000e06 	br	400062c <ArgumentSet+0xec>
        }
        else if(ptcb->OSTCBPrio==3){
 40005f4:	e0bfff17 	ldw	r2,-4(fp)
 40005f8:	10800c83 	ldbu	r2,50(r2)
 40005fc:	10803fcc 	andi	r2,r2,255
 4000600:	108000d8 	cmpnei	r2,r2,3
 4000604:	1000091e 	bne	r2,zero,400062c <ArgumentSet+0xec>
            ptcb->compTime = 2;
 4000608:	e0ffff17 	ldw	r3,-4(fp)
 400060c:	00800084 	movi	r2,2
 4000610:	18800d8d 	sth	r2,54(r3)
            ptcb->period = 10;
 4000614:	e0ffff17 	ldw	r3,-4(fp)
 4000618:	00800284 	movi	r2,10
 400061c:	18800e0d 	sth	r2,56(r3)
            ptcb->deadLine = 10;
 4000620:	e0ffff17 	ldw	r3,-4(fp)
 4000624:	00800284 	movi	r2,10
 4000628:	18800e8d 	sth	r2,58(r3)
        }
        ptcb = ptcb->OSTCBNext;
 400062c:	e0bfff17 	ldw	r2,-4(fp)
 4000630:	10800517 	ldw	r2,20(r2)
 4000634:	e0bfff15 	stw	r2,-4(fp)
******************************************************************************/

void ArgumentSet(void){
    OS_TCB* ptcb;
    ptcb = OSTCBList;
    while(ptcb->OSTCBPrio==1 || ptcb->OSTCBPrio==2 || ptcb->OSTCBPrio==3){
 4000638:	e0bfff17 	ldw	r2,-4(fp)
 400063c:	10800c83 	ldbu	r2,50(r2)
 4000640:	10803fcc 	andi	r2,r2,255
 4000644:	10800060 	cmpeqi	r2,r2,1
 4000648:	103fc61e 	bne	r2,zero,4000564 <ArgumentSet+0x24>
 400064c:	e0bfff17 	ldw	r2,-4(fp)
 4000650:	10800c83 	ldbu	r2,50(r2)
 4000654:	10803fcc 	andi	r2,r2,255
 4000658:	108000a0 	cmpeqi	r2,r2,2
 400065c:	103fc11e 	bne	r2,zero,4000564 <ArgumentSet+0x24>
 4000660:	e0bfff17 	ldw	r2,-4(fp)
 4000664:	10800c83 	ldbu	r2,50(r2)
 4000668:	10803fcc 	andi	r2,r2,255
 400066c:	108000e0 	cmpeqi	r2,r2,3
 4000670:	103fbc1e 	bne	r2,zero,4000564 <ArgumentSet+0x24>
            ptcb->period = 10;
            ptcb->deadLine = 10;
        }
        ptcb = ptcb->OSTCBNext;
    }
}
 4000674:	e037883a 	mov	sp,fp
 4000678:	dfc00117 	ldw	ra,4(sp)
 400067c:	df000017 	ldw	fp,0(sp)
 4000680:	dec00204 	addi	sp,sp,8
 4000684:	f800283a 	ret

04000688 <printf>:
 4000688:	defffb04 	addi	sp,sp,-20
 400068c:	dfc00115 	stw	ra,4(sp)
 4000690:	d9400215 	stw	r5,8(sp)
 4000694:	d9800315 	stw	r6,12(sp)
 4000698:	d9c00415 	stw	r7,16(sp)
 400069c:	008100b4 	movhi	r2,1026
 40006a0:	10a19b04 	addi	r2,r2,-31124
 40006a4:	10c00017 	ldw	r3,0(r2)
 40006a8:	200b883a 	mov	r5,r4
 40006ac:	d8800204 	addi	r2,sp,8
 40006b0:	19000217 	ldw	r4,8(r3)
 40006b4:	100d883a 	mov	r6,r2
 40006b8:	d8800015 	stw	r2,0(sp)
 40006bc:	400272c0 	call	400272c <__vfprintf_internal>
 40006c0:	dfc00117 	ldw	ra,4(sp)
 40006c4:	dec00504 	addi	sp,sp,20
 40006c8:	f800283a 	ret

040006cc <_printf_r>:
 40006cc:	defffc04 	addi	sp,sp,-16
 40006d0:	dfc00115 	stw	ra,4(sp)
 40006d4:	d9800215 	stw	r6,8(sp)
 40006d8:	d9c00315 	stw	r7,12(sp)
 40006dc:	280d883a 	mov	r6,r5
 40006e0:	21400217 	ldw	r5,8(r4)
 40006e4:	d8c00204 	addi	r3,sp,8
 40006e8:	180f883a 	mov	r7,r3
 40006ec:	d8c00015 	stw	r3,0(sp)
 40006f0:	40008800 	call	4000880 <___vfprintf_internal_r>
 40006f4:	dfc00117 	ldw	ra,4(sp)
 40006f8:	dec00404 	addi	sp,sp,16
 40006fc:	f800283a 	ret

04000700 <_puts_r>:
 4000700:	defff604 	addi	sp,sp,-40
 4000704:	dc400715 	stw	r17,28(sp)
 4000708:	2023883a 	mov	r17,r4
 400070c:	2809883a 	mov	r4,r5
 4000710:	dfc00915 	stw	ra,36(sp)
 4000714:	dcc00815 	stw	r19,32(sp)
 4000718:	2827883a 	mov	r19,r5
 400071c:	40007b40 	call	40007b4 <strlen>
 4000720:	89400217 	ldw	r5,8(r17)
 4000724:	00c10074 	movhi	r3,1025
 4000728:	18d9b904 	addi	r3,r3,26340
 400072c:	01c00044 	movi	r7,1
 4000730:	12000044 	addi	r8,r2,1
 4000734:	d8c00515 	stw	r3,20(sp)
 4000738:	d9c00615 	stw	r7,24(sp)
 400073c:	d8c00304 	addi	r3,sp,12
 4000740:	01c00084 	movi	r7,2
 4000744:	8809883a 	mov	r4,r17
 4000748:	d80d883a 	mov	r6,sp
 400074c:	d8c00015 	stw	r3,0(sp)
 4000750:	dcc00315 	stw	r19,12(sp)
 4000754:	da000215 	stw	r8,8(sp)
 4000758:	d9c00115 	stw	r7,4(sp)
 400075c:	d8800415 	stw	r2,16(sp)
 4000760:	40049880 	call	4004988 <__sfvwrite_r>
 4000764:	00ffffc4 	movi	r3,-1
 4000768:	10000626 	beq	r2,zero,4000784 <_puts_r+0x84>
 400076c:	1805883a 	mov	r2,r3
 4000770:	dfc00917 	ldw	ra,36(sp)
 4000774:	dcc00817 	ldw	r19,32(sp)
 4000778:	dc400717 	ldw	r17,28(sp)
 400077c:	dec00a04 	addi	sp,sp,40
 4000780:	f800283a 	ret
 4000784:	00c00284 	movi	r3,10
 4000788:	1805883a 	mov	r2,r3
 400078c:	dfc00917 	ldw	ra,36(sp)
 4000790:	dcc00817 	ldw	r19,32(sp)
 4000794:	dc400717 	ldw	r17,28(sp)
 4000798:	dec00a04 	addi	sp,sp,40
 400079c:	f800283a 	ret

040007a0 <puts>:
 40007a0:	008100b4 	movhi	r2,1026
 40007a4:	10a19b04 	addi	r2,r2,-31124
 40007a8:	200b883a 	mov	r5,r4
 40007ac:	11000017 	ldw	r4,0(r2)
 40007b0:	40007001 	jmpi	4000700 <_puts_r>

040007b4 <strlen>:
 40007b4:	208000cc 	andi	r2,r4,3
 40007b8:	2011883a 	mov	r8,r4
 40007bc:	1000161e 	bne	r2,zero,4000818 <strlen+0x64>
 40007c0:	20c00017 	ldw	r3,0(r4)
 40007c4:	017fbff4 	movhi	r5,65279
 40007c8:	297fbfc4 	addi	r5,r5,-257
 40007cc:	01e02074 	movhi	r7,32897
 40007d0:	39e02004 	addi	r7,r7,-32640
 40007d4:	1945883a 	add	r2,r3,r5
 40007d8:	11c4703a 	and	r2,r2,r7
 40007dc:	00c6303a 	nor	r3,zero,r3
 40007e0:	1886703a 	and	r3,r3,r2
 40007e4:	18000c1e 	bne	r3,zero,4000818 <strlen+0x64>
 40007e8:	280d883a 	mov	r6,r5
 40007ec:	380b883a 	mov	r5,r7
 40007f0:	21000104 	addi	r4,r4,4
 40007f4:	20800017 	ldw	r2,0(r4)
 40007f8:	1187883a 	add	r3,r2,r6
 40007fc:	1946703a 	and	r3,r3,r5
 4000800:	0084303a 	nor	r2,zero,r2
 4000804:	10c4703a 	and	r2,r2,r3
 4000808:	103ff926 	beq	r2,zero,40007f0 <strlen+0x3c>
 400080c:	20800007 	ldb	r2,0(r4)
 4000810:	10000326 	beq	r2,zero,4000820 <strlen+0x6c>
 4000814:	21000044 	addi	r4,r4,1
 4000818:	20800007 	ldb	r2,0(r4)
 400081c:	103ffd1e 	bne	r2,zero,4000814 <strlen+0x60>
 4000820:	2205c83a 	sub	r2,r4,r8
 4000824:	f800283a 	ret

04000828 <__sprint_r>:
 4000828:	30800217 	ldw	r2,8(r6)
 400082c:	defffe04 	addi	sp,sp,-8
 4000830:	dc000015 	stw	r16,0(sp)
 4000834:	dfc00115 	stw	ra,4(sp)
 4000838:	3021883a 	mov	r16,r6
 400083c:	0007883a 	mov	r3,zero
 4000840:	1000061e 	bne	r2,zero,400085c <__sprint_r+0x34>
 4000844:	1805883a 	mov	r2,r3
 4000848:	30000115 	stw	zero,4(r6)
 400084c:	dfc00117 	ldw	ra,4(sp)
 4000850:	dc000017 	ldw	r16,0(sp)
 4000854:	dec00204 	addi	sp,sp,8
 4000858:	f800283a 	ret
 400085c:	40049880 	call	4004988 <__sfvwrite_r>
 4000860:	1007883a 	mov	r3,r2
 4000864:	1805883a 	mov	r2,r3
 4000868:	80000115 	stw	zero,4(r16)
 400086c:	80000215 	stw	zero,8(r16)
 4000870:	dfc00117 	ldw	ra,4(sp)
 4000874:	dc000017 	ldw	r16,0(sp)
 4000878:	dec00204 	addi	sp,sp,8
 400087c:	f800283a 	ret

04000880 <___vfprintf_internal_r>:
 4000880:	defea404 	addi	sp,sp,-1392
 4000884:	dd815815 	stw	r22,1376(sp)
 4000888:	dc015215 	stw	r16,1352(sp)
 400088c:	d9c15115 	stw	r7,1348(sp)
 4000890:	dfc15b15 	stw	ra,1388(sp)
 4000894:	df015a15 	stw	fp,1384(sp)
 4000898:	ddc15915 	stw	r23,1380(sp)
 400089c:	dd415715 	stw	r21,1372(sp)
 40008a0:	dd015615 	stw	r20,1368(sp)
 40008a4:	dcc15515 	stw	r19,1364(sp)
 40008a8:	dc815415 	stw	r18,1360(sp)
 40008ac:	dc415315 	stw	r17,1356(sp)
 40008b0:	282d883a 	mov	r22,r5
 40008b4:	3021883a 	mov	r16,r6
 40008b8:	d9014f15 	stw	r4,1340(sp)
 40008bc:	4004fac0 	call	4004fac <_localeconv_r>
 40008c0:	10800017 	ldw	r2,0(r2)
 40008c4:	d9c15117 	ldw	r7,1348(sp)
 40008c8:	d8814915 	stw	r2,1316(sp)
 40008cc:	d8814f17 	ldw	r2,1340(sp)
 40008d0:	10000226 	beq	r2,zero,40008dc <___vfprintf_internal_r+0x5c>
 40008d4:	10800e17 	ldw	r2,56(r2)
 40008d8:	10020d26 	beq	r2,zero,4001110 <___vfprintf_internal_r+0x890>
 40008dc:	b080030b 	ldhu	r2,12(r22)
 40008e0:	1080020c 	andi	r2,r2,8
 40008e4:	10020e26 	beq	r2,zero,4001120 <___vfprintf_internal_r+0x8a0>
 40008e8:	b0800417 	ldw	r2,16(r22)
 40008ec:	10020c26 	beq	r2,zero,4001120 <___vfprintf_internal_r+0x8a0>
 40008f0:	b200030b 	ldhu	r8,12(r22)
 40008f4:	00800284 	movi	r2,10
 40008f8:	40c0068c 	andi	r3,r8,26
 40008fc:	18802f1e 	bne	r3,r2,40009bc <___vfprintf_internal_r+0x13c>
 4000900:	b080038f 	ldh	r2,14(r22)
 4000904:	10002d16 	blt	r2,zero,40009bc <___vfprintf_internal_r+0x13c>
 4000908:	b240038b 	ldhu	r9,14(r22)
 400090c:	b2800717 	ldw	r10,28(r22)
 4000910:	b2c00917 	ldw	r11,36(r22)
 4000914:	d9014f17 	ldw	r4,1340(sp)
 4000918:	dc402904 	addi	r17,sp,164
 400091c:	d8804004 	addi	r2,sp,256
 4000920:	00c10004 	movi	r3,1024
 4000924:	423fff4c 	andi	r8,r8,65533
 4000928:	800d883a 	mov	r6,r16
 400092c:	880b883a 	mov	r5,r17
 4000930:	da002c0d 	sth	r8,176(sp)
 4000934:	da402c8d 	sth	r9,178(sp)
 4000938:	da803015 	stw	r10,192(sp)
 400093c:	dac03215 	stw	r11,200(sp)
 4000940:	d8802d15 	stw	r2,180(sp)
 4000944:	d8c02e15 	stw	r3,184(sp)
 4000948:	d8802915 	stw	r2,164(sp)
 400094c:	d8c02b15 	stw	r3,172(sp)
 4000950:	d8002f15 	stw	zero,188(sp)
 4000954:	40008800 	call	4000880 <___vfprintf_internal_r>
 4000958:	d8814b15 	stw	r2,1324(sp)
 400095c:	10000416 	blt	r2,zero,4000970 <___vfprintf_internal_r+0xf0>
 4000960:	d9014f17 	ldw	r4,1340(sp)
 4000964:	880b883a 	mov	r5,r17
 4000968:	40040580 	call	4004058 <_fflush_r>
 400096c:	1002321e 	bne	r2,zero,4001238 <___vfprintf_internal_r+0x9b8>
 4000970:	d8802c0b 	ldhu	r2,176(sp)
 4000974:	1080100c 	andi	r2,r2,64
 4000978:	10000326 	beq	r2,zero,4000988 <___vfprintf_internal_r+0x108>
 400097c:	b080030b 	ldhu	r2,12(r22)
 4000980:	10801014 	ori	r2,r2,64
 4000984:	b080030d 	sth	r2,12(r22)
 4000988:	d8814b17 	ldw	r2,1324(sp)
 400098c:	dfc15b17 	ldw	ra,1388(sp)
 4000990:	df015a17 	ldw	fp,1384(sp)
 4000994:	ddc15917 	ldw	r23,1380(sp)
 4000998:	dd815817 	ldw	r22,1376(sp)
 400099c:	dd415717 	ldw	r21,1372(sp)
 40009a0:	dd015617 	ldw	r20,1368(sp)
 40009a4:	dcc15517 	ldw	r19,1364(sp)
 40009a8:	dc815417 	ldw	r18,1360(sp)
 40009ac:	dc415317 	ldw	r17,1356(sp)
 40009b0:	dc015217 	ldw	r16,1352(sp)
 40009b4:	dec15c04 	addi	sp,sp,1392
 40009b8:	f800283a 	ret
 40009bc:	0005883a 	mov	r2,zero
 40009c0:	0007883a 	mov	r3,zero
 40009c4:	dd401904 	addi	r21,sp,100
 40009c8:	d8814215 	stw	r2,1288(sp)
 40009cc:	802f883a 	mov	r23,r16
 40009d0:	d8c14315 	stw	r3,1292(sp)
 40009d4:	d8014b15 	stw	zero,1324(sp)
 40009d8:	d8014815 	stw	zero,1312(sp)
 40009dc:	d8014415 	stw	zero,1296(sp)
 40009e0:	d8014715 	stw	zero,1308(sp)
 40009e4:	dd400c15 	stw	r21,48(sp)
 40009e8:	d8000e15 	stw	zero,56(sp)
 40009ec:	d8000d15 	stw	zero,52(sp)
 40009f0:	b8800007 	ldb	r2,0(r23)
 40009f4:	10001926 	beq	r2,zero,4000a5c <___vfprintf_internal_r+0x1dc>
 40009f8:	00c00944 	movi	r3,37
 40009fc:	10c01726 	beq	r2,r3,4000a5c <___vfprintf_internal_r+0x1dc>
 4000a00:	b821883a 	mov	r16,r23
 4000a04:	00000106 	br	4000a0c <___vfprintf_internal_r+0x18c>
 4000a08:	10c00326 	beq	r2,r3,4000a18 <___vfprintf_internal_r+0x198>
 4000a0c:	84000044 	addi	r16,r16,1
 4000a10:	80800007 	ldb	r2,0(r16)
 4000a14:	103ffc1e 	bne	r2,zero,4000a08 <___vfprintf_internal_r+0x188>
 4000a18:	85e7c83a 	sub	r19,r16,r23
 4000a1c:	98000e26 	beq	r19,zero,4000a58 <___vfprintf_internal_r+0x1d8>
 4000a20:	dc800e17 	ldw	r18,56(sp)
 4000a24:	dc400d17 	ldw	r17,52(sp)
 4000a28:	008001c4 	movi	r2,7
 4000a2c:	94e5883a 	add	r18,r18,r19
 4000a30:	8c400044 	addi	r17,r17,1
 4000a34:	adc00015 	stw	r23,0(r21)
 4000a38:	dc800e15 	stw	r18,56(sp)
 4000a3c:	acc00115 	stw	r19,4(r21)
 4000a40:	dc400d15 	stw	r17,52(sp)
 4000a44:	14428b16 	blt	r2,r17,4001474 <___vfprintf_internal_r+0xbf4>
 4000a48:	ad400204 	addi	r21,r21,8
 4000a4c:	d9014b17 	ldw	r4,1324(sp)
 4000a50:	24c9883a 	add	r4,r4,r19
 4000a54:	d9014b15 	stw	r4,1324(sp)
 4000a58:	802f883a 	mov	r23,r16
 4000a5c:	b8800007 	ldb	r2,0(r23)
 4000a60:	10013c26 	beq	r2,zero,4000f54 <___vfprintf_internal_r+0x6d4>
 4000a64:	bdc00044 	addi	r23,r23,1
 4000a68:	d8000405 	stb	zero,16(sp)
 4000a6c:	b8c00007 	ldb	r3,0(r23)
 4000a70:	04ffffc4 	movi	r19,-1
 4000a74:	d8014c15 	stw	zero,1328(sp)
 4000a78:	d8014a15 	stw	zero,1320(sp)
 4000a7c:	d8c14d15 	stw	r3,1332(sp)
 4000a80:	bdc00044 	addi	r23,r23,1
 4000a84:	d9414d17 	ldw	r5,1332(sp)
 4000a88:	00801604 	movi	r2,88
 4000a8c:	28fff804 	addi	r3,r5,-32
 4000a90:	10c06036 	bltu	r2,r3,4000c14 <___vfprintf_internal_r+0x394>
 4000a94:	18c5883a 	add	r2,r3,r3
 4000a98:	1085883a 	add	r2,r2,r2
 4000a9c:	00c10034 	movhi	r3,1024
 4000aa0:	18c2ac04 	addi	r3,r3,2736
 4000aa4:	10c5883a 	add	r2,r2,r3
 4000aa8:	11000017 	ldw	r4,0(r2)
 4000aac:	2000683a 	jmp	r4
 4000ab0:	04001a24 	muli	r16,zero,104
 4000ab4:	04000c14 	movui	r16,48
 4000ab8:	04000c14 	movui	r16,48
 4000abc:	04001a10 	cmplti	r16,zero,104
 4000ac0:	04000c14 	movui	r16,48
 4000ac4:	04000c14 	movui	r16,48
 4000ac8:	04000c14 	movui	r16,48
 4000acc:	04000c14 	movui	r16,48
 4000ad0:	04000c14 	movui	r16,48
 4000ad4:	04000c14 	movui	r16,48
 4000ad8:	040017f0 	cmpltui	r16,zero,95
 4000adc:	04001a00 	call	4001a0 <OSCtxSw_SWITCH_PC+0x400160>
 4000ae0:	04000c14 	movui	r16,48
 4000ae4:	04001808 	cmpgei	r16,zero,96
 4000ae8:	04001a9c 	xori	r16,zero,106
 4000aec:	04000c14 	movui	r16,48
 4000af0:	04001a88 	cmpgei	r16,zero,106
 4000af4:	04001a50 	cmplti	r16,zero,105
 4000af8:	04001a50 	cmplti	r16,zero,105
 4000afc:	04001a50 	cmplti	r16,zero,105
 4000b00:	04001a50 	cmplti	r16,zero,105
 4000b04:	04001a50 	cmplti	r16,zero,105
 4000b08:	04001a50 	cmplti	r16,zero,105
 4000b0c:	04001a50 	cmplti	r16,zero,105
 4000b10:	04001a50 	cmplti	r16,zero,105
 4000b14:	04001a50 	cmplti	r16,zero,105
 4000b18:	04000c14 	movui	r16,48
 4000b1c:	04000c14 	movui	r16,48
 4000b20:	04000c14 	movui	r16,48
 4000b24:	04000c14 	movui	r16,48
 4000b28:	04000c14 	movui	r16,48
 4000b2c:	04000c14 	movui	r16,48
 4000b30:	04000c14 	movui	r16,48
 4000b34:	04000c14 	movui	r16,48
 4000b38:	04000c14 	movui	r16,48
 4000b3c:	04000c14 	movui	r16,48
 4000b40:	0400126c 	andhi	r16,zero,73
 4000b44:	040018d8 	cmpnei	r16,zero,99
 4000b48:	04000c14 	movui	r16,48
 4000b4c:	040018d8 	cmpnei	r16,zero,99
 4000b50:	04000c14 	movui	r16,48
 4000b54:	04000c14 	movui	r16,48
 4000b58:	04000c14 	movui	r16,48
 4000b5c:	04000c14 	movui	r16,48
 4000b60:	04001a3c 	xorhi	r16,zero,104
 4000b64:	04000c14 	movui	r16,48
 4000b68:	04000c14 	movui	r16,48
 4000b6c:	04001320 	cmpeqi	r16,zero,76
 4000b70:	04000c14 	movui	r16,48
 4000b74:	04000c14 	movui	r16,48
 4000b78:	04000c14 	movui	r16,48
 4000b7c:	04000c14 	movui	r16,48
 4000b80:	04000c14 	movui	r16,48
 4000b84:	0400136c 	andhi	r16,zero,77
 4000b88:	04000c14 	movui	r16,48
 4000b8c:	04000c14 	movui	r16,48
 4000b90:	0400198c 	andi	r16,zero,102
 4000b94:	04000c14 	movui	r16,48
 4000b98:	04000c14 	movui	r16,48
 4000b9c:	04000c14 	movui	r16,48
 4000ba0:	04000c14 	movui	r16,48
 4000ba4:	04000c14 	movui	r16,48
 4000ba8:	04000c14 	movui	r16,48
 4000bac:	04000c14 	movui	r16,48
 4000bb0:	04000c14 	movui	r16,48
 4000bb4:	04000c14 	movui	r16,48
 4000bb8:	04000c14 	movui	r16,48
 4000bbc:	04001960 	cmpeqi	r16,zero,101
 4000bc0:	04001278 	rdprs	r16,zero,73
 4000bc4:	040018d8 	cmpnei	r16,zero,99
 4000bc8:	040018d8 	cmpnei	r16,zero,99
 4000bcc:	040018d8 	cmpnei	r16,zero,99
 4000bd0:	040018c4 	movi	r16,99
 4000bd4:	04001278 	rdprs	r16,zero,73
 4000bd8:	04000c14 	movui	r16,48
 4000bdc:	04000c14 	movui	r16,48
 4000be0:	0400184c 	andi	r16,zero,97
 4000be4:	04000c14 	movui	r16,48
 4000be8:	0400181c 	xori	r16,zero,96
 4000bec:	0400132c 	andhi	r16,zero,76
 4000bf0:	0400187c 	xorhi	r16,zero,97
 4000bf4:	04001868 	cmpgeui	r16,zero,97
 4000bf8:	04000c14 	movui	r16,48
 4000bfc:	04001af8 	rdprs	r16,zero,107
 4000c00:	04000c14 	movui	r16,48
 4000c04:	04001378 	rdprs	r16,zero,77
 4000c08:	04000c14 	movui	r16,48
 4000c0c:	04000c14 	movui	r16,48
 4000c10:	040019f0 	cmpltui	r16,zero,103
 4000c14:	d9014d17 	ldw	r4,1332(sp)
 4000c18:	2000ce26 	beq	r4,zero,4000f54 <___vfprintf_internal_r+0x6d4>
 4000c1c:	01400044 	movi	r5,1
 4000c20:	d9800f04 	addi	r6,sp,60
 4000c24:	d9c14015 	stw	r7,1280(sp)
 4000c28:	d9414515 	stw	r5,1300(sp)
 4000c2c:	d9814115 	stw	r6,1284(sp)
 4000c30:	280f883a 	mov	r7,r5
 4000c34:	d9000f05 	stb	r4,60(sp)
 4000c38:	d8000405 	stb	zero,16(sp)
 4000c3c:	d8014615 	stw	zero,1304(sp)
 4000c40:	d8c14c17 	ldw	r3,1328(sp)
 4000c44:	1880008c 	andi	r2,r3,2
 4000c48:	1005003a 	cmpeq	r2,r2,zero
 4000c4c:	d8815015 	stw	r2,1344(sp)
 4000c50:	1000031e 	bne	r2,zero,4000c60 <___vfprintf_internal_r+0x3e0>
 4000c54:	d9014517 	ldw	r4,1300(sp)
 4000c58:	21000084 	addi	r4,r4,2
 4000c5c:	d9014515 	stw	r4,1300(sp)
 4000c60:	d9414c17 	ldw	r5,1328(sp)
 4000c64:	2940210c 	andi	r5,r5,132
 4000c68:	d9414e15 	stw	r5,1336(sp)
 4000c6c:	28002d1e 	bne	r5,zero,4000d24 <___vfprintf_internal_r+0x4a4>
 4000c70:	d9814a17 	ldw	r6,1320(sp)
 4000c74:	d8814517 	ldw	r2,1300(sp)
 4000c78:	30a1c83a 	sub	r16,r6,r2
 4000c7c:	0400290e 	bge	zero,r16,4000d24 <___vfprintf_internal_r+0x4a4>
 4000c80:	00800404 	movi	r2,16
 4000c84:	1404580e 	bge	r2,r16,4001de8 <___vfprintf_internal_r+0x1568>
 4000c88:	dc800e17 	ldw	r18,56(sp)
 4000c8c:	dc400d17 	ldw	r17,52(sp)
 4000c90:	1027883a 	mov	r19,r2
 4000c94:	07010074 	movhi	fp,1025
 4000c98:	e719d584 	addi	fp,fp,26454
 4000c9c:	050001c4 	movi	r20,7
 4000ca0:	00000306 	br	4000cb0 <___vfprintf_internal_r+0x430>
 4000ca4:	843ffc04 	addi	r16,r16,-16
 4000ca8:	ad400204 	addi	r21,r21,8
 4000cac:	9c00130e 	bge	r19,r16,4000cfc <___vfprintf_internal_r+0x47c>
 4000cb0:	94800404 	addi	r18,r18,16
 4000cb4:	8c400044 	addi	r17,r17,1
 4000cb8:	af000015 	stw	fp,0(r21)
 4000cbc:	acc00115 	stw	r19,4(r21)
 4000cc0:	dc800e15 	stw	r18,56(sp)
 4000cc4:	dc400d15 	stw	r17,52(sp)
 4000cc8:	a47ff60e 	bge	r20,r17,4000ca4 <___vfprintf_internal_r+0x424>
 4000ccc:	d9014f17 	ldw	r4,1340(sp)
 4000cd0:	b00b883a 	mov	r5,r22
 4000cd4:	d9800c04 	addi	r6,sp,48
 4000cd8:	d9c15115 	stw	r7,1348(sp)
 4000cdc:	40008280 	call	4000828 <__sprint_r>
 4000ce0:	d9c15117 	ldw	r7,1348(sp)
 4000ce4:	10009e1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4000ce8:	843ffc04 	addi	r16,r16,-16
 4000cec:	dc800e17 	ldw	r18,56(sp)
 4000cf0:	dc400d17 	ldw	r17,52(sp)
 4000cf4:	dd401904 	addi	r21,sp,100
 4000cf8:	9c3fed16 	blt	r19,r16,4000cb0 <___vfprintf_internal_r+0x430>
 4000cfc:	9425883a 	add	r18,r18,r16
 4000d00:	8c400044 	addi	r17,r17,1
 4000d04:	008001c4 	movi	r2,7
 4000d08:	af000015 	stw	fp,0(r21)
 4000d0c:	ac000115 	stw	r16,4(r21)
 4000d10:	dc800e15 	stw	r18,56(sp)
 4000d14:	dc400d15 	stw	r17,52(sp)
 4000d18:	1441f516 	blt	r2,r17,40014f0 <___vfprintf_internal_r+0xc70>
 4000d1c:	ad400204 	addi	r21,r21,8
 4000d20:	00000206 	br	4000d2c <___vfprintf_internal_r+0x4ac>
 4000d24:	dc800e17 	ldw	r18,56(sp)
 4000d28:	dc400d17 	ldw	r17,52(sp)
 4000d2c:	d8800407 	ldb	r2,16(sp)
 4000d30:	10000b26 	beq	r2,zero,4000d60 <___vfprintf_internal_r+0x4e0>
 4000d34:	00800044 	movi	r2,1
 4000d38:	94800044 	addi	r18,r18,1
 4000d3c:	8c400044 	addi	r17,r17,1
 4000d40:	a8800115 	stw	r2,4(r21)
 4000d44:	d8c00404 	addi	r3,sp,16
 4000d48:	008001c4 	movi	r2,7
 4000d4c:	a8c00015 	stw	r3,0(r21)
 4000d50:	dc800e15 	stw	r18,56(sp)
 4000d54:	dc400d15 	stw	r17,52(sp)
 4000d58:	1441da16 	blt	r2,r17,40014c4 <___vfprintf_internal_r+0xc44>
 4000d5c:	ad400204 	addi	r21,r21,8
 4000d60:	d9015017 	ldw	r4,1344(sp)
 4000d64:	20000b1e 	bne	r4,zero,4000d94 <___vfprintf_internal_r+0x514>
 4000d68:	d8800444 	addi	r2,sp,17
 4000d6c:	94800084 	addi	r18,r18,2
 4000d70:	8c400044 	addi	r17,r17,1
 4000d74:	a8800015 	stw	r2,0(r21)
 4000d78:	00c00084 	movi	r3,2
 4000d7c:	008001c4 	movi	r2,7
 4000d80:	a8c00115 	stw	r3,4(r21)
 4000d84:	dc800e15 	stw	r18,56(sp)
 4000d88:	dc400d15 	stw	r17,52(sp)
 4000d8c:	1441c216 	blt	r2,r17,4001498 <___vfprintf_internal_r+0xc18>
 4000d90:	ad400204 	addi	r21,r21,8
 4000d94:	d9414e17 	ldw	r5,1336(sp)
 4000d98:	00802004 	movi	r2,128
 4000d9c:	2880b126 	beq	r5,r2,4001064 <___vfprintf_internal_r+0x7e4>
 4000da0:	d8c14617 	ldw	r3,1304(sp)
 4000da4:	19e1c83a 	sub	r16,r3,r7
 4000da8:	0400260e 	bge	zero,r16,4000e44 <___vfprintf_internal_r+0x5c4>
 4000dac:	00800404 	movi	r2,16
 4000db0:	1403c90e 	bge	r2,r16,4001cd8 <___vfprintf_internal_r+0x1458>
 4000db4:	1027883a 	mov	r19,r2
 4000db8:	07010074 	movhi	fp,1025
 4000dbc:	e719d184 	addi	fp,fp,26438
 4000dc0:	050001c4 	movi	r20,7
 4000dc4:	00000306 	br	4000dd4 <___vfprintf_internal_r+0x554>
 4000dc8:	843ffc04 	addi	r16,r16,-16
 4000dcc:	ad400204 	addi	r21,r21,8
 4000dd0:	9c00130e 	bge	r19,r16,4000e20 <___vfprintf_internal_r+0x5a0>
 4000dd4:	94800404 	addi	r18,r18,16
 4000dd8:	8c400044 	addi	r17,r17,1
 4000ddc:	af000015 	stw	fp,0(r21)
 4000de0:	acc00115 	stw	r19,4(r21)
 4000de4:	dc800e15 	stw	r18,56(sp)
 4000de8:	dc400d15 	stw	r17,52(sp)
 4000dec:	a47ff60e 	bge	r20,r17,4000dc8 <___vfprintf_internal_r+0x548>
 4000df0:	d9014f17 	ldw	r4,1340(sp)
 4000df4:	b00b883a 	mov	r5,r22
 4000df8:	d9800c04 	addi	r6,sp,48
 4000dfc:	d9c15115 	stw	r7,1348(sp)
 4000e00:	40008280 	call	4000828 <__sprint_r>
 4000e04:	d9c15117 	ldw	r7,1348(sp)
 4000e08:	1000551e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4000e0c:	843ffc04 	addi	r16,r16,-16
 4000e10:	dc800e17 	ldw	r18,56(sp)
 4000e14:	dc400d17 	ldw	r17,52(sp)
 4000e18:	dd401904 	addi	r21,sp,100
 4000e1c:	9c3fed16 	blt	r19,r16,4000dd4 <___vfprintf_internal_r+0x554>
 4000e20:	9425883a 	add	r18,r18,r16
 4000e24:	8c400044 	addi	r17,r17,1
 4000e28:	008001c4 	movi	r2,7
 4000e2c:	af000015 	stw	fp,0(r21)
 4000e30:	ac000115 	stw	r16,4(r21)
 4000e34:	dc800e15 	stw	r18,56(sp)
 4000e38:	dc400d15 	stw	r17,52(sp)
 4000e3c:	14418216 	blt	r2,r17,4001448 <___vfprintf_internal_r+0xbc8>
 4000e40:	ad400204 	addi	r21,r21,8
 4000e44:	d9014c17 	ldw	r4,1328(sp)
 4000e48:	2080400c 	andi	r2,r4,256
 4000e4c:	10004a1e 	bne	r2,zero,4000f78 <___vfprintf_internal_r+0x6f8>
 4000e50:	d9414117 	ldw	r5,1284(sp)
 4000e54:	91e5883a 	add	r18,r18,r7
 4000e58:	8c400044 	addi	r17,r17,1
 4000e5c:	008001c4 	movi	r2,7
 4000e60:	a9400015 	stw	r5,0(r21)
 4000e64:	a9c00115 	stw	r7,4(r21)
 4000e68:	dc800e15 	stw	r18,56(sp)
 4000e6c:	dc400d15 	stw	r17,52(sp)
 4000e70:	14416716 	blt	r2,r17,4001410 <___vfprintf_internal_r+0xb90>
 4000e74:	a8c00204 	addi	r3,r21,8
 4000e78:	d9814c17 	ldw	r6,1328(sp)
 4000e7c:	3080010c 	andi	r2,r6,4
 4000e80:	10002826 	beq	r2,zero,4000f24 <___vfprintf_internal_r+0x6a4>
 4000e84:	d8814a17 	ldw	r2,1320(sp)
 4000e88:	d9014517 	ldw	r4,1300(sp)
 4000e8c:	1121c83a 	sub	r16,r2,r4
 4000e90:	0400240e 	bge	zero,r16,4000f24 <___vfprintf_internal_r+0x6a4>
 4000e94:	00800404 	movi	r2,16
 4000e98:	14044f0e 	bge	r2,r16,4001fd8 <___vfprintf_internal_r+0x1758>
 4000e9c:	dc400d17 	ldw	r17,52(sp)
 4000ea0:	1027883a 	mov	r19,r2
 4000ea4:	07010074 	movhi	fp,1025
 4000ea8:	e719d584 	addi	fp,fp,26454
 4000eac:	050001c4 	movi	r20,7
 4000eb0:	00000306 	br	4000ec0 <___vfprintf_internal_r+0x640>
 4000eb4:	843ffc04 	addi	r16,r16,-16
 4000eb8:	18c00204 	addi	r3,r3,8
 4000ebc:	9c00110e 	bge	r19,r16,4000f04 <___vfprintf_internal_r+0x684>
 4000ec0:	94800404 	addi	r18,r18,16
 4000ec4:	8c400044 	addi	r17,r17,1
 4000ec8:	1f000015 	stw	fp,0(r3)
 4000ecc:	1cc00115 	stw	r19,4(r3)
 4000ed0:	dc800e15 	stw	r18,56(sp)
 4000ed4:	dc400d15 	stw	r17,52(sp)
 4000ed8:	a47ff60e 	bge	r20,r17,4000eb4 <___vfprintf_internal_r+0x634>
 4000edc:	d9014f17 	ldw	r4,1340(sp)
 4000ee0:	b00b883a 	mov	r5,r22
 4000ee4:	d9800c04 	addi	r6,sp,48
 4000ee8:	40008280 	call	4000828 <__sprint_r>
 4000eec:	10001c1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4000ef0:	843ffc04 	addi	r16,r16,-16
 4000ef4:	dc800e17 	ldw	r18,56(sp)
 4000ef8:	dc400d17 	ldw	r17,52(sp)
 4000efc:	d8c01904 	addi	r3,sp,100
 4000f00:	9c3fef16 	blt	r19,r16,4000ec0 <___vfprintf_internal_r+0x640>
 4000f04:	9425883a 	add	r18,r18,r16
 4000f08:	8c400044 	addi	r17,r17,1
 4000f0c:	008001c4 	movi	r2,7
 4000f10:	1f000015 	stw	fp,0(r3)
 4000f14:	1c000115 	stw	r16,4(r3)
 4000f18:	dc800e15 	stw	r18,56(sp)
 4000f1c:	dc400d15 	stw	r17,52(sp)
 4000f20:	1440cb16 	blt	r2,r17,4001250 <___vfprintf_internal_r+0x9d0>
 4000f24:	d8814a17 	ldw	r2,1320(sp)
 4000f28:	d9414517 	ldw	r5,1300(sp)
 4000f2c:	1140010e 	bge	r2,r5,4000f34 <___vfprintf_internal_r+0x6b4>
 4000f30:	2805883a 	mov	r2,r5
 4000f34:	d9814b17 	ldw	r6,1324(sp)
 4000f38:	308d883a 	add	r6,r6,r2
 4000f3c:	d9814b15 	stw	r6,1324(sp)
 4000f40:	90013b1e 	bne	r18,zero,4001430 <___vfprintf_internal_r+0xbb0>
 4000f44:	d9c14017 	ldw	r7,1280(sp)
 4000f48:	dd401904 	addi	r21,sp,100
 4000f4c:	d8000d15 	stw	zero,52(sp)
 4000f50:	003ea706 	br	40009f0 <___vfprintf_internal_r+0x170>
 4000f54:	d8800e17 	ldw	r2,56(sp)
 4000f58:	10053f1e 	bne	r2,zero,4002458 <___vfprintf_internal_r+0x1bd8>
 4000f5c:	d8000d15 	stw	zero,52(sp)
 4000f60:	b080030b 	ldhu	r2,12(r22)
 4000f64:	1080100c 	andi	r2,r2,64
 4000f68:	103e8726 	beq	r2,zero,4000988 <___vfprintf_internal_r+0x108>
 4000f6c:	00bfffc4 	movi	r2,-1
 4000f70:	d8814b15 	stw	r2,1324(sp)
 4000f74:	003e8406 	br	4000988 <___vfprintf_internal_r+0x108>
 4000f78:	d9814d17 	ldw	r6,1332(sp)
 4000f7c:	00801944 	movi	r2,101
 4000f80:	11806e16 	blt	r2,r6,400113c <___vfprintf_internal_r+0x8bc>
 4000f84:	d9414717 	ldw	r5,1308(sp)
 4000f88:	00c00044 	movi	r3,1
 4000f8c:	1943430e 	bge	r3,r5,4001c9c <___vfprintf_internal_r+0x141c>
 4000f90:	d8814117 	ldw	r2,1284(sp)
 4000f94:	94800044 	addi	r18,r18,1
 4000f98:	8c400044 	addi	r17,r17,1
 4000f9c:	a8800015 	stw	r2,0(r21)
 4000fa0:	008001c4 	movi	r2,7
 4000fa4:	a8c00115 	stw	r3,4(r21)
 4000fa8:	dc800e15 	stw	r18,56(sp)
 4000fac:	dc400d15 	stw	r17,52(sp)
 4000fb0:	1441ca16 	blt	r2,r17,40016dc <___vfprintf_internal_r+0xe5c>
 4000fb4:	a8c00204 	addi	r3,r21,8
 4000fb8:	d9014917 	ldw	r4,1316(sp)
 4000fbc:	00800044 	movi	r2,1
 4000fc0:	94800044 	addi	r18,r18,1
 4000fc4:	8c400044 	addi	r17,r17,1
 4000fc8:	18800115 	stw	r2,4(r3)
 4000fcc:	008001c4 	movi	r2,7
 4000fd0:	19000015 	stw	r4,0(r3)
 4000fd4:	dc800e15 	stw	r18,56(sp)
 4000fd8:	dc400d15 	stw	r17,52(sp)
 4000fdc:	1441b616 	blt	r2,r17,40016b8 <___vfprintf_internal_r+0xe38>
 4000fe0:	1cc00204 	addi	r19,r3,8
 4000fe4:	d9014217 	ldw	r4,1288(sp)
 4000fe8:	d9414317 	ldw	r5,1292(sp)
 4000fec:	000d883a 	mov	r6,zero
 4000ff0:	000f883a 	mov	r7,zero
 4000ff4:	40090d00 	call	40090d0 <__nedf2>
 4000ff8:	10017426 	beq	r2,zero,40015cc <___vfprintf_internal_r+0xd4c>
 4000ffc:	d9414717 	ldw	r5,1308(sp)
 4001000:	d9814117 	ldw	r6,1284(sp)
 4001004:	8c400044 	addi	r17,r17,1
 4001008:	2c85883a 	add	r2,r5,r18
 400100c:	14bfffc4 	addi	r18,r2,-1
 4001010:	28bfffc4 	addi	r2,r5,-1
 4001014:	30c00044 	addi	r3,r6,1
 4001018:	98800115 	stw	r2,4(r19)
 400101c:	008001c4 	movi	r2,7
 4001020:	98c00015 	stw	r3,0(r19)
 4001024:	dc800e15 	stw	r18,56(sp)
 4001028:	dc400d15 	stw	r17,52(sp)
 400102c:	14418e16 	blt	r2,r17,4001668 <___vfprintf_internal_r+0xde8>
 4001030:	9cc00204 	addi	r19,r19,8
 4001034:	d9414817 	ldw	r5,1312(sp)
 4001038:	d8800804 	addi	r2,sp,32
 400103c:	8c400044 	addi	r17,r17,1
 4001040:	9165883a 	add	r18,r18,r5
 4001044:	98800015 	stw	r2,0(r19)
 4001048:	008001c4 	movi	r2,7
 400104c:	99400115 	stw	r5,4(r19)
 4001050:	dc800e15 	stw	r18,56(sp)
 4001054:	dc400d15 	stw	r17,52(sp)
 4001058:	1440ed16 	blt	r2,r17,4001410 <___vfprintf_internal_r+0xb90>
 400105c:	98c00204 	addi	r3,r19,8
 4001060:	003f8506 	br	4000e78 <___vfprintf_internal_r+0x5f8>
 4001064:	d9814a17 	ldw	r6,1320(sp)
 4001068:	d8814517 	ldw	r2,1300(sp)
 400106c:	30a1c83a 	sub	r16,r6,r2
 4001070:	043f4b0e 	bge	zero,r16,4000da0 <___vfprintf_internal_r+0x520>
 4001074:	00800404 	movi	r2,16
 4001078:	1404340e 	bge	r2,r16,400214c <___vfprintf_internal_r+0x18cc>
 400107c:	1027883a 	mov	r19,r2
 4001080:	07010074 	movhi	fp,1025
 4001084:	e719d184 	addi	fp,fp,26438
 4001088:	050001c4 	movi	r20,7
 400108c:	00000306 	br	400109c <___vfprintf_internal_r+0x81c>
 4001090:	843ffc04 	addi	r16,r16,-16
 4001094:	ad400204 	addi	r21,r21,8
 4001098:	9c00130e 	bge	r19,r16,40010e8 <___vfprintf_internal_r+0x868>
 400109c:	94800404 	addi	r18,r18,16
 40010a0:	8c400044 	addi	r17,r17,1
 40010a4:	af000015 	stw	fp,0(r21)
 40010a8:	acc00115 	stw	r19,4(r21)
 40010ac:	dc800e15 	stw	r18,56(sp)
 40010b0:	dc400d15 	stw	r17,52(sp)
 40010b4:	a47ff60e 	bge	r20,r17,4001090 <___vfprintf_internal_r+0x810>
 40010b8:	d9014f17 	ldw	r4,1340(sp)
 40010bc:	b00b883a 	mov	r5,r22
 40010c0:	d9800c04 	addi	r6,sp,48
 40010c4:	d9c15115 	stw	r7,1348(sp)
 40010c8:	40008280 	call	4000828 <__sprint_r>
 40010cc:	d9c15117 	ldw	r7,1348(sp)
 40010d0:	103fa31e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 40010d4:	843ffc04 	addi	r16,r16,-16
 40010d8:	dc800e17 	ldw	r18,56(sp)
 40010dc:	dc400d17 	ldw	r17,52(sp)
 40010e0:	dd401904 	addi	r21,sp,100
 40010e4:	9c3fed16 	blt	r19,r16,400109c <___vfprintf_internal_r+0x81c>
 40010e8:	9425883a 	add	r18,r18,r16
 40010ec:	8c400044 	addi	r17,r17,1
 40010f0:	008001c4 	movi	r2,7
 40010f4:	af000015 	stw	fp,0(r21)
 40010f8:	ac000115 	stw	r16,4(r21)
 40010fc:	dc800e15 	stw	r18,56(sp)
 4001100:	dc400d15 	stw	r17,52(sp)
 4001104:	14416116 	blt	r2,r17,400168c <___vfprintf_internal_r+0xe0c>
 4001108:	ad400204 	addi	r21,r21,8
 400110c:	003f2406 	br	4000da0 <___vfprintf_internal_r+0x520>
 4001110:	d9014f17 	ldw	r4,1340(sp)
 4001114:	40042f00 	call	40042f0 <__sinit>
 4001118:	d9c15117 	ldw	r7,1348(sp)
 400111c:	003def06 	br	40008dc <___vfprintf_internal_r+0x5c>
 4001120:	d9014f17 	ldw	r4,1340(sp)
 4001124:	b00b883a 	mov	r5,r22
 4001128:	d9c15115 	stw	r7,1348(sp)
 400112c:	40027500 	call	4002750 <__swsetup_r>
 4001130:	d9c15117 	ldw	r7,1348(sp)
 4001134:	103dee26 	beq	r2,zero,40008f0 <___vfprintf_internal_r+0x70>
 4001138:	003f8c06 	br	4000f6c <___vfprintf_internal_r+0x6ec>
 400113c:	d9014217 	ldw	r4,1288(sp)
 4001140:	d9414317 	ldw	r5,1292(sp)
 4001144:	000d883a 	mov	r6,zero
 4001148:	000f883a 	mov	r7,zero
 400114c:	40090480 	call	4009048 <__eqdf2>
 4001150:	1000f21e 	bne	r2,zero,400151c <___vfprintf_internal_r+0xc9c>
 4001154:	00810074 	movhi	r2,1025
 4001158:	1099d104 	addi	r2,r2,26436
 400115c:	94800044 	addi	r18,r18,1
 4001160:	8c400044 	addi	r17,r17,1
 4001164:	a8800015 	stw	r2,0(r21)
 4001168:	00c00044 	movi	r3,1
 400116c:	008001c4 	movi	r2,7
 4001170:	a8c00115 	stw	r3,4(r21)
 4001174:	dc800e15 	stw	r18,56(sp)
 4001178:	dc400d15 	stw	r17,52(sp)
 400117c:	1442fa16 	blt	r2,r17,4001d68 <___vfprintf_internal_r+0x14e8>
 4001180:	a8c00204 	addi	r3,r21,8
 4001184:	d8800517 	ldw	r2,20(sp)
 4001188:	d9014717 	ldw	r4,1308(sp)
 400118c:	11015c0e 	bge	r2,r4,4001700 <___vfprintf_internal_r+0xe80>
 4001190:	dc400d17 	ldw	r17,52(sp)
 4001194:	d9814917 	ldw	r6,1316(sp)
 4001198:	00800044 	movi	r2,1
 400119c:	94800044 	addi	r18,r18,1
 40011a0:	8c400044 	addi	r17,r17,1
 40011a4:	18800115 	stw	r2,4(r3)
 40011a8:	008001c4 	movi	r2,7
 40011ac:	19800015 	stw	r6,0(r3)
 40011b0:	dc800e15 	stw	r18,56(sp)
 40011b4:	dc400d15 	stw	r17,52(sp)
 40011b8:	14431016 	blt	r2,r17,4001dfc <___vfprintf_internal_r+0x157c>
 40011bc:	18c00204 	addi	r3,r3,8
 40011c0:	d8814717 	ldw	r2,1308(sp)
 40011c4:	143fffc4 	addi	r16,r2,-1
 40011c8:	043f2b0e 	bge	zero,r16,4000e78 <___vfprintf_internal_r+0x5f8>
 40011cc:	00800404 	movi	r2,16
 40011d0:	1402a20e 	bge	r2,r16,4001c5c <___vfprintf_internal_r+0x13dc>
 40011d4:	dc400d17 	ldw	r17,52(sp)
 40011d8:	1027883a 	mov	r19,r2
 40011dc:	07010074 	movhi	fp,1025
 40011e0:	e719d184 	addi	fp,fp,26438
 40011e4:	050001c4 	movi	r20,7
 40011e8:	00000306 	br	40011f8 <___vfprintf_internal_r+0x978>
 40011ec:	18c00204 	addi	r3,r3,8
 40011f0:	843ffc04 	addi	r16,r16,-16
 40011f4:	9c029c0e 	bge	r19,r16,4001c68 <___vfprintf_internal_r+0x13e8>
 40011f8:	94800404 	addi	r18,r18,16
 40011fc:	8c400044 	addi	r17,r17,1
 4001200:	1f000015 	stw	fp,0(r3)
 4001204:	1cc00115 	stw	r19,4(r3)
 4001208:	dc800e15 	stw	r18,56(sp)
 400120c:	dc400d15 	stw	r17,52(sp)
 4001210:	a47ff60e 	bge	r20,r17,40011ec <___vfprintf_internal_r+0x96c>
 4001214:	d9014f17 	ldw	r4,1340(sp)
 4001218:	b00b883a 	mov	r5,r22
 400121c:	d9800c04 	addi	r6,sp,48
 4001220:	40008280 	call	4000828 <__sprint_r>
 4001224:	103f4e1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4001228:	dc800e17 	ldw	r18,56(sp)
 400122c:	dc400d17 	ldw	r17,52(sp)
 4001230:	d8c01904 	addi	r3,sp,100
 4001234:	003fee06 	br	40011f0 <___vfprintf_internal_r+0x970>
 4001238:	d8802c0b 	ldhu	r2,176(sp)
 400123c:	00ffffc4 	movi	r3,-1
 4001240:	d8c14b15 	stw	r3,1324(sp)
 4001244:	1080100c 	andi	r2,r2,64
 4001248:	103dcc1e 	bne	r2,zero,400097c <___vfprintf_internal_r+0xfc>
 400124c:	003dce06 	br	4000988 <___vfprintf_internal_r+0x108>
 4001250:	d9014f17 	ldw	r4,1340(sp)
 4001254:	b00b883a 	mov	r5,r22
 4001258:	d9800c04 	addi	r6,sp,48
 400125c:	40008280 	call	4000828 <__sprint_r>
 4001260:	103f3f1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4001264:	dc800e17 	ldw	r18,56(sp)
 4001268:	003f2e06 	br	4000f24 <___vfprintf_internal_r+0x6a4>
 400126c:	d9414c17 	ldw	r5,1328(sp)
 4001270:	29400414 	ori	r5,r5,16
 4001274:	d9414c15 	stw	r5,1328(sp)
 4001278:	d9814c17 	ldw	r6,1328(sp)
 400127c:	3080080c 	andi	r2,r6,32
 4001280:	10014f1e 	bne	r2,zero,40017c0 <___vfprintf_internal_r+0xf40>
 4001284:	d8c14c17 	ldw	r3,1328(sp)
 4001288:	1880040c 	andi	r2,r3,16
 400128c:	1002ea1e 	bne	r2,zero,4001e38 <___vfprintf_internal_r+0x15b8>
 4001290:	d9014c17 	ldw	r4,1328(sp)
 4001294:	2080100c 	andi	r2,r4,64
 4001298:	1002e726 	beq	r2,zero,4001e38 <___vfprintf_internal_r+0x15b8>
 400129c:	3880000f 	ldh	r2,0(r7)
 40012a0:	39c00104 	addi	r7,r7,4
 40012a4:	d9c14015 	stw	r7,1280(sp)
 40012a8:	1023d7fa 	srai	r17,r2,31
 40012ac:	1021883a 	mov	r16,r2
 40012b0:	88037216 	blt	r17,zero,400207c <___vfprintf_internal_r+0x17fc>
 40012b4:	01000044 	movi	r4,1
 40012b8:	98000416 	blt	r19,zero,40012cc <___vfprintf_internal_r+0xa4c>
 40012bc:	d8c14c17 	ldw	r3,1328(sp)
 40012c0:	00bfdfc4 	movi	r2,-129
 40012c4:	1886703a 	and	r3,r3,r2
 40012c8:	d8c14c15 	stw	r3,1328(sp)
 40012cc:	8444b03a 	or	r2,r16,r17
 40012d0:	1002261e 	bne	r2,zero,4001b6c <___vfprintf_internal_r+0x12ec>
 40012d4:	9802251e 	bne	r19,zero,4001b6c <___vfprintf_internal_r+0x12ec>
 40012d8:	20803fcc 	andi	r2,r4,255
 40012dc:	10029b26 	beq	r2,zero,4001d4c <___vfprintf_internal_r+0x14cc>
 40012e0:	d8c01904 	addi	r3,sp,100
 40012e4:	dd000f04 	addi	r20,sp,60
 40012e8:	d8c14115 	stw	r3,1284(sp)
 40012ec:	d8c14117 	ldw	r3,1284(sp)
 40012f0:	dcc14515 	stw	r19,1300(sp)
 40012f4:	a0c5c83a 	sub	r2,r20,r3
 40012f8:	11c00a04 	addi	r7,r2,40
 40012fc:	99c0010e 	bge	r19,r7,4001304 <___vfprintf_internal_r+0xa84>
 4001300:	d9c14515 	stw	r7,1300(sp)
 4001304:	dcc14615 	stw	r19,1304(sp)
 4001308:	d8800407 	ldb	r2,16(sp)
 400130c:	103e4c26 	beq	r2,zero,4000c40 <___vfprintf_internal_r+0x3c0>
 4001310:	d8814517 	ldw	r2,1300(sp)
 4001314:	10800044 	addi	r2,r2,1
 4001318:	d8814515 	stw	r2,1300(sp)
 400131c:	003e4806 	br	4000c40 <___vfprintf_internal_r+0x3c0>
 4001320:	d9814c17 	ldw	r6,1328(sp)
 4001324:	31800414 	ori	r6,r6,16
 4001328:	d9814c15 	stw	r6,1328(sp)
 400132c:	d8c14c17 	ldw	r3,1328(sp)
 4001330:	1880080c 	andi	r2,r3,32
 4001334:	1001271e 	bne	r2,zero,40017d4 <___vfprintf_internal_r+0xf54>
 4001338:	d9414c17 	ldw	r5,1328(sp)
 400133c:	2880040c 	andi	r2,r5,16
 4001340:	1002b61e 	bne	r2,zero,4001e1c <___vfprintf_internal_r+0x159c>
 4001344:	d9814c17 	ldw	r6,1328(sp)
 4001348:	3080100c 	andi	r2,r6,64
 400134c:	1002b326 	beq	r2,zero,4001e1c <___vfprintf_internal_r+0x159c>
 4001350:	3c00000b 	ldhu	r16,0(r7)
 4001354:	0009883a 	mov	r4,zero
 4001358:	39c00104 	addi	r7,r7,4
 400135c:	0023883a 	mov	r17,zero
 4001360:	d9c14015 	stw	r7,1280(sp)
 4001364:	d8000405 	stb	zero,16(sp)
 4001368:	003fd306 	br	40012b8 <___vfprintf_internal_r+0xa38>
 400136c:	d9014c17 	ldw	r4,1328(sp)
 4001370:	21000414 	ori	r4,r4,16
 4001374:	d9014c15 	stw	r4,1328(sp)
 4001378:	d9414c17 	ldw	r5,1328(sp)
 400137c:	2880080c 	andi	r2,r5,32
 4001380:	1001081e 	bne	r2,zero,40017a4 <___vfprintf_internal_r+0xf24>
 4001384:	d8c14c17 	ldw	r3,1328(sp)
 4001388:	1880040c 	andi	r2,r3,16
 400138c:	1002b01e 	bne	r2,zero,4001e50 <___vfprintf_internal_r+0x15d0>
 4001390:	d9014c17 	ldw	r4,1328(sp)
 4001394:	2080100c 	andi	r2,r4,64
 4001398:	1002ad26 	beq	r2,zero,4001e50 <___vfprintf_internal_r+0x15d0>
 400139c:	3c00000b 	ldhu	r16,0(r7)
 40013a0:	01000044 	movi	r4,1
 40013a4:	39c00104 	addi	r7,r7,4
 40013a8:	0023883a 	mov	r17,zero
 40013ac:	d9c14015 	stw	r7,1280(sp)
 40013b0:	d8000405 	stb	zero,16(sp)
 40013b4:	003fc006 	br	40012b8 <___vfprintf_internal_r+0xa38>
 40013b8:	d9014f17 	ldw	r4,1340(sp)
 40013bc:	b00b883a 	mov	r5,r22
 40013c0:	d9800c04 	addi	r6,sp,48
 40013c4:	40008280 	call	4000828 <__sprint_r>
 40013c8:	103ee51e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 40013cc:	dc800e17 	ldw	r18,56(sp)
 40013d0:	d8c01904 	addi	r3,sp,100
 40013d4:	d9814c17 	ldw	r6,1328(sp)
 40013d8:	3080004c 	andi	r2,r6,1
 40013dc:	1005003a 	cmpeq	r2,r2,zero
 40013e0:	103ea51e 	bne	r2,zero,4000e78 <___vfprintf_internal_r+0x5f8>
 40013e4:	00800044 	movi	r2,1
 40013e8:	dc400d17 	ldw	r17,52(sp)
 40013ec:	18800115 	stw	r2,4(r3)
 40013f0:	d8814917 	ldw	r2,1316(sp)
 40013f4:	94800044 	addi	r18,r18,1
 40013f8:	8c400044 	addi	r17,r17,1
 40013fc:	18800015 	stw	r2,0(r3)
 4001400:	008001c4 	movi	r2,7
 4001404:	dc800e15 	stw	r18,56(sp)
 4001408:	dc400d15 	stw	r17,52(sp)
 400140c:	14421e0e 	bge	r2,r17,4001c88 <___vfprintf_internal_r+0x1408>
 4001410:	d9014f17 	ldw	r4,1340(sp)
 4001414:	b00b883a 	mov	r5,r22
 4001418:	d9800c04 	addi	r6,sp,48
 400141c:	40008280 	call	4000828 <__sprint_r>
 4001420:	103ecf1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4001424:	dc800e17 	ldw	r18,56(sp)
 4001428:	d8c01904 	addi	r3,sp,100
 400142c:	003e9206 	br	4000e78 <___vfprintf_internal_r+0x5f8>
 4001430:	d9014f17 	ldw	r4,1340(sp)
 4001434:	b00b883a 	mov	r5,r22
 4001438:	d9800c04 	addi	r6,sp,48
 400143c:	40008280 	call	4000828 <__sprint_r>
 4001440:	103ec026 	beq	r2,zero,4000f44 <___vfprintf_internal_r+0x6c4>
 4001444:	003ec606 	br	4000f60 <___vfprintf_internal_r+0x6e0>
 4001448:	d9014f17 	ldw	r4,1340(sp)
 400144c:	b00b883a 	mov	r5,r22
 4001450:	d9800c04 	addi	r6,sp,48
 4001454:	d9c15115 	stw	r7,1348(sp)
 4001458:	40008280 	call	4000828 <__sprint_r>
 400145c:	d9c15117 	ldw	r7,1348(sp)
 4001460:	103ebf1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4001464:	dc800e17 	ldw	r18,56(sp)
 4001468:	dc400d17 	ldw	r17,52(sp)
 400146c:	dd401904 	addi	r21,sp,100
 4001470:	003e7406 	br	4000e44 <___vfprintf_internal_r+0x5c4>
 4001474:	d9014f17 	ldw	r4,1340(sp)
 4001478:	b00b883a 	mov	r5,r22
 400147c:	d9800c04 	addi	r6,sp,48
 4001480:	d9c15115 	stw	r7,1348(sp)
 4001484:	40008280 	call	4000828 <__sprint_r>
 4001488:	d9c15117 	ldw	r7,1348(sp)
 400148c:	103eb41e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4001490:	dd401904 	addi	r21,sp,100
 4001494:	003d6d06 	br	4000a4c <___vfprintf_internal_r+0x1cc>
 4001498:	d9014f17 	ldw	r4,1340(sp)
 400149c:	b00b883a 	mov	r5,r22
 40014a0:	d9800c04 	addi	r6,sp,48
 40014a4:	d9c15115 	stw	r7,1348(sp)
 40014a8:	40008280 	call	4000828 <__sprint_r>
 40014ac:	d9c15117 	ldw	r7,1348(sp)
 40014b0:	103eab1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 40014b4:	dc800e17 	ldw	r18,56(sp)
 40014b8:	dc400d17 	ldw	r17,52(sp)
 40014bc:	dd401904 	addi	r21,sp,100
 40014c0:	003e3406 	br	4000d94 <___vfprintf_internal_r+0x514>
 40014c4:	d9014f17 	ldw	r4,1340(sp)
 40014c8:	b00b883a 	mov	r5,r22
 40014cc:	d9800c04 	addi	r6,sp,48
 40014d0:	d9c15115 	stw	r7,1348(sp)
 40014d4:	40008280 	call	4000828 <__sprint_r>
 40014d8:	d9c15117 	ldw	r7,1348(sp)
 40014dc:	103ea01e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 40014e0:	dc800e17 	ldw	r18,56(sp)
 40014e4:	dc400d17 	ldw	r17,52(sp)
 40014e8:	dd401904 	addi	r21,sp,100
 40014ec:	003e1c06 	br	4000d60 <___vfprintf_internal_r+0x4e0>
 40014f0:	d9014f17 	ldw	r4,1340(sp)
 40014f4:	b00b883a 	mov	r5,r22
 40014f8:	d9800c04 	addi	r6,sp,48
 40014fc:	d9c15115 	stw	r7,1348(sp)
 4001500:	40008280 	call	4000828 <__sprint_r>
 4001504:	d9c15117 	ldw	r7,1348(sp)
 4001508:	103e951e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 400150c:	dc800e17 	ldw	r18,56(sp)
 4001510:	dc400d17 	ldw	r17,52(sp)
 4001514:	dd401904 	addi	r21,sp,100
 4001518:	003e0406 	br	4000d2c <___vfprintf_internal_r+0x4ac>
 400151c:	d9000517 	ldw	r4,20(sp)
 4001520:	0102520e 	bge	zero,r4,4001e6c <___vfprintf_internal_r+0x15ec>
 4001524:	d9814717 	ldw	r6,1308(sp)
 4001528:	21807a16 	blt	r4,r6,4001714 <___vfprintf_internal_r+0xe94>
 400152c:	d8814117 	ldw	r2,1284(sp)
 4001530:	91a5883a 	add	r18,r18,r6
 4001534:	8c400044 	addi	r17,r17,1
 4001538:	a8800015 	stw	r2,0(r21)
 400153c:	008001c4 	movi	r2,7
 4001540:	a9800115 	stw	r6,4(r21)
 4001544:	dc800e15 	stw	r18,56(sp)
 4001548:	dc400d15 	stw	r17,52(sp)
 400154c:	1442f616 	blt	r2,r17,4002128 <___vfprintf_internal_r+0x18a8>
 4001550:	a8c00204 	addi	r3,r21,8
 4001554:	d9414717 	ldw	r5,1308(sp)
 4001558:	2161c83a 	sub	r16,r4,r5
 400155c:	043f9d0e 	bge	zero,r16,40013d4 <___vfprintf_internal_r+0xb54>
 4001560:	00800404 	movi	r2,16
 4001564:	1402130e 	bge	r2,r16,4001db4 <___vfprintf_internal_r+0x1534>
 4001568:	dc400d17 	ldw	r17,52(sp)
 400156c:	1027883a 	mov	r19,r2
 4001570:	07010074 	movhi	fp,1025
 4001574:	e719d184 	addi	fp,fp,26438
 4001578:	050001c4 	movi	r20,7
 400157c:	00000306 	br	400158c <___vfprintf_internal_r+0xd0c>
 4001580:	18c00204 	addi	r3,r3,8
 4001584:	843ffc04 	addi	r16,r16,-16
 4001588:	9c020d0e 	bge	r19,r16,4001dc0 <___vfprintf_internal_r+0x1540>
 400158c:	94800404 	addi	r18,r18,16
 4001590:	8c400044 	addi	r17,r17,1
 4001594:	1f000015 	stw	fp,0(r3)
 4001598:	1cc00115 	stw	r19,4(r3)
 400159c:	dc800e15 	stw	r18,56(sp)
 40015a0:	dc400d15 	stw	r17,52(sp)
 40015a4:	a47ff60e 	bge	r20,r17,4001580 <___vfprintf_internal_r+0xd00>
 40015a8:	d9014f17 	ldw	r4,1340(sp)
 40015ac:	b00b883a 	mov	r5,r22
 40015b0:	d9800c04 	addi	r6,sp,48
 40015b4:	40008280 	call	4000828 <__sprint_r>
 40015b8:	103e691e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 40015bc:	dc800e17 	ldw	r18,56(sp)
 40015c0:	dc400d17 	ldw	r17,52(sp)
 40015c4:	d8c01904 	addi	r3,sp,100
 40015c8:	003fee06 	br	4001584 <___vfprintf_internal_r+0xd04>
 40015cc:	d8814717 	ldw	r2,1308(sp)
 40015d0:	143fffc4 	addi	r16,r2,-1
 40015d4:	043e970e 	bge	zero,r16,4001034 <___vfprintf_internal_r+0x7b4>
 40015d8:	00800404 	movi	r2,16
 40015dc:	1400180e 	bge	r2,r16,4001640 <___vfprintf_internal_r+0xdc0>
 40015e0:	1029883a 	mov	r20,r2
 40015e4:	07010074 	movhi	fp,1025
 40015e8:	e719d184 	addi	fp,fp,26438
 40015ec:	054001c4 	movi	r21,7
 40015f0:	00000306 	br	4001600 <___vfprintf_internal_r+0xd80>
 40015f4:	9cc00204 	addi	r19,r19,8
 40015f8:	843ffc04 	addi	r16,r16,-16
 40015fc:	a400120e 	bge	r20,r16,4001648 <___vfprintf_internal_r+0xdc8>
 4001600:	94800404 	addi	r18,r18,16
 4001604:	8c400044 	addi	r17,r17,1
 4001608:	9f000015 	stw	fp,0(r19)
 400160c:	9d000115 	stw	r20,4(r19)
 4001610:	dc800e15 	stw	r18,56(sp)
 4001614:	dc400d15 	stw	r17,52(sp)
 4001618:	ac7ff60e 	bge	r21,r17,40015f4 <___vfprintf_internal_r+0xd74>
 400161c:	d9014f17 	ldw	r4,1340(sp)
 4001620:	b00b883a 	mov	r5,r22
 4001624:	d9800c04 	addi	r6,sp,48
 4001628:	40008280 	call	4000828 <__sprint_r>
 400162c:	103e4c1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4001630:	dc800e17 	ldw	r18,56(sp)
 4001634:	dc400d17 	ldw	r17,52(sp)
 4001638:	dcc01904 	addi	r19,sp,100
 400163c:	003fee06 	br	40015f8 <___vfprintf_internal_r+0xd78>
 4001640:	07010074 	movhi	fp,1025
 4001644:	e719d184 	addi	fp,fp,26438
 4001648:	9425883a 	add	r18,r18,r16
 400164c:	8c400044 	addi	r17,r17,1
 4001650:	008001c4 	movi	r2,7
 4001654:	9f000015 	stw	fp,0(r19)
 4001658:	9c000115 	stw	r16,4(r19)
 400165c:	dc800e15 	stw	r18,56(sp)
 4001660:	dc400d15 	stw	r17,52(sp)
 4001664:	147e720e 	bge	r2,r17,4001030 <___vfprintf_internal_r+0x7b0>
 4001668:	d9014f17 	ldw	r4,1340(sp)
 400166c:	b00b883a 	mov	r5,r22
 4001670:	d9800c04 	addi	r6,sp,48
 4001674:	40008280 	call	4000828 <__sprint_r>
 4001678:	103e391e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 400167c:	dc800e17 	ldw	r18,56(sp)
 4001680:	dc400d17 	ldw	r17,52(sp)
 4001684:	dcc01904 	addi	r19,sp,100
 4001688:	003e6a06 	br	4001034 <___vfprintf_internal_r+0x7b4>
 400168c:	d9014f17 	ldw	r4,1340(sp)
 4001690:	b00b883a 	mov	r5,r22
 4001694:	d9800c04 	addi	r6,sp,48
 4001698:	d9c15115 	stw	r7,1348(sp)
 400169c:	40008280 	call	4000828 <__sprint_r>
 40016a0:	d9c15117 	ldw	r7,1348(sp)
 40016a4:	103e2e1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 40016a8:	dc800e17 	ldw	r18,56(sp)
 40016ac:	dc400d17 	ldw	r17,52(sp)
 40016b0:	dd401904 	addi	r21,sp,100
 40016b4:	003dba06 	br	4000da0 <___vfprintf_internal_r+0x520>
 40016b8:	d9014f17 	ldw	r4,1340(sp)
 40016bc:	b00b883a 	mov	r5,r22
 40016c0:	d9800c04 	addi	r6,sp,48
 40016c4:	40008280 	call	4000828 <__sprint_r>
 40016c8:	103e251e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 40016cc:	dc800e17 	ldw	r18,56(sp)
 40016d0:	dc400d17 	ldw	r17,52(sp)
 40016d4:	dcc01904 	addi	r19,sp,100
 40016d8:	003e4206 	br	4000fe4 <___vfprintf_internal_r+0x764>
 40016dc:	d9014f17 	ldw	r4,1340(sp)
 40016e0:	b00b883a 	mov	r5,r22
 40016e4:	d9800c04 	addi	r6,sp,48
 40016e8:	40008280 	call	4000828 <__sprint_r>
 40016ec:	103e1c1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 40016f0:	dc800e17 	ldw	r18,56(sp)
 40016f4:	dc400d17 	ldw	r17,52(sp)
 40016f8:	d8c01904 	addi	r3,sp,100
 40016fc:	003e2e06 	br	4000fb8 <___vfprintf_internal_r+0x738>
 4001700:	d9414c17 	ldw	r5,1328(sp)
 4001704:	2880004c 	andi	r2,r5,1
 4001708:	1005003a 	cmpeq	r2,r2,zero
 400170c:	103dda1e 	bne	r2,zero,4000e78 <___vfprintf_internal_r+0x5f8>
 4001710:	003e9f06 	br	4001190 <___vfprintf_internal_r+0x910>
 4001714:	d8c14117 	ldw	r3,1284(sp)
 4001718:	9125883a 	add	r18,r18,r4
 400171c:	8c400044 	addi	r17,r17,1
 4001720:	008001c4 	movi	r2,7
 4001724:	a8c00015 	stw	r3,0(r21)
 4001728:	a9000115 	stw	r4,4(r21)
 400172c:	dc800e15 	stw	r18,56(sp)
 4001730:	dc400d15 	stw	r17,52(sp)
 4001734:	14426616 	blt	r2,r17,40020d0 <___vfprintf_internal_r+0x1850>
 4001738:	a8c00204 	addi	r3,r21,8
 400173c:	d9414917 	ldw	r5,1316(sp)
 4001740:	00800044 	movi	r2,1
 4001744:	94800044 	addi	r18,r18,1
 4001748:	8c400044 	addi	r17,r17,1
 400174c:	18800115 	stw	r2,4(r3)
 4001750:	008001c4 	movi	r2,7
 4001754:	19400015 	stw	r5,0(r3)
 4001758:	dc800e15 	stw	r18,56(sp)
 400175c:	dc400d15 	stw	r17,52(sp)
 4001760:	2021883a 	mov	r16,r4
 4001764:	14425016 	blt	r2,r17,40020a8 <___vfprintf_internal_r+0x1828>
 4001768:	19400204 	addi	r5,r3,8
 400176c:	d9814717 	ldw	r6,1308(sp)
 4001770:	8c400044 	addi	r17,r17,1
 4001774:	dc400d15 	stw	r17,52(sp)
 4001778:	3107c83a 	sub	r3,r6,r4
 400177c:	d9014117 	ldw	r4,1284(sp)
 4001780:	90e5883a 	add	r18,r18,r3
 4001784:	28c00115 	stw	r3,4(r5)
 4001788:	8105883a 	add	r2,r16,r4
 400178c:	28800015 	stw	r2,0(r5)
 4001790:	008001c4 	movi	r2,7
 4001794:	dc800e15 	stw	r18,56(sp)
 4001798:	147f1d16 	blt	r2,r17,4001410 <___vfprintf_internal_r+0xb90>
 400179c:	28c00204 	addi	r3,r5,8
 40017a0:	003db506 	br	4000e78 <___vfprintf_internal_r+0x5f8>
 40017a4:	3c000017 	ldw	r16,0(r7)
 40017a8:	3c400117 	ldw	r17,4(r7)
 40017ac:	39800204 	addi	r6,r7,8
 40017b0:	01000044 	movi	r4,1
 40017b4:	d9814015 	stw	r6,1280(sp)
 40017b8:	d8000405 	stb	zero,16(sp)
 40017bc:	003ebe06 	br	40012b8 <___vfprintf_internal_r+0xa38>
 40017c0:	3c000017 	ldw	r16,0(r7)
 40017c4:	3c400117 	ldw	r17,4(r7)
 40017c8:	38800204 	addi	r2,r7,8
 40017cc:	d8814015 	stw	r2,1280(sp)
 40017d0:	003eb706 	br	40012b0 <___vfprintf_internal_r+0xa30>
 40017d4:	3c000017 	ldw	r16,0(r7)
 40017d8:	3c400117 	ldw	r17,4(r7)
 40017dc:	39000204 	addi	r4,r7,8
 40017e0:	d9014015 	stw	r4,1280(sp)
 40017e4:	0009883a 	mov	r4,zero
 40017e8:	d8000405 	stb	zero,16(sp)
 40017ec:	003eb206 	br	40012b8 <___vfprintf_internal_r+0xa38>
 40017f0:	38c00017 	ldw	r3,0(r7)
 40017f4:	39c00104 	addi	r7,r7,4
 40017f8:	d8c14a15 	stw	r3,1320(sp)
 40017fc:	1800d10e 	bge	r3,zero,4001b44 <___vfprintf_internal_r+0x12c4>
 4001800:	00c7c83a 	sub	r3,zero,r3
 4001804:	d8c14a15 	stw	r3,1320(sp)
 4001808:	d9014c17 	ldw	r4,1328(sp)
 400180c:	b8c00007 	ldb	r3,0(r23)
 4001810:	21000114 	ori	r4,r4,4
 4001814:	d9014c15 	stw	r4,1328(sp)
 4001818:	003c9806 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 400181c:	d9814c17 	ldw	r6,1328(sp)
 4001820:	3080080c 	andi	r2,r6,32
 4001824:	1001f026 	beq	r2,zero,4001fe8 <___vfprintf_internal_r+0x1768>
 4001828:	d9014b17 	ldw	r4,1324(sp)
 400182c:	38800017 	ldw	r2,0(r7)
 4001830:	39c00104 	addi	r7,r7,4
 4001834:	d9c14015 	stw	r7,1280(sp)
 4001838:	2007d7fa 	srai	r3,r4,31
 400183c:	d9c14017 	ldw	r7,1280(sp)
 4001840:	11000015 	stw	r4,0(r2)
 4001844:	10c00115 	stw	r3,4(r2)
 4001848:	003c6906 	br	40009f0 <___vfprintf_internal_r+0x170>
 400184c:	b8c00007 	ldb	r3,0(r23)
 4001850:	00801b04 	movi	r2,108
 4001854:	18824f26 	beq	r3,r2,4002194 <___vfprintf_internal_r+0x1914>
 4001858:	d9414c17 	ldw	r5,1328(sp)
 400185c:	29400414 	ori	r5,r5,16
 4001860:	d9414c15 	stw	r5,1328(sp)
 4001864:	003c8506 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 4001868:	d9814c17 	ldw	r6,1328(sp)
 400186c:	b8c00007 	ldb	r3,0(r23)
 4001870:	31800814 	ori	r6,r6,32
 4001874:	d9814c15 	stw	r6,1328(sp)
 4001878:	003c8006 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 400187c:	d8814c17 	ldw	r2,1328(sp)
 4001880:	3c000017 	ldw	r16,0(r7)
 4001884:	00c01e04 	movi	r3,120
 4001888:	10800094 	ori	r2,r2,2
 400188c:	d8814c15 	stw	r2,1328(sp)
 4001890:	39c00104 	addi	r7,r7,4
 4001894:	01410074 	movhi	r5,1025
 4001898:	2959ba04 	addi	r5,r5,26344
 400189c:	00800c04 	movi	r2,48
 40018a0:	0023883a 	mov	r17,zero
 40018a4:	01000084 	movi	r4,2
 40018a8:	d9c14015 	stw	r7,1280(sp)
 40018ac:	d8c14d15 	stw	r3,1332(sp)
 40018b0:	d9414415 	stw	r5,1296(sp)
 40018b4:	d8800445 	stb	r2,17(sp)
 40018b8:	d8c00485 	stb	r3,18(sp)
 40018bc:	d8000405 	stb	zero,16(sp)
 40018c0:	003e7d06 	br	40012b8 <___vfprintf_internal_r+0xa38>
 40018c4:	d8814c17 	ldw	r2,1328(sp)
 40018c8:	b8c00007 	ldb	r3,0(r23)
 40018cc:	10801014 	ori	r2,r2,64
 40018d0:	d8814c15 	stw	r2,1328(sp)
 40018d4:	003c6906 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 40018d8:	d9414c17 	ldw	r5,1328(sp)
 40018dc:	2880020c 	andi	r2,r5,8
 40018e0:	1001df26 	beq	r2,zero,4002060 <___vfprintf_internal_r+0x17e0>
 40018e4:	39800017 	ldw	r6,0(r7)
 40018e8:	38800204 	addi	r2,r7,8
 40018ec:	d8814015 	stw	r2,1280(sp)
 40018f0:	d9814215 	stw	r6,1288(sp)
 40018f4:	39c00117 	ldw	r7,4(r7)
 40018f8:	d9c14315 	stw	r7,1292(sp)
 40018fc:	d9014217 	ldw	r4,1288(sp)
 4001900:	d9414317 	ldw	r5,1292(sp)
 4001904:	40072200 	call	4007220 <__isinfd>
 4001908:	10021726 	beq	r2,zero,4002168 <___vfprintf_internal_r+0x18e8>
 400190c:	d9014217 	ldw	r4,1288(sp)
 4001910:	d9414317 	ldw	r5,1292(sp)
 4001914:	000d883a 	mov	r6,zero
 4001918:	000f883a 	mov	r7,zero
 400191c:	40092680 	call	4009268 <__ltdf2>
 4001920:	1002ca16 	blt	r2,zero,400244c <___vfprintf_internal_r+0x1bcc>
 4001924:	d9414d17 	ldw	r5,1332(sp)
 4001928:	008011c4 	movi	r2,71
 400192c:	11420a16 	blt	r2,r5,4002158 <___vfprintf_internal_r+0x18d8>
 4001930:	01810074 	movhi	r6,1025
 4001934:	3199bf04 	addi	r6,r6,26364
 4001938:	d9814115 	stw	r6,1284(sp)
 400193c:	d9014c17 	ldw	r4,1328(sp)
 4001940:	00c000c4 	movi	r3,3
 4001944:	00bfdfc4 	movi	r2,-129
 4001948:	2088703a 	and	r4,r4,r2
 400194c:	180f883a 	mov	r7,r3
 4001950:	d8c14515 	stw	r3,1300(sp)
 4001954:	d9014c15 	stw	r4,1328(sp)
 4001958:	d8014615 	stw	zero,1304(sp)
 400195c:	003e6a06 	br	4001308 <___vfprintf_internal_r+0xa88>
 4001960:	38800017 	ldw	r2,0(r7)
 4001964:	00c00044 	movi	r3,1
 4001968:	39c00104 	addi	r7,r7,4
 400196c:	d9c14015 	stw	r7,1280(sp)
 4001970:	d9000f04 	addi	r4,sp,60
 4001974:	180f883a 	mov	r7,r3
 4001978:	d8c14515 	stw	r3,1300(sp)
 400197c:	d9014115 	stw	r4,1284(sp)
 4001980:	d8800f05 	stb	r2,60(sp)
 4001984:	d8000405 	stb	zero,16(sp)
 4001988:	003cac06 	br	4000c3c <___vfprintf_internal_r+0x3bc>
 400198c:	01410074 	movhi	r5,1025
 4001990:	2959c504 	addi	r5,r5,26388
 4001994:	d9414415 	stw	r5,1296(sp)
 4001998:	d9814c17 	ldw	r6,1328(sp)
 400199c:	3080080c 	andi	r2,r6,32
 40019a0:	1000f926 	beq	r2,zero,4001d88 <___vfprintf_internal_r+0x1508>
 40019a4:	3c000017 	ldw	r16,0(r7)
 40019a8:	3c400117 	ldw	r17,4(r7)
 40019ac:	38800204 	addi	r2,r7,8
 40019b0:	d8814015 	stw	r2,1280(sp)
 40019b4:	d9414c17 	ldw	r5,1328(sp)
 40019b8:	2880004c 	andi	r2,r5,1
 40019bc:	1005003a 	cmpeq	r2,r2,zero
 40019c0:	1000b31e 	bne	r2,zero,4001c90 <___vfprintf_internal_r+0x1410>
 40019c4:	8444b03a 	or	r2,r16,r17
 40019c8:	1000b126 	beq	r2,zero,4001c90 <___vfprintf_internal_r+0x1410>
 40019cc:	d9814d17 	ldw	r6,1332(sp)
 40019d0:	29400094 	ori	r5,r5,2
 40019d4:	00800c04 	movi	r2,48
 40019d8:	01000084 	movi	r4,2
 40019dc:	d9414c15 	stw	r5,1328(sp)
 40019e0:	d8800445 	stb	r2,17(sp)
 40019e4:	d9800485 	stb	r6,18(sp)
 40019e8:	d8000405 	stb	zero,16(sp)
 40019ec:	003e3206 	br	40012b8 <___vfprintf_internal_r+0xa38>
 40019f0:	01810074 	movhi	r6,1025
 40019f4:	3199ba04 	addi	r6,r6,26344
 40019f8:	d9814415 	stw	r6,1296(sp)
 40019fc:	003fe606 	br	4001998 <___vfprintf_internal_r+0x1118>
 4001a00:	00800ac4 	movi	r2,43
 4001a04:	d8800405 	stb	r2,16(sp)
 4001a08:	b8c00007 	ldb	r3,0(r23)
 4001a0c:	003c1b06 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 4001a10:	d8814c17 	ldw	r2,1328(sp)
 4001a14:	b8c00007 	ldb	r3,0(r23)
 4001a18:	10800054 	ori	r2,r2,1
 4001a1c:	d8814c15 	stw	r2,1328(sp)
 4001a20:	003c1606 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 4001a24:	d8800407 	ldb	r2,16(sp)
 4001a28:	1000461e 	bne	r2,zero,4001b44 <___vfprintf_internal_r+0x12c4>
 4001a2c:	00800804 	movi	r2,32
 4001a30:	d8800405 	stb	r2,16(sp)
 4001a34:	b8c00007 	ldb	r3,0(r23)
 4001a38:	003c1006 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 4001a3c:	d9814c17 	ldw	r6,1328(sp)
 4001a40:	b8c00007 	ldb	r3,0(r23)
 4001a44:	31800214 	ori	r6,r6,8
 4001a48:	d9814c15 	stw	r6,1328(sp)
 4001a4c:	003c0b06 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 4001a50:	0007883a 	mov	r3,zero
 4001a54:	01000244 	movi	r4,9
 4001a58:	188002a4 	muli	r2,r3,10
 4001a5c:	b8c00007 	ldb	r3,0(r23)
 4001a60:	d9814d17 	ldw	r6,1332(sp)
 4001a64:	bdc00044 	addi	r23,r23,1
 4001a68:	d8c14d15 	stw	r3,1332(sp)
 4001a6c:	d9414d17 	ldw	r5,1332(sp)
 4001a70:	3085883a 	add	r2,r6,r2
 4001a74:	10fff404 	addi	r3,r2,-48
 4001a78:	28bff404 	addi	r2,r5,-48
 4001a7c:	20bff62e 	bgeu	r4,r2,4001a58 <___vfprintf_internal_r+0x11d8>
 4001a80:	d8c14a15 	stw	r3,1320(sp)
 4001a84:	003bff06 	br	4000a84 <___vfprintf_internal_r+0x204>
 4001a88:	d9414c17 	ldw	r5,1328(sp)
 4001a8c:	b8c00007 	ldb	r3,0(r23)
 4001a90:	29402014 	ori	r5,r5,128
 4001a94:	d9414c15 	stw	r5,1328(sp)
 4001a98:	003bf806 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 4001a9c:	b8c00007 	ldb	r3,0(r23)
 4001aa0:	00800a84 	movi	r2,42
 4001aa4:	bdc00044 	addi	r23,r23,1
 4001aa8:	18831526 	beq	r3,r2,4002700 <___vfprintf_internal_r+0x1e80>
 4001aac:	d8c14d15 	stw	r3,1332(sp)
 4001ab0:	18bff404 	addi	r2,r3,-48
 4001ab4:	00c00244 	movi	r3,9
 4001ab8:	18827836 	bltu	r3,r2,400249c <___vfprintf_internal_r+0x1c1c>
 4001abc:	000d883a 	mov	r6,zero
 4001ac0:	308002a4 	muli	r2,r6,10
 4001ac4:	b9800007 	ldb	r6,0(r23)
 4001ac8:	d9414d17 	ldw	r5,1332(sp)
 4001acc:	bdc00044 	addi	r23,r23,1
 4001ad0:	d9814d15 	stw	r6,1332(sp)
 4001ad4:	d9014d17 	ldw	r4,1332(sp)
 4001ad8:	1145883a 	add	r2,r2,r5
 4001adc:	11bff404 	addi	r6,r2,-48
 4001ae0:	20bff404 	addi	r2,r4,-48
 4001ae4:	18bff62e 	bgeu	r3,r2,4001ac0 <___vfprintf_internal_r+0x1240>
 4001ae8:	3027883a 	mov	r19,r6
 4001aec:	303be50e 	bge	r6,zero,4000a84 <___vfprintf_internal_r+0x204>
 4001af0:	04ffffc4 	movi	r19,-1
 4001af4:	003be306 	br	4000a84 <___vfprintf_internal_r+0x204>
 4001af8:	d8000405 	stb	zero,16(sp)
 4001afc:	39800017 	ldw	r6,0(r7)
 4001b00:	39c00104 	addi	r7,r7,4
 4001b04:	d9c14015 	stw	r7,1280(sp)
 4001b08:	d9814115 	stw	r6,1284(sp)
 4001b0c:	3001c926 	beq	r6,zero,4002234 <___vfprintf_internal_r+0x19b4>
 4001b10:	98000e16 	blt	r19,zero,4001b4c <___vfprintf_internal_r+0x12cc>
 4001b14:	d9014117 	ldw	r4,1284(sp)
 4001b18:	000b883a 	mov	r5,zero
 4001b1c:	980d883a 	mov	r6,r19
 4001b20:	400593c0 	call	400593c <memchr>
 4001b24:	10025926 	beq	r2,zero,400248c <___vfprintf_internal_r+0x1c0c>
 4001b28:	d8c14117 	ldw	r3,1284(sp)
 4001b2c:	10cfc83a 	sub	r7,r2,r3
 4001b30:	99c19e16 	blt	r19,r7,40021ac <___vfprintf_internal_r+0x192c>
 4001b34:	d9c14515 	stw	r7,1300(sp)
 4001b38:	38000916 	blt	r7,zero,4001b60 <___vfprintf_internal_r+0x12e0>
 4001b3c:	d8014615 	stw	zero,1304(sp)
 4001b40:	003df106 	br	4001308 <___vfprintf_internal_r+0xa88>
 4001b44:	b8c00007 	ldb	r3,0(r23)
 4001b48:	003bcc06 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 4001b4c:	d9014117 	ldw	r4,1284(sp)
 4001b50:	40007b40 	call	40007b4 <strlen>
 4001b54:	d8814515 	stw	r2,1300(sp)
 4001b58:	100f883a 	mov	r7,r2
 4001b5c:	103ff70e 	bge	r2,zero,4001b3c <___vfprintf_internal_r+0x12bc>
 4001b60:	d8014515 	stw	zero,1300(sp)
 4001b64:	d8014615 	stw	zero,1304(sp)
 4001b68:	003de706 	br	4001308 <___vfprintf_internal_r+0xa88>
 4001b6c:	20c03fcc 	andi	r3,r4,255
 4001b70:	00800044 	movi	r2,1
 4001b74:	18802d26 	beq	r3,r2,4001c2c <___vfprintf_internal_r+0x13ac>
 4001b78:	18800e36 	bltu	r3,r2,4001bb4 <___vfprintf_internal_r+0x1334>
 4001b7c:	00800084 	movi	r2,2
 4001b80:	1880fa26 	beq	r3,r2,4001f6c <___vfprintf_internal_r+0x16ec>
 4001b84:	01010074 	movhi	r4,1025
 4001b88:	2119ca04 	addi	r4,r4,26408
 4001b8c:	40007b40 	call	40007b4 <strlen>
 4001b90:	100f883a 	mov	r7,r2
 4001b94:	dcc14515 	stw	r19,1300(sp)
 4001b98:	9880010e 	bge	r19,r2,4001ba0 <___vfprintf_internal_r+0x1320>
 4001b9c:	d8814515 	stw	r2,1300(sp)
 4001ba0:	00810074 	movhi	r2,1025
 4001ba4:	1099ca04 	addi	r2,r2,26408
 4001ba8:	dcc14615 	stw	r19,1304(sp)
 4001bac:	d8814115 	stw	r2,1284(sp)
 4001bb0:	003dd506 	br	4001308 <___vfprintf_internal_r+0xa88>
 4001bb4:	d9401904 	addi	r5,sp,100
 4001bb8:	dd000f04 	addi	r20,sp,60
 4001bbc:	d9414115 	stw	r5,1284(sp)
 4001bc0:	880a977a 	slli	r5,r17,29
 4001bc4:	d9814117 	ldw	r6,1284(sp)
 4001bc8:	8004d0fa 	srli	r2,r16,3
 4001bcc:	8806d0fa 	srli	r3,r17,3
 4001bd0:	810001cc 	andi	r4,r16,7
 4001bd4:	2884b03a 	or	r2,r5,r2
 4001bd8:	31bfffc4 	addi	r6,r6,-1
 4001bdc:	21000c04 	addi	r4,r4,48
 4001be0:	d9814115 	stw	r6,1284(sp)
 4001be4:	10cab03a 	or	r5,r2,r3
 4001be8:	31000005 	stb	r4,0(r6)
 4001bec:	1021883a 	mov	r16,r2
 4001bf0:	1823883a 	mov	r17,r3
 4001bf4:	283ff21e 	bne	r5,zero,4001bc0 <___vfprintf_internal_r+0x1340>
 4001bf8:	d8c14c17 	ldw	r3,1328(sp)
 4001bfc:	1880004c 	andi	r2,r3,1
 4001c00:	1005003a 	cmpeq	r2,r2,zero
 4001c04:	103db91e 	bne	r2,zero,40012ec <___vfprintf_internal_r+0xa6c>
 4001c08:	20803fcc 	andi	r2,r4,255
 4001c0c:	1080201c 	xori	r2,r2,128
 4001c10:	10bfe004 	addi	r2,r2,-128
 4001c14:	00c00c04 	movi	r3,48
 4001c18:	10fdb426 	beq	r2,r3,40012ec <___vfprintf_internal_r+0xa6c>
 4001c1c:	31bfffc4 	addi	r6,r6,-1
 4001c20:	d9814115 	stw	r6,1284(sp)
 4001c24:	30c00005 	stb	r3,0(r6)
 4001c28:	003db006 	br	40012ec <___vfprintf_internal_r+0xa6c>
 4001c2c:	88800068 	cmpgeui	r2,r17,1
 4001c30:	10002c1e 	bne	r2,zero,4001ce4 <___vfprintf_internal_r+0x1464>
 4001c34:	8800021e 	bne	r17,zero,4001c40 <___vfprintf_internal_r+0x13c0>
 4001c38:	00800244 	movi	r2,9
 4001c3c:	14002936 	bltu	r2,r16,4001ce4 <___vfprintf_internal_r+0x1464>
 4001c40:	d90018c4 	addi	r4,sp,99
 4001c44:	dd000f04 	addi	r20,sp,60
 4001c48:	d9014115 	stw	r4,1284(sp)
 4001c4c:	d9014117 	ldw	r4,1284(sp)
 4001c50:	80800c04 	addi	r2,r16,48
 4001c54:	20800005 	stb	r2,0(r4)
 4001c58:	003da406 	br	40012ec <___vfprintf_internal_r+0xa6c>
 4001c5c:	dc400d17 	ldw	r17,52(sp)
 4001c60:	07010074 	movhi	fp,1025
 4001c64:	e719d184 	addi	fp,fp,26438
 4001c68:	9425883a 	add	r18,r18,r16
 4001c6c:	8c400044 	addi	r17,r17,1
 4001c70:	008001c4 	movi	r2,7
 4001c74:	1f000015 	stw	fp,0(r3)
 4001c78:	1c000115 	stw	r16,4(r3)
 4001c7c:	dc800e15 	stw	r18,56(sp)
 4001c80:	dc400d15 	stw	r17,52(sp)
 4001c84:	147de216 	blt	r2,r17,4001410 <___vfprintf_internal_r+0xb90>
 4001c88:	18c00204 	addi	r3,r3,8
 4001c8c:	003c7a06 	br	4000e78 <___vfprintf_internal_r+0x5f8>
 4001c90:	01000084 	movi	r4,2
 4001c94:	d8000405 	stb	zero,16(sp)
 4001c98:	003d8706 	br	40012b8 <___vfprintf_internal_r+0xa38>
 4001c9c:	d9814c17 	ldw	r6,1328(sp)
 4001ca0:	30c4703a 	and	r2,r6,r3
 4001ca4:	1005003a 	cmpeq	r2,r2,zero
 4001ca8:	103cb926 	beq	r2,zero,4000f90 <___vfprintf_internal_r+0x710>
 4001cac:	d9014117 	ldw	r4,1284(sp)
 4001cb0:	94800044 	addi	r18,r18,1
 4001cb4:	8c400044 	addi	r17,r17,1
 4001cb8:	008001c4 	movi	r2,7
 4001cbc:	a9000015 	stw	r4,0(r21)
 4001cc0:	a8c00115 	stw	r3,4(r21)
 4001cc4:	dc800e15 	stw	r18,56(sp)
 4001cc8:	dc400d15 	stw	r17,52(sp)
 4001ccc:	147e6616 	blt	r2,r17,4001668 <___vfprintf_internal_r+0xde8>
 4001cd0:	acc00204 	addi	r19,r21,8
 4001cd4:	003cd706 	br	4001034 <___vfprintf_internal_r+0x7b4>
 4001cd8:	07010074 	movhi	fp,1025
 4001cdc:	e719d184 	addi	fp,fp,26438
 4001ce0:	003c4f06 	br	4000e20 <___vfprintf_internal_r+0x5a0>
 4001ce4:	dd000f04 	addi	r20,sp,60
 4001ce8:	dc801904 	addi	r18,sp,100
 4001cec:	8009883a 	mov	r4,r16
 4001cf0:	880b883a 	mov	r5,r17
 4001cf4:	01800284 	movi	r6,10
 4001cf8:	000f883a 	mov	r7,zero
 4001cfc:	4007f780 	call	4007f78 <__umoddi3>
 4001d00:	12000c04 	addi	r8,r2,48
 4001d04:	94bfffc4 	addi	r18,r18,-1
 4001d08:	8009883a 	mov	r4,r16
 4001d0c:	880b883a 	mov	r5,r17
 4001d10:	01800284 	movi	r6,10
 4001d14:	000f883a 	mov	r7,zero
 4001d18:	92000005 	stb	r8,0(r18)
 4001d1c:	400799c0 	call	400799c <__udivdi3>
 4001d20:	1009883a 	mov	r4,r2
 4001d24:	1021883a 	mov	r16,r2
 4001d28:	18800068 	cmpgeui	r2,r3,1
 4001d2c:	1823883a 	mov	r17,r3
 4001d30:	103fee1e 	bne	r2,zero,4001cec <___vfprintf_internal_r+0x146c>
 4001d34:	1800021e 	bne	r3,zero,4001d40 <___vfprintf_internal_r+0x14c0>
 4001d38:	00800244 	movi	r2,9
 4001d3c:	113feb36 	bltu	r2,r4,4001cec <___vfprintf_internal_r+0x146c>
 4001d40:	94bfffc4 	addi	r18,r18,-1
 4001d44:	dc814115 	stw	r18,1284(sp)
 4001d48:	003fc006 	br	4001c4c <___vfprintf_internal_r+0x13cc>
 4001d4c:	d9014c17 	ldw	r4,1328(sp)
 4001d50:	2080004c 	andi	r2,r4,1
 4001d54:	10009a1e 	bne	r2,zero,4001fc0 <___vfprintf_internal_r+0x1740>
 4001d58:	d9401904 	addi	r5,sp,100
 4001d5c:	dd000f04 	addi	r20,sp,60
 4001d60:	d9414115 	stw	r5,1284(sp)
 4001d64:	003d6106 	br	40012ec <___vfprintf_internal_r+0xa6c>
 4001d68:	d9014f17 	ldw	r4,1340(sp)
 4001d6c:	b00b883a 	mov	r5,r22
 4001d70:	d9800c04 	addi	r6,sp,48
 4001d74:	40008280 	call	4000828 <__sprint_r>
 4001d78:	103c791e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4001d7c:	dc800e17 	ldw	r18,56(sp)
 4001d80:	d8c01904 	addi	r3,sp,100
 4001d84:	003cff06 	br	4001184 <___vfprintf_internal_r+0x904>
 4001d88:	d8c14c17 	ldw	r3,1328(sp)
 4001d8c:	1880040c 	andi	r2,r3,16
 4001d90:	1000711e 	bne	r2,zero,4001f58 <___vfprintf_internal_r+0x16d8>
 4001d94:	d9014c17 	ldw	r4,1328(sp)
 4001d98:	2080100c 	andi	r2,r4,64
 4001d9c:	10006e26 	beq	r2,zero,4001f58 <___vfprintf_internal_r+0x16d8>
 4001da0:	3c00000b 	ldhu	r16,0(r7)
 4001da4:	0023883a 	mov	r17,zero
 4001da8:	39c00104 	addi	r7,r7,4
 4001dac:	d9c14015 	stw	r7,1280(sp)
 4001db0:	003f0006 	br	40019b4 <___vfprintf_internal_r+0x1134>
 4001db4:	dc400d17 	ldw	r17,52(sp)
 4001db8:	07010074 	movhi	fp,1025
 4001dbc:	e719d184 	addi	fp,fp,26438
 4001dc0:	9425883a 	add	r18,r18,r16
 4001dc4:	8c400044 	addi	r17,r17,1
 4001dc8:	008001c4 	movi	r2,7
 4001dcc:	1f000015 	stw	fp,0(r3)
 4001dd0:	1c000115 	stw	r16,4(r3)
 4001dd4:	dc800e15 	stw	r18,56(sp)
 4001dd8:	dc400d15 	stw	r17,52(sp)
 4001ddc:	147d7616 	blt	r2,r17,40013b8 <___vfprintf_internal_r+0xb38>
 4001de0:	18c00204 	addi	r3,r3,8
 4001de4:	003d7b06 	br	40013d4 <___vfprintf_internal_r+0xb54>
 4001de8:	dc800e17 	ldw	r18,56(sp)
 4001dec:	dc400d17 	ldw	r17,52(sp)
 4001df0:	07010074 	movhi	fp,1025
 4001df4:	e719d584 	addi	fp,fp,26454
 4001df8:	003bc006 	br	4000cfc <___vfprintf_internal_r+0x47c>
 4001dfc:	d9014f17 	ldw	r4,1340(sp)
 4001e00:	b00b883a 	mov	r5,r22
 4001e04:	d9800c04 	addi	r6,sp,48
 4001e08:	40008280 	call	4000828 <__sprint_r>
 4001e0c:	103c541e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4001e10:	dc800e17 	ldw	r18,56(sp)
 4001e14:	d8c01904 	addi	r3,sp,100
 4001e18:	003ce906 	br	40011c0 <___vfprintf_internal_r+0x940>
 4001e1c:	3c000017 	ldw	r16,0(r7)
 4001e20:	0009883a 	mov	r4,zero
 4001e24:	39c00104 	addi	r7,r7,4
 4001e28:	0023883a 	mov	r17,zero
 4001e2c:	d9c14015 	stw	r7,1280(sp)
 4001e30:	d8000405 	stb	zero,16(sp)
 4001e34:	003d2006 	br	40012b8 <___vfprintf_internal_r+0xa38>
 4001e38:	38800017 	ldw	r2,0(r7)
 4001e3c:	39c00104 	addi	r7,r7,4
 4001e40:	d9c14015 	stw	r7,1280(sp)
 4001e44:	1023d7fa 	srai	r17,r2,31
 4001e48:	1021883a 	mov	r16,r2
 4001e4c:	003d1806 	br	40012b0 <___vfprintf_internal_r+0xa30>
 4001e50:	3c000017 	ldw	r16,0(r7)
 4001e54:	01000044 	movi	r4,1
 4001e58:	39c00104 	addi	r7,r7,4
 4001e5c:	0023883a 	mov	r17,zero
 4001e60:	d9c14015 	stw	r7,1280(sp)
 4001e64:	d8000405 	stb	zero,16(sp)
 4001e68:	003d1306 	br	40012b8 <___vfprintf_internal_r+0xa38>
 4001e6c:	00810074 	movhi	r2,1025
 4001e70:	1099d104 	addi	r2,r2,26436
 4001e74:	94800044 	addi	r18,r18,1
 4001e78:	8c400044 	addi	r17,r17,1
 4001e7c:	a8800015 	stw	r2,0(r21)
 4001e80:	00c00044 	movi	r3,1
 4001e84:	008001c4 	movi	r2,7
 4001e88:	a8c00115 	stw	r3,4(r21)
 4001e8c:	dc800e15 	stw	r18,56(sp)
 4001e90:	dc400d15 	stw	r17,52(sp)
 4001e94:	1440ca16 	blt	r2,r17,40021c0 <___vfprintf_internal_r+0x1940>
 4001e98:	a8c00204 	addi	r3,r21,8
 4001e9c:	2000061e 	bne	r4,zero,4001eb8 <___vfprintf_internal_r+0x1638>
 4001ea0:	d9414717 	ldw	r5,1308(sp)
 4001ea4:	2800041e 	bne	r5,zero,4001eb8 <___vfprintf_internal_r+0x1638>
 4001ea8:	d9814c17 	ldw	r6,1328(sp)
 4001eac:	3080004c 	andi	r2,r6,1
 4001eb0:	1005003a 	cmpeq	r2,r2,zero
 4001eb4:	103bf01e 	bne	r2,zero,4000e78 <___vfprintf_internal_r+0x5f8>
 4001eb8:	00800044 	movi	r2,1
 4001ebc:	dc400d17 	ldw	r17,52(sp)
 4001ec0:	18800115 	stw	r2,4(r3)
 4001ec4:	d8814917 	ldw	r2,1316(sp)
 4001ec8:	94800044 	addi	r18,r18,1
 4001ecc:	8c400044 	addi	r17,r17,1
 4001ed0:	18800015 	stw	r2,0(r3)
 4001ed4:	008001c4 	movi	r2,7
 4001ed8:	dc800e15 	stw	r18,56(sp)
 4001edc:	dc400d15 	stw	r17,52(sp)
 4001ee0:	1440ca16 	blt	r2,r17,400220c <___vfprintf_internal_r+0x198c>
 4001ee4:	18c00204 	addi	r3,r3,8
 4001ee8:	0121c83a 	sub	r16,zero,r4
 4001eec:	0400500e 	bge	zero,r16,4002030 <___vfprintf_internal_r+0x17b0>
 4001ef0:	00800404 	movi	r2,16
 4001ef4:	1400800e 	bge	r2,r16,40020f8 <___vfprintf_internal_r+0x1878>
 4001ef8:	1027883a 	mov	r19,r2
 4001efc:	07010074 	movhi	fp,1025
 4001f00:	e719d184 	addi	fp,fp,26438
 4001f04:	050001c4 	movi	r20,7
 4001f08:	00000306 	br	4001f18 <___vfprintf_internal_r+0x1698>
 4001f0c:	18c00204 	addi	r3,r3,8
 4001f10:	843ffc04 	addi	r16,r16,-16
 4001f14:	9c007a0e 	bge	r19,r16,4002100 <___vfprintf_internal_r+0x1880>
 4001f18:	94800404 	addi	r18,r18,16
 4001f1c:	8c400044 	addi	r17,r17,1
 4001f20:	1f000015 	stw	fp,0(r3)
 4001f24:	1cc00115 	stw	r19,4(r3)
 4001f28:	dc800e15 	stw	r18,56(sp)
 4001f2c:	dc400d15 	stw	r17,52(sp)
 4001f30:	a47ff60e 	bge	r20,r17,4001f0c <___vfprintf_internal_r+0x168c>
 4001f34:	d9014f17 	ldw	r4,1340(sp)
 4001f38:	b00b883a 	mov	r5,r22
 4001f3c:	d9800c04 	addi	r6,sp,48
 4001f40:	40008280 	call	4000828 <__sprint_r>
 4001f44:	103c061e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4001f48:	dc800e17 	ldw	r18,56(sp)
 4001f4c:	dc400d17 	ldw	r17,52(sp)
 4001f50:	d8c01904 	addi	r3,sp,100
 4001f54:	003fee06 	br	4001f10 <___vfprintf_internal_r+0x1690>
 4001f58:	3c000017 	ldw	r16,0(r7)
 4001f5c:	0023883a 	mov	r17,zero
 4001f60:	39c00104 	addi	r7,r7,4
 4001f64:	d9c14015 	stw	r7,1280(sp)
 4001f68:	003e9206 	br	40019b4 <___vfprintf_internal_r+0x1134>
 4001f6c:	d9401904 	addi	r5,sp,100
 4001f70:	dd000f04 	addi	r20,sp,60
 4001f74:	d9414115 	stw	r5,1284(sp)
 4001f78:	d9814417 	ldw	r6,1296(sp)
 4001f7c:	880a973a 	slli	r5,r17,28
 4001f80:	8004d13a 	srli	r2,r16,4
 4001f84:	810003cc 	andi	r4,r16,15
 4001f88:	3109883a 	add	r4,r6,r4
 4001f8c:	2884b03a 	or	r2,r5,r2
 4001f90:	21400003 	ldbu	r5,0(r4)
 4001f94:	d9014117 	ldw	r4,1284(sp)
 4001f98:	8806d13a 	srli	r3,r17,4
 4001f9c:	1021883a 	mov	r16,r2
 4001fa0:	213fffc4 	addi	r4,r4,-1
 4001fa4:	d9014115 	stw	r4,1284(sp)
 4001fa8:	d9814117 	ldw	r6,1284(sp)
 4001fac:	10c8b03a 	or	r4,r2,r3
 4001fb0:	1823883a 	mov	r17,r3
 4001fb4:	31400005 	stb	r5,0(r6)
 4001fb8:	203fef1e 	bne	r4,zero,4001f78 <___vfprintf_internal_r+0x16f8>
 4001fbc:	003ccb06 	br	40012ec <___vfprintf_internal_r+0xa6c>
 4001fc0:	00800c04 	movi	r2,48
 4001fc4:	d98018c4 	addi	r6,sp,99
 4001fc8:	dd000f04 	addi	r20,sp,60
 4001fcc:	d88018c5 	stb	r2,99(sp)
 4001fd0:	d9814115 	stw	r6,1284(sp)
 4001fd4:	003cc506 	br	40012ec <___vfprintf_internal_r+0xa6c>
 4001fd8:	dc400d17 	ldw	r17,52(sp)
 4001fdc:	07010074 	movhi	fp,1025
 4001fe0:	e719d584 	addi	fp,fp,26454
 4001fe4:	003bc706 	br	4000f04 <___vfprintf_internal_r+0x684>
 4001fe8:	d9414c17 	ldw	r5,1328(sp)
 4001fec:	2880040c 	andi	r2,r5,16
 4001ff0:	10007c26 	beq	r2,zero,40021e4 <___vfprintf_internal_r+0x1964>
 4001ff4:	38800017 	ldw	r2,0(r7)
 4001ff8:	39c00104 	addi	r7,r7,4
 4001ffc:	d9c14015 	stw	r7,1280(sp)
 4002000:	d9814b17 	ldw	r6,1324(sp)
 4002004:	d9c14017 	ldw	r7,1280(sp)
 4002008:	11800015 	stw	r6,0(r2)
 400200c:	003a7806 	br	40009f0 <___vfprintf_internal_r+0x170>
 4002010:	d9014f17 	ldw	r4,1340(sp)
 4002014:	b00b883a 	mov	r5,r22
 4002018:	d9800c04 	addi	r6,sp,48
 400201c:	40008280 	call	4000828 <__sprint_r>
 4002020:	103bcf1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4002024:	dc800e17 	ldw	r18,56(sp)
 4002028:	dc400d17 	ldw	r17,52(sp)
 400202c:	d8c01904 	addi	r3,sp,100
 4002030:	d9014717 	ldw	r4,1308(sp)
 4002034:	d9414117 	ldw	r5,1284(sp)
 4002038:	8c400044 	addi	r17,r17,1
 400203c:	9125883a 	add	r18,r18,r4
 4002040:	008001c4 	movi	r2,7
 4002044:	19400015 	stw	r5,0(r3)
 4002048:	19000115 	stw	r4,4(r3)
 400204c:	dc800e15 	stw	r18,56(sp)
 4002050:	dc400d15 	stw	r17,52(sp)
 4002054:	147cee16 	blt	r2,r17,4001410 <___vfprintf_internal_r+0xb90>
 4002058:	18c00204 	addi	r3,r3,8
 400205c:	003b8606 	br	4000e78 <___vfprintf_internal_r+0x5f8>
 4002060:	38c00017 	ldw	r3,0(r7)
 4002064:	39000204 	addi	r4,r7,8
 4002068:	d9014015 	stw	r4,1280(sp)
 400206c:	d8c14215 	stw	r3,1288(sp)
 4002070:	39c00117 	ldw	r7,4(r7)
 4002074:	d9c14315 	stw	r7,1292(sp)
 4002078:	003e2006 	br	40018fc <___vfprintf_internal_r+0x107c>
 400207c:	0005883a 	mov	r2,zero
 4002080:	1409c83a 	sub	r4,r2,r16
 4002084:	1105803a 	cmpltu	r2,r2,r4
 4002088:	044bc83a 	sub	r5,zero,r17
 400208c:	2885c83a 	sub	r2,r5,r2
 4002090:	2021883a 	mov	r16,r4
 4002094:	1023883a 	mov	r17,r2
 4002098:	01000044 	movi	r4,1
 400209c:	00800b44 	movi	r2,45
 40020a0:	d8800405 	stb	r2,16(sp)
 40020a4:	003c8406 	br	40012b8 <___vfprintf_internal_r+0xa38>
 40020a8:	d9014f17 	ldw	r4,1340(sp)
 40020ac:	b00b883a 	mov	r5,r22
 40020b0:	d9800c04 	addi	r6,sp,48
 40020b4:	40008280 	call	4000828 <__sprint_r>
 40020b8:	103ba91e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 40020bc:	dc800e17 	ldw	r18,56(sp)
 40020c0:	dc400d17 	ldw	r17,52(sp)
 40020c4:	d9000517 	ldw	r4,20(sp)
 40020c8:	d9401904 	addi	r5,sp,100
 40020cc:	003da706 	br	400176c <___vfprintf_internal_r+0xeec>
 40020d0:	d9014f17 	ldw	r4,1340(sp)
 40020d4:	b00b883a 	mov	r5,r22
 40020d8:	d9800c04 	addi	r6,sp,48
 40020dc:	40008280 	call	4000828 <__sprint_r>
 40020e0:	103b9f1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 40020e4:	dc800e17 	ldw	r18,56(sp)
 40020e8:	dc400d17 	ldw	r17,52(sp)
 40020ec:	d9000517 	ldw	r4,20(sp)
 40020f0:	d8c01904 	addi	r3,sp,100
 40020f4:	003d9106 	br	400173c <___vfprintf_internal_r+0xebc>
 40020f8:	07010074 	movhi	fp,1025
 40020fc:	e719d184 	addi	fp,fp,26438
 4002100:	9425883a 	add	r18,r18,r16
 4002104:	8c400044 	addi	r17,r17,1
 4002108:	008001c4 	movi	r2,7
 400210c:	1f000015 	stw	fp,0(r3)
 4002110:	1c000115 	stw	r16,4(r3)
 4002114:	dc800e15 	stw	r18,56(sp)
 4002118:	dc400d15 	stw	r17,52(sp)
 400211c:	147fbc16 	blt	r2,r17,4002010 <___vfprintf_internal_r+0x1790>
 4002120:	18c00204 	addi	r3,r3,8
 4002124:	003fc206 	br	4002030 <___vfprintf_internal_r+0x17b0>
 4002128:	d9014f17 	ldw	r4,1340(sp)
 400212c:	b00b883a 	mov	r5,r22
 4002130:	d9800c04 	addi	r6,sp,48
 4002134:	40008280 	call	4000828 <__sprint_r>
 4002138:	103b891e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 400213c:	dc800e17 	ldw	r18,56(sp)
 4002140:	d9000517 	ldw	r4,20(sp)
 4002144:	d8c01904 	addi	r3,sp,100
 4002148:	003d0206 	br	4001554 <___vfprintf_internal_r+0xcd4>
 400214c:	07010074 	movhi	fp,1025
 4002150:	e719d184 	addi	fp,fp,26438
 4002154:	003be406 	br	40010e8 <___vfprintf_internal_r+0x868>
 4002158:	00810074 	movhi	r2,1025
 400215c:	1099c004 	addi	r2,r2,26368
 4002160:	d8814115 	stw	r2,1284(sp)
 4002164:	003df506 	br	400193c <___vfprintf_internal_r+0x10bc>
 4002168:	d9014217 	ldw	r4,1288(sp)
 400216c:	d9414317 	ldw	r5,1292(sp)
 4002170:	40072600 	call	4007260 <__isnand>
 4002174:	10003926 	beq	r2,zero,400225c <___vfprintf_internal_r+0x19dc>
 4002178:	d9414d17 	ldw	r5,1332(sp)
 400217c:	008011c4 	movi	r2,71
 4002180:	1140ce16 	blt	r2,r5,40024bc <___vfprintf_internal_r+0x1c3c>
 4002184:	01810074 	movhi	r6,1025
 4002188:	3199c104 	addi	r6,r6,26372
 400218c:	d9814115 	stw	r6,1284(sp)
 4002190:	003dea06 	br	400193c <___vfprintf_internal_r+0x10bc>
 4002194:	d9014c17 	ldw	r4,1328(sp)
 4002198:	bdc00044 	addi	r23,r23,1
 400219c:	b8c00007 	ldb	r3,0(r23)
 40021a0:	21000814 	ori	r4,r4,32
 40021a4:	d9014c15 	stw	r4,1328(sp)
 40021a8:	003a3406 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 40021ac:	dcc14515 	stw	r19,1300(sp)
 40021b0:	98011016 	blt	r19,zero,40025f4 <___vfprintf_internal_r+0x1d74>
 40021b4:	980f883a 	mov	r7,r19
 40021b8:	d8014615 	stw	zero,1304(sp)
 40021bc:	003c5206 	br	4001308 <___vfprintf_internal_r+0xa88>
 40021c0:	d9014f17 	ldw	r4,1340(sp)
 40021c4:	b00b883a 	mov	r5,r22
 40021c8:	d9800c04 	addi	r6,sp,48
 40021cc:	40008280 	call	4000828 <__sprint_r>
 40021d0:	103b631e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 40021d4:	dc800e17 	ldw	r18,56(sp)
 40021d8:	d9000517 	ldw	r4,20(sp)
 40021dc:	d8c01904 	addi	r3,sp,100
 40021e0:	003f2e06 	br	4001e9c <___vfprintf_internal_r+0x161c>
 40021e4:	d8c14c17 	ldw	r3,1328(sp)
 40021e8:	1880100c 	andi	r2,r3,64
 40021ec:	1000a026 	beq	r2,zero,4002470 <___vfprintf_internal_r+0x1bf0>
 40021f0:	38800017 	ldw	r2,0(r7)
 40021f4:	39c00104 	addi	r7,r7,4
 40021f8:	d9c14015 	stw	r7,1280(sp)
 40021fc:	d9014b17 	ldw	r4,1324(sp)
 4002200:	d9c14017 	ldw	r7,1280(sp)
 4002204:	1100000d 	sth	r4,0(r2)
 4002208:	0039f906 	br	40009f0 <___vfprintf_internal_r+0x170>
 400220c:	d9014f17 	ldw	r4,1340(sp)
 4002210:	b00b883a 	mov	r5,r22
 4002214:	d9800c04 	addi	r6,sp,48
 4002218:	40008280 	call	4000828 <__sprint_r>
 400221c:	103b501e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 4002220:	dc800e17 	ldw	r18,56(sp)
 4002224:	dc400d17 	ldw	r17,52(sp)
 4002228:	d9000517 	ldw	r4,20(sp)
 400222c:	d8c01904 	addi	r3,sp,100
 4002230:	003f2d06 	br	4001ee8 <___vfprintf_internal_r+0x1668>
 4002234:	00800184 	movi	r2,6
 4002238:	14c09a36 	bltu	r2,r19,40024a4 <___vfprintf_internal_r+0x1c24>
 400223c:	dcc14515 	stw	r19,1300(sp)
 4002240:	9800010e 	bge	r19,zero,4002248 <___vfprintf_internal_r+0x19c8>
 4002244:	d8014515 	stw	zero,1300(sp)
 4002248:	00810074 	movhi	r2,1025
 400224c:	1099c304 	addi	r2,r2,26380
 4002250:	980f883a 	mov	r7,r19
 4002254:	d8814115 	stw	r2,1284(sp)
 4002258:	003a7806 	br	4000c3c <___vfprintf_internal_r+0x3bc>
 400225c:	00bfffc4 	movi	r2,-1
 4002260:	9880e226 	beq	r19,r2,40025ec <___vfprintf_internal_r+0x1d6c>
 4002264:	d9414d17 	ldw	r5,1332(sp)
 4002268:	008019c4 	movi	r2,103
 400226c:	2880dc26 	beq	r5,r2,40025e0 <___vfprintf_internal_r+0x1d60>
 4002270:	008011c4 	movi	r2,71
 4002274:	2880da26 	beq	r5,r2,40025e0 <___vfprintf_internal_r+0x1d60>
 4002278:	d9414c17 	ldw	r5,1328(sp)
 400227c:	d9014317 	ldw	r4,1292(sp)
 4002280:	d9814217 	ldw	r6,1288(sp)
 4002284:	29404014 	ori	r5,r5,256
 4002288:	d9414c15 	stw	r5,1328(sp)
 400228c:	2000cc16 	blt	r4,zero,40025c0 <___vfprintf_internal_r+0x1d40>
 4002290:	3021883a 	mov	r16,r6
 4002294:	2023883a 	mov	r17,r4
 4002298:	0039883a 	mov	fp,zero
 400229c:	d9414d17 	ldw	r5,1332(sp)
 40022a0:	00801984 	movi	r2,102
 40022a4:	2880b726 	beq	r5,r2,4002584 <___vfprintf_internal_r+0x1d04>
 40022a8:	00801184 	movi	r2,70
 40022ac:	2880b526 	beq	r5,r2,4002584 <___vfprintf_internal_r+0x1d04>
 40022b0:	00801944 	movi	r2,101
 40022b4:	2880c826 	beq	r5,r2,40025d8 <___vfprintf_internal_r+0x1d58>
 40022b8:	00801144 	movi	r2,69
 40022bc:	2880c626 	beq	r5,r2,40025d8 <___vfprintf_internal_r+0x1d58>
 40022c0:	9829883a 	mov	r20,r19
 40022c4:	d9014f17 	ldw	r4,1340(sp)
 40022c8:	d8800504 	addi	r2,sp,20
 40022cc:	880d883a 	mov	r6,r17
 40022d0:	d8800115 	stw	r2,4(sp)
 40022d4:	d8c00604 	addi	r3,sp,24
 40022d8:	d8800704 	addi	r2,sp,28
 40022dc:	800b883a 	mov	r5,r16
 40022e0:	01c00084 	movi	r7,2
 40022e4:	d8c00215 	stw	r3,8(sp)
 40022e8:	d8800315 	stw	r2,12(sp)
 40022ec:	dd000015 	stw	r20,0(sp)
 40022f0:	4002aa40 	call	4002aa4 <_dtoa_r>
 40022f4:	d9814d17 	ldw	r6,1332(sp)
 40022f8:	d8814115 	stw	r2,1284(sp)
 40022fc:	008019c4 	movi	r2,103
 4002300:	30809526 	beq	r6,r2,4002558 <___vfprintf_internal_r+0x1cd8>
 4002304:	d8c14d17 	ldw	r3,1332(sp)
 4002308:	008011c4 	movi	r2,71
 400230c:	18809226 	beq	r3,r2,4002558 <___vfprintf_internal_r+0x1cd8>
 4002310:	d9414117 	ldw	r5,1284(sp)
 4002314:	d9814d17 	ldw	r6,1332(sp)
 4002318:	00801984 	movi	r2,102
 400231c:	2d25883a 	add	r18,r5,r20
 4002320:	30808626 	beq	r6,r2,400253c <___vfprintf_internal_r+0x1cbc>
 4002324:	00801184 	movi	r2,70
 4002328:	30808426 	beq	r6,r2,400253c <___vfprintf_internal_r+0x1cbc>
 400232c:	000d883a 	mov	r6,zero
 4002330:	000f883a 	mov	r7,zero
 4002334:	880b883a 	mov	r5,r17
 4002338:	8009883a 	mov	r4,r16
 400233c:	40090480 	call	4009048 <__eqdf2>
 4002340:	1000751e 	bne	r2,zero,4002518 <___vfprintf_internal_r+0x1c98>
 4002344:	9005883a 	mov	r2,r18
 4002348:	dc800715 	stw	r18,28(sp)
 400234c:	d9014117 	ldw	r4,1284(sp)
 4002350:	d9414d17 	ldw	r5,1332(sp)
 4002354:	00c019c4 	movi	r3,103
 4002358:	1125c83a 	sub	r18,r2,r4
 400235c:	28c06826 	beq	r5,r3,4002500 <___vfprintf_internal_r+0x1c80>
 4002360:	008011c4 	movi	r2,71
 4002364:	28806626 	beq	r5,r2,4002500 <___vfprintf_internal_r+0x1c80>
 4002368:	d9000517 	ldw	r4,20(sp)
 400236c:	d8c14d17 	ldw	r3,1332(sp)
 4002370:	00801944 	movi	r2,101
 4002374:	10c05516 	blt	r2,r3,40024cc <___vfprintf_internal_r+0x1c4c>
 4002378:	213fffc4 	addi	r4,r4,-1
 400237c:	d9000515 	stw	r4,20(sp)
 4002380:	d8c00805 	stb	r3,32(sp)
 4002384:	2021883a 	mov	r16,r4
 4002388:	2000c116 	blt	r4,zero,4002690 <___vfprintf_internal_r+0x1e10>
 400238c:	00800ac4 	movi	r2,43
 4002390:	d8800845 	stb	r2,33(sp)
 4002394:	00800244 	movi	r2,9
 4002398:	1400af0e 	bge	r2,r16,4002658 <___vfprintf_internal_r+0x1dd8>
 400239c:	1027883a 	mov	r19,r2
 40023a0:	dc400b84 	addi	r17,sp,46
 40023a4:	8009883a 	mov	r4,r16
 40023a8:	01400284 	movi	r5,10
 40023ac:	40097300 	call	4009730 <__modsi3>
 40023b0:	10800c04 	addi	r2,r2,48
 40023b4:	8c7fffc4 	addi	r17,r17,-1
 40023b8:	8009883a 	mov	r4,r16
 40023bc:	01400284 	movi	r5,10
 40023c0:	88800005 	stb	r2,0(r17)
 40023c4:	40096d00 	call	40096d0 <__divsi3>
 40023c8:	1021883a 	mov	r16,r2
 40023cc:	98bff516 	blt	r19,r2,40023a4 <___vfprintf_internal_r+0x1b24>
 40023d0:	10c00c04 	addi	r3,r2,48
 40023d4:	d88009c4 	addi	r2,sp,39
 40023d8:	108001c4 	addi	r2,r2,7
 40023dc:	897fffc4 	addi	r5,r17,-1
 40023e0:	88ffffc5 	stb	r3,-1(r17)
 40023e4:	2880a72e 	bgeu	r5,r2,4002684 <___vfprintf_internal_r+0x1e04>
 40023e8:	1009883a 	mov	r4,r2
 40023ec:	d9800804 	addi	r6,sp,32
 40023f0:	d8c00884 	addi	r3,sp,34
 40023f4:	28800003 	ldbu	r2,0(r5)
 40023f8:	29400044 	addi	r5,r5,1
 40023fc:	18800005 	stb	r2,0(r3)
 4002400:	18c00044 	addi	r3,r3,1
 4002404:	293ffb36 	bltu	r5,r4,40023f4 <___vfprintf_internal_r+0x1b74>
 4002408:	1987c83a 	sub	r3,r3,r6
 400240c:	00800044 	movi	r2,1
 4002410:	d8c14815 	stw	r3,1312(sp)
 4002414:	90cf883a 	add	r7,r18,r3
 4002418:	1480960e 	bge	r2,r18,4002674 <___vfprintf_internal_r+0x1df4>
 400241c:	39c00044 	addi	r7,r7,1
 4002420:	d9c14515 	stw	r7,1300(sp)
 4002424:	38003416 	blt	r7,zero,40024f8 <___vfprintf_internal_r+0x1c78>
 4002428:	e0803fcc 	andi	r2,fp,255
 400242c:	1080201c 	xori	r2,r2,128
 4002430:	10bfe004 	addi	r2,r2,-128
 4002434:	10004e26 	beq	r2,zero,4002570 <___vfprintf_internal_r+0x1cf0>
 4002438:	00800b44 	movi	r2,45
 400243c:	dc814715 	stw	r18,1308(sp)
 4002440:	d8014615 	stw	zero,1304(sp)
 4002444:	d8800405 	stb	r2,16(sp)
 4002448:	003bb106 	br	4001310 <___vfprintf_internal_r+0xa90>
 400244c:	00800b44 	movi	r2,45
 4002450:	d8800405 	stb	r2,16(sp)
 4002454:	003d3306 	br	4001924 <___vfprintf_internal_r+0x10a4>
 4002458:	d9014f17 	ldw	r4,1340(sp)
 400245c:	b00b883a 	mov	r5,r22
 4002460:	d9800c04 	addi	r6,sp,48
 4002464:	40008280 	call	4000828 <__sprint_r>
 4002468:	103abd1e 	bne	r2,zero,4000f60 <___vfprintf_internal_r+0x6e0>
 400246c:	003abb06 	br	4000f5c <___vfprintf_internal_r+0x6dc>
 4002470:	38800017 	ldw	r2,0(r7)
 4002474:	39c00104 	addi	r7,r7,4
 4002478:	d9c14015 	stw	r7,1280(sp)
 400247c:	d9414b17 	ldw	r5,1324(sp)
 4002480:	d9c14017 	ldw	r7,1280(sp)
 4002484:	11400015 	stw	r5,0(r2)
 4002488:	00395906 	br	40009f0 <___vfprintf_internal_r+0x170>
 400248c:	980f883a 	mov	r7,r19
 4002490:	dcc14515 	stw	r19,1300(sp)
 4002494:	d8014615 	stw	zero,1304(sp)
 4002498:	003b9b06 	br	4001308 <___vfprintf_internal_r+0xa88>
 400249c:	0027883a 	mov	r19,zero
 40024a0:	00397806 	br	4000a84 <___vfprintf_internal_r+0x204>
 40024a4:	00c10074 	movhi	r3,1025
 40024a8:	18d9c304 	addi	r3,r3,26380
 40024ac:	100f883a 	mov	r7,r2
 40024b0:	d8814515 	stw	r2,1300(sp)
 40024b4:	d8c14115 	stw	r3,1284(sp)
 40024b8:	0039e006 	br	4000c3c <___vfprintf_internal_r+0x3bc>
 40024bc:	00810074 	movhi	r2,1025
 40024c0:	1099c204 	addi	r2,r2,26376
 40024c4:	d8814115 	stw	r2,1284(sp)
 40024c8:	003d1c06 	br	400193c <___vfprintf_internal_r+0x10bc>
 40024cc:	d9414d17 	ldw	r5,1332(sp)
 40024d0:	00801984 	movi	r2,102
 40024d4:	28804926 	beq	r5,r2,40025fc <___vfprintf_internal_r+0x1d7c>
 40024d8:	200f883a 	mov	r7,r4
 40024dc:	24805716 	blt	r4,r18,400263c <___vfprintf_internal_r+0x1dbc>
 40024e0:	d9414c17 	ldw	r5,1328(sp)
 40024e4:	2880004c 	andi	r2,r5,1
 40024e8:	10000126 	beq	r2,zero,40024f0 <___vfprintf_internal_r+0x1c70>
 40024ec:	21c00044 	addi	r7,r4,1
 40024f0:	d9c14515 	stw	r7,1300(sp)
 40024f4:	383fcc0e 	bge	r7,zero,4002428 <___vfprintf_internal_r+0x1ba8>
 40024f8:	d8014515 	stw	zero,1300(sp)
 40024fc:	003fca06 	br	4002428 <___vfprintf_internal_r+0x1ba8>
 4002500:	d9000517 	ldw	r4,20(sp)
 4002504:	00bfff04 	movi	r2,-4
 4002508:	1100480e 	bge	r2,r4,400262c <___vfprintf_internal_r+0x1dac>
 400250c:	99004716 	blt	r19,r4,400262c <___vfprintf_internal_r+0x1dac>
 4002510:	d8c14d15 	stw	r3,1332(sp)
 4002514:	003ff006 	br	40024d8 <___vfprintf_internal_r+0x1c58>
 4002518:	d8800717 	ldw	r2,28(sp)
 400251c:	14bf8b2e 	bgeu	r2,r18,400234c <___vfprintf_internal_r+0x1acc>
 4002520:	9007883a 	mov	r3,r18
 4002524:	01000c04 	movi	r4,48
 4002528:	11000005 	stb	r4,0(r2)
 400252c:	10800044 	addi	r2,r2,1
 4002530:	d8800715 	stw	r2,28(sp)
 4002534:	18bffc1e 	bne	r3,r2,4002528 <___vfprintf_internal_r+0x1ca8>
 4002538:	003f8406 	br	400234c <___vfprintf_internal_r+0x1acc>
 400253c:	d8814117 	ldw	r2,1284(sp)
 4002540:	10c00007 	ldb	r3,0(r2)
 4002544:	00800c04 	movi	r2,48
 4002548:	18805b26 	beq	r3,r2,40026b8 <___vfprintf_internal_r+0x1e38>
 400254c:	d9000517 	ldw	r4,20(sp)
 4002550:	9125883a 	add	r18,r18,r4
 4002554:	003f7506 	br	400232c <___vfprintf_internal_r+0x1aac>
 4002558:	d9014c17 	ldw	r4,1328(sp)
 400255c:	2080004c 	andi	r2,r4,1
 4002560:	1005003a 	cmpeq	r2,r2,zero
 4002564:	103f6a26 	beq	r2,zero,4002310 <___vfprintf_internal_r+0x1a90>
 4002568:	d8800717 	ldw	r2,28(sp)
 400256c:	003f7706 	br	400234c <___vfprintf_internal_r+0x1acc>
 4002570:	d9c14515 	stw	r7,1300(sp)
 4002574:	38004d16 	blt	r7,zero,40026ac <___vfprintf_internal_r+0x1e2c>
 4002578:	dc814715 	stw	r18,1308(sp)
 400257c:	d8014615 	stw	zero,1304(sp)
 4002580:	003b6106 	br	4001308 <___vfprintf_internal_r+0xa88>
 4002584:	d9014f17 	ldw	r4,1340(sp)
 4002588:	d8800504 	addi	r2,sp,20
 400258c:	d8800115 	stw	r2,4(sp)
 4002590:	d8c00604 	addi	r3,sp,24
 4002594:	d8800704 	addi	r2,sp,28
 4002598:	800b883a 	mov	r5,r16
 400259c:	880d883a 	mov	r6,r17
 40025a0:	01c000c4 	movi	r7,3
 40025a4:	d8c00215 	stw	r3,8(sp)
 40025a8:	d8800315 	stw	r2,12(sp)
 40025ac:	dcc00015 	stw	r19,0(sp)
 40025b0:	9829883a 	mov	r20,r19
 40025b4:	4002aa40 	call	4002aa4 <_dtoa_r>
 40025b8:	d8814115 	stw	r2,1284(sp)
 40025bc:	003f5106 	br	4002304 <___vfprintf_internal_r+0x1a84>
 40025c0:	d8c14217 	ldw	r3,1288(sp)
 40025c4:	d9014317 	ldw	r4,1292(sp)
 40025c8:	07000b44 	movi	fp,45
 40025cc:	1821883a 	mov	r16,r3
 40025d0:	2460003c 	xorhi	r17,r4,32768
 40025d4:	003f3106 	br	400229c <___vfprintf_internal_r+0x1a1c>
 40025d8:	9d000044 	addi	r20,r19,1
 40025dc:	003f3906 	br	40022c4 <___vfprintf_internal_r+0x1a44>
 40025e0:	983f251e 	bne	r19,zero,4002278 <___vfprintf_internal_r+0x19f8>
 40025e4:	04c00044 	movi	r19,1
 40025e8:	003f2306 	br	4002278 <___vfprintf_internal_r+0x19f8>
 40025ec:	04c00184 	movi	r19,6
 40025f0:	003f2106 	br	4002278 <___vfprintf_internal_r+0x19f8>
 40025f4:	d8014515 	stw	zero,1300(sp)
 40025f8:	003eee06 	br	40021b4 <___vfprintf_internal_r+0x1934>
 40025fc:	200f883a 	mov	r7,r4
 4002600:	0100370e 	bge	zero,r4,40026e0 <___vfprintf_internal_r+0x1e60>
 4002604:	9800031e 	bne	r19,zero,4002614 <___vfprintf_internal_r+0x1d94>
 4002608:	d9814c17 	ldw	r6,1328(sp)
 400260c:	3080004c 	andi	r2,r6,1
 4002610:	103fb726 	beq	r2,zero,40024f0 <___vfprintf_internal_r+0x1c70>
 4002614:	20800044 	addi	r2,r4,1
 4002618:	98a7883a 	add	r19,r19,r2
 400261c:	dcc14515 	stw	r19,1300(sp)
 4002620:	980f883a 	mov	r7,r19
 4002624:	983f800e 	bge	r19,zero,4002428 <___vfprintf_internal_r+0x1ba8>
 4002628:	003fb306 	br	40024f8 <___vfprintf_internal_r+0x1c78>
 400262c:	d9814d17 	ldw	r6,1332(sp)
 4002630:	31bfff84 	addi	r6,r6,-2
 4002634:	d9814d15 	stw	r6,1332(sp)
 4002638:	003f4c06 	br	400236c <___vfprintf_internal_r+0x1aec>
 400263c:	0100180e 	bge	zero,r4,40026a0 <___vfprintf_internal_r+0x1e20>
 4002640:	00800044 	movi	r2,1
 4002644:	1485883a 	add	r2,r2,r18
 4002648:	d8814515 	stw	r2,1300(sp)
 400264c:	100f883a 	mov	r7,r2
 4002650:	103f750e 	bge	r2,zero,4002428 <___vfprintf_internal_r+0x1ba8>
 4002654:	003fa806 	br	40024f8 <___vfprintf_internal_r+0x1c78>
 4002658:	80c00c04 	addi	r3,r16,48
 400265c:	00800c04 	movi	r2,48
 4002660:	d8c008c5 	stb	r3,35(sp)
 4002664:	d9800804 	addi	r6,sp,32
 4002668:	d8c00904 	addi	r3,sp,36
 400266c:	d8800885 	stb	r2,34(sp)
 4002670:	003f6506 	br	4002408 <___vfprintf_internal_r+0x1b88>
 4002674:	d9014c17 	ldw	r4,1328(sp)
 4002678:	2084703a 	and	r2,r4,r2
 400267c:	103f9c26 	beq	r2,zero,40024f0 <___vfprintf_internal_r+0x1c70>
 4002680:	003f6606 	br	400241c <___vfprintf_internal_r+0x1b9c>
 4002684:	d9800804 	addi	r6,sp,32
 4002688:	d8c00884 	addi	r3,sp,34
 400268c:	003f5e06 	br	4002408 <___vfprintf_internal_r+0x1b88>
 4002690:	00800b44 	movi	r2,45
 4002694:	0121c83a 	sub	r16,zero,r4
 4002698:	d8800845 	stb	r2,33(sp)
 400269c:	003f3d06 	br	4002394 <___vfprintf_internal_r+0x1b14>
 40026a0:	00800084 	movi	r2,2
 40026a4:	1105c83a 	sub	r2,r2,r4
 40026a8:	003fe606 	br	4002644 <___vfprintf_internal_r+0x1dc4>
 40026ac:	d8014515 	stw	zero,1300(sp)
 40026b0:	dc814715 	stw	r18,1308(sp)
 40026b4:	003fb106 	br	400257c <___vfprintf_internal_r+0x1cfc>
 40026b8:	000d883a 	mov	r6,zero
 40026bc:	000f883a 	mov	r7,zero
 40026c0:	8009883a 	mov	r4,r16
 40026c4:	880b883a 	mov	r5,r17
 40026c8:	40090d00 	call	40090d0 <__nedf2>
 40026cc:	103f9f26 	beq	r2,zero,400254c <___vfprintf_internal_r+0x1ccc>
 40026d0:	00800044 	movi	r2,1
 40026d4:	1509c83a 	sub	r4,r2,r20
 40026d8:	d9000515 	stw	r4,20(sp)
 40026dc:	003f9b06 	br	400254c <___vfprintf_internal_r+0x1ccc>
 40026e0:	98000d1e 	bne	r19,zero,4002718 <___vfprintf_internal_r+0x1e98>
 40026e4:	d8c14c17 	ldw	r3,1328(sp)
 40026e8:	1880004c 	andi	r2,r3,1
 40026ec:	10000a1e 	bne	r2,zero,4002718 <___vfprintf_internal_r+0x1e98>
 40026f0:	01000044 	movi	r4,1
 40026f4:	200f883a 	mov	r7,r4
 40026f8:	d9014515 	stw	r4,1300(sp)
 40026fc:	003f4a06 	br	4002428 <___vfprintf_internal_r+0x1ba8>
 4002700:	3cc00017 	ldw	r19,0(r7)
 4002704:	39c00104 	addi	r7,r7,4
 4002708:	983d0e0e 	bge	r19,zero,4001b44 <___vfprintf_internal_r+0x12c4>
 400270c:	b8c00007 	ldb	r3,0(r23)
 4002710:	04ffffc4 	movi	r19,-1
 4002714:	0038d906 	br	4000a7c <___vfprintf_internal_r+0x1fc>
 4002718:	9cc00084 	addi	r19,r19,2
 400271c:	dcc14515 	stw	r19,1300(sp)
 4002720:	980f883a 	mov	r7,r19
 4002724:	983f400e 	bge	r19,zero,4002428 <___vfprintf_internal_r+0x1ba8>
 4002728:	003f7306 	br	40024f8 <___vfprintf_internal_r+0x1c78>

0400272c <__vfprintf_internal>:
 400272c:	008100b4 	movhi	r2,1026
 4002730:	10a19b04 	addi	r2,r2,-31124
 4002734:	2013883a 	mov	r9,r4
 4002738:	11000017 	ldw	r4,0(r2)
 400273c:	2805883a 	mov	r2,r5
 4002740:	300f883a 	mov	r7,r6
 4002744:	480b883a 	mov	r5,r9
 4002748:	100d883a 	mov	r6,r2
 400274c:	40008801 	jmpi	4000880 <___vfprintf_internal_r>

04002750 <__swsetup_r>:
 4002750:	008100b4 	movhi	r2,1026
 4002754:	10a19b04 	addi	r2,r2,-31124
 4002758:	10c00017 	ldw	r3,0(r2)
 400275c:	defffd04 	addi	sp,sp,-12
 4002760:	dc400115 	stw	r17,4(sp)
 4002764:	dc000015 	stw	r16,0(sp)
 4002768:	dfc00215 	stw	ra,8(sp)
 400276c:	2023883a 	mov	r17,r4
 4002770:	2821883a 	mov	r16,r5
 4002774:	18000226 	beq	r3,zero,4002780 <__swsetup_r+0x30>
 4002778:	18800e17 	ldw	r2,56(r3)
 400277c:	10001f26 	beq	r2,zero,40027fc <__swsetup_r+0xac>
 4002780:	8100030b 	ldhu	r4,12(r16)
 4002784:	2080020c 	andi	r2,r4,8
 4002788:	10002826 	beq	r2,zero,400282c <__swsetup_r+0xdc>
 400278c:	81400417 	ldw	r5,16(r16)
 4002790:	28001d26 	beq	r5,zero,4002808 <__swsetup_r+0xb8>
 4002794:	2080004c 	andi	r2,r4,1
 4002798:	1005003a 	cmpeq	r2,r2,zero
 400279c:	10000b26 	beq	r2,zero,40027cc <__swsetup_r+0x7c>
 40027a0:	2080008c 	andi	r2,r4,2
 40027a4:	10001226 	beq	r2,zero,40027f0 <__swsetup_r+0xa0>
 40027a8:	0005883a 	mov	r2,zero
 40027ac:	80800215 	stw	r2,8(r16)
 40027b0:	28000b26 	beq	r5,zero,40027e0 <__swsetup_r+0x90>
 40027b4:	0005883a 	mov	r2,zero
 40027b8:	dfc00217 	ldw	ra,8(sp)
 40027bc:	dc400117 	ldw	r17,4(sp)
 40027c0:	dc000017 	ldw	r16,0(sp)
 40027c4:	dec00304 	addi	sp,sp,12
 40027c8:	f800283a 	ret
 40027cc:	80800517 	ldw	r2,20(r16)
 40027d0:	80000215 	stw	zero,8(r16)
 40027d4:	0085c83a 	sub	r2,zero,r2
 40027d8:	80800615 	stw	r2,24(r16)
 40027dc:	283ff51e 	bne	r5,zero,40027b4 <__swsetup_r+0x64>
 40027e0:	2080200c 	andi	r2,r4,128
 40027e4:	103ff326 	beq	r2,zero,40027b4 <__swsetup_r+0x64>
 40027e8:	00bfffc4 	movi	r2,-1
 40027ec:	003ff206 	br	40027b8 <__swsetup_r+0x68>
 40027f0:	80800517 	ldw	r2,20(r16)
 40027f4:	80800215 	stw	r2,8(r16)
 40027f8:	003fed06 	br	40027b0 <__swsetup_r+0x60>
 40027fc:	1809883a 	mov	r4,r3
 4002800:	40042f00 	call	40042f0 <__sinit>
 4002804:	003fde06 	br	4002780 <__swsetup_r+0x30>
 4002808:	20c0a00c 	andi	r3,r4,640
 400280c:	00808004 	movi	r2,512
 4002810:	18bfe026 	beq	r3,r2,4002794 <__swsetup_r+0x44>
 4002814:	8809883a 	mov	r4,r17
 4002818:	800b883a 	mov	r5,r16
 400281c:	40050680 	call	4005068 <__smakebuf_r>
 4002820:	8100030b 	ldhu	r4,12(r16)
 4002824:	81400417 	ldw	r5,16(r16)
 4002828:	003fda06 	br	4002794 <__swsetup_r+0x44>
 400282c:	2080040c 	andi	r2,r4,16
 4002830:	103fed26 	beq	r2,zero,40027e8 <__swsetup_r+0x98>
 4002834:	2080010c 	andi	r2,r4,4
 4002838:	10001226 	beq	r2,zero,4002884 <__swsetup_r+0x134>
 400283c:	81400c17 	ldw	r5,48(r16)
 4002840:	28000526 	beq	r5,zero,4002858 <__swsetup_r+0x108>
 4002844:	80801004 	addi	r2,r16,64
 4002848:	28800226 	beq	r5,r2,4002854 <__swsetup_r+0x104>
 400284c:	8809883a 	mov	r4,r17
 4002850:	40046740 	call	4004674 <_free_r>
 4002854:	80000c15 	stw	zero,48(r16)
 4002858:	8080030b 	ldhu	r2,12(r16)
 400285c:	81400417 	ldw	r5,16(r16)
 4002860:	80000115 	stw	zero,4(r16)
 4002864:	10bff6cc 	andi	r2,r2,65499
 4002868:	8080030d 	sth	r2,12(r16)
 400286c:	81400015 	stw	r5,0(r16)
 4002870:	8080030b 	ldhu	r2,12(r16)
 4002874:	10800214 	ori	r2,r2,8
 4002878:	113fffcc 	andi	r4,r2,65535
 400287c:	8080030d 	sth	r2,12(r16)
 4002880:	003fc306 	br	4002790 <__swsetup_r+0x40>
 4002884:	81400417 	ldw	r5,16(r16)
 4002888:	003ff906 	br	4002870 <__swsetup_r+0x120>

0400288c <quorem>:
 400288c:	28c00417 	ldw	r3,16(r5)
 4002890:	20800417 	ldw	r2,16(r4)
 4002894:	defff604 	addi	sp,sp,-40
 4002898:	ddc00715 	stw	r23,28(sp)
 400289c:	dd400515 	stw	r21,20(sp)
 40028a0:	dfc00915 	stw	ra,36(sp)
 40028a4:	df000815 	stw	fp,32(sp)
 40028a8:	dd800615 	stw	r22,24(sp)
 40028ac:	dd000415 	stw	r20,16(sp)
 40028b0:	dcc00315 	stw	r19,12(sp)
 40028b4:	dc800215 	stw	r18,8(sp)
 40028b8:	dc400115 	stw	r17,4(sp)
 40028bc:	dc000015 	stw	r16,0(sp)
 40028c0:	202f883a 	mov	r23,r4
 40028c4:	282b883a 	mov	r21,r5
 40028c8:	10c07416 	blt	r2,r3,4002a9c <quorem+0x210>
 40028cc:	1c7fffc4 	addi	r17,r3,-1
 40028d0:	8c45883a 	add	r2,r17,r17
 40028d4:	1085883a 	add	r2,r2,r2
 40028d8:	2c000504 	addi	r16,r5,20
 40028dc:	24c00504 	addi	r19,r4,20
 40028e0:	14ed883a 	add	r22,r2,r19
 40028e4:	80a5883a 	add	r18,r16,r2
 40028e8:	b7000017 	ldw	fp,0(r22)
 40028ec:	91400017 	ldw	r5,0(r18)
 40028f0:	e009883a 	mov	r4,fp
 40028f4:	29400044 	addi	r5,r5,1
 40028f8:	40097900 	call	4009790 <__udivsi3>
 40028fc:	1029883a 	mov	r20,r2
 4002900:	10003c1e 	bne	r2,zero,40029f4 <quorem+0x168>
 4002904:	a80b883a 	mov	r5,r21
 4002908:	b809883a 	mov	r4,r23
 400290c:	4005d940 	call	4005d94 <__mcmp>
 4002910:	10002b16 	blt	r2,zero,40029c0 <quorem+0x134>
 4002914:	a5000044 	addi	r20,r20,1
 4002918:	980f883a 	mov	r7,r19
 400291c:	0011883a 	mov	r8,zero
 4002920:	0009883a 	mov	r4,zero
 4002924:	81400017 	ldw	r5,0(r16)
 4002928:	38c00017 	ldw	r3,0(r7)
 400292c:	84000104 	addi	r16,r16,4
 4002930:	28bfffcc 	andi	r2,r5,65535
 4002934:	2085883a 	add	r2,r4,r2
 4002938:	11bfffcc 	andi	r6,r2,65535
 400293c:	193fffcc 	andi	r4,r3,65535
 4002940:	1004d43a 	srli	r2,r2,16
 4002944:	280ad43a 	srli	r5,r5,16
 4002948:	2189c83a 	sub	r4,r4,r6
 400294c:	2209883a 	add	r4,r4,r8
 4002950:	1806d43a 	srli	r3,r3,16
 4002954:	288b883a 	add	r5,r5,r2
 4002958:	200dd43a 	srai	r6,r4,16
 400295c:	28bfffcc 	andi	r2,r5,65535
 4002960:	1887c83a 	sub	r3,r3,r2
 4002964:	1987883a 	add	r3,r3,r6
 4002968:	3900000d 	sth	r4,0(r7)
 400296c:	38c0008d 	sth	r3,2(r7)
 4002970:	2808d43a 	srli	r4,r5,16
 4002974:	39c00104 	addi	r7,r7,4
 4002978:	1811d43a 	srai	r8,r3,16
 400297c:	943fe92e 	bgeu	r18,r16,4002924 <quorem+0x98>
 4002980:	8c45883a 	add	r2,r17,r17
 4002984:	1085883a 	add	r2,r2,r2
 4002988:	9885883a 	add	r2,r19,r2
 400298c:	10c00017 	ldw	r3,0(r2)
 4002990:	18000b1e 	bne	r3,zero,40029c0 <quorem+0x134>
 4002994:	113fff04 	addi	r4,r2,-4
 4002998:	9900082e 	bgeu	r19,r4,40029bc <quorem+0x130>
 400299c:	10bfff17 	ldw	r2,-4(r2)
 40029a0:	10000326 	beq	r2,zero,40029b0 <quorem+0x124>
 40029a4:	00000506 	br	40029bc <quorem+0x130>
 40029a8:	20800017 	ldw	r2,0(r4)
 40029ac:	1000031e 	bne	r2,zero,40029bc <quorem+0x130>
 40029b0:	213fff04 	addi	r4,r4,-4
 40029b4:	8c7fffc4 	addi	r17,r17,-1
 40029b8:	993ffb36 	bltu	r19,r4,40029a8 <quorem+0x11c>
 40029bc:	bc400415 	stw	r17,16(r23)
 40029c0:	a005883a 	mov	r2,r20
 40029c4:	dfc00917 	ldw	ra,36(sp)
 40029c8:	df000817 	ldw	fp,32(sp)
 40029cc:	ddc00717 	ldw	r23,28(sp)
 40029d0:	dd800617 	ldw	r22,24(sp)
 40029d4:	dd400517 	ldw	r21,20(sp)
 40029d8:	dd000417 	ldw	r20,16(sp)
 40029dc:	dcc00317 	ldw	r19,12(sp)
 40029e0:	dc800217 	ldw	r18,8(sp)
 40029e4:	dc400117 	ldw	r17,4(sp)
 40029e8:	dc000017 	ldw	r16,0(sp)
 40029ec:	dec00a04 	addi	sp,sp,40
 40029f0:	f800283a 	ret
 40029f4:	980f883a 	mov	r7,r19
 40029f8:	8011883a 	mov	r8,r16
 40029fc:	0013883a 	mov	r9,zero
 4002a00:	000d883a 	mov	r6,zero
 4002a04:	40c00017 	ldw	r3,0(r8)
 4002a08:	39000017 	ldw	r4,0(r7)
 4002a0c:	42000104 	addi	r8,r8,4
 4002a10:	18bfffcc 	andi	r2,r3,65535
 4002a14:	a085383a 	mul	r2,r20,r2
 4002a18:	1806d43a 	srli	r3,r3,16
 4002a1c:	217fffcc 	andi	r5,r4,65535
 4002a20:	3085883a 	add	r2,r6,r2
 4002a24:	11bfffcc 	andi	r6,r2,65535
 4002a28:	a0c7383a 	mul	r3,r20,r3
 4002a2c:	1004d43a 	srli	r2,r2,16
 4002a30:	298bc83a 	sub	r5,r5,r6
 4002a34:	2a4b883a 	add	r5,r5,r9
 4002a38:	2008d43a 	srli	r4,r4,16
 4002a3c:	1887883a 	add	r3,r3,r2
 4002a40:	280dd43a 	srai	r6,r5,16
 4002a44:	18bfffcc 	andi	r2,r3,65535
 4002a48:	2089c83a 	sub	r4,r4,r2
 4002a4c:	2189883a 	add	r4,r4,r6
 4002a50:	3900008d 	sth	r4,2(r7)
 4002a54:	3940000d 	sth	r5,0(r7)
 4002a58:	180cd43a 	srli	r6,r3,16
 4002a5c:	39c00104 	addi	r7,r7,4
 4002a60:	2013d43a 	srai	r9,r4,16
 4002a64:	923fe72e 	bgeu	r18,r8,4002a04 <quorem+0x178>
 4002a68:	e03fa61e 	bne	fp,zero,4002904 <quorem+0x78>
 4002a6c:	b0ffff04 	addi	r3,r22,-4
 4002a70:	98c0082e 	bgeu	r19,r3,4002a94 <quorem+0x208>
 4002a74:	b0bfff17 	ldw	r2,-4(r22)
 4002a78:	10000326 	beq	r2,zero,4002a88 <quorem+0x1fc>
 4002a7c:	00000506 	br	4002a94 <quorem+0x208>
 4002a80:	18800017 	ldw	r2,0(r3)
 4002a84:	1000031e 	bne	r2,zero,4002a94 <quorem+0x208>
 4002a88:	18ffff04 	addi	r3,r3,-4
 4002a8c:	8c7fffc4 	addi	r17,r17,-1
 4002a90:	98fffb36 	bltu	r19,r3,4002a80 <quorem+0x1f4>
 4002a94:	bc400415 	stw	r17,16(r23)
 4002a98:	003f9a06 	br	4002904 <quorem+0x78>
 4002a9c:	0005883a 	mov	r2,zero
 4002aa0:	003fc806 	br	40029c4 <quorem+0x138>

04002aa4 <_dtoa_r>:
 4002aa4:	22001017 	ldw	r8,64(r4)
 4002aa8:	deffda04 	addi	sp,sp,-152
 4002aac:	dd402115 	stw	r21,132(sp)
 4002ab0:	dd002015 	stw	r20,128(sp)
 4002ab4:	dc801e15 	stw	r18,120(sp)
 4002ab8:	dc401d15 	stw	r17,116(sp)
 4002abc:	dfc02515 	stw	ra,148(sp)
 4002ac0:	df002415 	stw	fp,144(sp)
 4002ac4:	ddc02315 	stw	r23,140(sp)
 4002ac8:	dd802215 	stw	r22,136(sp)
 4002acc:	dcc01f15 	stw	r19,124(sp)
 4002ad0:	dc001c15 	stw	r16,112(sp)
 4002ad4:	d9001615 	stw	r4,88(sp)
 4002ad8:	3023883a 	mov	r17,r6
 4002adc:	2829883a 	mov	r20,r5
 4002ae0:	d9c01715 	stw	r7,92(sp)
 4002ae4:	dc802817 	ldw	r18,160(sp)
 4002ae8:	302b883a 	mov	r21,r6
 4002aec:	40000a26 	beq	r8,zero,4002b18 <_dtoa_r+0x74>
 4002af0:	20801117 	ldw	r2,68(r4)
 4002af4:	400b883a 	mov	r5,r8
 4002af8:	40800115 	stw	r2,4(r8)
 4002afc:	20c01117 	ldw	r3,68(r4)
 4002b00:	00800044 	movi	r2,1
 4002b04:	10c4983a 	sll	r2,r2,r3
 4002b08:	40800215 	stw	r2,8(r8)
 4002b0c:	4005c380 	call	4005c38 <_Bfree>
 4002b10:	d8c01617 	ldw	r3,88(sp)
 4002b14:	18001015 	stw	zero,64(r3)
 4002b18:	8800a316 	blt	r17,zero,4002da8 <_dtoa_r+0x304>
 4002b1c:	90000015 	stw	zero,0(r18)
 4002b20:	a8dffc2c 	andhi	r3,r21,32752
 4002b24:	009ffc34 	movhi	r2,32752
 4002b28:	18809126 	beq	r3,r2,4002d70 <_dtoa_r+0x2cc>
 4002b2c:	000d883a 	mov	r6,zero
 4002b30:	000f883a 	mov	r7,zero
 4002b34:	a009883a 	mov	r4,r20
 4002b38:	a80b883a 	mov	r5,r21
 4002b3c:	dd001215 	stw	r20,72(sp)
 4002b40:	dd401315 	stw	r21,76(sp)
 4002b44:	40090d00 	call	40090d0 <__nedf2>
 4002b48:	1000171e 	bne	r2,zero,4002ba8 <_dtoa_r+0x104>
 4002b4c:	d9802717 	ldw	r6,156(sp)
 4002b50:	00800044 	movi	r2,1
 4002b54:	30800015 	stw	r2,0(r6)
 4002b58:	d8802917 	ldw	r2,164(sp)
 4002b5c:	10029b26 	beq	r2,zero,40035cc <_dtoa_r+0xb28>
 4002b60:	d9002917 	ldw	r4,164(sp)
 4002b64:	00810074 	movhi	r2,1025
 4002b68:	1099d144 	addi	r2,r2,26437
 4002b6c:	10ffffc4 	addi	r3,r2,-1
 4002b70:	20800015 	stw	r2,0(r4)
 4002b74:	1805883a 	mov	r2,r3
 4002b78:	dfc02517 	ldw	ra,148(sp)
 4002b7c:	df002417 	ldw	fp,144(sp)
 4002b80:	ddc02317 	ldw	r23,140(sp)
 4002b84:	dd802217 	ldw	r22,136(sp)
 4002b88:	dd402117 	ldw	r21,132(sp)
 4002b8c:	dd002017 	ldw	r20,128(sp)
 4002b90:	dcc01f17 	ldw	r19,124(sp)
 4002b94:	dc801e17 	ldw	r18,120(sp)
 4002b98:	dc401d17 	ldw	r17,116(sp)
 4002b9c:	dc001c17 	ldw	r16,112(sp)
 4002ba0:	dec02604 	addi	sp,sp,152
 4002ba4:	f800283a 	ret
 4002ba8:	d9001617 	ldw	r4,88(sp)
 4002bac:	d9401217 	ldw	r5,72(sp)
 4002bb0:	d8800104 	addi	r2,sp,4
 4002bb4:	a80d883a 	mov	r6,r21
 4002bb8:	d9c00204 	addi	r7,sp,8
 4002bbc:	d8800015 	stw	r2,0(sp)
 4002bc0:	40062740 	call	4006274 <__d2b>
 4002bc4:	d8800715 	stw	r2,28(sp)
 4002bc8:	a804d53a 	srli	r2,r21,20
 4002bcc:	1101ffcc 	andi	r4,r2,2047
 4002bd0:	20008626 	beq	r4,zero,4002dec <_dtoa_r+0x348>
 4002bd4:	d8c01217 	ldw	r3,72(sp)
 4002bd8:	00800434 	movhi	r2,16
 4002bdc:	10bfffc4 	addi	r2,r2,-1
 4002be0:	ddc00117 	ldw	r23,4(sp)
 4002be4:	a884703a 	and	r2,r21,r2
 4002be8:	1811883a 	mov	r8,r3
 4002bec:	124ffc34 	orhi	r9,r2,16368
 4002bf0:	25bf0044 	addi	r22,r4,-1023
 4002bf4:	d8000815 	stw	zero,32(sp)
 4002bf8:	0005883a 	mov	r2,zero
 4002bfc:	00cffe34 	movhi	r3,16376
 4002c00:	480b883a 	mov	r5,r9
 4002c04:	4009883a 	mov	r4,r8
 4002c08:	180f883a 	mov	r7,r3
 4002c0c:	100d883a 	mov	r6,r2
 4002c10:	40089380 	call	4008938 <__subdf3>
 4002c14:	0218dbf4 	movhi	r8,25455
 4002c18:	4210d844 	addi	r8,r8,17249
 4002c1c:	024ff4f4 	movhi	r9,16339
 4002c20:	4a61e9c4 	addi	r9,r9,-30809
 4002c24:	480f883a 	mov	r7,r9
 4002c28:	400d883a 	mov	r6,r8
 4002c2c:	180b883a 	mov	r5,r3
 4002c30:	1009883a 	mov	r4,r2
 4002c34:	4008a2c0 	call	4008a2c <__muldf3>
 4002c38:	0222d874 	movhi	r8,35681
 4002c3c:	42322cc4 	addi	r8,r8,-14157
 4002c40:	024ff1f4 	movhi	r9,16327
 4002c44:	4a628a04 	addi	r9,r9,-30168
 4002c48:	480f883a 	mov	r7,r9
 4002c4c:	400d883a 	mov	r6,r8
 4002c50:	180b883a 	mov	r5,r3
 4002c54:	1009883a 	mov	r4,r2
 4002c58:	40089b80 	call	40089b8 <__adddf3>
 4002c5c:	b009883a 	mov	r4,r22
 4002c60:	1021883a 	mov	r16,r2
 4002c64:	1823883a 	mov	r17,r3
 4002c68:	40092f00 	call	40092f0 <__floatsidf>
 4002c6c:	021427f4 	movhi	r8,20639
 4002c70:	421e7ec4 	addi	r8,r8,31227
 4002c74:	024ff4f4 	movhi	r9,16339
 4002c78:	4a5104c4 	addi	r9,r9,17427
 4002c7c:	480f883a 	mov	r7,r9
 4002c80:	400d883a 	mov	r6,r8
 4002c84:	180b883a 	mov	r5,r3
 4002c88:	1009883a 	mov	r4,r2
 4002c8c:	4008a2c0 	call	4008a2c <__muldf3>
 4002c90:	180f883a 	mov	r7,r3
 4002c94:	880b883a 	mov	r5,r17
 4002c98:	100d883a 	mov	r6,r2
 4002c9c:	8009883a 	mov	r4,r16
 4002ca0:	40089b80 	call	40089b8 <__adddf3>
 4002ca4:	1009883a 	mov	r4,r2
 4002ca8:	180b883a 	mov	r5,r3
 4002cac:	1021883a 	mov	r16,r2
 4002cb0:	1823883a 	mov	r17,r3
 4002cb4:	40093e80 	call	40093e8 <__fixdfsi>
 4002cb8:	000d883a 	mov	r6,zero
 4002cbc:	000f883a 	mov	r7,zero
 4002cc0:	8009883a 	mov	r4,r16
 4002cc4:	880b883a 	mov	r5,r17
 4002cc8:	d8800d15 	stw	r2,52(sp)
 4002ccc:	40092680 	call	4009268 <__ltdf2>
 4002cd0:	10031716 	blt	r2,zero,4003930 <_dtoa_r+0xe8c>
 4002cd4:	d8c00d17 	ldw	r3,52(sp)
 4002cd8:	00800584 	movi	r2,22
 4002cdc:	10c1482e 	bgeu	r2,r3,4003200 <_dtoa_r+0x75c>
 4002ce0:	01000044 	movi	r4,1
 4002ce4:	d9000c15 	stw	r4,48(sp)
 4002ce8:	bd85c83a 	sub	r2,r23,r22
 4002cec:	11bfffc4 	addi	r6,r2,-1
 4002cf0:	30030b16 	blt	r6,zero,4003920 <_dtoa_r+0xe7c>
 4002cf4:	d9800a15 	stw	r6,40(sp)
 4002cf8:	d8001115 	stw	zero,68(sp)
 4002cfc:	d8c00d17 	ldw	r3,52(sp)
 4002d00:	1802ff16 	blt	r3,zero,4003900 <_dtoa_r+0xe5c>
 4002d04:	d9000a17 	ldw	r4,40(sp)
 4002d08:	d8c00915 	stw	r3,36(sp)
 4002d0c:	d8001015 	stw	zero,64(sp)
 4002d10:	20c9883a 	add	r4,r4,r3
 4002d14:	d9000a15 	stw	r4,40(sp)
 4002d18:	d9001717 	ldw	r4,92(sp)
 4002d1c:	00800244 	movi	r2,9
 4002d20:	11004636 	bltu	r2,r4,4002e3c <_dtoa_r+0x398>
 4002d24:	00800144 	movi	r2,5
 4002d28:	11020416 	blt	r2,r4,400353c <_dtoa_r+0xa98>
 4002d2c:	04400044 	movi	r17,1
 4002d30:	d8c01717 	ldw	r3,92(sp)
 4002d34:	00800144 	movi	r2,5
 4002d38:	10c1ed36 	bltu	r2,r3,40034f0 <_dtoa_r+0xa4c>
 4002d3c:	18c5883a 	add	r2,r3,r3
 4002d40:	1085883a 	add	r2,r2,r2
 4002d44:	00c10034 	movhi	r3,1024
 4002d48:	18cb5604 	addi	r3,r3,11608
 4002d4c:	10c5883a 	add	r2,r2,r3
 4002d50:	11000017 	ldw	r4,0(r2)
 4002d54:	2000683a 	jmp	r4
 4002d58:	04002e44 	movi	r16,185
 4002d5c:	04002e44 	movi	r16,185
 4002d60:	04003844 	movi	r16,225
 4002d64:	0400381c 	xori	r16,zero,224
 4002d68:	04003860 	cmpeqi	r16,zero,225
 4002d6c:	0400386c 	andhi	r16,zero,225
 4002d70:	d9002717 	ldw	r4,156(sp)
 4002d74:	0089c3c4 	movi	r2,9999
 4002d78:	20800015 	stw	r2,0(r4)
 4002d7c:	a0001026 	beq	r20,zero,4002dc0 <_dtoa_r+0x31c>
 4002d80:	00c10074 	movhi	r3,1025
 4002d84:	18d9dd04 	addi	r3,r3,26484
 4002d88:	d9802917 	ldw	r6,164(sp)
 4002d8c:	303f7926 	beq	r6,zero,4002b74 <_dtoa_r+0xd0>
 4002d90:	188000c7 	ldb	r2,3(r3)
 4002d94:	190000c4 	addi	r4,r3,3
 4002d98:	1000101e 	bne	r2,zero,4002ddc <_dtoa_r+0x338>
 4002d9c:	d8802917 	ldw	r2,164(sp)
 4002da0:	11000015 	stw	r4,0(r2)
 4002da4:	003f7306 	br	4002b74 <_dtoa_r+0xd0>
 4002da8:	00a00034 	movhi	r2,32768
 4002dac:	10bfffc4 	addi	r2,r2,-1
 4002db0:	00c00044 	movi	r3,1
 4002db4:	88aa703a 	and	r21,r17,r2
 4002db8:	90c00015 	stw	r3,0(r18)
 4002dbc:	003f5806 	br	4002b20 <_dtoa_r+0x7c>
 4002dc0:	00800434 	movhi	r2,16
 4002dc4:	10bfffc4 	addi	r2,r2,-1
 4002dc8:	a884703a 	and	r2,r21,r2
 4002dcc:	103fec1e 	bne	r2,zero,4002d80 <_dtoa_r+0x2dc>
 4002dd0:	00c10074 	movhi	r3,1025
 4002dd4:	18d9da04 	addi	r3,r3,26472
 4002dd8:	003feb06 	br	4002d88 <_dtoa_r+0x2e4>
 4002ddc:	d8802917 	ldw	r2,164(sp)
 4002de0:	19000204 	addi	r4,r3,8
 4002de4:	11000015 	stw	r4,0(r2)
 4002de8:	003f6206 	br	4002b74 <_dtoa_r+0xd0>
 4002dec:	ddc00117 	ldw	r23,4(sp)
 4002df0:	d8800217 	ldw	r2,8(sp)
 4002df4:	01000804 	movi	r4,32
 4002df8:	b8c10c84 	addi	r3,r23,1074
 4002dfc:	18a3883a 	add	r17,r3,r2
 4002e00:	2441b80e 	bge	r4,r17,40034e4 <_dtoa_r+0xa40>
 4002e04:	00c01004 	movi	r3,64
 4002e08:	1c47c83a 	sub	r3,r3,r17
 4002e0c:	88bff804 	addi	r2,r17,-32
 4002e10:	a8c6983a 	sll	r3,r21,r3
 4002e14:	a084d83a 	srl	r2,r20,r2
 4002e18:	1888b03a 	or	r4,r3,r2
 4002e1c:	40094c00 	call	40094c0 <__floatunsidf>
 4002e20:	1011883a 	mov	r8,r2
 4002e24:	00bf8434 	movhi	r2,65040
 4002e28:	01000044 	movi	r4,1
 4002e2c:	10d3883a 	add	r9,r2,r3
 4002e30:	8dbef344 	addi	r22,r17,-1075
 4002e34:	d9000815 	stw	r4,32(sp)
 4002e38:	003f6f06 	br	4002bf8 <_dtoa_r+0x154>
 4002e3c:	d8001715 	stw	zero,92(sp)
 4002e40:	04400044 	movi	r17,1
 4002e44:	00bfffc4 	movi	r2,-1
 4002e48:	00c00044 	movi	r3,1
 4002e4c:	d8800e15 	stw	r2,56(sp)
 4002e50:	d8002615 	stw	zero,152(sp)
 4002e54:	d8800f15 	stw	r2,60(sp)
 4002e58:	d8c00b15 	stw	r3,44(sp)
 4002e5c:	1021883a 	mov	r16,r2
 4002e60:	d8801617 	ldw	r2,88(sp)
 4002e64:	10001115 	stw	zero,68(r2)
 4002e68:	d8801617 	ldw	r2,88(sp)
 4002e6c:	11401117 	ldw	r5,68(r2)
 4002e70:	1009883a 	mov	r4,r2
 4002e74:	40061b80 	call	40061b8 <_Balloc>
 4002e78:	d8c01617 	ldw	r3,88(sp)
 4002e7c:	d8800515 	stw	r2,20(sp)
 4002e80:	18801015 	stw	r2,64(r3)
 4002e84:	00800384 	movi	r2,14
 4002e88:	14006836 	bltu	r2,r16,400302c <_dtoa_r+0x588>
 4002e8c:	8805003a 	cmpeq	r2,r17,zero
 4002e90:	1000661e 	bne	r2,zero,400302c <_dtoa_r+0x588>
 4002e94:	d9000d17 	ldw	r4,52(sp)
 4002e98:	0102300e 	bge	zero,r4,400375c <_dtoa_r+0xcb8>
 4002e9c:	208003cc 	andi	r2,r4,15
 4002ea0:	100490fa 	slli	r2,r2,3
 4002ea4:	2025d13a 	srai	r18,r4,4
 4002ea8:	00c10074 	movhi	r3,1025
 4002eac:	18d9ef04 	addi	r3,r3,26556
 4002eb0:	10c5883a 	add	r2,r2,r3
 4002eb4:	90c0040c 	andi	r3,r18,16
 4002eb8:	14000017 	ldw	r16,0(r2)
 4002ebc:	14400117 	ldw	r17,4(r2)
 4002ec0:	18036a1e 	bne	r3,zero,4003c6c <_dtoa_r+0x11c8>
 4002ec4:	05800084 	movi	r22,2
 4002ec8:	90001026 	beq	r18,zero,4002f0c <_dtoa_r+0x468>
 4002ecc:	04c10074 	movhi	r19,1025
 4002ed0:	9cda2104 	addi	r19,r19,26756
 4002ed4:	9080004c 	andi	r2,r18,1
 4002ed8:	1005003a 	cmpeq	r2,r2,zero
 4002edc:	1000081e 	bne	r2,zero,4002f00 <_dtoa_r+0x45c>
 4002ee0:	99800017 	ldw	r6,0(r19)
 4002ee4:	99c00117 	ldw	r7,4(r19)
 4002ee8:	880b883a 	mov	r5,r17
 4002eec:	8009883a 	mov	r4,r16
 4002ef0:	4008a2c0 	call	4008a2c <__muldf3>
 4002ef4:	1021883a 	mov	r16,r2
 4002ef8:	b5800044 	addi	r22,r22,1
 4002efc:	1823883a 	mov	r17,r3
 4002f00:	9025d07a 	srai	r18,r18,1
 4002f04:	9cc00204 	addi	r19,r19,8
 4002f08:	903ff21e 	bne	r18,zero,4002ed4 <_dtoa_r+0x430>
 4002f0c:	a80b883a 	mov	r5,r21
 4002f10:	a009883a 	mov	r4,r20
 4002f14:	880f883a 	mov	r7,r17
 4002f18:	800d883a 	mov	r6,r16
 4002f1c:	4008df00 	call	4008df0 <__divdf3>
 4002f20:	1029883a 	mov	r20,r2
 4002f24:	182b883a 	mov	r21,r3
 4002f28:	d8c00c17 	ldw	r3,48(sp)
 4002f2c:	1805003a 	cmpeq	r2,r3,zero
 4002f30:	1000081e 	bne	r2,zero,4002f54 <_dtoa_r+0x4b0>
 4002f34:	0005883a 	mov	r2,zero
 4002f38:	00cffc34 	movhi	r3,16368
 4002f3c:	180f883a 	mov	r7,r3
 4002f40:	a009883a 	mov	r4,r20
 4002f44:	a80b883a 	mov	r5,r21
 4002f48:	100d883a 	mov	r6,r2
 4002f4c:	40092680 	call	4009268 <__ltdf2>
 4002f50:	1003fe16 	blt	r2,zero,4003f4c <_dtoa_r+0x14a8>
 4002f54:	b009883a 	mov	r4,r22
 4002f58:	40092f00 	call	40092f0 <__floatsidf>
 4002f5c:	180b883a 	mov	r5,r3
 4002f60:	1009883a 	mov	r4,r2
 4002f64:	a00d883a 	mov	r6,r20
 4002f68:	a80f883a 	mov	r7,r21
 4002f6c:	4008a2c0 	call	4008a2c <__muldf3>
 4002f70:	0011883a 	mov	r8,zero
 4002f74:	02500734 	movhi	r9,16412
 4002f78:	1009883a 	mov	r4,r2
 4002f7c:	180b883a 	mov	r5,r3
 4002f80:	480f883a 	mov	r7,r9
 4002f84:	400d883a 	mov	r6,r8
 4002f88:	40089b80 	call	40089b8 <__adddf3>
 4002f8c:	d9000f17 	ldw	r4,60(sp)
 4002f90:	102d883a 	mov	r22,r2
 4002f94:	00bf3034 	movhi	r2,64704
 4002f98:	18b9883a 	add	fp,r3,r2
 4002f9c:	e02f883a 	mov	r23,fp
 4002fa0:	20028f1e 	bne	r4,zero,40039e0 <_dtoa_r+0xf3c>
 4002fa4:	0005883a 	mov	r2,zero
 4002fa8:	00d00534 	movhi	r3,16404
 4002fac:	a009883a 	mov	r4,r20
 4002fb0:	a80b883a 	mov	r5,r21
 4002fb4:	180f883a 	mov	r7,r3
 4002fb8:	100d883a 	mov	r6,r2
 4002fbc:	40089380 	call	4008938 <__subdf3>
 4002fc0:	1009883a 	mov	r4,r2
 4002fc4:	e00f883a 	mov	r7,fp
 4002fc8:	180b883a 	mov	r5,r3
 4002fcc:	b00d883a 	mov	r6,r22
 4002fd0:	1025883a 	mov	r18,r2
 4002fd4:	1827883a 	mov	r19,r3
 4002fd8:	40091580 	call	4009158 <__gtdf2>
 4002fdc:	00834f16 	blt	zero,r2,4003d1c <_dtoa_r+0x1278>
 4002fe0:	e0e0003c 	xorhi	r3,fp,32768
 4002fe4:	9009883a 	mov	r4,r18
 4002fe8:	980b883a 	mov	r5,r19
 4002fec:	180f883a 	mov	r7,r3
 4002ff0:	b00d883a 	mov	r6,r22
 4002ff4:	40092680 	call	4009268 <__ltdf2>
 4002ff8:	1000080e 	bge	r2,zero,400301c <_dtoa_r+0x578>
 4002ffc:	0027883a 	mov	r19,zero
 4003000:	0025883a 	mov	r18,zero
 4003004:	d8802617 	ldw	r2,152(sp)
 4003008:	df000517 	ldw	fp,20(sp)
 400300c:	d8000615 	stw	zero,24(sp)
 4003010:	0084303a 	nor	r2,zero,r2
 4003014:	d8800d15 	stw	r2,52(sp)
 4003018:	00019b06 	br	4003688 <_dtoa_r+0xbe4>
 400301c:	d9801217 	ldw	r6,72(sp)
 4003020:	d8801317 	ldw	r2,76(sp)
 4003024:	3029883a 	mov	r20,r6
 4003028:	102b883a 	mov	r21,r2
 400302c:	d8c00217 	ldw	r3,8(sp)
 4003030:	18008516 	blt	r3,zero,4003248 <_dtoa_r+0x7a4>
 4003034:	d9000d17 	ldw	r4,52(sp)
 4003038:	00800384 	movi	r2,14
 400303c:	11008216 	blt	r2,r4,4003248 <_dtoa_r+0x7a4>
 4003040:	200490fa 	slli	r2,r4,3
 4003044:	d9802617 	ldw	r6,152(sp)
 4003048:	00c10074 	movhi	r3,1025
 400304c:	18d9ef04 	addi	r3,r3,26556
 4003050:	10c5883a 	add	r2,r2,r3
 4003054:	14800017 	ldw	r18,0(r2)
 4003058:	14c00117 	ldw	r19,4(r2)
 400305c:	30031e16 	blt	r6,zero,4003cd8 <_dtoa_r+0x1234>
 4003060:	d9000517 	ldw	r4,20(sp)
 4003064:	d8c00f17 	ldw	r3,60(sp)
 4003068:	a823883a 	mov	r17,r21
 400306c:	a021883a 	mov	r16,r20
 4003070:	192b883a 	add	r21,r3,r4
 4003074:	2039883a 	mov	fp,r4
 4003078:	00000f06 	br	40030b8 <_dtoa_r+0x614>
 400307c:	0005883a 	mov	r2,zero
 4003080:	00d00934 	movhi	r3,16420
 4003084:	5009883a 	mov	r4,r10
 4003088:	580b883a 	mov	r5,r11
 400308c:	180f883a 	mov	r7,r3
 4003090:	100d883a 	mov	r6,r2
 4003094:	4008a2c0 	call	4008a2c <__muldf3>
 4003098:	180b883a 	mov	r5,r3
 400309c:	000d883a 	mov	r6,zero
 40030a0:	000f883a 	mov	r7,zero
 40030a4:	1009883a 	mov	r4,r2
 40030a8:	1021883a 	mov	r16,r2
 40030ac:	1823883a 	mov	r17,r3
 40030b0:	40090d00 	call	40090d0 <__nedf2>
 40030b4:	10004526 	beq	r2,zero,40031cc <_dtoa_r+0x728>
 40030b8:	900d883a 	mov	r6,r18
 40030bc:	980f883a 	mov	r7,r19
 40030c0:	8009883a 	mov	r4,r16
 40030c4:	880b883a 	mov	r5,r17
 40030c8:	4008df00 	call	4008df0 <__divdf3>
 40030cc:	180b883a 	mov	r5,r3
 40030d0:	1009883a 	mov	r4,r2
 40030d4:	40093e80 	call	40093e8 <__fixdfsi>
 40030d8:	1009883a 	mov	r4,r2
 40030dc:	1029883a 	mov	r20,r2
 40030e0:	40092f00 	call	40092f0 <__floatsidf>
 40030e4:	180f883a 	mov	r7,r3
 40030e8:	9009883a 	mov	r4,r18
 40030ec:	980b883a 	mov	r5,r19
 40030f0:	100d883a 	mov	r6,r2
 40030f4:	4008a2c0 	call	4008a2c <__muldf3>
 40030f8:	180f883a 	mov	r7,r3
 40030fc:	880b883a 	mov	r5,r17
 4003100:	8009883a 	mov	r4,r16
 4003104:	100d883a 	mov	r6,r2
 4003108:	40089380 	call	4008938 <__subdf3>
 400310c:	1015883a 	mov	r10,r2
 4003110:	a0800c04 	addi	r2,r20,48
 4003114:	e0800005 	stb	r2,0(fp)
 4003118:	e7000044 	addi	fp,fp,1
 400311c:	1817883a 	mov	r11,r3
 4003120:	e57fd61e 	bne	fp,r21,400307c <_dtoa_r+0x5d8>
 4003124:	500d883a 	mov	r6,r10
 4003128:	180f883a 	mov	r7,r3
 400312c:	5009883a 	mov	r4,r10
 4003130:	180b883a 	mov	r5,r3
 4003134:	40089b80 	call	40089b8 <__adddf3>
 4003138:	100d883a 	mov	r6,r2
 400313c:	9009883a 	mov	r4,r18
 4003140:	980b883a 	mov	r5,r19
 4003144:	180f883a 	mov	r7,r3
 4003148:	1021883a 	mov	r16,r2
 400314c:	1823883a 	mov	r17,r3
 4003150:	40092680 	call	4009268 <__ltdf2>
 4003154:	10000816 	blt	r2,zero,4003178 <_dtoa_r+0x6d4>
 4003158:	980b883a 	mov	r5,r19
 400315c:	800d883a 	mov	r6,r16
 4003160:	880f883a 	mov	r7,r17
 4003164:	9009883a 	mov	r4,r18
 4003168:	40090480 	call	4009048 <__eqdf2>
 400316c:	1000171e 	bne	r2,zero,40031cc <_dtoa_r+0x728>
 4003170:	a080004c 	andi	r2,r20,1
 4003174:	10001526 	beq	r2,zero,40031cc <_dtoa_r+0x728>
 4003178:	d8800d17 	ldw	r2,52(sp)
 400317c:	d8800415 	stw	r2,16(sp)
 4003180:	e009883a 	mov	r4,fp
 4003184:	213fffc4 	addi	r4,r4,-1
 4003188:	20c00007 	ldb	r3,0(r4)
 400318c:	00800e44 	movi	r2,57
 4003190:	1880081e 	bne	r3,r2,40031b4 <_dtoa_r+0x710>
 4003194:	d8800517 	ldw	r2,20(sp)
 4003198:	113ffa1e 	bne	r2,r4,4003184 <_dtoa_r+0x6e0>
 400319c:	d8c00417 	ldw	r3,16(sp)
 40031a0:	d9800517 	ldw	r6,20(sp)
 40031a4:	00800c04 	movi	r2,48
 40031a8:	18c00044 	addi	r3,r3,1
 40031ac:	d8c00415 	stw	r3,16(sp)
 40031b0:	30800005 	stb	r2,0(r6)
 40031b4:	20800003 	ldbu	r2,0(r4)
 40031b8:	d8c00417 	ldw	r3,16(sp)
 40031bc:	27000044 	addi	fp,r4,1
 40031c0:	10800044 	addi	r2,r2,1
 40031c4:	d8c00d15 	stw	r3,52(sp)
 40031c8:	20800005 	stb	r2,0(r4)
 40031cc:	d9001617 	ldw	r4,88(sp)
 40031d0:	d9400717 	ldw	r5,28(sp)
 40031d4:	4005c380 	call	4005c38 <_Bfree>
 40031d8:	e0000005 	stb	zero,0(fp)
 40031dc:	d9800d17 	ldw	r6,52(sp)
 40031e0:	d8c02717 	ldw	r3,156(sp)
 40031e4:	d9002917 	ldw	r4,164(sp)
 40031e8:	30800044 	addi	r2,r6,1
 40031ec:	18800015 	stw	r2,0(r3)
 40031f0:	20029c26 	beq	r4,zero,4003c64 <_dtoa_r+0x11c0>
 40031f4:	d8c00517 	ldw	r3,20(sp)
 40031f8:	27000015 	stw	fp,0(r4)
 40031fc:	003e5d06 	br	4002b74 <_dtoa_r+0xd0>
 4003200:	d9800d17 	ldw	r6,52(sp)
 4003204:	00c10074 	movhi	r3,1025
 4003208:	18d9ef04 	addi	r3,r3,26556
 400320c:	d9001217 	ldw	r4,72(sp)
 4003210:	300490fa 	slli	r2,r6,3
 4003214:	d9401317 	ldw	r5,76(sp)
 4003218:	10c5883a 	add	r2,r2,r3
 400321c:	12000017 	ldw	r8,0(r2)
 4003220:	12400117 	ldw	r9,4(r2)
 4003224:	400d883a 	mov	r6,r8
 4003228:	480f883a 	mov	r7,r9
 400322c:	40092680 	call	4009268 <__ltdf2>
 4003230:	1000030e 	bge	r2,zero,4003240 <_dtoa_r+0x79c>
 4003234:	d8800d17 	ldw	r2,52(sp)
 4003238:	10bfffc4 	addi	r2,r2,-1
 400323c:	d8800d15 	stw	r2,52(sp)
 4003240:	d8000c15 	stw	zero,48(sp)
 4003244:	003ea806 	br	4002ce8 <_dtoa_r+0x244>
 4003248:	d9000b17 	ldw	r4,44(sp)
 400324c:	202cc03a 	cmpne	r22,r4,zero
 4003250:	b000c71e 	bne	r22,zero,4003570 <_dtoa_r+0xacc>
 4003254:	dc001117 	ldw	r16,68(sp)
 4003258:	dc801017 	ldw	r18,64(sp)
 400325c:	0027883a 	mov	r19,zero
 4003260:	04000b0e 	bge	zero,r16,4003290 <_dtoa_r+0x7ec>
 4003264:	d8c00a17 	ldw	r3,40(sp)
 4003268:	00c0090e 	bge	zero,r3,4003290 <_dtoa_r+0x7ec>
 400326c:	8005883a 	mov	r2,r16
 4003270:	1c011316 	blt	r3,r16,40036c0 <_dtoa_r+0xc1c>
 4003274:	d9000a17 	ldw	r4,40(sp)
 4003278:	d9801117 	ldw	r6,68(sp)
 400327c:	80a1c83a 	sub	r16,r16,r2
 4003280:	2089c83a 	sub	r4,r4,r2
 4003284:	308dc83a 	sub	r6,r6,r2
 4003288:	d9000a15 	stw	r4,40(sp)
 400328c:	d9801115 	stw	r6,68(sp)
 4003290:	d8801017 	ldw	r2,64(sp)
 4003294:	0080150e 	bge	zero,r2,40032ec <_dtoa_r+0x848>
 4003298:	d8c00b17 	ldw	r3,44(sp)
 400329c:	1805003a 	cmpeq	r2,r3,zero
 40032a0:	1001c91e 	bne	r2,zero,40039c8 <_dtoa_r+0xf24>
 40032a4:	04800e0e 	bge	zero,r18,40032e0 <_dtoa_r+0x83c>
 40032a8:	d9001617 	ldw	r4,88(sp)
 40032ac:	980b883a 	mov	r5,r19
 40032b0:	900d883a 	mov	r6,r18
 40032b4:	40069ec0 	call	40069ec <__pow5mult>
 40032b8:	d9001617 	ldw	r4,88(sp)
 40032bc:	d9800717 	ldw	r6,28(sp)
 40032c0:	100b883a 	mov	r5,r2
 40032c4:	1027883a 	mov	r19,r2
 40032c8:	40066c80 	call	40066c8 <__multiply>
 40032cc:	d9001617 	ldw	r4,88(sp)
 40032d0:	d9400717 	ldw	r5,28(sp)
 40032d4:	1023883a 	mov	r17,r2
 40032d8:	4005c380 	call	4005c38 <_Bfree>
 40032dc:	dc400715 	stw	r17,28(sp)
 40032e0:	d9001017 	ldw	r4,64(sp)
 40032e4:	248dc83a 	sub	r6,r4,r18
 40032e8:	30010e1e 	bne	r6,zero,4003724 <_dtoa_r+0xc80>
 40032ec:	d9001617 	ldw	r4,88(sp)
 40032f0:	04400044 	movi	r17,1
 40032f4:	880b883a 	mov	r5,r17
 40032f8:	40068b00 	call	40068b0 <__i2b>
 40032fc:	d9800917 	ldw	r6,36(sp)
 4003300:	1025883a 	mov	r18,r2
 4003304:	0180040e 	bge	zero,r6,4003318 <_dtoa_r+0x874>
 4003308:	d9001617 	ldw	r4,88(sp)
 400330c:	100b883a 	mov	r5,r2
 4003310:	40069ec0 	call	40069ec <__pow5mult>
 4003314:	1025883a 	mov	r18,r2
 4003318:	d8801717 	ldw	r2,92(sp)
 400331c:	8880f30e 	bge	r17,r2,40036ec <_dtoa_r+0xc48>
 4003320:	0023883a 	mov	r17,zero
 4003324:	d9800917 	ldw	r6,36(sp)
 4003328:	30019e1e 	bne	r6,zero,40039a4 <_dtoa_r+0xf00>
 400332c:	00c00044 	movi	r3,1
 4003330:	d9000a17 	ldw	r4,40(sp)
 4003334:	20c5883a 	add	r2,r4,r3
 4003338:	10c007cc 	andi	r3,r2,31
 400333c:	1800841e 	bne	r3,zero,4003550 <_dtoa_r+0xaac>
 4003340:	00800704 	movi	r2,28
 4003344:	d9000a17 	ldw	r4,40(sp)
 4003348:	d9801117 	ldw	r6,68(sp)
 400334c:	80a1883a 	add	r16,r16,r2
 4003350:	2089883a 	add	r4,r4,r2
 4003354:	308d883a 	add	r6,r6,r2
 4003358:	d9000a15 	stw	r4,40(sp)
 400335c:	d9801115 	stw	r6,68(sp)
 4003360:	d8801117 	ldw	r2,68(sp)
 4003364:	0080050e 	bge	zero,r2,400337c <_dtoa_r+0x8d8>
 4003368:	d9400717 	ldw	r5,28(sp)
 400336c:	d9001617 	ldw	r4,88(sp)
 4003370:	100d883a 	mov	r6,r2
 4003374:	400657c0 	call	400657c <__lshift>
 4003378:	d8800715 	stw	r2,28(sp)
 400337c:	d8c00a17 	ldw	r3,40(sp)
 4003380:	00c0050e 	bge	zero,r3,4003398 <_dtoa_r+0x8f4>
 4003384:	d9001617 	ldw	r4,88(sp)
 4003388:	900b883a 	mov	r5,r18
 400338c:	180d883a 	mov	r6,r3
 4003390:	400657c0 	call	400657c <__lshift>
 4003394:	1025883a 	mov	r18,r2
 4003398:	d9000c17 	ldw	r4,48(sp)
 400339c:	2005003a 	cmpeq	r2,r4,zero
 40033a0:	10016f26 	beq	r2,zero,4003960 <_dtoa_r+0xebc>
 40033a4:	d9000f17 	ldw	r4,60(sp)
 40033a8:	0102170e 	bge	zero,r4,4003c08 <_dtoa_r+0x1164>
 40033ac:	d9800b17 	ldw	r6,44(sp)
 40033b0:	3005003a 	cmpeq	r2,r6,zero
 40033b4:	1000881e 	bne	r2,zero,40035d8 <_dtoa_r+0xb34>
 40033b8:	0400050e 	bge	zero,r16,40033d0 <_dtoa_r+0x92c>
 40033bc:	d9001617 	ldw	r4,88(sp)
 40033c0:	980b883a 	mov	r5,r19
 40033c4:	800d883a 	mov	r6,r16
 40033c8:	400657c0 	call	400657c <__lshift>
 40033cc:	1027883a 	mov	r19,r2
 40033d0:	8804c03a 	cmpne	r2,r17,zero
 40033d4:	1002541e 	bne	r2,zero,4003d28 <_dtoa_r+0x1284>
 40033d8:	980b883a 	mov	r5,r19
 40033dc:	dd800517 	ldw	r22,20(sp)
 40033e0:	dcc00615 	stw	r19,24(sp)
 40033e4:	a700004c 	andi	fp,r20,1
 40033e8:	2827883a 	mov	r19,r5
 40033ec:	d9000717 	ldw	r4,28(sp)
 40033f0:	900b883a 	mov	r5,r18
 40033f4:	400288c0 	call	400288c <quorem>
 40033f8:	d9000717 	ldw	r4,28(sp)
 40033fc:	d9400617 	ldw	r5,24(sp)
 4003400:	1023883a 	mov	r17,r2
 4003404:	8dc00c04 	addi	r23,r17,48
 4003408:	4005d940 	call	4005d94 <__mcmp>
 400340c:	d9001617 	ldw	r4,88(sp)
 4003410:	900b883a 	mov	r5,r18
 4003414:	980d883a 	mov	r6,r19
 4003418:	1029883a 	mov	r20,r2
 400341c:	40063f00 	call	40063f0 <__mdiff>
 4003420:	102b883a 	mov	r21,r2
 4003424:	10800317 	ldw	r2,12(r2)
 4003428:	1001281e 	bne	r2,zero,40038cc <_dtoa_r+0xe28>
 400342c:	d9000717 	ldw	r4,28(sp)
 4003430:	a80b883a 	mov	r5,r21
 4003434:	4005d940 	call	4005d94 <__mcmp>
 4003438:	d9001617 	ldw	r4,88(sp)
 400343c:	1021883a 	mov	r16,r2
 4003440:	a80b883a 	mov	r5,r21
 4003444:	4005c380 	call	4005c38 <_Bfree>
 4003448:	8000041e 	bne	r16,zero,400345c <_dtoa_r+0x9b8>
 400344c:	d8801717 	ldw	r2,92(sp)
 4003450:	1000021e 	bne	r2,zero,400345c <_dtoa_r+0x9b8>
 4003454:	e004c03a 	cmpne	r2,fp,zero
 4003458:	10011726 	beq	r2,zero,40038b8 <_dtoa_r+0xe14>
 400345c:	a0010616 	blt	r20,zero,4003878 <_dtoa_r+0xdd4>
 4003460:	a000041e 	bne	r20,zero,4003474 <_dtoa_r+0x9d0>
 4003464:	d8c01717 	ldw	r3,92(sp)
 4003468:	1800021e 	bne	r3,zero,4003474 <_dtoa_r+0x9d0>
 400346c:	e004c03a 	cmpne	r2,fp,zero
 4003470:	10010126 	beq	r2,zero,4003878 <_dtoa_r+0xdd4>
 4003474:	04023d16 	blt	zero,r16,4003d6c <_dtoa_r+0x12c8>
 4003478:	b5c00005 	stb	r23,0(r22)
 400347c:	d9800517 	ldw	r6,20(sp)
 4003480:	d9000f17 	ldw	r4,60(sp)
 4003484:	b5800044 	addi	r22,r22,1
 4003488:	3105883a 	add	r2,r6,r4
 400348c:	b0806526 	beq	r22,r2,4003624 <_dtoa_r+0xb80>
 4003490:	d9400717 	ldw	r5,28(sp)
 4003494:	d9001617 	ldw	r4,88(sp)
 4003498:	01800284 	movi	r6,10
 400349c:	000f883a 	mov	r7,zero
 40034a0:	40068ec0 	call	40068ec <__multadd>
 40034a4:	d8800715 	stw	r2,28(sp)
 40034a8:	d8800617 	ldw	r2,24(sp)
 40034ac:	14c10c26 	beq	r2,r19,40038e0 <_dtoa_r+0xe3c>
 40034b0:	d9400617 	ldw	r5,24(sp)
 40034b4:	d9001617 	ldw	r4,88(sp)
 40034b8:	01800284 	movi	r6,10
 40034bc:	000f883a 	mov	r7,zero
 40034c0:	40068ec0 	call	40068ec <__multadd>
 40034c4:	d9001617 	ldw	r4,88(sp)
 40034c8:	980b883a 	mov	r5,r19
 40034cc:	01800284 	movi	r6,10
 40034d0:	000f883a 	mov	r7,zero
 40034d4:	d8800615 	stw	r2,24(sp)
 40034d8:	40068ec0 	call	40068ec <__multadd>
 40034dc:	1027883a 	mov	r19,r2
 40034e0:	003fc206 	br	40033ec <_dtoa_r+0x948>
 40034e4:	2445c83a 	sub	r2,r4,r17
 40034e8:	a088983a 	sll	r4,r20,r2
 40034ec:	003e4b06 	br	4002e1c <_dtoa_r+0x378>
 40034f0:	01bfffc4 	movi	r6,-1
 40034f4:	00800044 	movi	r2,1
 40034f8:	d9800e15 	stw	r6,56(sp)
 40034fc:	d9800f15 	stw	r6,60(sp)
 4003500:	d8800b15 	stw	r2,44(sp)
 4003504:	d8c01617 	ldw	r3,88(sp)
 4003508:	008005c4 	movi	r2,23
 400350c:	18001115 	stw	zero,68(r3)
 4003510:	1580082e 	bgeu	r2,r22,4003534 <_dtoa_r+0xa90>
 4003514:	00c00104 	movi	r3,4
 4003518:	0009883a 	mov	r4,zero
 400351c:	18c7883a 	add	r3,r3,r3
 4003520:	18800504 	addi	r2,r3,20
 4003524:	21000044 	addi	r4,r4,1
 4003528:	b0bffc2e 	bgeu	r22,r2,400351c <_dtoa_r+0xa78>
 400352c:	d9801617 	ldw	r6,88(sp)
 4003530:	31001115 	stw	r4,68(r6)
 4003534:	dc000f17 	ldw	r16,60(sp)
 4003538:	003e4b06 	br	4002e68 <_dtoa_r+0x3c4>
 400353c:	d9801717 	ldw	r6,92(sp)
 4003540:	0023883a 	mov	r17,zero
 4003544:	31bfff04 	addi	r6,r6,-4
 4003548:	d9801715 	stw	r6,92(sp)
 400354c:	003df806 	br	4002d30 <_dtoa_r+0x28c>
 4003550:	00800804 	movi	r2,32
 4003554:	10c9c83a 	sub	r4,r2,r3
 4003558:	00c00104 	movi	r3,4
 400355c:	19005a16 	blt	r3,r4,40036c8 <_dtoa_r+0xc24>
 4003560:	008000c4 	movi	r2,3
 4003564:	113f7e16 	blt	r2,r4,4003360 <_dtoa_r+0x8bc>
 4003568:	20800704 	addi	r2,r4,28
 400356c:	003f7506 	br	4003344 <_dtoa_r+0x8a0>
 4003570:	d9801717 	ldw	r6,92(sp)
 4003574:	00800044 	movi	r2,1
 4003578:	1180a10e 	bge	r2,r6,4003800 <_dtoa_r+0xd5c>
 400357c:	d9800f17 	ldw	r6,60(sp)
 4003580:	d8c01017 	ldw	r3,64(sp)
 4003584:	30bfffc4 	addi	r2,r6,-1
 4003588:	1881c616 	blt	r3,r2,4003ca4 <_dtoa_r+0x1200>
 400358c:	18a5c83a 	sub	r18,r3,r2
 4003590:	d8800f17 	ldw	r2,60(sp)
 4003594:	10026216 	blt	r2,zero,4003f20 <_dtoa_r+0x147c>
 4003598:	dc001117 	ldw	r16,68(sp)
 400359c:	1007883a 	mov	r3,r2
 40035a0:	d9800a17 	ldw	r6,40(sp)
 40035a4:	d8801117 	ldw	r2,68(sp)
 40035a8:	d9001617 	ldw	r4,88(sp)
 40035ac:	30cd883a 	add	r6,r6,r3
 40035b0:	10c5883a 	add	r2,r2,r3
 40035b4:	01400044 	movi	r5,1
 40035b8:	d9800a15 	stw	r6,40(sp)
 40035bc:	d8801115 	stw	r2,68(sp)
 40035c0:	40068b00 	call	40068b0 <__i2b>
 40035c4:	1027883a 	mov	r19,r2
 40035c8:	003f2506 	br	4003260 <_dtoa_r+0x7bc>
 40035cc:	00c10074 	movhi	r3,1025
 40035d0:	18d9d104 	addi	r3,r3,26436
 40035d4:	003d6706 	br	4002b74 <_dtoa_r+0xd0>
 40035d8:	dd800517 	ldw	r22,20(sp)
 40035dc:	04000044 	movi	r16,1
 40035e0:	00000706 	br	4003600 <_dtoa_r+0xb5c>
 40035e4:	d9400717 	ldw	r5,28(sp)
 40035e8:	d9001617 	ldw	r4,88(sp)
 40035ec:	01800284 	movi	r6,10
 40035f0:	000f883a 	mov	r7,zero
 40035f4:	40068ec0 	call	40068ec <__multadd>
 40035f8:	d8800715 	stw	r2,28(sp)
 40035fc:	84000044 	addi	r16,r16,1
 4003600:	d9000717 	ldw	r4,28(sp)
 4003604:	900b883a 	mov	r5,r18
 4003608:	400288c0 	call	400288c <quorem>
 400360c:	15c00c04 	addi	r23,r2,48
 4003610:	b5c00005 	stb	r23,0(r22)
 4003614:	d8c00f17 	ldw	r3,60(sp)
 4003618:	b5800044 	addi	r22,r22,1
 400361c:	80fff116 	blt	r16,r3,40035e4 <_dtoa_r+0xb40>
 4003620:	d8000615 	stw	zero,24(sp)
 4003624:	d9400717 	ldw	r5,28(sp)
 4003628:	d9001617 	ldw	r4,88(sp)
 400362c:	01800044 	movi	r6,1
 4003630:	400657c0 	call	400657c <__lshift>
 4003634:	1009883a 	mov	r4,r2
 4003638:	900b883a 	mov	r5,r18
 400363c:	d8800715 	stw	r2,28(sp)
 4003640:	4005d940 	call	4005d94 <__mcmp>
 4003644:	00803c0e 	bge	zero,r2,4003738 <_dtoa_r+0xc94>
 4003648:	b009883a 	mov	r4,r22
 400364c:	213fffc4 	addi	r4,r4,-1
 4003650:	21400003 	ldbu	r5,0(r4)
 4003654:	00800e44 	movi	r2,57
 4003658:	28c03fcc 	andi	r3,r5,255
 400365c:	18c0201c 	xori	r3,r3,128
 4003660:	18ffe004 	addi	r3,r3,-128
 4003664:	1881981e 	bne	r3,r2,4003cc8 <_dtoa_r+0x1224>
 4003668:	d9800517 	ldw	r6,20(sp)
 400366c:	21bff71e 	bne	r4,r6,400364c <_dtoa_r+0xba8>
 4003670:	d8800d17 	ldw	r2,52(sp)
 4003674:	37000044 	addi	fp,r6,1
 4003678:	10800044 	addi	r2,r2,1
 400367c:	d8800d15 	stw	r2,52(sp)
 4003680:	00800c44 	movi	r2,49
 4003684:	30800005 	stb	r2,0(r6)
 4003688:	d9001617 	ldw	r4,88(sp)
 400368c:	900b883a 	mov	r5,r18
 4003690:	4005c380 	call	4005c38 <_Bfree>
 4003694:	983ecd26 	beq	r19,zero,40031cc <_dtoa_r+0x728>
 4003698:	d8c00617 	ldw	r3,24(sp)
 400369c:	18000426 	beq	r3,zero,40036b0 <_dtoa_r+0xc0c>
 40036a0:	1cc00326 	beq	r3,r19,40036b0 <_dtoa_r+0xc0c>
 40036a4:	d9001617 	ldw	r4,88(sp)
 40036a8:	180b883a 	mov	r5,r3
 40036ac:	4005c380 	call	4005c38 <_Bfree>
 40036b0:	d9001617 	ldw	r4,88(sp)
 40036b4:	980b883a 	mov	r5,r19
 40036b8:	4005c380 	call	4005c38 <_Bfree>
 40036bc:	003ec306 	br	40031cc <_dtoa_r+0x728>
 40036c0:	1805883a 	mov	r2,r3
 40036c4:	003eeb06 	br	4003274 <_dtoa_r+0x7d0>
 40036c8:	d9800a17 	ldw	r6,40(sp)
 40036cc:	d8c01117 	ldw	r3,68(sp)
 40036d0:	20bfff04 	addi	r2,r4,-4
 40036d4:	308d883a 	add	r6,r6,r2
 40036d8:	1887883a 	add	r3,r3,r2
 40036dc:	80a1883a 	add	r16,r16,r2
 40036e0:	d9800a15 	stw	r6,40(sp)
 40036e4:	d8c01115 	stw	r3,68(sp)
 40036e8:	003f1d06 	br	4003360 <_dtoa_r+0x8bc>
 40036ec:	a03f0c1e 	bne	r20,zero,4003320 <_dtoa_r+0x87c>
 40036f0:	00800434 	movhi	r2,16
 40036f4:	10bfffc4 	addi	r2,r2,-1
 40036f8:	a884703a 	and	r2,r21,r2
 40036fc:	103f081e 	bne	r2,zero,4003320 <_dtoa_r+0x87c>
 4003700:	a89ffc2c 	andhi	r2,r21,32752
 4003704:	103f0626 	beq	r2,zero,4003320 <_dtoa_r+0x87c>
 4003708:	d8c01117 	ldw	r3,68(sp)
 400370c:	d9000a17 	ldw	r4,40(sp)
 4003710:	18c00044 	addi	r3,r3,1
 4003714:	21000044 	addi	r4,r4,1
 4003718:	d8c01115 	stw	r3,68(sp)
 400371c:	d9000a15 	stw	r4,40(sp)
 4003720:	003f0006 	br	4003324 <_dtoa_r+0x880>
 4003724:	d9400717 	ldw	r5,28(sp)
 4003728:	d9001617 	ldw	r4,88(sp)
 400372c:	40069ec0 	call	40069ec <__pow5mult>
 4003730:	d8800715 	stw	r2,28(sp)
 4003734:	003eed06 	br	40032ec <_dtoa_r+0x848>
 4003738:	1000021e 	bne	r2,zero,4003744 <_dtoa_r+0xca0>
 400373c:	b880004c 	andi	r2,r23,1
 4003740:	103fc11e 	bne	r2,zero,4003648 <_dtoa_r+0xba4>
 4003744:	b5bfffc4 	addi	r22,r22,-1
 4003748:	b0c00007 	ldb	r3,0(r22)
 400374c:	00800c04 	movi	r2,48
 4003750:	18bffc26 	beq	r3,r2,4003744 <_dtoa_r+0xca0>
 4003754:	b7000044 	addi	fp,r22,1
 4003758:	003fcb06 	br	4003688 <_dtoa_r+0xbe4>
 400375c:	d9800d17 	ldw	r6,52(sp)
 4003760:	018fc83a 	sub	r7,zero,r6
 4003764:	3801f726 	beq	r7,zero,4003f44 <_dtoa_r+0x14a0>
 4003768:	398003cc 	andi	r6,r7,15
 400376c:	300c90fa 	slli	r6,r6,3
 4003770:	01410074 	movhi	r5,1025
 4003774:	2959ef04 	addi	r5,r5,26556
 4003778:	d9001217 	ldw	r4,72(sp)
 400377c:	314d883a 	add	r6,r6,r5
 4003780:	30c00117 	ldw	r3,4(r6)
 4003784:	30800017 	ldw	r2,0(r6)
 4003788:	d9401317 	ldw	r5,76(sp)
 400378c:	3821d13a 	srai	r16,r7,4
 4003790:	100d883a 	mov	r6,r2
 4003794:	180f883a 	mov	r7,r3
 4003798:	4008a2c0 	call	4008a2c <__muldf3>
 400379c:	1011883a 	mov	r8,r2
 40037a0:	1813883a 	mov	r9,r3
 40037a4:	1029883a 	mov	r20,r2
 40037a8:	182b883a 	mov	r21,r3
 40037ac:	8001e526 	beq	r16,zero,4003f44 <_dtoa_r+0x14a0>
 40037b0:	05800084 	movi	r22,2
 40037b4:	04410074 	movhi	r17,1025
 40037b8:	8c5a2104 	addi	r17,r17,26756
 40037bc:	8080004c 	andi	r2,r16,1
 40037c0:	1005003a 	cmpeq	r2,r2,zero
 40037c4:	1000081e 	bne	r2,zero,40037e8 <_dtoa_r+0xd44>
 40037c8:	89800017 	ldw	r6,0(r17)
 40037cc:	89c00117 	ldw	r7,4(r17)
 40037d0:	480b883a 	mov	r5,r9
 40037d4:	4009883a 	mov	r4,r8
 40037d8:	4008a2c0 	call	4008a2c <__muldf3>
 40037dc:	1011883a 	mov	r8,r2
 40037e0:	b5800044 	addi	r22,r22,1
 40037e4:	1813883a 	mov	r9,r3
 40037e8:	8021d07a 	srai	r16,r16,1
 40037ec:	8c400204 	addi	r17,r17,8
 40037f0:	803ff21e 	bne	r16,zero,40037bc <_dtoa_r+0xd18>
 40037f4:	4029883a 	mov	r20,r8
 40037f8:	482b883a 	mov	r21,r9
 40037fc:	003dca06 	br	4002f28 <_dtoa_r+0x484>
 4003800:	d9000817 	ldw	r4,32(sp)
 4003804:	2005003a 	cmpeq	r2,r4,zero
 4003808:	1001f61e 	bne	r2,zero,4003fe4 <_dtoa_r+0x1540>
 400380c:	dc001117 	ldw	r16,68(sp)
 4003810:	dc801017 	ldw	r18,64(sp)
 4003814:	18c10cc4 	addi	r3,r3,1075
 4003818:	003f6106 	br	40035a0 <_dtoa_r+0xafc>
 400381c:	d8000b15 	stw	zero,44(sp)
 4003820:	d9802617 	ldw	r6,152(sp)
 4003824:	d8c00d17 	ldw	r3,52(sp)
 4003828:	30800044 	addi	r2,r6,1
 400382c:	18ad883a 	add	r22,r3,r2
 4003830:	b13fffc4 	addi	r4,r22,-1
 4003834:	d9000e15 	stw	r4,56(sp)
 4003838:	0581f60e 	bge	zero,r22,4004014 <_dtoa_r+0x1570>
 400383c:	dd800f15 	stw	r22,60(sp)
 4003840:	003f3006 	br	4003504 <_dtoa_r+0xa60>
 4003844:	d8000b15 	stw	zero,44(sp)
 4003848:	d9002617 	ldw	r4,152(sp)
 400384c:	0101eb0e 	bge	zero,r4,4003ffc <_dtoa_r+0x1558>
 4003850:	202d883a 	mov	r22,r4
 4003854:	d9000e15 	stw	r4,56(sp)
 4003858:	d9000f15 	stw	r4,60(sp)
 400385c:	003f2906 	br	4003504 <_dtoa_r+0xa60>
 4003860:	01800044 	movi	r6,1
 4003864:	d9800b15 	stw	r6,44(sp)
 4003868:	003ff706 	br	4003848 <_dtoa_r+0xda4>
 400386c:	01000044 	movi	r4,1
 4003870:	d9000b15 	stw	r4,44(sp)
 4003874:	003fea06 	br	4003820 <_dtoa_r+0xd7c>
 4003878:	04000c0e 	bge	zero,r16,40038ac <_dtoa_r+0xe08>
 400387c:	d9400717 	ldw	r5,28(sp)
 4003880:	d9001617 	ldw	r4,88(sp)
 4003884:	01800044 	movi	r6,1
 4003888:	400657c0 	call	400657c <__lshift>
 400388c:	1009883a 	mov	r4,r2
 4003890:	900b883a 	mov	r5,r18
 4003894:	d8800715 	stw	r2,28(sp)
 4003898:	4005d940 	call	4005d94 <__mcmp>
 400389c:	0081e00e 	bge	zero,r2,4004020 <_dtoa_r+0x157c>
 40038a0:	bdc00044 	addi	r23,r23,1
 40038a4:	00800e84 	movi	r2,58
 40038a8:	b881a226 	beq	r23,r2,4003f34 <_dtoa_r+0x1490>
 40038ac:	b7000044 	addi	fp,r22,1
 40038b0:	b5c00005 	stb	r23,0(r22)
 40038b4:	003f7406 	br	4003688 <_dtoa_r+0xbe4>
 40038b8:	00800e44 	movi	r2,57
 40038bc:	b8819d26 	beq	r23,r2,4003f34 <_dtoa_r+0x1490>
 40038c0:	053ffa0e 	bge	zero,r20,40038ac <_dtoa_r+0xe08>
 40038c4:	8dc00c44 	addi	r23,r17,49
 40038c8:	003ff806 	br	40038ac <_dtoa_r+0xe08>
 40038cc:	d9001617 	ldw	r4,88(sp)
 40038d0:	a80b883a 	mov	r5,r21
 40038d4:	04000044 	movi	r16,1
 40038d8:	4005c380 	call	4005c38 <_Bfree>
 40038dc:	003edf06 	br	400345c <_dtoa_r+0x9b8>
 40038e0:	d9001617 	ldw	r4,88(sp)
 40038e4:	980b883a 	mov	r5,r19
 40038e8:	01800284 	movi	r6,10
 40038ec:	000f883a 	mov	r7,zero
 40038f0:	40068ec0 	call	40068ec <__multadd>
 40038f4:	1027883a 	mov	r19,r2
 40038f8:	d8800615 	stw	r2,24(sp)
 40038fc:	003ebb06 	br	40033ec <_dtoa_r+0x948>
 4003900:	d9801117 	ldw	r6,68(sp)
 4003904:	d8800d17 	ldw	r2,52(sp)
 4003908:	d8000915 	stw	zero,36(sp)
 400390c:	308dc83a 	sub	r6,r6,r2
 4003910:	0087c83a 	sub	r3,zero,r2
 4003914:	d9801115 	stw	r6,68(sp)
 4003918:	d8c01015 	stw	r3,64(sp)
 400391c:	003cfe06 	br	4002d18 <_dtoa_r+0x274>
 4003920:	018dc83a 	sub	r6,zero,r6
 4003924:	d9801115 	stw	r6,68(sp)
 4003928:	d8000a15 	stw	zero,40(sp)
 400392c:	003cf306 	br	4002cfc <_dtoa_r+0x258>
 4003930:	d9000d17 	ldw	r4,52(sp)
 4003934:	40092f00 	call	40092f0 <__floatsidf>
 4003938:	880b883a 	mov	r5,r17
 400393c:	8009883a 	mov	r4,r16
 4003940:	180f883a 	mov	r7,r3
 4003944:	100d883a 	mov	r6,r2
 4003948:	40090d00 	call	40090d0 <__nedf2>
 400394c:	103ce126 	beq	r2,zero,4002cd4 <_dtoa_r+0x230>
 4003950:	d9800d17 	ldw	r6,52(sp)
 4003954:	31bfffc4 	addi	r6,r6,-1
 4003958:	d9800d15 	stw	r6,52(sp)
 400395c:	003cdd06 	br	4002cd4 <_dtoa_r+0x230>
 4003960:	d9000717 	ldw	r4,28(sp)
 4003964:	900b883a 	mov	r5,r18
 4003968:	4005d940 	call	4005d94 <__mcmp>
 400396c:	103e8d0e 	bge	r2,zero,40033a4 <_dtoa_r+0x900>
 4003970:	d9400717 	ldw	r5,28(sp)
 4003974:	d9001617 	ldw	r4,88(sp)
 4003978:	01800284 	movi	r6,10
 400397c:	000f883a 	mov	r7,zero
 4003980:	40068ec0 	call	40068ec <__multadd>
 4003984:	d9800d17 	ldw	r6,52(sp)
 4003988:	d8800715 	stw	r2,28(sp)
 400398c:	31bfffc4 	addi	r6,r6,-1
 4003990:	d9800d15 	stw	r6,52(sp)
 4003994:	b001a71e 	bne	r22,zero,4004034 <_dtoa_r+0x1590>
 4003998:	d8800e17 	ldw	r2,56(sp)
 400399c:	d8800f15 	stw	r2,60(sp)
 40039a0:	003e8006 	br	40033a4 <_dtoa_r+0x900>
 40039a4:	90800417 	ldw	r2,16(r18)
 40039a8:	1085883a 	add	r2,r2,r2
 40039ac:	1085883a 	add	r2,r2,r2
 40039b0:	1485883a 	add	r2,r2,r18
 40039b4:	11000417 	ldw	r4,16(r2)
 40039b8:	4005c600 	call	4005c60 <__hi0bits>
 40039bc:	00c00804 	movi	r3,32
 40039c0:	1887c83a 	sub	r3,r3,r2
 40039c4:	003e5a06 	br	4003330 <_dtoa_r+0x88c>
 40039c8:	d9400717 	ldw	r5,28(sp)
 40039cc:	d9801017 	ldw	r6,64(sp)
 40039d0:	d9001617 	ldw	r4,88(sp)
 40039d4:	40069ec0 	call	40069ec <__pow5mult>
 40039d8:	d8800715 	stw	r2,28(sp)
 40039dc:	003e4306 	br	40032ec <_dtoa_r+0x848>
 40039e0:	d9800f17 	ldw	r6,60(sp)
 40039e4:	d8800d17 	ldw	r2,52(sp)
 40039e8:	d9800315 	stw	r6,12(sp)
 40039ec:	d8800415 	stw	r2,16(sp)
 40039f0:	d8c00b17 	ldw	r3,44(sp)
 40039f4:	1805003a 	cmpeq	r2,r3,zero
 40039f8:	1000e21e 	bne	r2,zero,4003d84 <_dtoa_r+0x12e0>
 40039fc:	d9000317 	ldw	r4,12(sp)
 4003a00:	0005883a 	mov	r2,zero
 4003a04:	00cff834 	movhi	r3,16352
 4003a08:	200c90fa 	slli	r6,r4,3
 4003a0c:	01010074 	movhi	r4,1025
 4003a10:	2119ef04 	addi	r4,r4,26556
 4003a14:	180b883a 	mov	r5,r3
 4003a18:	310d883a 	add	r6,r6,r4
 4003a1c:	327fff17 	ldw	r9,-4(r6)
 4003a20:	323ffe17 	ldw	r8,-8(r6)
 4003a24:	1009883a 	mov	r4,r2
 4003a28:	480f883a 	mov	r7,r9
 4003a2c:	400d883a 	mov	r6,r8
 4003a30:	4008df00 	call	4008df0 <__divdf3>
 4003a34:	180b883a 	mov	r5,r3
 4003a38:	b00d883a 	mov	r6,r22
 4003a3c:	b80f883a 	mov	r7,r23
 4003a40:	1009883a 	mov	r4,r2
 4003a44:	40089380 	call	4008938 <__subdf3>
 4003a48:	a80b883a 	mov	r5,r21
 4003a4c:	a009883a 	mov	r4,r20
 4003a50:	d8c01915 	stw	r3,100(sp)
 4003a54:	d8801815 	stw	r2,96(sp)
 4003a58:	40093e80 	call	40093e8 <__fixdfsi>
 4003a5c:	1009883a 	mov	r4,r2
 4003a60:	1027883a 	mov	r19,r2
 4003a64:	40092f00 	call	40092f0 <__floatsidf>
 4003a68:	a80b883a 	mov	r5,r21
 4003a6c:	a009883a 	mov	r4,r20
 4003a70:	180f883a 	mov	r7,r3
 4003a74:	100d883a 	mov	r6,r2
 4003a78:	40089380 	call	4008938 <__subdf3>
 4003a7c:	d9801817 	ldw	r6,96(sp)
 4003a80:	1823883a 	mov	r17,r3
 4003a84:	d8801415 	stw	r2,80(sp)
 4003a88:	302d883a 	mov	r22,r6
 4003a8c:	d9800517 	ldw	r6,20(sp)
 4003a90:	9cc00c04 	addi	r19,r19,48
 4003a94:	dc401515 	stw	r17,84(sp)
 4003a98:	d8c01917 	ldw	r3,100(sp)
 4003a9c:	34c00005 	stb	r19,0(r6)
 4003aa0:	d8800517 	ldw	r2,20(sp)
 4003aa4:	d9401917 	ldw	r5,100(sp)
 4003aa8:	d9801417 	ldw	r6,80(sp)
 4003aac:	b009883a 	mov	r4,r22
 4003ab0:	880f883a 	mov	r7,r17
 4003ab4:	182f883a 	mov	r23,r3
 4003ab8:	17000044 	addi	fp,r2,1
 4003abc:	40091580 	call	4009158 <__gtdf2>
 4003ac0:	00804e16 	blt	zero,r2,4003bfc <_dtoa_r+0x1158>
 4003ac4:	d9801417 	ldw	r6,80(sp)
 4003ac8:	0005883a 	mov	r2,zero
 4003acc:	00cffc34 	movhi	r3,16368
 4003ad0:	180b883a 	mov	r5,r3
 4003ad4:	880f883a 	mov	r7,r17
 4003ad8:	1009883a 	mov	r4,r2
 4003adc:	40089380 	call	4008938 <__subdf3>
 4003ae0:	d9401917 	ldw	r5,100(sp)
 4003ae4:	180f883a 	mov	r7,r3
 4003ae8:	b009883a 	mov	r4,r22
 4003aec:	100d883a 	mov	r6,r2
 4003af0:	40091580 	call	4009158 <__gtdf2>
 4003af4:	00bda216 	blt	zero,r2,4003180 <_dtoa_r+0x6dc>
 4003af8:	d8c00317 	ldw	r3,12(sp)
 4003afc:	00800044 	movi	r2,1
 4003b00:	10c01216 	blt	r2,r3,4003b4c <_dtoa_r+0x10a8>
 4003b04:	003d4506 	br	400301c <_dtoa_r+0x578>
 4003b08:	d9801417 	ldw	r6,80(sp)
 4003b0c:	0005883a 	mov	r2,zero
 4003b10:	00cffc34 	movhi	r3,16368
 4003b14:	180b883a 	mov	r5,r3
 4003b18:	880f883a 	mov	r7,r17
 4003b1c:	1009883a 	mov	r4,r2
 4003b20:	40089380 	call	4008938 <__subdf3>
 4003b24:	d9c01b17 	ldw	r7,108(sp)
 4003b28:	180b883a 	mov	r5,r3
 4003b2c:	1009883a 	mov	r4,r2
 4003b30:	b00d883a 	mov	r6,r22
 4003b34:	40092680 	call	4009268 <__ltdf2>
 4003b38:	103d9116 	blt	r2,zero,4003180 <_dtoa_r+0x6dc>
 4003b3c:	d9800517 	ldw	r6,20(sp)
 4003b40:	d9000317 	ldw	r4,12(sp)
 4003b44:	3105883a 	add	r2,r6,r4
 4003b48:	e0bd3426 	beq	fp,r2,400301c <_dtoa_r+0x578>
 4003b4c:	04500934 	movhi	r17,16420
 4003b50:	0021883a 	mov	r16,zero
 4003b54:	b80b883a 	mov	r5,r23
 4003b58:	b009883a 	mov	r4,r22
 4003b5c:	800d883a 	mov	r6,r16
 4003b60:	880f883a 	mov	r7,r17
 4003b64:	4008a2c0 	call	4008a2c <__muldf3>
 4003b68:	d9401517 	ldw	r5,84(sp)
 4003b6c:	d9001417 	ldw	r4,80(sp)
 4003b70:	880f883a 	mov	r7,r17
 4003b74:	000d883a 	mov	r6,zero
 4003b78:	d8801a15 	stw	r2,104(sp)
 4003b7c:	d8c01b15 	stw	r3,108(sp)
 4003b80:	4008a2c0 	call	4008a2c <__muldf3>
 4003b84:	180b883a 	mov	r5,r3
 4003b88:	1009883a 	mov	r4,r2
 4003b8c:	1823883a 	mov	r17,r3
 4003b90:	1021883a 	mov	r16,r2
 4003b94:	40093e80 	call	40093e8 <__fixdfsi>
 4003b98:	1009883a 	mov	r4,r2
 4003b9c:	102b883a 	mov	r21,r2
 4003ba0:	40092f00 	call	40092f0 <__floatsidf>
 4003ba4:	880b883a 	mov	r5,r17
 4003ba8:	8009883a 	mov	r4,r16
 4003bac:	180f883a 	mov	r7,r3
 4003bb0:	100d883a 	mov	r6,r2
 4003bb4:	40089380 	call	4008938 <__subdf3>
 4003bb8:	1021883a 	mov	r16,r2
 4003bbc:	d9001b17 	ldw	r4,108(sp)
 4003bc0:	1823883a 	mov	r17,r3
 4003bc4:	dc001415 	stw	r16,80(sp)
 4003bc8:	ad400c04 	addi	r21,r21,48
 4003bcc:	dc401515 	stw	r17,84(sp)
 4003bd0:	d8801a17 	ldw	r2,104(sp)
 4003bd4:	e5400005 	stb	r21,0(fp)
 4003bd8:	202f883a 	mov	r23,r4
 4003bdc:	d9c01b17 	ldw	r7,108(sp)
 4003be0:	d9001417 	ldw	r4,80(sp)
 4003be4:	880b883a 	mov	r5,r17
 4003be8:	100d883a 	mov	r6,r2
 4003bec:	102d883a 	mov	r22,r2
 4003bf0:	e7000044 	addi	fp,fp,1
 4003bf4:	40092680 	call	4009268 <__ltdf2>
 4003bf8:	103fc30e 	bge	r2,zero,4003b08 <_dtoa_r+0x1064>
 4003bfc:	d9000417 	ldw	r4,16(sp)
 4003c00:	d9000d15 	stw	r4,52(sp)
 4003c04:	003d7106 	br	40031cc <_dtoa_r+0x728>
 4003c08:	d9801717 	ldw	r6,92(sp)
 4003c0c:	00800084 	movi	r2,2
 4003c10:	11bde60e 	bge	r2,r6,40033ac <_dtoa_r+0x908>
 4003c14:	203cfb1e 	bne	r4,zero,4003004 <_dtoa_r+0x560>
 4003c18:	d9001617 	ldw	r4,88(sp)
 4003c1c:	900b883a 	mov	r5,r18
 4003c20:	01800144 	movi	r6,5
 4003c24:	000f883a 	mov	r7,zero
 4003c28:	40068ec0 	call	40068ec <__multadd>
 4003c2c:	d9000717 	ldw	r4,28(sp)
 4003c30:	100b883a 	mov	r5,r2
 4003c34:	1025883a 	mov	r18,r2
 4003c38:	4005d940 	call	4005d94 <__mcmp>
 4003c3c:	00bcf10e 	bge	zero,r2,4003004 <_dtoa_r+0x560>
 4003c40:	d8c00d17 	ldw	r3,52(sp)
 4003c44:	d9000517 	ldw	r4,20(sp)
 4003c48:	d8000615 	stw	zero,24(sp)
 4003c4c:	18c00044 	addi	r3,r3,1
 4003c50:	d8c00d15 	stw	r3,52(sp)
 4003c54:	00800c44 	movi	r2,49
 4003c58:	27000044 	addi	fp,r4,1
 4003c5c:	20800005 	stb	r2,0(r4)
 4003c60:	003e8906 	br	4003688 <_dtoa_r+0xbe4>
 4003c64:	d8c00517 	ldw	r3,20(sp)
 4003c68:	003bc206 	br	4002b74 <_dtoa_r+0xd0>
 4003c6c:	01810074 	movhi	r6,1025
 4003c70:	319a2104 	addi	r6,r6,26756
 4003c74:	30c00917 	ldw	r3,36(r6)
 4003c78:	30800817 	ldw	r2,32(r6)
 4003c7c:	d9001217 	ldw	r4,72(sp)
 4003c80:	d9401317 	ldw	r5,76(sp)
 4003c84:	180f883a 	mov	r7,r3
 4003c88:	100d883a 	mov	r6,r2
 4003c8c:	4008df00 	call	4008df0 <__divdf3>
 4003c90:	948003cc 	andi	r18,r18,15
 4003c94:	058000c4 	movi	r22,3
 4003c98:	1029883a 	mov	r20,r2
 4003c9c:	182b883a 	mov	r21,r3
 4003ca0:	003c8906 	br	4002ec8 <_dtoa_r+0x424>
 4003ca4:	d9001017 	ldw	r4,64(sp)
 4003ca8:	d9800917 	ldw	r6,36(sp)
 4003cac:	0025883a 	mov	r18,zero
 4003cb0:	1105c83a 	sub	r2,r2,r4
 4003cb4:	2089883a 	add	r4,r4,r2
 4003cb8:	308d883a 	add	r6,r6,r2
 4003cbc:	d9001015 	stw	r4,64(sp)
 4003cc0:	d9800915 	stw	r6,36(sp)
 4003cc4:	003e3206 	br	4003590 <_dtoa_r+0xaec>
 4003cc8:	28800044 	addi	r2,r5,1
 4003ccc:	27000044 	addi	fp,r4,1
 4003cd0:	20800005 	stb	r2,0(r4)
 4003cd4:	003e6c06 	br	4003688 <_dtoa_r+0xbe4>
 4003cd8:	d8800f17 	ldw	r2,60(sp)
 4003cdc:	00bce016 	blt	zero,r2,4003060 <_dtoa_r+0x5bc>
 4003ce0:	d9800f17 	ldw	r6,60(sp)
 4003ce4:	303cc51e 	bne	r6,zero,4002ffc <_dtoa_r+0x558>
 4003ce8:	0005883a 	mov	r2,zero
 4003cec:	00d00534 	movhi	r3,16404
 4003cf0:	980b883a 	mov	r5,r19
 4003cf4:	180f883a 	mov	r7,r3
 4003cf8:	9009883a 	mov	r4,r18
 4003cfc:	100d883a 	mov	r6,r2
 4003d00:	4008a2c0 	call	4008a2c <__muldf3>
 4003d04:	180b883a 	mov	r5,r3
 4003d08:	a80f883a 	mov	r7,r21
 4003d0c:	1009883a 	mov	r4,r2
 4003d10:	a00d883a 	mov	r6,r20
 4003d14:	40091e00 	call	40091e0 <__gedf2>
 4003d18:	103cb80e 	bge	r2,zero,4002ffc <_dtoa_r+0x558>
 4003d1c:	0027883a 	mov	r19,zero
 4003d20:	0025883a 	mov	r18,zero
 4003d24:	003fc606 	br	4003c40 <_dtoa_r+0x119c>
 4003d28:	99400117 	ldw	r5,4(r19)
 4003d2c:	d9001617 	ldw	r4,88(sp)
 4003d30:	40061b80 	call	40061b8 <_Balloc>
 4003d34:	99800417 	ldw	r6,16(r19)
 4003d38:	11000304 	addi	r4,r2,12
 4003d3c:	99400304 	addi	r5,r19,12
 4003d40:	318d883a 	add	r6,r6,r6
 4003d44:	318d883a 	add	r6,r6,r6
 4003d48:	31800204 	addi	r6,r6,8
 4003d4c:	1023883a 	mov	r17,r2
 4003d50:	4005a200 	call	4005a20 <memcpy>
 4003d54:	d9001617 	ldw	r4,88(sp)
 4003d58:	880b883a 	mov	r5,r17
 4003d5c:	01800044 	movi	r6,1
 4003d60:	400657c0 	call	400657c <__lshift>
 4003d64:	100b883a 	mov	r5,r2
 4003d68:	003d9c06 	br	40033dc <_dtoa_r+0x938>
 4003d6c:	00800e44 	movi	r2,57
 4003d70:	b8807026 	beq	r23,r2,4003f34 <_dtoa_r+0x1490>
 4003d74:	b8800044 	addi	r2,r23,1
 4003d78:	b7000044 	addi	fp,r22,1
 4003d7c:	b0800005 	stb	r2,0(r22)
 4003d80:	003e4106 	br	4003688 <_dtoa_r+0xbe4>
 4003d84:	d8800317 	ldw	r2,12(sp)
 4003d88:	01810074 	movhi	r6,1025
 4003d8c:	3199ef04 	addi	r6,r6,26556
 4003d90:	b009883a 	mov	r4,r22
 4003d94:	100e90fa 	slli	r7,r2,3
 4003d98:	b80b883a 	mov	r5,r23
 4003d9c:	398f883a 	add	r7,r7,r6
 4003da0:	38bffe17 	ldw	r2,-8(r7)
 4003da4:	d9800517 	ldw	r6,20(sp)
 4003da8:	38ffff17 	ldw	r3,-4(r7)
 4003dac:	37000044 	addi	fp,r6,1
 4003db0:	180f883a 	mov	r7,r3
 4003db4:	100d883a 	mov	r6,r2
 4003db8:	4008a2c0 	call	4008a2c <__muldf3>
 4003dbc:	a80b883a 	mov	r5,r21
 4003dc0:	a009883a 	mov	r4,r20
 4003dc4:	182f883a 	mov	r23,r3
 4003dc8:	102d883a 	mov	r22,r2
 4003dcc:	40093e80 	call	40093e8 <__fixdfsi>
 4003dd0:	1009883a 	mov	r4,r2
 4003dd4:	1027883a 	mov	r19,r2
 4003dd8:	40092f00 	call	40092f0 <__floatsidf>
 4003ddc:	a80b883a 	mov	r5,r21
 4003de0:	a009883a 	mov	r4,r20
 4003de4:	180f883a 	mov	r7,r3
 4003de8:	100d883a 	mov	r6,r2
 4003dec:	40089380 	call	4008938 <__subdf3>
 4003df0:	180b883a 	mov	r5,r3
 4003df4:	d8c00517 	ldw	r3,20(sp)
 4003df8:	9cc00c04 	addi	r19,r19,48
 4003dfc:	1009883a 	mov	r4,r2
 4003e00:	1cc00005 	stb	r19,0(r3)
 4003e04:	2021883a 	mov	r16,r4
 4003e08:	d9000317 	ldw	r4,12(sp)
 4003e0c:	00800044 	movi	r2,1
 4003e10:	2823883a 	mov	r17,r5
 4003e14:	20802226 	beq	r4,r2,4003ea0 <_dtoa_r+0x13fc>
 4003e18:	1029883a 	mov	r20,r2
 4003e1c:	0005883a 	mov	r2,zero
 4003e20:	00d00934 	movhi	r3,16420
 4003e24:	180f883a 	mov	r7,r3
 4003e28:	100d883a 	mov	r6,r2
 4003e2c:	880b883a 	mov	r5,r17
 4003e30:	8009883a 	mov	r4,r16
 4003e34:	4008a2c0 	call	4008a2c <__muldf3>
 4003e38:	180b883a 	mov	r5,r3
 4003e3c:	1009883a 	mov	r4,r2
 4003e40:	1823883a 	mov	r17,r3
 4003e44:	1021883a 	mov	r16,r2
 4003e48:	40093e80 	call	40093e8 <__fixdfsi>
 4003e4c:	1009883a 	mov	r4,r2
 4003e50:	102b883a 	mov	r21,r2
 4003e54:	40092f00 	call	40092f0 <__floatsidf>
 4003e58:	880b883a 	mov	r5,r17
 4003e5c:	8009883a 	mov	r4,r16
 4003e60:	180f883a 	mov	r7,r3
 4003e64:	100d883a 	mov	r6,r2
 4003e68:	40089380 	call	4008938 <__subdf3>
 4003e6c:	180b883a 	mov	r5,r3
 4003e70:	d8c00517 	ldw	r3,20(sp)
 4003e74:	1009883a 	mov	r4,r2
 4003e78:	ad400c04 	addi	r21,r21,48
 4003e7c:	1d05883a 	add	r2,r3,r20
 4003e80:	15400005 	stb	r21,0(r2)
 4003e84:	2021883a 	mov	r16,r4
 4003e88:	d9000317 	ldw	r4,12(sp)
 4003e8c:	a5000044 	addi	r20,r20,1
 4003e90:	2823883a 	mov	r17,r5
 4003e94:	a13fe11e 	bne	r20,r4,4003e1c <_dtoa_r+0x1378>
 4003e98:	e505883a 	add	r2,fp,r20
 4003e9c:	173fffc4 	addi	fp,r2,-1
 4003ea0:	0025883a 	mov	r18,zero
 4003ea4:	04cff834 	movhi	r19,16352
 4003ea8:	b009883a 	mov	r4,r22
 4003eac:	b80b883a 	mov	r5,r23
 4003eb0:	900d883a 	mov	r6,r18
 4003eb4:	980f883a 	mov	r7,r19
 4003eb8:	40089b80 	call	40089b8 <__adddf3>
 4003ebc:	180b883a 	mov	r5,r3
 4003ec0:	1009883a 	mov	r4,r2
 4003ec4:	800d883a 	mov	r6,r16
 4003ec8:	880f883a 	mov	r7,r17
 4003ecc:	40092680 	call	4009268 <__ltdf2>
 4003ed0:	103cab16 	blt	r2,zero,4003180 <_dtoa_r+0x6dc>
 4003ed4:	0009883a 	mov	r4,zero
 4003ed8:	980b883a 	mov	r5,r19
 4003edc:	b80f883a 	mov	r7,r23
 4003ee0:	b00d883a 	mov	r6,r22
 4003ee4:	40089380 	call	4008938 <__subdf3>
 4003ee8:	180b883a 	mov	r5,r3
 4003eec:	880f883a 	mov	r7,r17
 4003ef0:	1009883a 	mov	r4,r2
 4003ef4:	800d883a 	mov	r6,r16
 4003ef8:	40091580 	call	4009158 <__gtdf2>
 4003efc:	00bc470e 	bge	zero,r2,400301c <_dtoa_r+0x578>
 4003f00:	00c00c04 	movi	r3,48
 4003f04:	e73fffc4 	addi	fp,fp,-1
 4003f08:	e0800007 	ldb	r2,0(fp)
 4003f0c:	10fffd26 	beq	r2,r3,4003f04 <_dtoa_r+0x1460>
 4003f10:	d9800417 	ldw	r6,16(sp)
 4003f14:	e7000044 	addi	fp,fp,1
 4003f18:	d9800d15 	stw	r6,52(sp)
 4003f1c:	003cab06 	br	40031cc <_dtoa_r+0x728>
 4003f20:	d8c00f17 	ldw	r3,60(sp)
 4003f24:	d9001117 	ldw	r4,68(sp)
 4003f28:	20e1c83a 	sub	r16,r4,r3
 4003f2c:	0007883a 	mov	r3,zero
 4003f30:	003d9b06 	br	40035a0 <_dtoa_r+0xafc>
 4003f34:	00800e44 	movi	r2,57
 4003f38:	b0800005 	stb	r2,0(r22)
 4003f3c:	b5800044 	addi	r22,r22,1
 4003f40:	003dc106 	br	4003648 <_dtoa_r+0xba4>
 4003f44:	05800084 	movi	r22,2
 4003f48:	003bf706 	br	4002f28 <_dtoa_r+0x484>
 4003f4c:	d9000f17 	ldw	r4,60(sp)
 4003f50:	013c000e 	bge	zero,r4,4002f54 <_dtoa_r+0x4b0>
 4003f54:	d9800e17 	ldw	r6,56(sp)
 4003f58:	01bc300e 	bge	zero,r6,400301c <_dtoa_r+0x578>
 4003f5c:	0005883a 	mov	r2,zero
 4003f60:	00d00934 	movhi	r3,16420
 4003f64:	a80b883a 	mov	r5,r21
 4003f68:	180f883a 	mov	r7,r3
 4003f6c:	a009883a 	mov	r4,r20
 4003f70:	100d883a 	mov	r6,r2
 4003f74:	4008a2c0 	call	4008a2c <__muldf3>
 4003f78:	b1000044 	addi	r4,r22,1
 4003f7c:	1021883a 	mov	r16,r2
 4003f80:	1823883a 	mov	r17,r3
 4003f84:	40092f00 	call	40092f0 <__floatsidf>
 4003f88:	880b883a 	mov	r5,r17
 4003f8c:	8009883a 	mov	r4,r16
 4003f90:	180f883a 	mov	r7,r3
 4003f94:	100d883a 	mov	r6,r2
 4003f98:	4008a2c0 	call	4008a2c <__muldf3>
 4003f9c:	0011883a 	mov	r8,zero
 4003fa0:	02500734 	movhi	r9,16412
 4003fa4:	180b883a 	mov	r5,r3
 4003fa8:	480f883a 	mov	r7,r9
 4003fac:	1009883a 	mov	r4,r2
 4003fb0:	400d883a 	mov	r6,r8
 4003fb4:	40089b80 	call	40089b8 <__adddf3>
 4003fb8:	102d883a 	mov	r22,r2
 4003fbc:	00bf3034 	movhi	r2,64704
 4003fc0:	10ef883a 	add	r23,r2,r3
 4003fc4:	d8800d17 	ldw	r2,52(sp)
 4003fc8:	d8c00e17 	ldw	r3,56(sp)
 4003fcc:	8029883a 	mov	r20,r16
 4003fd0:	10bfffc4 	addi	r2,r2,-1
 4003fd4:	882b883a 	mov	r21,r17
 4003fd8:	d8800415 	stw	r2,16(sp)
 4003fdc:	d8c00315 	stw	r3,12(sp)
 4003fe0:	003e8306 	br	40039f0 <_dtoa_r+0xf4c>
 4003fe4:	d8800117 	ldw	r2,4(sp)
 4003fe8:	dc001117 	ldw	r16,68(sp)
 4003fec:	dc801017 	ldw	r18,64(sp)
 4003ff0:	00c00d84 	movi	r3,54
 4003ff4:	1887c83a 	sub	r3,r3,r2
 4003ff8:	003d6906 	br	40035a0 <_dtoa_r+0xafc>
 4003ffc:	01800044 	movi	r6,1
 4004000:	3021883a 	mov	r16,r6
 4004004:	d9800f15 	stw	r6,60(sp)
 4004008:	d9802615 	stw	r6,152(sp)
 400400c:	d9800e15 	stw	r6,56(sp)
 4004010:	003b9306 	br	4002e60 <_dtoa_r+0x3bc>
 4004014:	b021883a 	mov	r16,r22
 4004018:	dd800f15 	stw	r22,60(sp)
 400401c:	003b9006 	br	4002e60 <_dtoa_r+0x3bc>
 4004020:	103e221e 	bne	r2,zero,40038ac <_dtoa_r+0xe08>
 4004024:	b880004c 	andi	r2,r23,1
 4004028:	1005003a 	cmpeq	r2,r2,zero
 400402c:	103e1f1e 	bne	r2,zero,40038ac <_dtoa_r+0xe08>
 4004030:	003e1b06 	br	40038a0 <_dtoa_r+0xdfc>
 4004034:	d9001617 	ldw	r4,88(sp)
 4004038:	980b883a 	mov	r5,r19
 400403c:	01800284 	movi	r6,10
 4004040:	000f883a 	mov	r7,zero
 4004044:	40068ec0 	call	40068ec <__multadd>
 4004048:	d8c00e17 	ldw	r3,56(sp)
 400404c:	1027883a 	mov	r19,r2
 4004050:	d8c00f15 	stw	r3,60(sp)
 4004054:	003cd306 	br	40033a4 <_dtoa_r+0x900>

04004058 <_fflush_r>:
 4004058:	defffb04 	addi	sp,sp,-20
 400405c:	dcc00315 	stw	r19,12(sp)
 4004060:	dc800215 	stw	r18,8(sp)
 4004064:	dfc00415 	stw	ra,16(sp)
 4004068:	dc400115 	stw	r17,4(sp)
 400406c:	dc000015 	stw	r16,0(sp)
 4004070:	2027883a 	mov	r19,r4
 4004074:	2825883a 	mov	r18,r5
 4004078:	20000226 	beq	r4,zero,4004084 <_fflush_r+0x2c>
 400407c:	20800e17 	ldw	r2,56(r4)
 4004080:	10005626 	beq	r2,zero,40041dc <_fflush_r+0x184>
 4004084:	9100030b 	ldhu	r4,12(r18)
 4004088:	20ffffcc 	andi	r3,r4,65535
 400408c:	18e0001c 	xori	r3,r3,32768
 4004090:	18e00004 	addi	r3,r3,-32768
 4004094:	1880020c 	andi	r2,r3,8
 4004098:	1000261e 	bne	r2,zero,4004134 <_fflush_r+0xdc>
 400409c:	90c00117 	ldw	r3,4(r18)
 40040a0:	20820014 	ori	r2,r4,2048
 40040a4:	9080030d 	sth	r2,12(r18)
 40040a8:	1009883a 	mov	r4,r2
 40040ac:	00c0400e 	bge	zero,r3,40041b0 <_fflush_r+0x158>
 40040b0:	92000a17 	ldw	r8,40(r18)
 40040b4:	40004026 	beq	r8,zero,40041b8 <_fflush_r+0x160>
 40040b8:	2084000c 	andi	r2,r4,4096
 40040bc:	10005326 	beq	r2,zero,400420c <_fflush_r+0x1b4>
 40040c0:	94001417 	ldw	r16,80(r18)
 40040c4:	9080030b 	ldhu	r2,12(r18)
 40040c8:	1080010c 	andi	r2,r2,4
 40040cc:	1000481e 	bne	r2,zero,40041f0 <_fflush_r+0x198>
 40040d0:	91400717 	ldw	r5,28(r18)
 40040d4:	9809883a 	mov	r4,r19
 40040d8:	800d883a 	mov	r6,r16
 40040dc:	000f883a 	mov	r7,zero
 40040e0:	403ee83a 	callr	r8
 40040e4:	8080261e 	bne	r16,r2,4004180 <_fflush_r+0x128>
 40040e8:	9080030b 	ldhu	r2,12(r18)
 40040ec:	91000417 	ldw	r4,16(r18)
 40040f0:	90000115 	stw	zero,4(r18)
 40040f4:	10bdffcc 	andi	r2,r2,63487
 40040f8:	10ffffcc 	andi	r3,r2,65535
 40040fc:	18c4000c 	andi	r3,r3,4096
 4004100:	9080030d 	sth	r2,12(r18)
 4004104:	91000015 	stw	r4,0(r18)
 4004108:	18002b26 	beq	r3,zero,40041b8 <_fflush_r+0x160>
 400410c:	0007883a 	mov	r3,zero
 4004110:	1805883a 	mov	r2,r3
 4004114:	94001415 	stw	r16,80(r18)
 4004118:	dfc00417 	ldw	ra,16(sp)
 400411c:	dcc00317 	ldw	r19,12(sp)
 4004120:	dc800217 	ldw	r18,8(sp)
 4004124:	dc400117 	ldw	r17,4(sp)
 4004128:	dc000017 	ldw	r16,0(sp)
 400412c:	dec00504 	addi	sp,sp,20
 4004130:	f800283a 	ret
 4004134:	94400417 	ldw	r17,16(r18)
 4004138:	88001f26 	beq	r17,zero,40041b8 <_fflush_r+0x160>
 400413c:	90800017 	ldw	r2,0(r18)
 4004140:	18c000cc 	andi	r3,r3,3
 4004144:	94400015 	stw	r17,0(r18)
 4004148:	1461c83a 	sub	r16,r2,r17
 400414c:	18002526 	beq	r3,zero,40041e4 <_fflush_r+0x18c>
 4004150:	0005883a 	mov	r2,zero
 4004154:	90800215 	stw	r2,8(r18)
 4004158:	0400170e 	bge	zero,r16,40041b8 <_fflush_r+0x160>
 400415c:	90c00917 	ldw	r3,36(r18)
 4004160:	91400717 	ldw	r5,28(r18)
 4004164:	880d883a 	mov	r6,r17
 4004168:	800f883a 	mov	r7,r16
 400416c:	9809883a 	mov	r4,r19
 4004170:	183ee83a 	callr	r3
 4004174:	88a3883a 	add	r17,r17,r2
 4004178:	80a1c83a 	sub	r16,r16,r2
 400417c:	00bff616 	blt	zero,r2,4004158 <_fflush_r+0x100>
 4004180:	9080030b 	ldhu	r2,12(r18)
 4004184:	00ffffc4 	movi	r3,-1
 4004188:	10801014 	ori	r2,r2,64
 400418c:	9080030d 	sth	r2,12(r18)
 4004190:	1805883a 	mov	r2,r3
 4004194:	dfc00417 	ldw	ra,16(sp)
 4004198:	dcc00317 	ldw	r19,12(sp)
 400419c:	dc800217 	ldw	r18,8(sp)
 40041a0:	dc400117 	ldw	r17,4(sp)
 40041a4:	dc000017 	ldw	r16,0(sp)
 40041a8:	dec00504 	addi	sp,sp,20
 40041ac:	f800283a 	ret
 40041b0:	90800f17 	ldw	r2,60(r18)
 40041b4:	00bfbe16 	blt	zero,r2,40040b0 <_fflush_r+0x58>
 40041b8:	0007883a 	mov	r3,zero
 40041bc:	1805883a 	mov	r2,r3
 40041c0:	dfc00417 	ldw	ra,16(sp)
 40041c4:	dcc00317 	ldw	r19,12(sp)
 40041c8:	dc800217 	ldw	r18,8(sp)
 40041cc:	dc400117 	ldw	r17,4(sp)
 40041d0:	dc000017 	ldw	r16,0(sp)
 40041d4:	dec00504 	addi	sp,sp,20
 40041d8:	f800283a 	ret
 40041dc:	40042f00 	call	40042f0 <__sinit>
 40041e0:	003fa806 	br	4004084 <_fflush_r+0x2c>
 40041e4:	90800517 	ldw	r2,20(r18)
 40041e8:	90800215 	stw	r2,8(r18)
 40041ec:	003fda06 	br	4004158 <_fflush_r+0x100>
 40041f0:	90800117 	ldw	r2,4(r18)
 40041f4:	90c00c17 	ldw	r3,48(r18)
 40041f8:	80a1c83a 	sub	r16,r16,r2
 40041fc:	183fb426 	beq	r3,zero,40040d0 <_fflush_r+0x78>
 4004200:	90800f17 	ldw	r2,60(r18)
 4004204:	80a1c83a 	sub	r16,r16,r2
 4004208:	003fb106 	br	40040d0 <_fflush_r+0x78>
 400420c:	91400717 	ldw	r5,28(r18)
 4004210:	9809883a 	mov	r4,r19
 4004214:	000d883a 	mov	r6,zero
 4004218:	01c00044 	movi	r7,1
 400421c:	403ee83a 	callr	r8
 4004220:	1021883a 	mov	r16,r2
 4004224:	00bfffc4 	movi	r2,-1
 4004228:	80800226 	beq	r16,r2,4004234 <_fflush_r+0x1dc>
 400422c:	92000a17 	ldw	r8,40(r18)
 4004230:	003fa406 	br	40040c4 <_fflush_r+0x6c>
 4004234:	98c00017 	ldw	r3,0(r19)
 4004238:	00800744 	movi	r2,29
 400423c:	18bfde26 	beq	r3,r2,40041b8 <_fflush_r+0x160>
 4004240:	9080030b 	ldhu	r2,12(r18)
 4004244:	8007883a 	mov	r3,r16
 4004248:	10801014 	ori	r2,r2,64
 400424c:	9080030d 	sth	r2,12(r18)
 4004250:	003fcf06 	br	4004190 <_fflush_r+0x138>

04004254 <fflush>:
 4004254:	01410034 	movhi	r5,1024
 4004258:	29501604 	addi	r5,r5,16472
 400425c:	2007883a 	mov	r3,r4
 4004260:	20000526 	beq	r4,zero,4004278 <fflush+0x24>
 4004264:	008100b4 	movhi	r2,1026
 4004268:	10a19b04 	addi	r2,r2,-31124
 400426c:	11000017 	ldw	r4,0(r2)
 4004270:	180b883a 	mov	r5,r3
 4004274:	40040581 	jmpi	4004058 <_fflush_r>
 4004278:	008100b4 	movhi	r2,1026
 400427c:	10a19c04 	addi	r2,r2,-31120
 4004280:	11000017 	ldw	r4,0(r2)
 4004284:	4004e241 	jmpi	4004e24 <_fwalk_reent>

04004288 <std>:
 4004288:	00810034 	movhi	r2,1024
 400428c:	109cc004 	addi	r2,r2,29440
 4004290:	20800b15 	stw	r2,44(r4)
 4004294:	00810034 	movhi	r2,1024
 4004298:	109cfb04 	addi	r2,r2,29676
 400429c:	20800815 	stw	r2,32(r4)
 40042a0:	00c10034 	movhi	r3,1024
 40042a4:	18dcdc04 	addi	r3,r3,29552
 40042a8:	00810034 	movhi	r2,1024
 40042ac:	109cc204 	addi	r2,r2,29448
 40042b0:	2140030d 	sth	r5,12(r4)
 40042b4:	2180038d 	sth	r6,14(r4)
 40042b8:	20c00915 	stw	r3,36(r4)
 40042bc:	20800a15 	stw	r2,40(r4)
 40042c0:	20000015 	stw	zero,0(r4)
 40042c4:	20000115 	stw	zero,4(r4)
 40042c8:	20000215 	stw	zero,8(r4)
 40042cc:	20000415 	stw	zero,16(r4)
 40042d0:	20000515 	stw	zero,20(r4)
 40042d4:	20000615 	stw	zero,24(r4)
 40042d8:	21000715 	stw	r4,28(r4)
 40042dc:	f800283a 	ret

040042e0 <__sfp_lock_acquire>:
 40042e0:	f800283a 	ret

040042e4 <__sfp_lock_release>:
 40042e4:	f800283a 	ret

040042e8 <__sinit_lock_acquire>:
 40042e8:	f800283a 	ret

040042ec <__sinit_lock_release>:
 40042ec:	f800283a 	ret

040042f0 <__sinit>:
 40042f0:	20800e17 	ldw	r2,56(r4)
 40042f4:	defffd04 	addi	sp,sp,-12
 40042f8:	dc400115 	stw	r17,4(sp)
 40042fc:	dc000015 	stw	r16,0(sp)
 4004300:	dfc00215 	stw	ra,8(sp)
 4004304:	04400044 	movi	r17,1
 4004308:	01400104 	movi	r5,4
 400430c:	000d883a 	mov	r6,zero
 4004310:	2021883a 	mov	r16,r4
 4004314:	2200bb04 	addi	r8,r4,748
 4004318:	200f883a 	mov	r7,r4
 400431c:	10000526 	beq	r2,zero,4004334 <__sinit+0x44>
 4004320:	dfc00217 	ldw	ra,8(sp)
 4004324:	dc400117 	ldw	r17,4(sp)
 4004328:	dc000017 	ldw	r16,0(sp)
 400432c:	dec00304 	addi	sp,sp,12
 4004330:	f800283a 	ret
 4004334:	21000117 	ldw	r4,4(r4)
 4004338:	00810034 	movhi	r2,1024
 400433c:	1090f504 	addi	r2,r2,17364
 4004340:	00c000c4 	movi	r3,3
 4004344:	80800f15 	stw	r2,60(r16)
 4004348:	80c0b915 	stw	r3,740(r16)
 400434c:	8200ba15 	stw	r8,744(r16)
 4004350:	84400e15 	stw	r17,56(r16)
 4004354:	8000b815 	stw	zero,736(r16)
 4004358:	40042880 	call	4004288 <std>
 400435c:	81000217 	ldw	r4,8(r16)
 4004360:	880d883a 	mov	r6,r17
 4004364:	800f883a 	mov	r7,r16
 4004368:	01400284 	movi	r5,10
 400436c:	40042880 	call	4004288 <std>
 4004370:	81000317 	ldw	r4,12(r16)
 4004374:	800f883a 	mov	r7,r16
 4004378:	01400484 	movi	r5,18
 400437c:	01800084 	movi	r6,2
 4004380:	dfc00217 	ldw	ra,8(sp)
 4004384:	dc400117 	ldw	r17,4(sp)
 4004388:	dc000017 	ldw	r16,0(sp)
 400438c:	dec00304 	addi	sp,sp,12
 4004390:	40042881 	jmpi	4004288 <std>

04004394 <__fp_lock>:
 4004394:	0005883a 	mov	r2,zero
 4004398:	f800283a 	ret

0400439c <__fp_unlock>:
 400439c:	0005883a 	mov	r2,zero
 40043a0:	f800283a 	ret

040043a4 <__fp_unlock_all>:
 40043a4:	008100b4 	movhi	r2,1026
 40043a8:	10a19b04 	addi	r2,r2,-31124
 40043ac:	11000017 	ldw	r4,0(r2)
 40043b0:	01410034 	movhi	r5,1024
 40043b4:	2950e704 	addi	r5,r5,17308
 40043b8:	4004eec1 	jmpi	4004eec <_fwalk>

040043bc <__fp_lock_all>:
 40043bc:	008100b4 	movhi	r2,1026
 40043c0:	10a19b04 	addi	r2,r2,-31124
 40043c4:	11000017 	ldw	r4,0(r2)
 40043c8:	01410034 	movhi	r5,1024
 40043cc:	2950e504 	addi	r5,r5,17300
 40043d0:	4004eec1 	jmpi	4004eec <_fwalk>

040043d4 <_cleanup_r>:
 40043d4:	01410034 	movhi	r5,1024
 40043d8:	295ded04 	addi	r5,r5,30644
 40043dc:	4004eec1 	jmpi	4004eec <_fwalk>

040043e0 <_cleanup>:
 40043e0:	008100b4 	movhi	r2,1026
 40043e4:	10a19c04 	addi	r2,r2,-31120
 40043e8:	11000017 	ldw	r4,0(r2)
 40043ec:	40043d41 	jmpi	40043d4 <_cleanup_r>

040043f0 <__sfmoreglue>:
 40043f0:	defffc04 	addi	sp,sp,-16
 40043f4:	dc400115 	stw	r17,4(sp)
 40043f8:	2c401724 	muli	r17,r5,92
 40043fc:	dc800215 	stw	r18,8(sp)
 4004400:	2825883a 	mov	r18,r5
 4004404:	89400304 	addi	r5,r17,12
 4004408:	dc000015 	stw	r16,0(sp)
 400440c:	dfc00315 	stw	ra,12(sp)
 4004410:	40051fc0 	call	40051fc <_malloc_r>
 4004414:	0021883a 	mov	r16,zero
 4004418:	880d883a 	mov	r6,r17
 400441c:	000b883a 	mov	r5,zero
 4004420:	10000626 	beq	r2,zero,400443c <__sfmoreglue+0x4c>
 4004424:	11000304 	addi	r4,r2,12
 4004428:	14800115 	stw	r18,4(r2)
 400442c:	10000015 	stw	zero,0(r2)
 4004430:	11000215 	stw	r4,8(r2)
 4004434:	1021883a 	mov	r16,r2
 4004438:	4005ba00 	call	4005ba0 <memset>
 400443c:	8005883a 	mov	r2,r16
 4004440:	dfc00317 	ldw	ra,12(sp)
 4004444:	dc800217 	ldw	r18,8(sp)
 4004448:	dc400117 	ldw	r17,4(sp)
 400444c:	dc000017 	ldw	r16,0(sp)
 4004450:	dec00404 	addi	sp,sp,16
 4004454:	f800283a 	ret

04004458 <__sfp>:
 4004458:	defffd04 	addi	sp,sp,-12
 400445c:	008100b4 	movhi	r2,1026
 4004460:	10a19c04 	addi	r2,r2,-31120
 4004464:	dc000015 	stw	r16,0(sp)
 4004468:	14000017 	ldw	r16,0(r2)
 400446c:	dc400115 	stw	r17,4(sp)
 4004470:	dfc00215 	stw	ra,8(sp)
 4004474:	80800e17 	ldw	r2,56(r16)
 4004478:	2023883a 	mov	r17,r4
 400447c:	10002626 	beq	r2,zero,4004518 <__sfp+0xc0>
 4004480:	8400b804 	addi	r16,r16,736
 4004484:	80800117 	ldw	r2,4(r16)
 4004488:	81000217 	ldw	r4,8(r16)
 400448c:	10ffffc4 	addi	r3,r2,-1
 4004490:	18000916 	blt	r3,zero,40044b8 <__sfp+0x60>
 4004494:	2080030f 	ldh	r2,12(r4)
 4004498:	10000b26 	beq	r2,zero,40044c8 <__sfp+0x70>
 400449c:	017fffc4 	movi	r5,-1
 40044a0:	00000206 	br	40044ac <__sfp+0x54>
 40044a4:	2080030f 	ldh	r2,12(r4)
 40044a8:	10000726 	beq	r2,zero,40044c8 <__sfp+0x70>
 40044ac:	18ffffc4 	addi	r3,r3,-1
 40044b0:	21001704 	addi	r4,r4,92
 40044b4:	197ffb1e 	bne	r3,r5,40044a4 <__sfp+0x4c>
 40044b8:	80800017 	ldw	r2,0(r16)
 40044bc:	10001926 	beq	r2,zero,4004524 <__sfp+0xcc>
 40044c0:	1021883a 	mov	r16,r2
 40044c4:	003fef06 	br	4004484 <__sfp+0x2c>
 40044c8:	00bfffc4 	movi	r2,-1
 40044cc:	00c00044 	movi	r3,1
 40044d0:	2080038d 	sth	r2,14(r4)
 40044d4:	20c0030d 	sth	r3,12(r4)
 40044d8:	20000015 	stw	zero,0(r4)
 40044dc:	20000215 	stw	zero,8(r4)
 40044e0:	20000115 	stw	zero,4(r4)
 40044e4:	20000415 	stw	zero,16(r4)
 40044e8:	20000515 	stw	zero,20(r4)
 40044ec:	20000615 	stw	zero,24(r4)
 40044f0:	20000c15 	stw	zero,48(r4)
 40044f4:	20000d15 	stw	zero,52(r4)
 40044f8:	20001115 	stw	zero,68(r4)
 40044fc:	20001215 	stw	zero,72(r4)
 4004500:	2005883a 	mov	r2,r4
 4004504:	dfc00217 	ldw	ra,8(sp)
 4004508:	dc400117 	ldw	r17,4(sp)
 400450c:	dc000017 	ldw	r16,0(sp)
 4004510:	dec00304 	addi	sp,sp,12
 4004514:	f800283a 	ret
 4004518:	8009883a 	mov	r4,r16
 400451c:	40042f00 	call	40042f0 <__sinit>
 4004520:	003fd706 	br	4004480 <__sfp+0x28>
 4004524:	8809883a 	mov	r4,r17
 4004528:	01400104 	movi	r5,4
 400452c:	40043f00 	call	40043f0 <__sfmoreglue>
 4004530:	80800015 	stw	r2,0(r16)
 4004534:	103fe21e 	bne	r2,zero,40044c0 <__sfp+0x68>
 4004538:	00800304 	movi	r2,12
 400453c:	0009883a 	mov	r4,zero
 4004540:	88800015 	stw	r2,0(r17)
 4004544:	003fee06 	br	4004500 <__sfp+0xa8>

04004548 <_malloc_trim_r>:
 4004548:	defffb04 	addi	sp,sp,-20
 400454c:	dcc00315 	stw	r19,12(sp)
 4004550:	04c10074 	movhi	r19,1025
 4004554:	9cdbe304 	addi	r19,r19,28556
 4004558:	dc800215 	stw	r18,8(sp)
 400455c:	dc400115 	stw	r17,4(sp)
 4004560:	dc000015 	stw	r16,0(sp)
 4004564:	2823883a 	mov	r17,r5
 4004568:	2025883a 	mov	r18,r4
 400456c:	dfc00415 	stw	ra,16(sp)
 4004570:	400a8e40 	call	400a8e4 <__malloc_lock>
 4004574:	98800217 	ldw	r2,8(r19)
 4004578:	9009883a 	mov	r4,r18
 400457c:	000b883a 	mov	r5,zero
 4004580:	10c00117 	ldw	r3,4(r2)
 4004584:	00bfff04 	movi	r2,-4
 4004588:	18a0703a 	and	r16,r3,r2
 400458c:	8463c83a 	sub	r17,r16,r17
 4004590:	8c43fbc4 	addi	r17,r17,4079
 4004594:	8822d33a 	srli	r17,r17,12
 4004598:	0083ffc4 	movi	r2,4095
 400459c:	8c7fffc4 	addi	r17,r17,-1
 40045a0:	8822933a 	slli	r17,r17,12
 40045a4:	1440060e 	bge	r2,r17,40045c0 <_malloc_trim_r+0x78>
 40045a8:	40072900 	call	4007290 <_sbrk_r>
 40045ac:	98c00217 	ldw	r3,8(r19)
 40045b0:	9009883a 	mov	r4,r18
 40045b4:	044bc83a 	sub	r5,zero,r17
 40045b8:	80c7883a 	add	r3,r16,r3
 40045bc:	10c00926 	beq	r2,r3,40045e4 <_malloc_trim_r+0x9c>
 40045c0:	400a9ec0 	call	400a9ec <__malloc_unlock>
 40045c4:	0005883a 	mov	r2,zero
 40045c8:	dfc00417 	ldw	ra,16(sp)
 40045cc:	dcc00317 	ldw	r19,12(sp)
 40045d0:	dc800217 	ldw	r18,8(sp)
 40045d4:	dc400117 	ldw	r17,4(sp)
 40045d8:	dc000017 	ldw	r16,0(sp)
 40045dc:	dec00504 	addi	sp,sp,20
 40045e0:	f800283a 	ret
 40045e4:	9009883a 	mov	r4,r18
 40045e8:	40072900 	call	4007290 <_sbrk_r>
 40045ec:	844dc83a 	sub	r6,r16,r17
 40045f0:	00ffffc4 	movi	r3,-1
 40045f4:	9009883a 	mov	r4,r18
 40045f8:	000b883a 	mov	r5,zero
 40045fc:	01c100b4 	movhi	r7,1026
 4004600:	39e1f504 	addi	r7,r7,-30764
 4004604:	31800054 	ori	r6,r6,1
 4004608:	10c00926 	beq	r2,r3,4004630 <_malloc_trim_r+0xe8>
 400460c:	38800017 	ldw	r2,0(r7)
 4004610:	98c00217 	ldw	r3,8(r19)
 4004614:	9009883a 	mov	r4,r18
 4004618:	1445c83a 	sub	r2,r2,r17
 400461c:	38800015 	stw	r2,0(r7)
 4004620:	19800115 	stw	r6,4(r3)
 4004624:	400a9ec0 	call	400a9ec <__malloc_unlock>
 4004628:	00800044 	movi	r2,1
 400462c:	003fe606 	br	40045c8 <_malloc_trim_r+0x80>
 4004630:	40072900 	call	4007290 <_sbrk_r>
 4004634:	99800217 	ldw	r6,8(r19)
 4004638:	100f883a 	mov	r7,r2
 400463c:	9009883a 	mov	r4,r18
 4004640:	1187c83a 	sub	r3,r2,r6
 4004644:	008003c4 	movi	r2,15
 4004648:	19400054 	ori	r5,r3,1
 400464c:	10ffdc0e 	bge	r2,r3,40045c0 <_malloc_trim_r+0x78>
 4004650:	008100b4 	movhi	r2,1026
 4004654:	10a1a004 	addi	r2,r2,-31104
 4004658:	10c00017 	ldw	r3,0(r2)
 400465c:	008100b4 	movhi	r2,1026
 4004660:	10a1f504 	addi	r2,r2,-30764
 4004664:	31400115 	stw	r5,4(r6)
 4004668:	38c7c83a 	sub	r3,r7,r3
 400466c:	10c00015 	stw	r3,0(r2)
 4004670:	003fd306 	br	40045c0 <_malloc_trim_r+0x78>

04004674 <_free_r>:
 4004674:	defffd04 	addi	sp,sp,-12
 4004678:	dc400115 	stw	r17,4(sp)
 400467c:	dc000015 	stw	r16,0(sp)
 4004680:	dfc00215 	stw	ra,8(sp)
 4004684:	2821883a 	mov	r16,r5
 4004688:	2023883a 	mov	r17,r4
 400468c:	28005a26 	beq	r5,zero,40047f8 <_free_r+0x184>
 4004690:	400a8e40 	call	400a8e4 <__malloc_lock>
 4004694:	823ffe04 	addi	r8,r16,-8
 4004698:	41400117 	ldw	r5,4(r8)
 400469c:	00bfff84 	movi	r2,-2
 40046a0:	02810074 	movhi	r10,1025
 40046a4:	529be304 	addi	r10,r10,28556
 40046a8:	288e703a 	and	r7,r5,r2
 40046ac:	41cd883a 	add	r6,r8,r7
 40046b0:	30c00117 	ldw	r3,4(r6)
 40046b4:	51000217 	ldw	r4,8(r10)
 40046b8:	00bfff04 	movi	r2,-4
 40046bc:	1892703a 	and	r9,r3,r2
 40046c0:	5017883a 	mov	r11,r10
 40046c4:	31006726 	beq	r6,r4,4004864 <_free_r+0x1f0>
 40046c8:	2880004c 	andi	r2,r5,1
 40046cc:	1005003a 	cmpeq	r2,r2,zero
 40046d0:	32400115 	stw	r9,4(r6)
 40046d4:	10001a1e 	bne	r2,zero,4004740 <_free_r+0xcc>
 40046d8:	000b883a 	mov	r5,zero
 40046dc:	3247883a 	add	r3,r6,r9
 40046e0:	18800117 	ldw	r2,4(r3)
 40046e4:	1080004c 	andi	r2,r2,1
 40046e8:	1000231e 	bne	r2,zero,4004778 <_free_r+0x104>
 40046ec:	280ac03a 	cmpne	r5,r5,zero
 40046f0:	3a4f883a 	add	r7,r7,r9
 40046f4:	2800451e 	bne	r5,zero,400480c <_free_r+0x198>
 40046f8:	31000217 	ldw	r4,8(r6)
 40046fc:	00810074 	movhi	r2,1025
 4004700:	109be504 	addi	r2,r2,28564
 4004704:	20807b26 	beq	r4,r2,40048f4 <_free_r+0x280>
 4004708:	30800317 	ldw	r2,12(r6)
 400470c:	3a07883a 	add	r3,r7,r8
 4004710:	19c00015 	stw	r7,0(r3)
 4004714:	11000215 	stw	r4,8(r2)
 4004718:	20800315 	stw	r2,12(r4)
 400471c:	38800054 	ori	r2,r7,1
 4004720:	40800115 	stw	r2,4(r8)
 4004724:	28001a26 	beq	r5,zero,4004790 <_free_r+0x11c>
 4004728:	8809883a 	mov	r4,r17
 400472c:	dfc00217 	ldw	ra,8(sp)
 4004730:	dc400117 	ldw	r17,4(sp)
 4004734:	dc000017 	ldw	r16,0(sp)
 4004738:	dec00304 	addi	sp,sp,12
 400473c:	400a9ec1 	jmpi	400a9ec <__malloc_unlock>
 4004740:	80bffe17 	ldw	r2,-8(r16)
 4004744:	50c00204 	addi	r3,r10,8
 4004748:	4091c83a 	sub	r8,r8,r2
 400474c:	41000217 	ldw	r4,8(r8)
 4004750:	388f883a 	add	r7,r7,r2
 4004754:	20c06126 	beq	r4,r3,40048dc <_free_r+0x268>
 4004758:	40800317 	ldw	r2,12(r8)
 400475c:	3247883a 	add	r3,r6,r9
 4004760:	000b883a 	mov	r5,zero
 4004764:	11000215 	stw	r4,8(r2)
 4004768:	20800315 	stw	r2,12(r4)
 400476c:	18800117 	ldw	r2,4(r3)
 4004770:	1080004c 	andi	r2,r2,1
 4004774:	103fdd26 	beq	r2,zero,40046ec <_free_r+0x78>
 4004778:	38800054 	ori	r2,r7,1
 400477c:	3a07883a 	add	r3,r7,r8
 4004780:	280ac03a 	cmpne	r5,r5,zero
 4004784:	40800115 	stw	r2,4(r8)
 4004788:	19c00015 	stw	r7,0(r3)
 400478c:	283fe61e 	bne	r5,zero,4004728 <_free_r+0xb4>
 4004790:	00807fc4 	movi	r2,511
 4004794:	11c01f2e 	bgeu	r2,r7,4004814 <_free_r+0x1a0>
 4004798:	3806d27a 	srli	r3,r7,9
 400479c:	1800481e 	bne	r3,zero,40048c0 <_free_r+0x24c>
 40047a0:	3804d0fa 	srli	r2,r7,3
 40047a4:	100690fa 	slli	r3,r2,3
 40047a8:	1acd883a 	add	r6,r3,r11
 40047ac:	31400217 	ldw	r5,8(r6)
 40047b0:	31405926 	beq	r6,r5,4004918 <_free_r+0x2a4>
 40047b4:	28800117 	ldw	r2,4(r5)
 40047b8:	00ffff04 	movi	r3,-4
 40047bc:	10c4703a 	and	r2,r2,r3
 40047c0:	3880022e 	bgeu	r7,r2,40047cc <_free_r+0x158>
 40047c4:	29400217 	ldw	r5,8(r5)
 40047c8:	317ffa1e 	bne	r6,r5,40047b4 <_free_r+0x140>
 40047cc:	29800317 	ldw	r6,12(r5)
 40047d0:	41800315 	stw	r6,12(r8)
 40047d4:	41400215 	stw	r5,8(r8)
 40047d8:	8809883a 	mov	r4,r17
 40047dc:	2a000315 	stw	r8,12(r5)
 40047e0:	32000215 	stw	r8,8(r6)
 40047e4:	dfc00217 	ldw	ra,8(sp)
 40047e8:	dc400117 	ldw	r17,4(sp)
 40047ec:	dc000017 	ldw	r16,0(sp)
 40047f0:	dec00304 	addi	sp,sp,12
 40047f4:	400a9ec1 	jmpi	400a9ec <__malloc_unlock>
 40047f8:	dfc00217 	ldw	ra,8(sp)
 40047fc:	dc400117 	ldw	r17,4(sp)
 4004800:	dc000017 	ldw	r16,0(sp)
 4004804:	dec00304 	addi	sp,sp,12
 4004808:	f800283a 	ret
 400480c:	31000217 	ldw	r4,8(r6)
 4004810:	003fbd06 	br	4004708 <_free_r+0x94>
 4004814:	3806d0fa 	srli	r3,r7,3
 4004818:	00800044 	movi	r2,1
 400481c:	51400117 	ldw	r5,4(r10)
 4004820:	180890fa 	slli	r4,r3,3
 4004824:	1807d0ba 	srai	r3,r3,2
 4004828:	22c9883a 	add	r4,r4,r11
 400482c:	21800217 	ldw	r6,8(r4)
 4004830:	10c4983a 	sll	r2,r2,r3
 4004834:	41000315 	stw	r4,12(r8)
 4004838:	41800215 	stw	r6,8(r8)
 400483c:	288ab03a 	or	r5,r5,r2
 4004840:	22000215 	stw	r8,8(r4)
 4004844:	8809883a 	mov	r4,r17
 4004848:	51400115 	stw	r5,4(r10)
 400484c:	32000315 	stw	r8,12(r6)
 4004850:	dfc00217 	ldw	ra,8(sp)
 4004854:	dc400117 	ldw	r17,4(sp)
 4004858:	dc000017 	ldw	r16,0(sp)
 400485c:	dec00304 	addi	sp,sp,12
 4004860:	400a9ec1 	jmpi	400a9ec <__malloc_unlock>
 4004864:	2880004c 	andi	r2,r5,1
 4004868:	3a4d883a 	add	r6,r7,r9
 400486c:	1000071e 	bne	r2,zero,400488c <_free_r+0x218>
 4004870:	80bffe17 	ldw	r2,-8(r16)
 4004874:	4091c83a 	sub	r8,r8,r2
 4004878:	41000317 	ldw	r4,12(r8)
 400487c:	40c00217 	ldw	r3,8(r8)
 4004880:	308d883a 	add	r6,r6,r2
 4004884:	20c00215 	stw	r3,8(r4)
 4004888:	19000315 	stw	r4,12(r3)
 400488c:	008100b4 	movhi	r2,1026
 4004890:	10a19f04 	addi	r2,r2,-31108
 4004894:	11000017 	ldw	r4,0(r2)
 4004898:	30c00054 	ori	r3,r6,1
 400489c:	52000215 	stw	r8,8(r10)
 40048a0:	40c00115 	stw	r3,4(r8)
 40048a4:	313fa036 	bltu	r6,r4,4004728 <_free_r+0xb4>
 40048a8:	008100b4 	movhi	r2,1026
 40048ac:	10a1d204 	addi	r2,r2,-30904
 40048b0:	11400017 	ldw	r5,0(r2)
 40048b4:	8809883a 	mov	r4,r17
 40048b8:	40045480 	call	4004548 <_malloc_trim_r>
 40048bc:	003f9a06 	br	4004728 <_free_r+0xb4>
 40048c0:	00800104 	movi	r2,4
 40048c4:	10c0072e 	bgeu	r2,r3,40048e4 <_free_r+0x270>
 40048c8:	00800504 	movi	r2,20
 40048cc:	10c01936 	bltu	r2,r3,4004934 <_free_r+0x2c0>
 40048d0:	188016c4 	addi	r2,r3,91
 40048d4:	100690fa 	slli	r3,r2,3
 40048d8:	003fb306 	br	40047a8 <_free_r+0x134>
 40048dc:	01400044 	movi	r5,1
 40048e0:	003f7e06 	br	40046dc <_free_r+0x68>
 40048e4:	3804d1ba 	srli	r2,r7,6
 40048e8:	10800e04 	addi	r2,r2,56
 40048ec:	100690fa 	slli	r3,r2,3
 40048f0:	003fad06 	br	40047a8 <_free_r+0x134>
 40048f4:	22000315 	stw	r8,12(r4)
 40048f8:	22000215 	stw	r8,8(r4)
 40048fc:	3a05883a 	add	r2,r7,r8
 4004900:	38c00054 	ori	r3,r7,1
 4004904:	11c00015 	stw	r7,0(r2)
 4004908:	41000215 	stw	r4,8(r8)
 400490c:	40c00115 	stw	r3,4(r8)
 4004910:	41000315 	stw	r4,12(r8)
 4004914:	003f8406 	br	4004728 <_free_r+0xb4>
 4004918:	1005d0ba 	srai	r2,r2,2
 400491c:	00c00044 	movi	r3,1
 4004920:	51000117 	ldw	r4,4(r10)
 4004924:	1886983a 	sll	r3,r3,r2
 4004928:	20c8b03a 	or	r4,r4,r3
 400492c:	51000115 	stw	r4,4(r10)
 4004930:	003fa706 	br	40047d0 <_free_r+0x15c>
 4004934:	00801504 	movi	r2,84
 4004938:	10c00436 	bltu	r2,r3,400494c <_free_r+0x2d8>
 400493c:	3804d33a 	srli	r2,r7,12
 4004940:	10801b84 	addi	r2,r2,110
 4004944:	100690fa 	slli	r3,r2,3
 4004948:	003f9706 	br	40047a8 <_free_r+0x134>
 400494c:	00805504 	movi	r2,340
 4004950:	10c00436 	bltu	r2,r3,4004964 <_free_r+0x2f0>
 4004954:	3804d3fa 	srli	r2,r7,15
 4004958:	10801dc4 	addi	r2,r2,119
 400495c:	100690fa 	slli	r3,r2,3
 4004960:	003f9106 	br	40047a8 <_free_r+0x134>
 4004964:	00815504 	movi	r2,1364
 4004968:	10c0032e 	bgeu	r2,r3,4004978 <_free_r+0x304>
 400496c:	00801f84 	movi	r2,126
 4004970:	00c0fc04 	movi	r3,1008
 4004974:	003f8c06 	br	40047a8 <_free_r+0x134>
 4004978:	3804d4ba 	srli	r2,r7,18
 400497c:	10801f04 	addi	r2,r2,124
 4004980:	100690fa 	slli	r3,r2,3
 4004984:	003f8806 	br	40047a8 <_free_r+0x134>

04004988 <__sfvwrite_r>:
 4004988:	30800217 	ldw	r2,8(r6)
 400498c:	defff504 	addi	sp,sp,-44
 4004990:	df000915 	stw	fp,36(sp)
 4004994:	dd800715 	stw	r22,28(sp)
 4004998:	dc800315 	stw	r18,12(sp)
 400499c:	dfc00a15 	stw	ra,40(sp)
 40049a0:	ddc00815 	stw	r23,32(sp)
 40049a4:	dd400615 	stw	r21,24(sp)
 40049a8:	dd000515 	stw	r20,20(sp)
 40049ac:	dcc00415 	stw	r19,16(sp)
 40049b0:	dc400215 	stw	r17,8(sp)
 40049b4:	dc000115 	stw	r16,4(sp)
 40049b8:	302d883a 	mov	r22,r6
 40049bc:	2039883a 	mov	fp,r4
 40049c0:	2825883a 	mov	r18,r5
 40049c4:	10001c26 	beq	r2,zero,4004a38 <__sfvwrite_r+0xb0>
 40049c8:	29c0030b 	ldhu	r7,12(r5)
 40049cc:	3880020c 	andi	r2,r7,8
 40049d0:	10002726 	beq	r2,zero,4004a70 <__sfvwrite_r+0xe8>
 40049d4:	28800417 	ldw	r2,16(r5)
 40049d8:	10002526 	beq	r2,zero,4004a70 <__sfvwrite_r+0xe8>
 40049dc:	3880008c 	andi	r2,r7,2
 40049e0:	b5400017 	ldw	r21,0(r22)
 40049e4:	10002826 	beq	r2,zero,4004a88 <__sfvwrite_r+0x100>
 40049e8:	0021883a 	mov	r16,zero
 40049ec:	0023883a 	mov	r17,zero
 40049f0:	880d883a 	mov	r6,r17
 40049f4:	e009883a 	mov	r4,fp
 40049f8:	00810004 	movi	r2,1024
 40049fc:	80006e26 	beq	r16,zero,4004bb8 <__sfvwrite_r+0x230>
 4004a00:	800f883a 	mov	r7,r16
 4004a04:	91400717 	ldw	r5,28(r18)
 4004a08:	1400012e 	bgeu	r2,r16,4004a10 <__sfvwrite_r+0x88>
 4004a0c:	100f883a 	mov	r7,r2
 4004a10:	90c00917 	ldw	r3,36(r18)
 4004a14:	183ee83a 	callr	r3
 4004a18:	1007883a 	mov	r3,r2
 4004a1c:	80a1c83a 	sub	r16,r16,r2
 4004a20:	88a3883a 	add	r17,r17,r2
 4004a24:	00806d0e 	bge	zero,r2,4004bdc <__sfvwrite_r+0x254>
 4004a28:	b0800217 	ldw	r2,8(r22)
 4004a2c:	10c5c83a 	sub	r2,r2,r3
 4004a30:	b0800215 	stw	r2,8(r22)
 4004a34:	103fee1e 	bne	r2,zero,40049f0 <__sfvwrite_r+0x68>
 4004a38:	0009883a 	mov	r4,zero
 4004a3c:	2005883a 	mov	r2,r4
 4004a40:	dfc00a17 	ldw	ra,40(sp)
 4004a44:	df000917 	ldw	fp,36(sp)
 4004a48:	ddc00817 	ldw	r23,32(sp)
 4004a4c:	dd800717 	ldw	r22,28(sp)
 4004a50:	dd400617 	ldw	r21,24(sp)
 4004a54:	dd000517 	ldw	r20,20(sp)
 4004a58:	dcc00417 	ldw	r19,16(sp)
 4004a5c:	dc800317 	ldw	r18,12(sp)
 4004a60:	dc400217 	ldw	r17,8(sp)
 4004a64:	dc000117 	ldw	r16,4(sp)
 4004a68:	dec00b04 	addi	sp,sp,44
 4004a6c:	f800283a 	ret
 4004a70:	40027500 	call	4002750 <__swsetup_r>
 4004a74:	1000e41e 	bne	r2,zero,4004e08 <__sfvwrite_r+0x480>
 4004a78:	91c0030b 	ldhu	r7,12(r18)
 4004a7c:	b5400017 	ldw	r21,0(r22)
 4004a80:	3880008c 	andi	r2,r7,2
 4004a84:	103fd81e 	bne	r2,zero,40049e8 <__sfvwrite_r+0x60>
 4004a88:	3880004c 	andi	r2,r7,1
 4004a8c:	1005003a 	cmpeq	r2,r2,zero
 4004a90:	10005726 	beq	r2,zero,4004bf0 <__sfvwrite_r+0x268>
 4004a94:	0029883a 	mov	r20,zero
 4004a98:	002f883a 	mov	r23,zero
 4004a9c:	a0004226 	beq	r20,zero,4004ba8 <__sfvwrite_r+0x220>
 4004aa0:	3880800c 	andi	r2,r7,512
 4004aa4:	94000217 	ldw	r16,8(r18)
 4004aa8:	10008b26 	beq	r2,zero,4004cd8 <__sfvwrite_r+0x350>
 4004aac:	800d883a 	mov	r6,r16
 4004ab0:	a400a536 	bltu	r20,r16,4004d48 <__sfvwrite_r+0x3c0>
 4004ab4:	3881200c 	andi	r2,r7,1152
 4004ab8:	10002726 	beq	r2,zero,4004b58 <__sfvwrite_r+0x1d0>
 4004abc:	90800517 	ldw	r2,20(r18)
 4004ac0:	92000417 	ldw	r8,16(r18)
 4004ac4:	91400017 	ldw	r5,0(r18)
 4004ac8:	1087883a 	add	r3,r2,r2
 4004acc:	1887883a 	add	r3,r3,r2
 4004ad0:	1808d7fa 	srli	r4,r3,31
 4004ad4:	2a21c83a 	sub	r16,r5,r8
 4004ad8:	80800044 	addi	r2,r16,1
 4004adc:	20c9883a 	add	r4,r4,r3
 4004ae0:	2027d07a 	srai	r19,r4,1
 4004ae4:	a085883a 	add	r2,r20,r2
 4004ae8:	980d883a 	mov	r6,r19
 4004aec:	9880022e 	bgeu	r19,r2,4004af8 <__sfvwrite_r+0x170>
 4004af0:	1027883a 	mov	r19,r2
 4004af4:	100d883a 	mov	r6,r2
 4004af8:	3881000c 	andi	r2,r7,1024
 4004afc:	1000b826 	beq	r2,zero,4004de0 <__sfvwrite_r+0x458>
 4004b00:	300b883a 	mov	r5,r6
 4004b04:	e009883a 	mov	r4,fp
 4004b08:	40051fc0 	call	40051fc <_malloc_r>
 4004b0c:	10003126 	beq	r2,zero,4004bd4 <__sfvwrite_r+0x24c>
 4004b10:	91400417 	ldw	r5,16(r18)
 4004b14:	1009883a 	mov	r4,r2
 4004b18:	800d883a 	mov	r6,r16
 4004b1c:	1023883a 	mov	r17,r2
 4004b20:	4005a200 	call	4005a20 <memcpy>
 4004b24:	90c0030b 	ldhu	r3,12(r18)
 4004b28:	00beffc4 	movi	r2,-1025
 4004b2c:	1886703a 	and	r3,r3,r2
 4004b30:	18c02014 	ori	r3,r3,128
 4004b34:	90c0030d 	sth	r3,12(r18)
 4004b38:	9c07c83a 	sub	r3,r19,r16
 4004b3c:	8c05883a 	add	r2,r17,r16
 4004b40:	a00d883a 	mov	r6,r20
 4004b44:	a021883a 	mov	r16,r20
 4004b48:	90800015 	stw	r2,0(r18)
 4004b4c:	90c00215 	stw	r3,8(r18)
 4004b50:	94400415 	stw	r17,16(r18)
 4004b54:	94c00515 	stw	r19,20(r18)
 4004b58:	91000017 	ldw	r4,0(r18)
 4004b5c:	b80b883a 	mov	r5,r23
 4004b60:	a023883a 	mov	r17,r20
 4004b64:	4005ac00 	call	4005ac0 <memmove>
 4004b68:	90c00217 	ldw	r3,8(r18)
 4004b6c:	90800017 	ldw	r2,0(r18)
 4004b70:	a027883a 	mov	r19,r20
 4004b74:	1c07c83a 	sub	r3,r3,r16
 4004b78:	1405883a 	add	r2,r2,r16
 4004b7c:	90c00215 	stw	r3,8(r18)
 4004b80:	a021883a 	mov	r16,r20
 4004b84:	90800015 	stw	r2,0(r18)
 4004b88:	b0800217 	ldw	r2,8(r22)
 4004b8c:	1405c83a 	sub	r2,r2,r16
 4004b90:	b0800215 	stw	r2,8(r22)
 4004b94:	103fa826 	beq	r2,zero,4004a38 <__sfvwrite_r+0xb0>
 4004b98:	a469c83a 	sub	r20,r20,r17
 4004b9c:	91c0030b 	ldhu	r7,12(r18)
 4004ba0:	bcef883a 	add	r23,r23,r19
 4004ba4:	a03fbe1e 	bne	r20,zero,4004aa0 <__sfvwrite_r+0x118>
 4004ba8:	adc00017 	ldw	r23,0(r21)
 4004bac:	ad000117 	ldw	r20,4(r21)
 4004bb0:	ad400204 	addi	r21,r21,8
 4004bb4:	003fb906 	br	4004a9c <__sfvwrite_r+0x114>
 4004bb8:	ac400017 	ldw	r17,0(r21)
 4004bbc:	ac000117 	ldw	r16,4(r21)
 4004bc0:	ad400204 	addi	r21,r21,8
 4004bc4:	003f8a06 	br	40049f0 <__sfvwrite_r+0x68>
 4004bc8:	91400417 	ldw	r5,16(r18)
 4004bcc:	e009883a 	mov	r4,fp
 4004bd0:	40046740 	call	4004674 <_free_r>
 4004bd4:	00800304 	movi	r2,12
 4004bd8:	e0800015 	stw	r2,0(fp)
 4004bdc:	9080030b 	ldhu	r2,12(r18)
 4004be0:	013fffc4 	movi	r4,-1
 4004be4:	10801014 	ori	r2,r2,64
 4004be8:	9080030d 	sth	r2,12(r18)
 4004bec:	003f9306 	br	4004a3c <__sfvwrite_r+0xb4>
 4004bf0:	0027883a 	mov	r19,zero
 4004bf4:	002f883a 	mov	r23,zero
 4004bf8:	d8000015 	stw	zero,0(sp)
 4004bfc:	0029883a 	mov	r20,zero
 4004c00:	98001e26 	beq	r19,zero,4004c7c <__sfvwrite_r+0x2f4>
 4004c04:	d8c00017 	ldw	r3,0(sp)
 4004c08:	1804c03a 	cmpne	r2,r3,zero
 4004c0c:	10005e26 	beq	r2,zero,4004d88 <__sfvwrite_r+0x400>
 4004c10:	9821883a 	mov	r16,r19
 4004c14:	a4c0012e 	bgeu	r20,r19,4004c1c <__sfvwrite_r+0x294>
 4004c18:	a021883a 	mov	r16,r20
 4004c1c:	91000017 	ldw	r4,0(r18)
 4004c20:	90800417 	ldw	r2,16(r18)
 4004c24:	91800217 	ldw	r6,8(r18)
 4004c28:	91c00517 	ldw	r7,20(r18)
 4004c2c:	1100022e 	bgeu	r2,r4,4004c38 <__sfvwrite_r+0x2b0>
 4004c30:	31e3883a 	add	r17,r6,r7
 4004c34:	8c001616 	blt	r17,r16,4004c90 <__sfvwrite_r+0x308>
 4004c38:	81c03816 	blt	r16,r7,4004d1c <__sfvwrite_r+0x394>
 4004c3c:	90c00917 	ldw	r3,36(r18)
 4004c40:	91400717 	ldw	r5,28(r18)
 4004c44:	e009883a 	mov	r4,fp
 4004c48:	b80d883a 	mov	r6,r23
 4004c4c:	183ee83a 	callr	r3
 4004c50:	1023883a 	mov	r17,r2
 4004c54:	00bfe10e 	bge	zero,r2,4004bdc <__sfvwrite_r+0x254>
 4004c58:	a469c83a 	sub	r20,r20,r17
 4004c5c:	a0001826 	beq	r20,zero,4004cc0 <__sfvwrite_r+0x338>
 4004c60:	b0800217 	ldw	r2,8(r22)
 4004c64:	1445c83a 	sub	r2,r2,r17
 4004c68:	b0800215 	stw	r2,8(r22)
 4004c6c:	103f7226 	beq	r2,zero,4004a38 <__sfvwrite_r+0xb0>
 4004c70:	9c67c83a 	sub	r19,r19,r17
 4004c74:	bc6f883a 	add	r23,r23,r17
 4004c78:	983fe21e 	bne	r19,zero,4004c04 <__sfvwrite_r+0x27c>
 4004c7c:	adc00017 	ldw	r23,0(r21)
 4004c80:	acc00117 	ldw	r19,4(r21)
 4004c84:	ad400204 	addi	r21,r21,8
 4004c88:	d8000015 	stw	zero,0(sp)
 4004c8c:	003fdc06 	br	4004c00 <__sfvwrite_r+0x278>
 4004c90:	b80b883a 	mov	r5,r23
 4004c94:	880d883a 	mov	r6,r17
 4004c98:	4005ac00 	call	4005ac0 <memmove>
 4004c9c:	90c00017 	ldw	r3,0(r18)
 4004ca0:	e009883a 	mov	r4,fp
 4004ca4:	900b883a 	mov	r5,r18
 4004ca8:	1c47883a 	add	r3,r3,r17
 4004cac:	90c00015 	stw	r3,0(r18)
 4004cb0:	40040580 	call	4004058 <_fflush_r>
 4004cb4:	103fc91e 	bne	r2,zero,4004bdc <__sfvwrite_r+0x254>
 4004cb8:	a469c83a 	sub	r20,r20,r17
 4004cbc:	a03fe81e 	bne	r20,zero,4004c60 <__sfvwrite_r+0x2d8>
 4004cc0:	e009883a 	mov	r4,fp
 4004cc4:	900b883a 	mov	r5,r18
 4004cc8:	40040580 	call	4004058 <_fflush_r>
 4004ccc:	103fc31e 	bne	r2,zero,4004bdc <__sfvwrite_r+0x254>
 4004cd0:	d8000015 	stw	zero,0(sp)
 4004cd4:	003fe206 	br	4004c60 <__sfvwrite_r+0x2d8>
 4004cd8:	91000017 	ldw	r4,0(r18)
 4004cdc:	90800417 	ldw	r2,16(r18)
 4004ce0:	1100022e 	bgeu	r2,r4,4004cec <__sfvwrite_r+0x364>
 4004ce4:	8023883a 	mov	r17,r16
 4004ce8:	85003136 	bltu	r16,r20,4004db0 <__sfvwrite_r+0x428>
 4004cec:	91c00517 	ldw	r7,20(r18)
 4004cf0:	a1c01836 	bltu	r20,r7,4004d54 <__sfvwrite_r+0x3cc>
 4004cf4:	90c00917 	ldw	r3,36(r18)
 4004cf8:	91400717 	ldw	r5,28(r18)
 4004cfc:	e009883a 	mov	r4,fp
 4004d00:	b80d883a 	mov	r6,r23
 4004d04:	183ee83a 	callr	r3
 4004d08:	1021883a 	mov	r16,r2
 4004d0c:	00bfb30e 	bge	zero,r2,4004bdc <__sfvwrite_r+0x254>
 4004d10:	1023883a 	mov	r17,r2
 4004d14:	1027883a 	mov	r19,r2
 4004d18:	003f9b06 	br	4004b88 <__sfvwrite_r+0x200>
 4004d1c:	b80b883a 	mov	r5,r23
 4004d20:	800d883a 	mov	r6,r16
 4004d24:	4005ac00 	call	4005ac0 <memmove>
 4004d28:	90c00217 	ldw	r3,8(r18)
 4004d2c:	90800017 	ldw	r2,0(r18)
 4004d30:	8023883a 	mov	r17,r16
 4004d34:	1c07c83a 	sub	r3,r3,r16
 4004d38:	1405883a 	add	r2,r2,r16
 4004d3c:	90c00215 	stw	r3,8(r18)
 4004d40:	90800015 	stw	r2,0(r18)
 4004d44:	003fc406 	br	4004c58 <__sfvwrite_r+0x2d0>
 4004d48:	a00d883a 	mov	r6,r20
 4004d4c:	a021883a 	mov	r16,r20
 4004d50:	003f8106 	br	4004b58 <__sfvwrite_r+0x1d0>
 4004d54:	b80b883a 	mov	r5,r23
 4004d58:	a00d883a 	mov	r6,r20
 4004d5c:	4005ac00 	call	4005ac0 <memmove>
 4004d60:	90c00217 	ldw	r3,8(r18)
 4004d64:	90800017 	ldw	r2,0(r18)
 4004d68:	a021883a 	mov	r16,r20
 4004d6c:	1d07c83a 	sub	r3,r3,r20
 4004d70:	1505883a 	add	r2,r2,r20
 4004d74:	a023883a 	mov	r17,r20
 4004d78:	a027883a 	mov	r19,r20
 4004d7c:	90c00215 	stw	r3,8(r18)
 4004d80:	90800015 	stw	r2,0(r18)
 4004d84:	003f8006 	br	4004b88 <__sfvwrite_r+0x200>
 4004d88:	b809883a 	mov	r4,r23
 4004d8c:	01400284 	movi	r5,10
 4004d90:	980d883a 	mov	r6,r19
 4004d94:	400593c0 	call	400593c <memchr>
 4004d98:	10001726 	beq	r2,zero,4004df8 <__sfvwrite_r+0x470>
 4004d9c:	15c5c83a 	sub	r2,r2,r23
 4004da0:	15000044 	addi	r20,r2,1
 4004da4:	00800044 	movi	r2,1
 4004da8:	d8800015 	stw	r2,0(sp)
 4004dac:	003f9806 	br	4004c10 <__sfvwrite_r+0x288>
 4004db0:	b80b883a 	mov	r5,r23
 4004db4:	800d883a 	mov	r6,r16
 4004db8:	4005ac00 	call	4005ac0 <memmove>
 4004dbc:	90c00017 	ldw	r3,0(r18)
 4004dc0:	e009883a 	mov	r4,fp
 4004dc4:	900b883a 	mov	r5,r18
 4004dc8:	1c07883a 	add	r3,r3,r16
 4004dcc:	90c00015 	stw	r3,0(r18)
 4004dd0:	8027883a 	mov	r19,r16
 4004dd4:	40040580 	call	4004058 <_fflush_r>
 4004dd8:	103f6b26 	beq	r2,zero,4004b88 <__sfvwrite_r+0x200>
 4004ddc:	003f7f06 	br	4004bdc <__sfvwrite_r+0x254>
 4004de0:	400b883a 	mov	r5,r8
 4004de4:	e009883a 	mov	r4,fp
 4004de8:	4006c2c0 	call	4006c2c <_realloc_r>
 4004dec:	103f7626 	beq	r2,zero,4004bc8 <__sfvwrite_r+0x240>
 4004df0:	1023883a 	mov	r17,r2
 4004df4:	003f5006 	br	4004b38 <__sfvwrite_r+0x1b0>
 4004df8:	00c00044 	movi	r3,1
 4004dfc:	9d000044 	addi	r20,r19,1
 4004e00:	d8c00015 	stw	r3,0(sp)
 4004e04:	003f8206 	br	4004c10 <__sfvwrite_r+0x288>
 4004e08:	9080030b 	ldhu	r2,12(r18)
 4004e0c:	00c00244 	movi	r3,9
 4004e10:	013fffc4 	movi	r4,-1
 4004e14:	10801014 	ori	r2,r2,64
 4004e18:	9080030d 	sth	r2,12(r18)
 4004e1c:	e0c00015 	stw	r3,0(fp)
 4004e20:	003f0606 	br	4004a3c <__sfvwrite_r+0xb4>

04004e24 <_fwalk_reent>:
 4004e24:	defff704 	addi	sp,sp,-36
 4004e28:	dcc00315 	stw	r19,12(sp)
 4004e2c:	24c0b804 	addi	r19,r4,736
 4004e30:	dd800615 	stw	r22,24(sp)
 4004e34:	dd400515 	stw	r21,20(sp)
 4004e38:	dfc00815 	stw	ra,32(sp)
 4004e3c:	ddc00715 	stw	r23,28(sp)
 4004e40:	dd000415 	stw	r20,16(sp)
 4004e44:	dc800215 	stw	r18,8(sp)
 4004e48:	dc400115 	stw	r17,4(sp)
 4004e4c:	dc000015 	stw	r16,0(sp)
 4004e50:	202b883a 	mov	r21,r4
 4004e54:	282d883a 	mov	r22,r5
 4004e58:	40042e00 	call	40042e0 <__sfp_lock_acquire>
 4004e5c:	98002126 	beq	r19,zero,4004ee4 <_fwalk_reent+0xc0>
 4004e60:	002f883a 	mov	r23,zero
 4004e64:	9c800117 	ldw	r18,4(r19)
 4004e68:	9c000217 	ldw	r16,8(r19)
 4004e6c:	90bfffc4 	addi	r2,r18,-1
 4004e70:	10000d16 	blt	r2,zero,4004ea8 <_fwalk_reent+0x84>
 4004e74:	0023883a 	mov	r17,zero
 4004e78:	053fffc4 	movi	r20,-1
 4004e7c:	8080030f 	ldh	r2,12(r16)
 4004e80:	8c400044 	addi	r17,r17,1
 4004e84:	10000626 	beq	r2,zero,4004ea0 <_fwalk_reent+0x7c>
 4004e88:	8080038f 	ldh	r2,14(r16)
 4004e8c:	800b883a 	mov	r5,r16
 4004e90:	a809883a 	mov	r4,r21
 4004e94:	15000226 	beq	r2,r20,4004ea0 <_fwalk_reent+0x7c>
 4004e98:	b03ee83a 	callr	r22
 4004e9c:	b8aeb03a 	or	r23,r23,r2
 4004ea0:	84001704 	addi	r16,r16,92
 4004ea4:	947ff51e 	bne	r18,r17,4004e7c <_fwalk_reent+0x58>
 4004ea8:	9cc00017 	ldw	r19,0(r19)
 4004eac:	983fed1e 	bne	r19,zero,4004e64 <_fwalk_reent+0x40>
 4004eb0:	40042e40 	call	40042e4 <__sfp_lock_release>
 4004eb4:	b805883a 	mov	r2,r23
 4004eb8:	dfc00817 	ldw	ra,32(sp)
 4004ebc:	ddc00717 	ldw	r23,28(sp)
 4004ec0:	dd800617 	ldw	r22,24(sp)
 4004ec4:	dd400517 	ldw	r21,20(sp)
 4004ec8:	dd000417 	ldw	r20,16(sp)
 4004ecc:	dcc00317 	ldw	r19,12(sp)
 4004ed0:	dc800217 	ldw	r18,8(sp)
 4004ed4:	dc400117 	ldw	r17,4(sp)
 4004ed8:	dc000017 	ldw	r16,0(sp)
 4004edc:	dec00904 	addi	sp,sp,36
 4004ee0:	f800283a 	ret
 4004ee4:	002f883a 	mov	r23,zero
 4004ee8:	003ff106 	br	4004eb0 <_fwalk_reent+0x8c>

04004eec <_fwalk>:
 4004eec:	defff804 	addi	sp,sp,-32
 4004ef0:	dcc00315 	stw	r19,12(sp)
 4004ef4:	24c0b804 	addi	r19,r4,736
 4004ef8:	dd400515 	stw	r21,20(sp)
 4004efc:	dfc00715 	stw	ra,28(sp)
 4004f00:	dd800615 	stw	r22,24(sp)
 4004f04:	dd000415 	stw	r20,16(sp)
 4004f08:	dc800215 	stw	r18,8(sp)
 4004f0c:	dc400115 	stw	r17,4(sp)
 4004f10:	dc000015 	stw	r16,0(sp)
 4004f14:	282b883a 	mov	r21,r5
 4004f18:	40042e00 	call	40042e0 <__sfp_lock_acquire>
 4004f1c:	98001f26 	beq	r19,zero,4004f9c <_fwalk+0xb0>
 4004f20:	002d883a 	mov	r22,zero
 4004f24:	9c800117 	ldw	r18,4(r19)
 4004f28:	9c000217 	ldw	r16,8(r19)
 4004f2c:	90bfffc4 	addi	r2,r18,-1
 4004f30:	10000c16 	blt	r2,zero,4004f64 <_fwalk+0x78>
 4004f34:	0023883a 	mov	r17,zero
 4004f38:	053fffc4 	movi	r20,-1
 4004f3c:	8080030f 	ldh	r2,12(r16)
 4004f40:	8c400044 	addi	r17,r17,1
 4004f44:	10000526 	beq	r2,zero,4004f5c <_fwalk+0x70>
 4004f48:	8080038f 	ldh	r2,14(r16)
 4004f4c:	8009883a 	mov	r4,r16
 4004f50:	15000226 	beq	r2,r20,4004f5c <_fwalk+0x70>
 4004f54:	a83ee83a 	callr	r21
 4004f58:	b0acb03a 	or	r22,r22,r2
 4004f5c:	84001704 	addi	r16,r16,92
 4004f60:	947ff61e 	bne	r18,r17,4004f3c <_fwalk+0x50>
 4004f64:	9cc00017 	ldw	r19,0(r19)
 4004f68:	983fee1e 	bne	r19,zero,4004f24 <_fwalk+0x38>
 4004f6c:	40042e40 	call	40042e4 <__sfp_lock_release>
 4004f70:	b005883a 	mov	r2,r22
 4004f74:	dfc00717 	ldw	ra,28(sp)
 4004f78:	dd800617 	ldw	r22,24(sp)
 4004f7c:	dd400517 	ldw	r21,20(sp)
 4004f80:	dd000417 	ldw	r20,16(sp)
 4004f84:	dcc00317 	ldw	r19,12(sp)
 4004f88:	dc800217 	ldw	r18,8(sp)
 4004f8c:	dc400117 	ldw	r17,4(sp)
 4004f90:	dc000017 	ldw	r16,0(sp)
 4004f94:	dec00804 	addi	sp,sp,32
 4004f98:	f800283a 	ret
 4004f9c:	002d883a 	mov	r22,zero
 4004fa0:	003ff206 	br	4004f6c <_fwalk+0x80>

04004fa4 <__locale_charset>:
 4004fa4:	d0a00317 	ldw	r2,-32756(gp)
 4004fa8:	f800283a 	ret

04004fac <_localeconv_r>:
 4004fac:	00810074 	movhi	r2,1025
 4004fb0:	1099e304 	addi	r2,r2,26508
 4004fb4:	f800283a 	ret

04004fb8 <localeconv>:
 4004fb8:	008100b4 	movhi	r2,1026
 4004fbc:	10a19b04 	addi	r2,r2,-31124
 4004fc0:	11000017 	ldw	r4,0(r2)
 4004fc4:	4004fac1 	jmpi	4004fac <_localeconv_r>

04004fc8 <_setlocale_r>:
 4004fc8:	defffc04 	addi	sp,sp,-16
 4004fcc:	00c10074 	movhi	r3,1025
 4004fd0:	18d9de04 	addi	r3,r3,26488
 4004fd4:	dc800215 	stw	r18,8(sp)
 4004fd8:	dc400115 	stw	r17,4(sp)
 4004fdc:	dc000015 	stw	r16,0(sp)
 4004fe0:	2023883a 	mov	r17,r4
 4004fe4:	2825883a 	mov	r18,r5
 4004fe8:	dfc00315 	stw	ra,12(sp)
 4004fec:	3021883a 	mov	r16,r6
 4004ff0:	3009883a 	mov	r4,r6
 4004ff4:	180b883a 	mov	r5,r3
 4004ff8:	30000926 	beq	r6,zero,4005020 <_setlocale_r+0x58>
 4004ffc:	400744c0 	call	400744c <strcmp>
 4005000:	8009883a 	mov	r4,r16
 4005004:	01410074 	movhi	r5,1025
 4005008:	2959c904 	addi	r5,r5,26404
 400500c:	10000b1e 	bne	r2,zero,400503c <_setlocale_r+0x74>
 4005010:	8c000d15 	stw	r16,52(r17)
 4005014:	8c800c15 	stw	r18,48(r17)
 4005018:	00c10074 	movhi	r3,1025
 400501c:	18d9de04 	addi	r3,r3,26488
 4005020:	1805883a 	mov	r2,r3
 4005024:	dfc00317 	ldw	ra,12(sp)
 4005028:	dc800217 	ldw	r18,8(sp)
 400502c:	dc400117 	ldw	r17,4(sp)
 4005030:	dc000017 	ldw	r16,0(sp)
 4005034:	dec00404 	addi	sp,sp,16
 4005038:	f800283a 	ret
 400503c:	400744c0 	call	400744c <strcmp>
 4005040:	0007883a 	mov	r3,zero
 4005044:	103ff226 	beq	r2,zero,4005010 <_setlocale_r+0x48>
 4005048:	003ff506 	br	4005020 <_setlocale_r+0x58>

0400504c <setlocale>:
 400504c:	018100b4 	movhi	r6,1026
 4005050:	31a19b04 	addi	r6,r6,-31124
 4005054:	2007883a 	mov	r3,r4
 4005058:	31000017 	ldw	r4,0(r6)
 400505c:	280d883a 	mov	r6,r5
 4005060:	180b883a 	mov	r5,r3
 4005064:	4004fc81 	jmpi	4004fc8 <_setlocale_r>

04005068 <__smakebuf_r>:
 4005068:	2880030b 	ldhu	r2,12(r5)
 400506c:	deffed04 	addi	sp,sp,-76
 4005070:	dc401015 	stw	r17,64(sp)
 4005074:	1080008c 	andi	r2,r2,2
 4005078:	dc000f15 	stw	r16,60(sp)
 400507c:	dfc01215 	stw	ra,72(sp)
 4005080:	dc801115 	stw	r18,68(sp)
 4005084:	2821883a 	mov	r16,r5
 4005088:	2023883a 	mov	r17,r4
 400508c:	10000b26 	beq	r2,zero,40050bc <__smakebuf_r+0x54>
 4005090:	28c010c4 	addi	r3,r5,67
 4005094:	00800044 	movi	r2,1
 4005098:	28800515 	stw	r2,20(r5)
 400509c:	28c00415 	stw	r3,16(r5)
 40050a0:	28c00015 	stw	r3,0(r5)
 40050a4:	dfc01217 	ldw	ra,72(sp)
 40050a8:	dc801117 	ldw	r18,68(sp)
 40050ac:	dc401017 	ldw	r17,64(sp)
 40050b0:	dc000f17 	ldw	r16,60(sp)
 40050b4:	dec01304 	addi	sp,sp,76
 40050b8:	f800283a 	ret
 40050bc:	2940038f 	ldh	r5,14(r5)
 40050c0:	28002116 	blt	r5,zero,4005148 <__smakebuf_r+0xe0>
 40050c4:	d80d883a 	mov	r6,sp
 40050c8:	40077c80 	call	40077c8 <_fstat_r>
 40050cc:	10001e16 	blt	r2,zero,4005148 <__smakebuf_r+0xe0>
 40050d0:	d8800117 	ldw	r2,4(sp)
 40050d4:	00e00014 	movui	r3,32768
 40050d8:	113c000c 	andi	r4,r2,61440
 40050dc:	20c03126 	beq	r4,r3,40051a4 <__smakebuf_r+0x13c>
 40050e0:	8080030b 	ldhu	r2,12(r16)
 40050e4:	00c80004 	movi	r3,8192
 40050e8:	10820014 	ori	r2,r2,2048
 40050ec:	8080030d 	sth	r2,12(r16)
 40050f0:	20c01e26 	beq	r4,r3,400516c <__smakebuf_r+0x104>
 40050f4:	04810004 	movi	r18,1024
 40050f8:	8809883a 	mov	r4,r17
 40050fc:	900b883a 	mov	r5,r18
 4005100:	40051fc0 	call	40051fc <_malloc_r>
 4005104:	1009883a 	mov	r4,r2
 4005108:	10003126 	beq	r2,zero,40051d0 <__smakebuf_r+0x168>
 400510c:	80c0030b 	ldhu	r3,12(r16)
 4005110:	00810034 	movhi	r2,1024
 4005114:	1090f504 	addi	r2,r2,17364
 4005118:	88800f15 	stw	r2,60(r17)
 400511c:	18c02014 	ori	r3,r3,128
 4005120:	84800515 	stw	r18,20(r16)
 4005124:	80c0030d 	sth	r3,12(r16)
 4005128:	81000415 	stw	r4,16(r16)
 400512c:	81000015 	stw	r4,0(r16)
 4005130:	dfc01217 	ldw	ra,72(sp)
 4005134:	dc801117 	ldw	r18,68(sp)
 4005138:	dc401017 	ldw	r17,64(sp)
 400513c:	dc000f17 	ldw	r16,60(sp)
 4005140:	dec01304 	addi	sp,sp,76
 4005144:	f800283a 	ret
 4005148:	80c0030b 	ldhu	r3,12(r16)
 400514c:	1880200c 	andi	r2,r3,128
 4005150:	10000426 	beq	r2,zero,4005164 <__smakebuf_r+0xfc>
 4005154:	04801004 	movi	r18,64
 4005158:	18820014 	ori	r2,r3,2048
 400515c:	8080030d 	sth	r2,12(r16)
 4005160:	003fe506 	br	40050f8 <__smakebuf_r+0x90>
 4005164:	04810004 	movi	r18,1024
 4005168:	003ffb06 	br	4005158 <__smakebuf_r+0xf0>
 400516c:	8140038f 	ldh	r5,14(r16)
 4005170:	8809883a 	mov	r4,r17
 4005174:	400783c0 	call	400783c <_isatty_r>
 4005178:	103fde26 	beq	r2,zero,40050f4 <__smakebuf_r+0x8c>
 400517c:	8080030b 	ldhu	r2,12(r16)
 4005180:	80c010c4 	addi	r3,r16,67
 4005184:	04810004 	movi	r18,1024
 4005188:	10800054 	ori	r2,r2,1
 400518c:	8080030d 	sth	r2,12(r16)
 4005190:	00800044 	movi	r2,1
 4005194:	80c00415 	stw	r3,16(r16)
 4005198:	80800515 	stw	r2,20(r16)
 400519c:	80c00015 	stw	r3,0(r16)
 40051a0:	003fd506 	br	40050f8 <__smakebuf_r+0x90>
 40051a4:	80c00a17 	ldw	r3,40(r16)
 40051a8:	00810034 	movhi	r2,1024
 40051ac:	109cc204 	addi	r2,r2,29448
 40051b0:	18bfcb1e 	bne	r3,r2,40050e0 <__smakebuf_r+0x78>
 40051b4:	8080030b 	ldhu	r2,12(r16)
 40051b8:	00c10004 	movi	r3,1024
 40051bc:	1825883a 	mov	r18,r3
 40051c0:	10c4b03a 	or	r2,r2,r3
 40051c4:	8080030d 	sth	r2,12(r16)
 40051c8:	80c01315 	stw	r3,76(r16)
 40051cc:	003fca06 	br	40050f8 <__smakebuf_r+0x90>
 40051d0:	8100030b 	ldhu	r4,12(r16)
 40051d4:	2080800c 	andi	r2,r4,512
 40051d8:	103fb21e 	bne	r2,zero,40050a4 <__smakebuf_r+0x3c>
 40051dc:	80c010c4 	addi	r3,r16,67
 40051e0:	21000094 	ori	r4,r4,2
 40051e4:	00800044 	movi	r2,1
 40051e8:	80800515 	stw	r2,20(r16)
 40051ec:	8100030d 	sth	r4,12(r16)
 40051f0:	80c00415 	stw	r3,16(r16)
 40051f4:	80c00015 	stw	r3,0(r16)
 40051f8:	003faa06 	br	40050a4 <__smakebuf_r+0x3c>

040051fc <_malloc_r>:
 40051fc:	defff604 	addi	sp,sp,-40
 4005200:	28c002c4 	addi	r3,r5,11
 4005204:	00800584 	movi	r2,22
 4005208:	dc800215 	stw	r18,8(sp)
 400520c:	dfc00915 	stw	ra,36(sp)
 4005210:	df000815 	stw	fp,32(sp)
 4005214:	ddc00715 	stw	r23,28(sp)
 4005218:	dd800615 	stw	r22,24(sp)
 400521c:	dd400515 	stw	r21,20(sp)
 4005220:	dd000415 	stw	r20,16(sp)
 4005224:	dcc00315 	stw	r19,12(sp)
 4005228:	dc400115 	stw	r17,4(sp)
 400522c:	dc000015 	stw	r16,0(sp)
 4005230:	2025883a 	mov	r18,r4
 4005234:	10c01236 	bltu	r2,r3,4005280 <_malloc_r+0x84>
 4005238:	04400404 	movi	r17,16
 400523c:	8940142e 	bgeu	r17,r5,4005290 <_malloc_r+0x94>
 4005240:	00800304 	movi	r2,12
 4005244:	0007883a 	mov	r3,zero
 4005248:	90800015 	stw	r2,0(r18)
 400524c:	1805883a 	mov	r2,r3
 4005250:	dfc00917 	ldw	ra,36(sp)
 4005254:	df000817 	ldw	fp,32(sp)
 4005258:	ddc00717 	ldw	r23,28(sp)
 400525c:	dd800617 	ldw	r22,24(sp)
 4005260:	dd400517 	ldw	r21,20(sp)
 4005264:	dd000417 	ldw	r20,16(sp)
 4005268:	dcc00317 	ldw	r19,12(sp)
 400526c:	dc800217 	ldw	r18,8(sp)
 4005270:	dc400117 	ldw	r17,4(sp)
 4005274:	dc000017 	ldw	r16,0(sp)
 4005278:	dec00a04 	addi	sp,sp,40
 400527c:	f800283a 	ret
 4005280:	00bffe04 	movi	r2,-8
 4005284:	18a2703a 	and	r17,r3,r2
 4005288:	883fed16 	blt	r17,zero,4005240 <_malloc_r+0x44>
 400528c:	897fec36 	bltu	r17,r5,4005240 <_malloc_r+0x44>
 4005290:	9009883a 	mov	r4,r18
 4005294:	400a8e40 	call	400a8e4 <__malloc_lock>
 4005298:	00807dc4 	movi	r2,503
 400529c:	14402b2e 	bgeu	r2,r17,400534c <_malloc_r+0x150>
 40052a0:	8806d27a 	srli	r3,r17,9
 40052a4:	18003f1e 	bne	r3,zero,40053a4 <_malloc_r+0x1a8>
 40052a8:	880cd0fa 	srli	r6,r17,3
 40052ac:	300490fa 	slli	r2,r6,3
 40052b0:	02c10074 	movhi	r11,1025
 40052b4:	5adbe304 	addi	r11,r11,28556
 40052b8:	12cb883a 	add	r5,r2,r11
 40052bc:	2c000317 	ldw	r16,12(r5)
 40052c0:	580f883a 	mov	r7,r11
 40052c4:	2c00041e 	bne	r5,r16,40052d8 <_malloc_r+0xdc>
 40052c8:	00000a06 	br	40052f4 <_malloc_r+0xf8>
 40052cc:	1800860e 	bge	r3,zero,40054e8 <_malloc_r+0x2ec>
 40052d0:	84000317 	ldw	r16,12(r16)
 40052d4:	2c000726 	beq	r5,r16,40052f4 <_malloc_r+0xf8>
 40052d8:	80800117 	ldw	r2,4(r16)
 40052dc:	00ffff04 	movi	r3,-4
 40052e0:	10c8703a 	and	r4,r2,r3
 40052e4:	2447c83a 	sub	r3,r4,r17
 40052e8:	008003c4 	movi	r2,15
 40052ec:	10fff70e 	bge	r2,r3,40052cc <_malloc_r+0xd0>
 40052f0:	31bfffc4 	addi	r6,r6,-1
 40052f4:	32400044 	addi	r9,r6,1
 40052f8:	02810074 	movhi	r10,1025
 40052fc:	529be504 	addi	r10,r10,28564
 4005300:	54000217 	ldw	r16,8(r10)
 4005304:	8280a026 	beq	r16,r10,4005588 <_malloc_r+0x38c>
 4005308:	80800117 	ldw	r2,4(r16)
 400530c:	00ffff04 	movi	r3,-4
 4005310:	10ca703a 	and	r5,r2,r3
 4005314:	2c4dc83a 	sub	r6,r5,r17
 4005318:	008003c4 	movi	r2,15
 400531c:	11808316 	blt	r2,r6,400552c <_malloc_r+0x330>
 4005320:	52800315 	stw	r10,12(r10)
 4005324:	52800215 	stw	r10,8(r10)
 4005328:	30002916 	blt	r6,zero,40053d0 <_malloc_r+0x1d4>
 400532c:	8147883a 	add	r3,r16,r5
 4005330:	18800117 	ldw	r2,4(r3)
 4005334:	9009883a 	mov	r4,r18
 4005338:	10800054 	ori	r2,r2,1
 400533c:	18800115 	stw	r2,4(r3)
 4005340:	400a9ec0 	call	400a9ec <__malloc_unlock>
 4005344:	80c00204 	addi	r3,r16,8
 4005348:	003fc006 	br	400524c <_malloc_r+0x50>
 400534c:	02c10074 	movhi	r11,1025
 4005350:	5adbe304 	addi	r11,r11,28556
 4005354:	8ac5883a 	add	r2,r17,r11
 4005358:	14000317 	ldw	r16,12(r2)
 400535c:	580f883a 	mov	r7,r11
 4005360:	8806d0fa 	srli	r3,r17,3
 4005364:	14006c26 	beq	r2,r16,4005518 <_malloc_r+0x31c>
 4005368:	80c00117 	ldw	r3,4(r16)
 400536c:	00bfff04 	movi	r2,-4
 4005370:	81800317 	ldw	r6,12(r16)
 4005374:	1886703a 	and	r3,r3,r2
 4005378:	80c7883a 	add	r3,r16,r3
 400537c:	18800117 	ldw	r2,4(r3)
 4005380:	81400217 	ldw	r5,8(r16)
 4005384:	9009883a 	mov	r4,r18
 4005388:	10800054 	ori	r2,r2,1
 400538c:	18800115 	stw	r2,4(r3)
 4005390:	31400215 	stw	r5,8(r6)
 4005394:	29800315 	stw	r6,12(r5)
 4005398:	400a9ec0 	call	400a9ec <__malloc_unlock>
 400539c:	80c00204 	addi	r3,r16,8
 40053a0:	003faa06 	br	400524c <_malloc_r+0x50>
 40053a4:	00800104 	movi	r2,4
 40053a8:	10c0052e 	bgeu	r2,r3,40053c0 <_malloc_r+0x1c4>
 40053ac:	00800504 	movi	r2,20
 40053b0:	10c07836 	bltu	r2,r3,4005594 <_malloc_r+0x398>
 40053b4:	198016c4 	addi	r6,r3,91
 40053b8:	300490fa 	slli	r2,r6,3
 40053bc:	003fbc06 	br	40052b0 <_malloc_r+0xb4>
 40053c0:	8804d1ba 	srli	r2,r17,6
 40053c4:	11800e04 	addi	r6,r2,56
 40053c8:	300490fa 	slli	r2,r6,3
 40053cc:	003fb806 	br	40052b0 <_malloc_r+0xb4>
 40053d0:	00807fc4 	movi	r2,511
 40053d4:	1140bb36 	bltu	r2,r5,40056c4 <_malloc_r+0x4c8>
 40053d8:	2806d0fa 	srli	r3,r5,3
 40053dc:	573ffe04 	addi	fp,r10,-8
 40053e0:	00800044 	movi	r2,1
 40053e4:	180890fa 	slli	r4,r3,3
 40053e8:	1807d0ba 	srai	r3,r3,2
 40053ec:	e1c00117 	ldw	r7,4(fp)
 40053f0:	5909883a 	add	r4,r11,r4
 40053f4:	21400217 	ldw	r5,8(r4)
 40053f8:	10c4983a 	sll	r2,r2,r3
 40053fc:	81000315 	stw	r4,12(r16)
 4005400:	81400215 	stw	r5,8(r16)
 4005404:	388eb03a 	or	r7,r7,r2
 4005408:	2c000315 	stw	r16,12(r5)
 400540c:	24000215 	stw	r16,8(r4)
 4005410:	e1c00115 	stw	r7,4(fp)
 4005414:	4807883a 	mov	r3,r9
 4005418:	4800cd16 	blt	r9,zero,4005750 <_malloc_r+0x554>
 400541c:	1807d0ba 	srai	r3,r3,2
 4005420:	00800044 	movi	r2,1
 4005424:	10c8983a 	sll	r4,r2,r3
 4005428:	39004436 	bltu	r7,r4,400553c <_malloc_r+0x340>
 400542c:	21c4703a 	and	r2,r4,r7
 4005430:	10000a1e 	bne	r2,zero,400545c <_malloc_r+0x260>
 4005434:	2109883a 	add	r4,r4,r4
 4005438:	00bfff04 	movi	r2,-4
 400543c:	4884703a 	and	r2,r9,r2
 4005440:	3906703a 	and	r3,r7,r4
 4005444:	12400104 	addi	r9,r2,4
 4005448:	1800041e 	bne	r3,zero,400545c <_malloc_r+0x260>
 400544c:	2109883a 	add	r4,r4,r4
 4005450:	3904703a 	and	r2,r7,r4
 4005454:	4a400104 	addi	r9,r9,4
 4005458:	103ffc26 	beq	r2,zero,400544c <_malloc_r+0x250>
 400545c:	480490fa 	slli	r2,r9,3
 4005460:	4819883a 	mov	r12,r9
 4005464:	023fff04 	movi	r8,-4
 4005468:	589b883a 	add	r13,r11,r2
 400546c:	6807883a 	mov	r3,r13
 4005470:	014003c4 	movi	r5,15
 4005474:	1c000317 	ldw	r16,12(r3)
 4005478:	1c00041e 	bne	r3,r16,400548c <_malloc_r+0x290>
 400547c:	0000a706 	br	400571c <_malloc_r+0x520>
 4005480:	3000ab0e 	bge	r6,zero,4005730 <_malloc_r+0x534>
 4005484:	84000317 	ldw	r16,12(r16)
 4005488:	1c00a426 	beq	r3,r16,400571c <_malloc_r+0x520>
 400548c:	80800117 	ldw	r2,4(r16)
 4005490:	1204703a 	and	r2,r2,r8
 4005494:	144dc83a 	sub	r6,r2,r17
 4005498:	29bff90e 	bge	r5,r6,4005480 <_malloc_r+0x284>
 400549c:	81000317 	ldw	r4,12(r16)
 40054a0:	80c00217 	ldw	r3,8(r16)
 40054a4:	89400054 	ori	r5,r17,1
 40054a8:	8445883a 	add	r2,r16,r17
 40054ac:	20c00215 	stw	r3,8(r4)
 40054b0:	19000315 	stw	r4,12(r3)
 40054b4:	81400115 	stw	r5,4(r16)
 40054b8:	1187883a 	add	r3,r2,r6
 40054bc:	31000054 	ori	r4,r6,1
 40054c0:	50800315 	stw	r2,12(r10)
 40054c4:	50800215 	stw	r2,8(r10)
 40054c8:	19800015 	stw	r6,0(r3)
 40054cc:	11000115 	stw	r4,4(r2)
 40054d0:	12800215 	stw	r10,8(r2)
 40054d4:	12800315 	stw	r10,12(r2)
 40054d8:	9009883a 	mov	r4,r18
 40054dc:	400a9ec0 	call	400a9ec <__malloc_unlock>
 40054e0:	80c00204 	addi	r3,r16,8
 40054e4:	003f5906 	br	400524c <_malloc_r+0x50>
 40054e8:	8109883a 	add	r4,r16,r4
 40054ec:	20800117 	ldw	r2,4(r4)
 40054f0:	80c00217 	ldw	r3,8(r16)
 40054f4:	81400317 	ldw	r5,12(r16)
 40054f8:	10800054 	ori	r2,r2,1
 40054fc:	20800115 	stw	r2,4(r4)
 4005500:	28c00215 	stw	r3,8(r5)
 4005504:	19400315 	stw	r5,12(r3)
 4005508:	9009883a 	mov	r4,r18
 400550c:	400a9ec0 	call	400a9ec <__malloc_unlock>
 4005510:	80c00204 	addi	r3,r16,8
 4005514:	003f4d06 	br	400524c <_malloc_r+0x50>
 4005518:	80800204 	addi	r2,r16,8
 400551c:	14000317 	ldw	r16,12(r2)
 4005520:	143f911e 	bne	r2,r16,4005368 <_malloc_r+0x16c>
 4005524:	1a400084 	addi	r9,r3,2
 4005528:	003f7306 	br	40052f8 <_malloc_r+0xfc>
 400552c:	88c00054 	ori	r3,r17,1
 4005530:	8445883a 	add	r2,r16,r17
 4005534:	80c00115 	stw	r3,4(r16)
 4005538:	003fdf06 	br	40054b8 <_malloc_r+0x2bc>
 400553c:	e4000217 	ldw	r16,8(fp)
 4005540:	00bfff04 	movi	r2,-4
 4005544:	80c00117 	ldw	r3,4(r16)
 4005548:	802d883a 	mov	r22,r16
 400554c:	18aa703a 	and	r21,r3,r2
 4005550:	ac401636 	bltu	r21,r17,40055ac <_malloc_r+0x3b0>
 4005554:	ac49c83a 	sub	r4,r21,r17
 4005558:	008003c4 	movi	r2,15
 400555c:	1100130e 	bge	r2,r4,40055ac <_malloc_r+0x3b0>
 4005560:	88800054 	ori	r2,r17,1
 4005564:	8447883a 	add	r3,r16,r17
 4005568:	80800115 	stw	r2,4(r16)
 400556c:	20800054 	ori	r2,r4,1
 4005570:	18800115 	stw	r2,4(r3)
 4005574:	e0c00215 	stw	r3,8(fp)
 4005578:	9009883a 	mov	r4,r18
 400557c:	400a9ec0 	call	400a9ec <__malloc_unlock>
 4005580:	80c00204 	addi	r3,r16,8
 4005584:	003f3106 	br	400524c <_malloc_r+0x50>
 4005588:	39c00117 	ldw	r7,4(r7)
 400558c:	573ffe04 	addi	fp,r10,-8
 4005590:	003fa006 	br	4005414 <_malloc_r+0x218>
 4005594:	00801504 	movi	r2,84
 4005598:	10c06736 	bltu	r2,r3,4005738 <_malloc_r+0x53c>
 400559c:	8804d33a 	srli	r2,r17,12
 40055a0:	11801b84 	addi	r6,r2,110
 40055a4:	300490fa 	slli	r2,r6,3
 40055a8:	003f4106 	br	40052b0 <_malloc_r+0xb4>
 40055ac:	d0a03717 	ldw	r2,-32548(gp)
 40055b0:	d0e00517 	ldw	r3,-32748(gp)
 40055b4:	053fffc4 	movi	r20,-1
 40055b8:	10800404 	addi	r2,r2,16
 40055bc:	88a7883a 	add	r19,r17,r2
 40055c0:	1d000326 	beq	r3,r20,40055d0 <_malloc_r+0x3d4>
 40055c4:	98c3ffc4 	addi	r3,r19,4095
 40055c8:	00bc0004 	movi	r2,-4096
 40055cc:	18a6703a 	and	r19,r3,r2
 40055d0:	9009883a 	mov	r4,r18
 40055d4:	980b883a 	mov	r5,r19
 40055d8:	40072900 	call	4007290 <_sbrk_r>
 40055dc:	1009883a 	mov	r4,r2
 40055e0:	15000426 	beq	r2,r20,40055f4 <_malloc_r+0x3f8>
 40055e4:	854b883a 	add	r5,r16,r21
 40055e8:	1029883a 	mov	r20,r2
 40055ec:	11405a2e 	bgeu	r2,r5,4005758 <_malloc_r+0x55c>
 40055f0:	87000c26 	beq	r16,fp,4005624 <_malloc_r+0x428>
 40055f4:	e4000217 	ldw	r16,8(fp)
 40055f8:	80c00117 	ldw	r3,4(r16)
 40055fc:	00bfff04 	movi	r2,-4
 4005600:	1884703a 	and	r2,r3,r2
 4005604:	14400336 	bltu	r2,r17,4005614 <_malloc_r+0x418>
 4005608:	1449c83a 	sub	r4,r2,r17
 400560c:	008003c4 	movi	r2,15
 4005610:	113fd316 	blt	r2,r4,4005560 <_malloc_r+0x364>
 4005614:	9009883a 	mov	r4,r18
 4005618:	400a9ec0 	call	400a9ec <__malloc_unlock>
 400561c:	0007883a 	mov	r3,zero
 4005620:	003f0a06 	br	400524c <_malloc_r+0x50>
 4005624:	05c100b4 	movhi	r23,1026
 4005628:	bde1f504 	addi	r23,r23,-30764
 400562c:	b8800017 	ldw	r2,0(r23)
 4005630:	988d883a 	add	r6,r19,r2
 4005634:	b9800015 	stw	r6,0(r23)
 4005638:	d0e00517 	ldw	r3,-32748(gp)
 400563c:	00bfffc4 	movi	r2,-1
 4005640:	18808e26 	beq	r3,r2,400587c <_malloc_r+0x680>
 4005644:	2145c83a 	sub	r2,r4,r5
 4005648:	3085883a 	add	r2,r6,r2
 400564c:	b8800015 	stw	r2,0(r23)
 4005650:	20c001cc 	andi	r3,r4,7
 4005654:	18005f1e 	bne	r3,zero,40057d4 <_malloc_r+0x5d8>
 4005658:	000b883a 	mov	r5,zero
 400565c:	a4c5883a 	add	r2,r20,r19
 4005660:	1083ffcc 	andi	r2,r2,4095
 4005664:	00c40004 	movi	r3,4096
 4005668:	1887c83a 	sub	r3,r3,r2
 400566c:	28e7883a 	add	r19,r5,r3
 4005670:	9009883a 	mov	r4,r18
 4005674:	980b883a 	mov	r5,r19
 4005678:	40072900 	call	4007290 <_sbrk_r>
 400567c:	1007883a 	mov	r3,r2
 4005680:	00bfffc4 	movi	r2,-1
 4005684:	18807a26 	beq	r3,r2,4005870 <_malloc_r+0x674>
 4005688:	1d05c83a 	sub	r2,r3,r20
 400568c:	9885883a 	add	r2,r19,r2
 4005690:	10c00054 	ori	r3,r2,1
 4005694:	b8800017 	ldw	r2,0(r23)
 4005698:	a021883a 	mov	r16,r20
 400569c:	a0c00115 	stw	r3,4(r20)
 40056a0:	9885883a 	add	r2,r19,r2
 40056a4:	b8800015 	stw	r2,0(r23)
 40056a8:	e5000215 	stw	r20,8(fp)
 40056ac:	b7003626 	beq	r22,fp,4005788 <_malloc_r+0x58c>
 40056b0:	018003c4 	movi	r6,15
 40056b4:	35404b36 	bltu	r6,r21,40057e4 <_malloc_r+0x5e8>
 40056b8:	00800044 	movi	r2,1
 40056bc:	a0800115 	stw	r2,4(r20)
 40056c0:	003fcd06 	br	40055f8 <_malloc_r+0x3fc>
 40056c4:	2808d27a 	srli	r4,r5,9
 40056c8:	2000371e 	bne	r4,zero,40057a8 <_malloc_r+0x5ac>
 40056cc:	2808d0fa 	srli	r4,r5,3
 40056d0:	200690fa 	slli	r3,r4,3
 40056d4:	1ad1883a 	add	r8,r3,r11
 40056d8:	41800217 	ldw	r6,8(r8)
 40056dc:	41805b26 	beq	r8,r6,400584c <_malloc_r+0x650>
 40056e0:	30800117 	ldw	r2,4(r6)
 40056e4:	00ffff04 	movi	r3,-4
 40056e8:	10c4703a 	and	r2,r2,r3
 40056ec:	2880022e 	bgeu	r5,r2,40056f8 <_malloc_r+0x4fc>
 40056f0:	31800217 	ldw	r6,8(r6)
 40056f4:	41bffa1e 	bne	r8,r6,40056e0 <_malloc_r+0x4e4>
 40056f8:	32000317 	ldw	r8,12(r6)
 40056fc:	39c00117 	ldw	r7,4(r7)
 4005700:	82000315 	stw	r8,12(r16)
 4005704:	81800215 	stw	r6,8(r16)
 4005708:	07010074 	movhi	fp,1025
 400570c:	e71be304 	addi	fp,fp,28556
 4005710:	34000315 	stw	r16,12(r6)
 4005714:	44000215 	stw	r16,8(r8)
 4005718:	003f3e06 	br	4005414 <_malloc_r+0x218>
 400571c:	63000044 	addi	r12,r12,1
 4005720:	608000cc 	andi	r2,r12,3
 4005724:	10005d26 	beq	r2,zero,400589c <_malloc_r+0x6a0>
 4005728:	18c00204 	addi	r3,r3,8
 400572c:	003f5106 	br	4005474 <_malloc_r+0x278>
 4005730:	8089883a 	add	r4,r16,r2
 4005734:	003f6d06 	br	40054ec <_malloc_r+0x2f0>
 4005738:	00805504 	movi	r2,340
 400573c:	10c02036 	bltu	r2,r3,40057c0 <_malloc_r+0x5c4>
 4005740:	8804d3fa 	srli	r2,r17,15
 4005744:	11801dc4 	addi	r6,r2,119
 4005748:	300490fa 	slli	r2,r6,3
 400574c:	003ed806 	br	40052b0 <_malloc_r+0xb4>
 4005750:	48c000c4 	addi	r3,r9,3
 4005754:	003f3106 	br	400541c <_malloc_r+0x220>
 4005758:	05c100b4 	movhi	r23,1026
 400575c:	bde1f504 	addi	r23,r23,-30764
 4005760:	b8800017 	ldw	r2,0(r23)
 4005764:	988d883a 	add	r6,r19,r2
 4005768:	b9800015 	stw	r6,0(r23)
 400576c:	293fb21e 	bne	r5,r4,4005638 <_malloc_r+0x43c>
 4005770:	2083ffcc 	andi	r2,r4,4095
 4005774:	103fb01e 	bne	r2,zero,4005638 <_malloc_r+0x43c>
 4005778:	e4000217 	ldw	r16,8(fp)
 400577c:	9d45883a 	add	r2,r19,r21
 4005780:	10800054 	ori	r2,r2,1
 4005784:	80800115 	stw	r2,4(r16)
 4005788:	b8c00017 	ldw	r3,0(r23)
 400578c:	d0a03817 	ldw	r2,-32544(gp)
 4005790:	10c0012e 	bgeu	r2,r3,4005798 <_malloc_r+0x59c>
 4005794:	d0e03815 	stw	r3,-32544(gp)
 4005798:	d0a03917 	ldw	r2,-32540(gp)
 400579c:	10ff962e 	bgeu	r2,r3,40055f8 <_malloc_r+0x3fc>
 40057a0:	d0e03915 	stw	r3,-32540(gp)
 40057a4:	003f9406 	br	40055f8 <_malloc_r+0x3fc>
 40057a8:	00800104 	movi	r2,4
 40057ac:	11001e36 	bltu	r2,r4,4005828 <_malloc_r+0x62c>
 40057b0:	2804d1ba 	srli	r2,r5,6
 40057b4:	11000e04 	addi	r4,r2,56
 40057b8:	200690fa 	slli	r3,r4,3
 40057bc:	003fc506 	br	40056d4 <_malloc_r+0x4d8>
 40057c0:	00815504 	movi	r2,1364
 40057c4:	10c01d2e 	bgeu	r2,r3,400583c <_malloc_r+0x640>
 40057c8:	01801f84 	movi	r6,126
 40057cc:	0080fc04 	movi	r2,1008
 40057d0:	003eb706 	br	40052b0 <_malloc_r+0xb4>
 40057d4:	00800204 	movi	r2,8
 40057d8:	10cbc83a 	sub	r5,r2,r3
 40057dc:	2169883a 	add	r20,r4,r5
 40057e0:	003f9e06 	br	400565c <_malloc_r+0x460>
 40057e4:	00bffe04 	movi	r2,-8
 40057e8:	a93ffd04 	addi	r4,r21,-12
 40057ec:	2088703a 	and	r4,r4,r2
 40057f0:	b10b883a 	add	r5,r22,r4
 40057f4:	00c00144 	movi	r3,5
 40057f8:	28c00215 	stw	r3,8(r5)
 40057fc:	28c00115 	stw	r3,4(r5)
 4005800:	b0800117 	ldw	r2,4(r22)
 4005804:	1080004c 	andi	r2,r2,1
 4005808:	2084b03a 	or	r2,r4,r2
 400580c:	b0800115 	stw	r2,4(r22)
 4005810:	313fdd2e 	bgeu	r6,r4,4005788 <_malloc_r+0x58c>
 4005814:	b1400204 	addi	r5,r22,8
 4005818:	9009883a 	mov	r4,r18
 400581c:	40046740 	call	4004674 <_free_r>
 4005820:	e4000217 	ldw	r16,8(fp)
 4005824:	003fd806 	br	4005788 <_malloc_r+0x58c>
 4005828:	00800504 	movi	r2,20
 400582c:	11001536 	bltu	r2,r4,4005884 <_malloc_r+0x688>
 4005830:	210016c4 	addi	r4,r4,91
 4005834:	200690fa 	slli	r3,r4,3
 4005838:	003fa606 	br	40056d4 <_malloc_r+0x4d8>
 400583c:	8804d4ba 	srli	r2,r17,18
 4005840:	11801f04 	addi	r6,r2,124
 4005844:	300490fa 	slli	r2,r6,3
 4005848:	003e9906 	br	40052b0 <_malloc_r+0xb4>
 400584c:	2009d0ba 	srai	r4,r4,2
 4005850:	01410074 	movhi	r5,1025
 4005854:	295be304 	addi	r5,r5,28556
 4005858:	00c00044 	movi	r3,1
 400585c:	28800117 	ldw	r2,4(r5)
 4005860:	1906983a 	sll	r3,r3,r4
 4005864:	10c4b03a 	or	r2,r2,r3
 4005868:	28800115 	stw	r2,4(r5)
 400586c:	003fa306 	br	40056fc <_malloc_r+0x500>
 4005870:	0027883a 	mov	r19,zero
 4005874:	00c00044 	movi	r3,1
 4005878:	003f8606 	br	4005694 <_malloc_r+0x498>
 400587c:	d1200515 	stw	r4,-32748(gp)
 4005880:	003f7306 	br	4005650 <_malloc_r+0x454>
 4005884:	00801504 	movi	r2,84
 4005888:	11001936 	bltu	r2,r4,40058f0 <_malloc_r+0x6f4>
 400588c:	2804d33a 	srli	r2,r5,12
 4005890:	11001b84 	addi	r4,r2,110
 4005894:	200690fa 	slli	r3,r4,3
 4005898:	003f8e06 	br	40056d4 <_malloc_r+0x4d8>
 400589c:	480b883a 	mov	r5,r9
 40058a0:	6807883a 	mov	r3,r13
 40058a4:	288000cc 	andi	r2,r5,3
 40058a8:	18fffe04 	addi	r3,r3,-8
 40058ac:	297fffc4 	addi	r5,r5,-1
 40058b0:	10001526 	beq	r2,zero,4005908 <_malloc_r+0x70c>
 40058b4:	18800217 	ldw	r2,8(r3)
 40058b8:	10fffa26 	beq	r2,r3,40058a4 <_malloc_r+0x6a8>
 40058bc:	2109883a 	add	r4,r4,r4
 40058c0:	393f1e36 	bltu	r7,r4,400553c <_malloc_r+0x340>
 40058c4:	203f1d26 	beq	r4,zero,400553c <_malloc_r+0x340>
 40058c8:	21c4703a 	and	r2,r4,r7
 40058cc:	10000226 	beq	r2,zero,40058d8 <_malloc_r+0x6dc>
 40058d0:	6013883a 	mov	r9,r12
 40058d4:	003ee106 	br	400545c <_malloc_r+0x260>
 40058d8:	2109883a 	add	r4,r4,r4
 40058dc:	3904703a 	and	r2,r7,r4
 40058e0:	63000104 	addi	r12,r12,4
 40058e4:	103ffc26 	beq	r2,zero,40058d8 <_malloc_r+0x6dc>
 40058e8:	6013883a 	mov	r9,r12
 40058ec:	003edb06 	br	400545c <_malloc_r+0x260>
 40058f0:	00805504 	movi	r2,340
 40058f4:	11000836 	bltu	r2,r4,4005918 <_malloc_r+0x71c>
 40058f8:	2804d3fa 	srli	r2,r5,15
 40058fc:	11001dc4 	addi	r4,r2,119
 4005900:	200690fa 	slli	r3,r4,3
 4005904:	003f7306 	br	40056d4 <_malloc_r+0x4d8>
 4005908:	0104303a 	nor	r2,zero,r4
 400590c:	388e703a 	and	r7,r7,r2
 4005910:	e1c00115 	stw	r7,4(fp)
 4005914:	003fe906 	br	40058bc <_malloc_r+0x6c0>
 4005918:	00815504 	movi	r2,1364
 400591c:	1100032e 	bgeu	r2,r4,400592c <_malloc_r+0x730>
 4005920:	01001f84 	movi	r4,126
 4005924:	00c0fc04 	movi	r3,1008
 4005928:	003f6a06 	br	40056d4 <_malloc_r+0x4d8>
 400592c:	2804d4ba 	srli	r2,r5,18
 4005930:	11001f04 	addi	r4,r2,124
 4005934:	200690fa 	slli	r3,r4,3
 4005938:	003f6606 	br	40056d4 <_malloc_r+0x4d8>

0400593c <memchr>:
 400593c:	008000c4 	movi	r2,3
 4005940:	29403fcc 	andi	r5,r5,255
 4005944:	2007883a 	mov	r3,r4
 4005948:	1180022e 	bgeu	r2,r6,4005954 <memchr+0x18>
 400594c:	2084703a 	and	r2,r4,r2
 4005950:	10000b26 	beq	r2,zero,4005980 <memchr+0x44>
 4005954:	313fffc4 	addi	r4,r6,-1
 4005958:	3000051e 	bne	r6,zero,4005970 <memchr+0x34>
 400595c:	00002c06 	br	4005a10 <memchr+0xd4>
 4005960:	213fffc4 	addi	r4,r4,-1
 4005964:	00bfffc4 	movi	r2,-1
 4005968:	18c00044 	addi	r3,r3,1
 400596c:	20802826 	beq	r4,r2,4005a10 <memchr+0xd4>
 4005970:	18800003 	ldbu	r2,0(r3)
 4005974:	28bffa1e 	bne	r5,r2,4005960 <memchr+0x24>
 4005978:	1805883a 	mov	r2,r3
 400597c:	f800283a 	ret
 4005980:	0011883a 	mov	r8,zero
 4005984:	0007883a 	mov	r3,zero
 4005988:	01c00104 	movi	r7,4
 400598c:	4004923a 	slli	r2,r8,8
 4005990:	18c00044 	addi	r3,r3,1
 4005994:	1151883a 	add	r8,r2,r5
 4005998:	19fffc1e 	bne	r3,r7,400598c <memchr+0x50>
 400599c:	02bfbff4 	movhi	r10,65279
 40059a0:	52bfbfc4 	addi	r10,r10,-257
 40059a4:	02602074 	movhi	r9,32897
 40059a8:	4a602004 	addi	r9,r9,-32640
 40059ac:	02c000c4 	movi	r11,3
 40059b0:	20800017 	ldw	r2,0(r4)
 40059b4:	31bfff04 	addi	r6,r6,-4
 40059b8:	200f883a 	mov	r7,r4
 40059bc:	1204f03a 	xor	r2,r2,r8
 40059c0:	1287883a 	add	r3,r2,r10
 40059c4:	1a46703a 	and	r3,r3,r9
 40059c8:	0084303a 	nor	r2,zero,r2
 40059cc:	10c4703a 	and	r2,r2,r3
 40059d0:	10000b26 	beq	r2,zero,4005a00 <memchr+0xc4>
 40059d4:	20800003 	ldbu	r2,0(r4)
 40059d8:	28800f26 	beq	r5,r2,4005a18 <memchr+0xdc>
 40059dc:	20800043 	ldbu	r2,1(r4)
 40059e0:	21c00044 	addi	r7,r4,1
 40059e4:	28800c26 	beq	r5,r2,4005a18 <memchr+0xdc>
 40059e8:	20800083 	ldbu	r2,2(r4)
 40059ec:	21c00084 	addi	r7,r4,2
 40059f0:	28800926 	beq	r5,r2,4005a18 <memchr+0xdc>
 40059f4:	208000c3 	ldbu	r2,3(r4)
 40059f8:	21c000c4 	addi	r7,r4,3
 40059fc:	28800626 	beq	r5,r2,4005a18 <memchr+0xdc>
 4005a00:	21000104 	addi	r4,r4,4
 4005a04:	59bfea36 	bltu	r11,r6,40059b0 <memchr+0x74>
 4005a08:	2007883a 	mov	r3,r4
 4005a0c:	003fd106 	br	4005954 <memchr+0x18>
 4005a10:	0005883a 	mov	r2,zero
 4005a14:	f800283a 	ret
 4005a18:	3805883a 	mov	r2,r7
 4005a1c:	f800283a 	ret

04005a20 <memcpy>:
 4005a20:	01c003c4 	movi	r7,15
 4005a24:	2007883a 	mov	r3,r4
 4005a28:	3980032e 	bgeu	r7,r6,4005a38 <memcpy+0x18>
 4005a2c:	2904b03a 	or	r2,r5,r4
 4005a30:	108000cc 	andi	r2,r2,3
 4005a34:	10000926 	beq	r2,zero,4005a5c <memcpy+0x3c>
 4005a38:	30000626 	beq	r6,zero,4005a54 <memcpy+0x34>
 4005a3c:	30cd883a 	add	r6,r6,r3
 4005a40:	28800003 	ldbu	r2,0(r5)
 4005a44:	29400044 	addi	r5,r5,1
 4005a48:	18800005 	stb	r2,0(r3)
 4005a4c:	18c00044 	addi	r3,r3,1
 4005a50:	30fffb1e 	bne	r6,r3,4005a40 <memcpy+0x20>
 4005a54:	2005883a 	mov	r2,r4
 4005a58:	f800283a 	ret
 4005a5c:	3811883a 	mov	r8,r7
 4005a60:	200f883a 	mov	r7,r4
 4005a64:	28c00017 	ldw	r3,0(r5)
 4005a68:	31bffc04 	addi	r6,r6,-16
 4005a6c:	38c00015 	stw	r3,0(r7)
 4005a70:	28800117 	ldw	r2,4(r5)
 4005a74:	38800115 	stw	r2,4(r7)
 4005a78:	28c00217 	ldw	r3,8(r5)
 4005a7c:	38c00215 	stw	r3,8(r7)
 4005a80:	28800317 	ldw	r2,12(r5)
 4005a84:	29400404 	addi	r5,r5,16
 4005a88:	38800315 	stw	r2,12(r7)
 4005a8c:	39c00404 	addi	r7,r7,16
 4005a90:	41bff436 	bltu	r8,r6,4005a64 <memcpy+0x44>
 4005a94:	008000c4 	movi	r2,3
 4005a98:	1180072e 	bgeu	r2,r6,4005ab8 <memcpy+0x98>
 4005a9c:	1007883a 	mov	r3,r2
 4005aa0:	28800017 	ldw	r2,0(r5)
 4005aa4:	31bfff04 	addi	r6,r6,-4
 4005aa8:	29400104 	addi	r5,r5,4
 4005aac:	38800015 	stw	r2,0(r7)
 4005ab0:	39c00104 	addi	r7,r7,4
 4005ab4:	19bffa36 	bltu	r3,r6,4005aa0 <memcpy+0x80>
 4005ab8:	3807883a 	mov	r3,r7
 4005abc:	003fde06 	br	4005a38 <memcpy+0x18>

04005ac0 <memmove>:
 4005ac0:	2807883a 	mov	r3,r5
 4005ac4:	2011883a 	mov	r8,r4
 4005ac8:	29000c2e 	bgeu	r5,r4,4005afc <memmove+0x3c>
 4005acc:	298f883a 	add	r7,r5,r6
 4005ad0:	21c00a2e 	bgeu	r4,r7,4005afc <memmove+0x3c>
 4005ad4:	30000726 	beq	r6,zero,4005af4 <memmove+0x34>
 4005ad8:	2187883a 	add	r3,r4,r6
 4005adc:	198dc83a 	sub	r6,r3,r6
 4005ae0:	39ffffc4 	addi	r7,r7,-1
 4005ae4:	38800003 	ldbu	r2,0(r7)
 4005ae8:	18ffffc4 	addi	r3,r3,-1
 4005aec:	18800005 	stb	r2,0(r3)
 4005af0:	19bffb1e 	bne	r3,r6,4005ae0 <memmove+0x20>
 4005af4:	2005883a 	mov	r2,r4
 4005af8:	f800283a 	ret
 4005afc:	01c003c4 	movi	r7,15
 4005b00:	39800a36 	bltu	r7,r6,4005b2c <memmove+0x6c>
 4005b04:	303ffb26 	beq	r6,zero,4005af4 <memmove+0x34>
 4005b08:	400f883a 	mov	r7,r8
 4005b0c:	320d883a 	add	r6,r6,r8
 4005b10:	28800003 	ldbu	r2,0(r5)
 4005b14:	29400044 	addi	r5,r5,1
 4005b18:	38800005 	stb	r2,0(r7)
 4005b1c:	39c00044 	addi	r7,r7,1
 4005b20:	39bffb1e 	bne	r7,r6,4005b10 <memmove+0x50>
 4005b24:	2005883a 	mov	r2,r4
 4005b28:	f800283a 	ret
 4005b2c:	1904b03a 	or	r2,r3,r4
 4005b30:	108000cc 	andi	r2,r2,3
 4005b34:	103ff31e 	bne	r2,zero,4005b04 <memmove+0x44>
 4005b38:	3811883a 	mov	r8,r7
 4005b3c:	180b883a 	mov	r5,r3
 4005b40:	200f883a 	mov	r7,r4
 4005b44:	28c00017 	ldw	r3,0(r5)
 4005b48:	31bffc04 	addi	r6,r6,-16
 4005b4c:	38c00015 	stw	r3,0(r7)
 4005b50:	28800117 	ldw	r2,4(r5)
 4005b54:	38800115 	stw	r2,4(r7)
 4005b58:	28c00217 	ldw	r3,8(r5)
 4005b5c:	38c00215 	stw	r3,8(r7)
 4005b60:	28800317 	ldw	r2,12(r5)
 4005b64:	29400404 	addi	r5,r5,16
 4005b68:	38800315 	stw	r2,12(r7)
 4005b6c:	39c00404 	addi	r7,r7,16
 4005b70:	41bff436 	bltu	r8,r6,4005b44 <memmove+0x84>
 4005b74:	008000c4 	movi	r2,3
 4005b78:	1180072e 	bgeu	r2,r6,4005b98 <memmove+0xd8>
 4005b7c:	1007883a 	mov	r3,r2
 4005b80:	28800017 	ldw	r2,0(r5)
 4005b84:	31bfff04 	addi	r6,r6,-4
 4005b88:	29400104 	addi	r5,r5,4
 4005b8c:	38800015 	stw	r2,0(r7)
 4005b90:	39c00104 	addi	r7,r7,4
 4005b94:	19bffa36 	bltu	r3,r6,4005b80 <memmove+0xc0>
 4005b98:	3811883a 	mov	r8,r7
 4005b9c:	003fd906 	br	4005b04 <memmove+0x44>

04005ba0 <memset>:
 4005ba0:	008000c4 	movi	r2,3
 4005ba4:	29403fcc 	andi	r5,r5,255
 4005ba8:	2007883a 	mov	r3,r4
 4005bac:	1180022e 	bgeu	r2,r6,4005bb8 <memset+0x18>
 4005bb0:	2084703a 	and	r2,r4,r2
 4005bb4:	10000826 	beq	r2,zero,4005bd8 <memset+0x38>
 4005bb8:	30000526 	beq	r6,zero,4005bd0 <memset+0x30>
 4005bbc:	2805883a 	mov	r2,r5
 4005bc0:	30cd883a 	add	r6,r6,r3
 4005bc4:	18800005 	stb	r2,0(r3)
 4005bc8:	18c00044 	addi	r3,r3,1
 4005bcc:	19bffd1e 	bne	r3,r6,4005bc4 <memset+0x24>
 4005bd0:	2005883a 	mov	r2,r4
 4005bd4:	f800283a 	ret
 4005bd8:	2804923a 	slli	r2,r5,8
 4005bdc:	020003c4 	movi	r8,15
 4005be0:	200f883a 	mov	r7,r4
 4005be4:	2884b03a 	or	r2,r5,r2
 4005be8:	1006943a 	slli	r3,r2,16
 4005bec:	10c6b03a 	or	r3,r2,r3
 4005bf0:	41800a2e 	bgeu	r8,r6,4005c1c <memset+0x7c>
 4005bf4:	4005883a 	mov	r2,r8
 4005bf8:	31bffc04 	addi	r6,r6,-16
 4005bfc:	38c00015 	stw	r3,0(r7)
 4005c00:	38c00115 	stw	r3,4(r7)
 4005c04:	38c00215 	stw	r3,8(r7)
 4005c08:	38c00315 	stw	r3,12(r7)
 4005c0c:	39c00404 	addi	r7,r7,16
 4005c10:	11bff936 	bltu	r2,r6,4005bf8 <memset+0x58>
 4005c14:	008000c4 	movi	r2,3
 4005c18:	1180052e 	bgeu	r2,r6,4005c30 <memset+0x90>
 4005c1c:	31bfff04 	addi	r6,r6,-4
 4005c20:	008000c4 	movi	r2,3
 4005c24:	38c00015 	stw	r3,0(r7)
 4005c28:	39c00104 	addi	r7,r7,4
 4005c2c:	11bffb36 	bltu	r2,r6,4005c1c <memset+0x7c>
 4005c30:	3807883a 	mov	r3,r7
 4005c34:	003fe006 	br	4005bb8 <memset+0x18>

04005c38 <_Bfree>:
 4005c38:	28000826 	beq	r5,zero,4005c5c <_Bfree+0x24>
 4005c3c:	28800117 	ldw	r2,4(r5)
 4005c40:	21001317 	ldw	r4,76(r4)
 4005c44:	1085883a 	add	r2,r2,r2
 4005c48:	1085883a 	add	r2,r2,r2
 4005c4c:	1105883a 	add	r2,r2,r4
 4005c50:	10c00017 	ldw	r3,0(r2)
 4005c54:	28c00015 	stw	r3,0(r5)
 4005c58:	11400015 	stw	r5,0(r2)
 4005c5c:	f800283a 	ret

04005c60 <__hi0bits>:
 4005c60:	20bfffec 	andhi	r2,r4,65535
 4005c64:	10001426 	beq	r2,zero,4005cb8 <__hi0bits+0x58>
 4005c68:	0007883a 	mov	r3,zero
 4005c6c:	20bfc02c 	andhi	r2,r4,65280
 4005c70:	1000021e 	bne	r2,zero,4005c7c <__hi0bits+0x1c>
 4005c74:	2008923a 	slli	r4,r4,8
 4005c78:	18c00204 	addi	r3,r3,8
 4005c7c:	20bc002c 	andhi	r2,r4,61440
 4005c80:	1000021e 	bne	r2,zero,4005c8c <__hi0bits+0x2c>
 4005c84:	2008913a 	slli	r4,r4,4
 4005c88:	18c00104 	addi	r3,r3,4
 4005c8c:	20b0002c 	andhi	r2,r4,49152
 4005c90:	1000031e 	bne	r2,zero,4005ca0 <__hi0bits+0x40>
 4005c94:	2105883a 	add	r2,r4,r4
 4005c98:	18c00084 	addi	r3,r3,2
 4005c9c:	1089883a 	add	r4,r2,r2
 4005ca0:	20000316 	blt	r4,zero,4005cb0 <__hi0bits+0x50>
 4005ca4:	2090002c 	andhi	r2,r4,16384
 4005ca8:	10000626 	beq	r2,zero,4005cc4 <__hi0bits+0x64>
 4005cac:	18c00044 	addi	r3,r3,1
 4005cb0:	1805883a 	mov	r2,r3
 4005cb4:	f800283a 	ret
 4005cb8:	2008943a 	slli	r4,r4,16
 4005cbc:	00c00404 	movi	r3,16
 4005cc0:	003fea06 	br	4005c6c <__hi0bits+0xc>
 4005cc4:	00c00804 	movi	r3,32
 4005cc8:	1805883a 	mov	r2,r3
 4005ccc:	f800283a 	ret

04005cd0 <__lo0bits>:
 4005cd0:	20c00017 	ldw	r3,0(r4)
 4005cd4:	188001cc 	andi	r2,r3,7
 4005cd8:	10000a26 	beq	r2,zero,4005d04 <__lo0bits+0x34>
 4005cdc:	1880004c 	andi	r2,r3,1
 4005ce0:	1005003a 	cmpeq	r2,r2,zero
 4005ce4:	10002126 	beq	r2,zero,4005d6c <__lo0bits+0x9c>
 4005ce8:	1880008c 	andi	r2,r3,2
 4005cec:	1000251e 	bne	r2,zero,4005d84 <__lo0bits+0xb4>
 4005cf0:	1804d0ba 	srli	r2,r3,2
 4005cf4:	01400084 	movi	r5,2
 4005cf8:	20800015 	stw	r2,0(r4)
 4005cfc:	2805883a 	mov	r2,r5
 4005d00:	f800283a 	ret
 4005d04:	18bfffcc 	andi	r2,r3,65535
 4005d08:	10001526 	beq	r2,zero,4005d60 <__lo0bits+0x90>
 4005d0c:	000b883a 	mov	r5,zero
 4005d10:	18803fcc 	andi	r2,r3,255
 4005d14:	1000021e 	bne	r2,zero,4005d20 <__lo0bits+0x50>
 4005d18:	1806d23a 	srli	r3,r3,8
 4005d1c:	29400204 	addi	r5,r5,8
 4005d20:	188003cc 	andi	r2,r3,15
 4005d24:	1000021e 	bne	r2,zero,4005d30 <__lo0bits+0x60>
 4005d28:	1806d13a 	srli	r3,r3,4
 4005d2c:	29400104 	addi	r5,r5,4
 4005d30:	188000cc 	andi	r2,r3,3
 4005d34:	1000021e 	bne	r2,zero,4005d40 <__lo0bits+0x70>
 4005d38:	1806d0ba 	srli	r3,r3,2
 4005d3c:	29400084 	addi	r5,r5,2
 4005d40:	1880004c 	andi	r2,r3,1
 4005d44:	1000031e 	bne	r2,zero,4005d54 <__lo0bits+0x84>
 4005d48:	1806d07a 	srli	r3,r3,1
 4005d4c:	18000a26 	beq	r3,zero,4005d78 <__lo0bits+0xa8>
 4005d50:	29400044 	addi	r5,r5,1
 4005d54:	2805883a 	mov	r2,r5
 4005d58:	20c00015 	stw	r3,0(r4)
 4005d5c:	f800283a 	ret
 4005d60:	1806d43a 	srli	r3,r3,16
 4005d64:	01400404 	movi	r5,16
 4005d68:	003fe906 	br	4005d10 <__lo0bits+0x40>
 4005d6c:	000b883a 	mov	r5,zero
 4005d70:	2805883a 	mov	r2,r5
 4005d74:	f800283a 	ret
 4005d78:	01400804 	movi	r5,32
 4005d7c:	2805883a 	mov	r2,r5
 4005d80:	f800283a 	ret
 4005d84:	1804d07a 	srli	r2,r3,1
 4005d88:	01400044 	movi	r5,1
 4005d8c:	20800015 	stw	r2,0(r4)
 4005d90:	003fda06 	br	4005cfc <__lo0bits+0x2c>

04005d94 <__mcmp>:
 4005d94:	20800417 	ldw	r2,16(r4)
 4005d98:	28c00417 	ldw	r3,16(r5)
 4005d9c:	10cfc83a 	sub	r7,r2,r3
 4005da0:	38000c1e 	bne	r7,zero,4005dd4 <__mcmp+0x40>
 4005da4:	18c5883a 	add	r2,r3,r3
 4005da8:	1085883a 	add	r2,r2,r2
 4005dac:	10c00504 	addi	r3,r2,20
 4005db0:	21000504 	addi	r4,r4,20
 4005db4:	28cb883a 	add	r5,r5,r3
 4005db8:	2085883a 	add	r2,r4,r2
 4005dbc:	10bfff04 	addi	r2,r2,-4
 4005dc0:	297fff04 	addi	r5,r5,-4
 4005dc4:	11800017 	ldw	r6,0(r2)
 4005dc8:	28c00017 	ldw	r3,0(r5)
 4005dcc:	30c0031e 	bne	r6,r3,4005ddc <__mcmp+0x48>
 4005dd0:	20bffa36 	bltu	r4,r2,4005dbc <__mcmp+0x28>
 4005dd4:	3805883a 	mov	r2,r7
 4005dd8:	f800283a 	ret
 4005ddc:	30c00336 	bltu	r6,r3,4005dec <__mcmp+0x58>
 4005de0:	01c00044 	movi	r7,1
 4005de4:	3805883a 	mov	r2,r7
 4005de8:	f800283a 	ret
 4005dec:	01ffffc4 	movi	r7,-1
 4005df0:	003ff806 	br	4005dd4 <__mcmp+0x40>

04005df4 <__ulp>:
 4005df4:	295ffc2c 	andhi	r5,r5,32752
 4005df8:	013f3034 	movhi	r4,64704
 4005dfc:	290b883a 	add	r5,r5,r4
 4005e00:	0145c83a 	sub	r2,zero,r5
 4005e04:	1007d53a 	srai	r3,r2,20
 4005e08:	000d883a 	mov	r6,zero
 4005e0c:	0140040e 	bge	zero,r5,4005e20 <__ulp+0x2c>
 4005e10:	280f883a 	mov	r7,r5
 4005e14:	3807883a 	mov	r3,r7
 4005e18:	3005883a 	mov	r2,r6
 4005e1c:	f800283a 	ret
 4005e20:	008004c4 	movi	r2,19
 4005e24:	193ffb04 	addi	r4,r3,-20
 4005e28:	10c00c0e 	bge	r2,r3,4005e5c <__ulp+0x68>
 4005e2c:	008007c4 	movi	r2,31
 4005e30:	1107c83a 	sub	r3,r2,r4
 4005e34:	00800784 	movi	r2,30
 4005e38:	01400044 	movi	r5,1
 4005e3c:	11000216 	blt	r2,r4,4005e48 <__ulp+0x54>
 4005e40:	00800044 	movi	r2,1
 4005e44:	10ca983a 	sll	r5,r2,r3
 4005e48:	000f883a 	mov	r7,zero
 4005e4c:	280d883a 	mov	r6,r5
 4005e50:	3807883a 	mov	r3,r7
 4005e54:	3005883a 	mov	r2,r6
 4005e58:	f800283a 	ret
 4005e5c:	00800234 	movhi	r2,8
 4005e60:	10cfd83a 	sra	r7,r2,r3
 4005e64:	000d883a 	mov	r6,zero
 4005e68:	3005883a 	mov	r2,r6
 4005e6c:	3807883a 	mov	r3,r7
 4005e70:	f800283a 	ret

04005e74 <__b2d>:
 4005e74:	20800417 	ldw	r2,16(r4)
 4005e78:	defff904 	addi	sp,sp,-28
 4005e7c:	dd000415 	stw	r20,16(sp)
 4005e80:	1085883a 	add	r2,r2,r2
 4005e84:	25000504 	addi	r20,r4,20
 4005e88:	1085883a 	add	r2,r2,r2
 4005e8c:	dc000015 	stw	r16,0(sp)
 4005e90:	a0a1883a 	add	r16,r20,r2
 4005e94:	dd400515 	stw	r21,20(sp)
 4005e98:	857fff17 	ldw	r21,-4(r16)
 4005e9c:	dc400115 	stw	r17,4(sp)
 4005ea0:	dfc00615 	stw	ra,24(sp)
 4005ea4:	a809883a 	mov	r4,r21
 4005ea8:	2823883a 	mov	r17,r5
 4005eac:	dcc00315 	stw	r19,12(sp)
 4005eb0:	dc800215 	stw	r18,8(sp)
 4005eb4:	4005c600 	call	4005c60 <__hi0bits>
 4005eb8:	100b883a 	mov	r5,r2
 4005ebc:	00800804 	movi	r2,32
 4005ec0:	1145c83a 	sub	r2,r2,r5
 4005ec4:	88800015 	stw	r2,0(r17)
 4005ec8:	00800284 	movi	r2,10
 4005ecc:	80ffff04 	addi	r3,r16,-4
 4005ed0:	11401416 	blt	r2,r5,4005f24 <__b2d+0xb0>
 4005ed4:	008002c4 	movi	r2,11
 4005ed8:	1149c83a 	sub	r4,r2,r5
 4005edc:	a0c02736 	bltu	r20,r3,4005f7c <__b2d+0x108>
 4005ee0:	000d883a 	mov	r6,zero
 4005ee4:	28800544 	addi	r2,r5,21
 4005ee8:	a906d83a 	srl	r3,r21,r4
 4005eec:	a884983a 	sll	r2,r21,r2
 4005ef0:	1ccffc34 	orhi	r19,r3,16368
 4005ef4:	11a4b03a 	or	r18,r2,r6
 4005ef8:	9005883a 	mov	r2,r18
 4005efc:	9807883a 	mov	r3,r19
 4005f00:	dfc00617 	ldw	ra,24(sp)
 4005f04:	dd400517 	ldw	r21,20(sp)
 4005f08:	dd000417 	ldw	r20,16(sp)
 4005f0c:	dcc00317 	ldw	r19,12(sp)
 4005f10:	dc800217 	ldw	r18,8(sp)
 4005f14:	dc400117 	ldw	r17,4(sp)
 4005f18:	dc000017 	ldw	r16,0(sp)
 4005f1c:	dec00704 	addi	sp,sp,28
 4005f20:	f800283a 	ret
 4005f24:	a0c00e36 	bltu	r20,r3,4005f60 <__b2d+0xec>
 4005f28:	293ffd44 	addi	r4,r5,-11
 4005f2c:	000d883a 	mov	r6,zero
 4005f30:	20000f26 	beq	r4,zero,4005f70 <__b2d+0xfc>
 4005f34:	00800804 	movi	r2,32
 4005f38:	110bc83a 	sub	r5,r2,r4
 4005f3c:	a0c01236 	bltu	r20,r3,4005f88 <__b2d+0x114>
 4005f40:	000f883a 	mov	r7,zero
 4005f44:	a904983a 	sll	r2,r21,r4
 4005f48:	3146d83a 	srl	r3,r6,r5
 4005f4c:	3108983a 	sll	r4,r6,r4
 4005f50:	108ffc34 	orhi	r2,r2,16368
 4005f54:	18a6b03a 	or	r19,r3,r2
 4005f58:	3924b03a 	or	r18,r7,r4
 4005f5c:	003fe606 	br	4005ef8 <__b2d+0x84>
 4005f60:	293ffd44 	addi	r4,r5,-11
 4005f64:	81bffe17 	ldw	r6,-8(r16)
 4005f68:	80fffe04 	addi	r3,r16,-8
 4005f6c:	203ff11e 	bne	r4,zero,4005f34 <__b2d+0xc0>
 4005f70:	accffc34 	orhi	r19,r21,16368
 4005f74:	3025883a 	mov	r18,r6
 4005f78:	003fdf06 	br	4005ef8 <__b2d+0x84>
 4005f7c:	18bfff17 	ldw	r2,-4(r3)
 4005f80:	110cd83a 	srl	r6,r2,r4
 4005f84:	003fd706 	br	4005ee4 <__b2d+0x70>
 4005f88:	18bfff17 	ldw	r2,-4(r3)
 4005f8c:	114ed83a 	srl	r7,r2,r5
 4005f90:	003fec06 	br	4005f44 <__b2d+0xd0>

04005f94 <__ratio>:
 4005f94:	defff904 	addi	sp,sp,-28
 4005f98:	dc400215 	stw	r17,8(sp)
 4005f9c:	2823883a 	mov	r17,r5
 4005fa0:	d80b883a 	mov	r5,sp
 4005fa4:	dfc00615 	stw	ra,24(sp)
 4005fa8:	dd000515 	stw	r20,20(sp)
 4005fac:	dcc00415 	stw	r19,16(sp)
 4005fb0:	dc800315 	stw	r18,12(sp)
 4005fb4:	2025883a 	mov	r18,r4
 4005fb8:	4005e740 	call	4005e74 <__b2d>
 4005fbc:	8809883a 	mov	r4,r17
 4005fc0:	d9400104 	addi	r5,sp,4
 4005fc4:	1027883a 	mov	r19,r2
 4005fc8:	1829883a 	mov	r20,r3
 4005fcc:	4005e740 	call	4005e74 <__b2d>
 4005fd0:	89000417 	ldw	r4,16(r17)
 4005fd4:	91c00417 	ldw	r7,16(r18)
 4005fd8:	d9800117 	ldw	r6,4(sp)
 4005fdc:	180b883a 	mov	r5,r3
 4005fe0:	390fc83a 	sub	r7,r7,r4
 4005fe4:	1009883a 	mov	r4,r2
 4005fe8:	d8800017 	ldw	r2,0(sp)
 4005fec:	380e917a 	slli	r7,r7,5
 4005ff0:	2011883a 	mov	r8,r4
 4005ff4:	1185c83a 	sub	r2,r2,r6
 4005ff8:	11c5883a 	add	r2,r2,r7
 4005ffc:	1006953a 	slli	r3,r2,20
 4006000:	2813883a 	mov	r9,r5
 4006004:	00800d0e 	bge	zero,r2,400603c <__ratio+0xa8>
 4006008:	1d29883a 	add	r20,r3,r20
 400600c:	a00b883a 	mov	r5,r20
 4006010:	480f883a 	mov	r7,r9
 4006014:	9809883a 	mov	r4,r19
 4006018:	400d883a 	mov	r6,r8
 400601c:	4008df00 	call	4008df0 <__divdf3>
 4006020:	dfc00617 	ldw	ra,24(sp)
 4006024:	dd000517 	ldw	r20,20(sp)
 4006028:	dcc00417 	ldw	r19,16(sp)
 400602c:	dc800317 	ldw	r18,12(sp)
 4006030:	dc400217 	ldw	r17,8(sp)
 4006034:	dec00704 	addi	sp,sp,28
 4006038:	f800283a 	ret
 400603c:	28d3c83a 	sub	r9,r5,r3
 4006040:	003ff206 	br	400600c <__ratio+0x78>

04006044 <_mprec_log10>:
 4006044:	defffe04 	addi	sp,sp,-8
 4006048:	008005c4 	movi	r2,23
 400604c:	dc000015 	stw	r16,0(sp)
 4006050:	dfc00115 	stw	ra,4(sp)
 4006054:	2021883a 	mov	r16,r4
 4006058:	11000c16 	blt	r2,r4,400608c <_mprec_log10+0x48>
 400605c:	200490fa 	slli	r2,r4,3
 4006060:	00c10074 	movhi	r3,1025
 4006064:	18d9ef04 	addi	r3,r3,26556
 4006068:	10c5883a 	add	r2,r2,r3
 400606c:	12400117 	ldw	r9,4(r2)
 4006070:	12000017 	ldw	r8,0(r2)
 4006074:	4807883a 	mov	r3,r9
 4006078:	4005883a 	mov	r2,r8
 400607c:	dfc00117 	ldw	ra,4(sp)
 4006080:	dc000017 	ldw	r16,0(sp)
 4006084:	dec00204 	addi	sp,sp,8
 4006088:	f800283a 	ret
 400608c:	0011883a 	mov	r8,zero
 4006090:	024ffc34 	movhi	r9,16368
 4006094:	0005883a 	mov	r2,zero
 4006098:	00d00934 	movhi	r3,16420
 400609c:	480b883a 	mov	r5,r9
 40060a0:	4009883a 	mov	r4,r8
 40060a4:	180f883a 	mov	r7,r3
 40060a8:	100d883a 	mov	r6,r2
 40060ac:	4008a2c0 	call	4008a2c <__muldf3>
 40060b0:	843fffc4 	addi	r16,r16,-1
 40060b4:	1011883a 	mov	r8,r2
 40060b8:	1813883a 	mov	r9,r3
 40060bc:	803ff51e 	bne	r16,zero,4006094 <_mprec_log10+0x50>
 40060c0:	4005883a 	mov	r2,r8
 40060c4:	4807883a 	mov	r3,r9
 40060c8:	dfc00117 	ldw	ra,4(sp)
 40060cc:	dc000017 	ldw	r16,0(sp)
 40060d0:	dec00204 	addi	sp,sp,8
 40060d4:	f800283a 	ret

040060d8 <__copybits>:
 40060d8:	297fffc4 	addi	r5,r5,-1
 40060dc:	30800417 	ldw	r2,16(r6)
 40060e0:	280bd17a 	srai	r5,r5,5
 40060e4:	31800504 	addi	r6,r6,20
 40060e8:	1085883a 	add	r2,r2,r2
 40060ec:	294b883a 	add	r5,r5,r5
 40060f0:	294b883a 	add	r5,r5,r5
 40060f4:	1085883a 	add	r2,r2,r2
 40060f8:	290b883a 	add	r5,r5,r4
 40060fc:	3087883a 	add	r3,r6,r2
 4006100:	29400104 	addi	r5,r5,4
 4006104:	30c0052e 	bgeu	r6,r3,400611c <__copybits+0x44>
 4006108:	30800017 	ldw	r2,0(r6)
 400610c:	31800104 	addi	r6,r6,4
 4006110:	20800015 	stw	r2,0(r4)
 4006114:	21000104 	addi	r4,r4,4
 4006118:	30fffb36 	bltu	r6,r3,4006108 <__copybits+0x30>
 400611c:	2140032e 	bgeu	r4,r5,400612c <__copybits+0x54>
 4006120:	20000015 	stw	zero,0(r4)
 4006124:	21000104 	addi	r4,r4,4
 4006128:	217ffd36 	bltu	r4,r5,4006120 <__copybits+0x48>
 400612c:	f800283a 	ret

04006130 <__any_on>:
 4006130:	20800417 	ldw	r2,16(r4)
 4006134:	2807d17a 	srai	r3,r5,5
 4006138:	21000504 	addi	r4,r4,20
 400613c:	10c00d0e 	bge	r2,r3,4006174 <__any_on+0x44>
 4006140:	1085883a 	add	r2,r2,r2
 4006144:	1085883a 	add	r2,r2,r2
 4006148:	208d883a 	add	r6,r4,r2
 400614c:	2180182e 	bgeu	r4,r6,40061b0 <__any_on+0x80>
 4006150:	30bfff17 	ldw	r2,-4(r6)
 4006154:	30ffff04 	addi	r3,r6,-4
 4006158:	1000041e 	bne	r2,zero,400616c <__any_on+0x3c>
 400615c:	20c0142e 	bgeu	r4,r3,40061b0 <__any_on+0x80>
 4006160:	18ffff04 	addi	r3,r3,-4
 4006164:	18800017 	ldw	r2,0(r3)
 4006168:	103ffc26 	beq	r2,zero,400615c <__any_on+0x2c>
 400616c:	00800044 	movi	r2,1
 4006170:	f800283a 	ret
 4006174:	18800a0e 	bge	r3,r2,40061a0 <__any_on+0x70>
 4006178:	294007cc 	andi	r5,r5,31
 400617c:	28000826 	beq	r5,zero,40061a0 <__any_on+0x70>
 4006180:	18c5883a 	add	r2,r3,r3
 4006184:	1085883a 	add	r2,r2,r2
 4006188:	208d883a 	add	r6,r4,r2
 400618c:	30c00017 	ldw	r3,0(r6)
 4006190:	1944d83a 	srl	r2,r3,r5
 4006194:	1144983a 	sll	r2,r2,r5
 4006198:	18bff41e 	bne	r3,r2,400616c <__any_on+0x3c>
 400619c:	003feb06 	br	400614c <__any_on+0x1c>
 40061a0:	18c5883a 	add	r2,r3,r3
 40061a4:	1085883a 	add	r2,r2,r2
 40061a8:	208d883a 	add	r6,r4,r2
 40061ac:	003fe706 	br	400614c <__any_on+0x1c>
 40061b0:	0005883a 	mov	r2,zero
 40061b4:	f800283a 	ret

040061b8 <_Balloc>:
 40061b8:	20c01317 	ldw	r3,76(r4)
 40061bc:	defffb04 	addi	sp,sp,-20
 40061c0:	dcc00315 	stw	r19,12(sp)
 40061c4:	dc800215 	stw	r18,8(sp)
 40061c8:	dfc00415 	stw	ra,16(sp)
 40061cc:	2825883a 	mov	r18,r5
 40061d0:	dc400115 	stw	r17,4(sp)
 40061d4:	dc000015 	stw	r16,0(sp)
 40061d8:	2027883a 	mov	r19,r4
 40061dc:	01800404 	movi	r6,16
 40061e0:	01400104 	movi	r5,4
 40061e4:	18001726 	beq	r3,zero,4006244 <_Balloc+0x8c>
 40061e8:	01400044 	movi	r5,1
 40061ec:	9485883a 	add	r2,r18,r18
 40061f0:	2ca2983a 	sll	r17,r5,r18
 40061f4:	1085883a 	add	r2,r2,r2
 40061f8:	10c7883a 	add	r3,r2,r3
 40061fc:	1c000017 	ldw	r16,0(r3)
 4006200:	8c4d883a 	add	r6,r17,r17
 4006204:	318d883a 	add	r6,r6,r6
 4006208:	9809883a 	mov	r4,r19
 400620c:	31800504 	addi	r6,r6,20
 4006210:	80001226 	beq	r16,zero,400625c <_Balloc+0xa4>
 4006214:	80800017 	ldw	r2,0(r16)
 4006218:	18800015 	stw	r2,0(r3)
 400621c:	80000415 	stw	zero,16(r16)
 4006220:	80000315 	stw	zero,12(r16)
 4006224:	8005883a 	mov	r2,r16
 4006228:	dfc00417 	ldw	ra,16(sp)
 400622c:	dcc00317 	ldw	r19,12(sp)
 4006230:	dc800217 	ldw	r18,8(sp)
 4006234:	dc400117 	ldw	r17,4(sp)
 4006238:	dc000017 	ldw	r16,0(sp)
 400623c:	dec00504 	addi	sp,sp,20
 4006240:	f800283a 	ret
 4006244:	40075800 	call	4007580 <_calloc_r>
 4006248:	1007883a 	mov	r3,r2
 400624c:	0021883a 	mov	r16,zero
 4006250:	98801315 	stw	r2,76(r19)
 4006254:	103fe41e 	bne	r2,zero,40061e8 <_Balloc+0x30>
 4006258:	003ff206 	br	4006224 <_Balloc+0x6c>
 400625c:	40075800 	call	4007580 <_calloc_r>
 4006260:	103ff026 	beq	r2,zero,4006224 <_Balloc+0x6c>
 4006264:	1021883a 	mov	r16,r2
 4006268:	14800115 	stw	r18,4(r2)
 400626c:	14400215 	stw	r17,8(r2)
 4006270:	003fea06 	br	400621c <_Balloc+0x64>

04006274 <__d2b>:
 4006274:	defff504 	addi	sp,sp,-44
 4006278:	dcc00515 	stw	r19,20(sp)
 400627c:	04c00044 	movi	r19,1
 4006280:	dc000215 	stw	r16,8(sp)
 4006284:	2821883a 	mov	r16,r5
 4006288:	980b883a 	mov	r5,r19
 400628c:	ddc00915 	stw	r23,36(sp)
 4006290:	dd800815 	stw	r22,32(sp)
 4006294:	dd400715 	stw	r21,28(sp)
 4006298:	dd000615 	stw	r20,24(sp)
 400629c:	dc800415 	stw	r18,16(sp)
 40062a0:	dc400315 	stw	r17,12(sp)
 40062a4:	dfc00a15 	stw	ra,40(sp)
 40062a8:	3023883a 	mov	r17,r6
 40062ac:	382d883a 	mov	r22,r7
 40062b0:	ddc00b17 	ldw	r23,44(sp)
 40062b4:	40061b80 	call	40061b8 <_Balloc>
 40062b8:	1025883a 	mov	r18,r2
 40062bc:	00a00034 	movhi	r2,32768
 40062c0:	10bfffc4 	addi	r2,r2,-1
 40062c4:	8888703a 	and	r4,r17,r2
 40062c8:	202ad53a 	srli	r21,r4,20
 40062cc:	00800434 	movhi	r2,16
 40062d0:	10bfffc4 	addi	r2,r2,-1
 40062d4:	8886703a 	and	r3,r17,r2
 40062d8:	a829003a 	cmpeq	r20,r21,zero
 40062dc:	800b883a 	mov	r5,r16
 40062e0:	d8c00115 	stw	r3,4(sp)
 40062e4:	94000504 	addi	r16,r18,20
 40062e8:	a000021e 	bne	r20,zero,40062f4 <__d2b+0x80>
 40062ec:	18c00434 	orhi	r3,r3,16
 40062f0:	d8c00115 	stw	r3,4(sp)
 40062f4:	28002726 	beq	r5,zero,4006394 <__d2b+0x120>
 40062f8:	d809883a 	mov	r4,sp
 40062fc:	d9400015 	stw	r5,0(sp)
 4006300:	4005cd00 	call	4005cd0 <__lo0bits>
 4006304:	100d883a 	mov	r6,r2
 4006308:	10003526 	beq	r2,zero,40063e0 <__d2b+0x16c>
 400630c:	d8c00117 	ldw	r3,4(sp)
 4006310:	00800804 	movi	r2,32
 4006314:	1185c83a 	sub	r2,r2,r6
 4006318:	d9000017 	ldw	r4,0(sp)
 400631c:	1886983a 	sll	r3,r3,r2
 4006320:	1906b03a 	or	r3,r3,r4
 4006324:	90c00515 	stw	r3,20(r18)
 4006328:	d8c00117 	ldw	r3,4(sp)
 400632c:	1986d83a 	srl	r3,r3,r6
 4006330:	d8c00115 	stw	r3,4(sp)
 4006334:	180b003a 	cmpeq	r5,r3,zero
 4006338:	00800084 	movi	r2,2
 400633c:	114bc83a 	sub	r5,r2,r5
 4006340:	80c00115 	stw	r3,4(r16)
 4006344:	91400415 	stw	r5,16(r18)
 4006348:	a0001a1e 	bne	r20,zero,40063b4 <__d2b+0x140>
 400634c:	3545883a 	add	r2,r6,r21
 4006350:	10bef344 	addi	r2,r2,-1075
 4006354:	00c00d44 	movi	r3,53
 4006358:	b0800015 	stw	r2,0(r22)
 400635c:	1987c83a 	sub	r3,r3,r6
 4006360:	b8c00015 	stw	r3,0(r23)
 4006364:	9005883a 	mov	r2,r18
 4006368:	dfc00a17 	ldw	ra,40(sp)
 400636c:	ddc00917 	ldw	r23,36(sp)
 4006370:	dd800817 	ldw	r22,32(sp)
 4006374:	dd400717 	ldw	r21,28(sp)
 4006378:	dd000617 	ldw	r20,24(sp)
 400637c:	dcc00517 	ldw	r19,20(sp)
 4006380:	dc800417 	ldw	r18,16(sp)
 4006384:	dc400317 	ldw	r17,12(sp)
 4006388:	dc000217 	ldw	r16,8(sp)
 400638c:	dec00b04 	addi	sp,sp,44
 4006390:	f800283a 	ret
 4006394:	d9000104 	addi	r4,sp,4
 4006398:	4005cd00 	call	4005cd0 <__lo0bits>
 400639c:	11800804 	addi	r6,r2,32
 40063a0:	d8800117 	ldw	r2,4(sp)
 40063a4:	94c00415 	stw	r19,16(r18)
 40063a8:	980b883a 	mov	r5,r19
 40063ac:	90800515 	stw	r2,20(r18)
 40063b0:	a03fe626 	beq	r20,zero,400634c <__d2b+0xd8>
 40063b4:	2945883a 	add	r2,r5,r5
 40063b8:	1085883a 	add	r2,r2,r2
 40063bc:	1405883a 	add	r2,r2,r16
 40063c0:	113fff17 	ldw	r4,-4(r2)
 40063c4:	30fef384 	addi	r3,r6,-1074
 40063c8:	2820917a 	slli	r16,r5,5
 40063cc:	b0c00015 	stw	r3,0(r22)
 40063d0:	4005c600 	call	4005c60 <__hi0bits>
 40063d4:	80a1c83a 	sub	r16,r16,r2
 40063d8:	bc000015 	stw	r16,0(r23)
 40063dc:	003fe106 	br	4006364 <__d2b+0xf0>
 40063e0:	d8800017 	ldw	r2,0(sp)
 40063e4:	90800515 	stw	r2,20(r18)
 40063e8:	d8c00117 	ldw	r3,4(sp)
 40063ec:	003fd106 	br	4006334 <__d2b+0xc0>

040063f0 <__mdiff>:
 40063f0:	defffb04 	addi	sp,sp,-20
 40063f4:	dc000015 	stw	r16,0(sp)
 40063f8:	2821883a 	mov	r16,r5
 40063fc:	dc800215 	stw	r18,8(sp)
 4006400:	300b883a 	mov	r5,r6
 4006404:	2025883a 	mov	r18,r4
 4006408:	8009883a 	mov	r4,r16
 400640c:	dc400115 	stw	r17,4(sp)
 4006410:	dfc00415 	stw	ra,16(sp)
 4006414:	dcc00315 	stw	r19,12(sp)
 4006418:	3023883a 	mov	r17,r6
 400641c:	4005d940 	call	4005d94 <__mcmp>
 4006420:	10004226 	beq	r2,zero,400652c <__mdiff+0x13c>
 4006424:	10005016 	blt	r2,zero,4006568 <__mdiff+0x178>
 4006428:	0027883a 	mov	r19,zero
 400642c:	81400117 	ldw	r5,4(r16)
 4006430:	9009883a 	mov	r4,r18
 4006434:	40061b80 	call	40061b8 <_Balloc>
 4006438:	1019883a 	mov	r12,r2
 400643c:	82800417 	ldw	r10,16(r16)
 4006440:	88800417 	ldw	r2,16(r17)
 4006444:	81800504 	addi	r6,r16,20
 4006448:	5287883a 	add	r3,r10,r10
 400644c:	1085883a 	add	r2,r2,r2
 4006450:	18c7883a 	add	r3,r3,r3
 4006454:	1085883a 	add	r2,r2,r2
 4006458:	8a000504 	addi	r8,r17,20
 400645c:	64c00315 	stw	r19,12(r12)
 4006460:	30db883a 	add	r13,r6,r3
 4006464:	4097883a 	add	r11,r8,r2
 4006468:	61c00504 	addi	r7,r12,20
 400646c:	0013883a 	mov	r9,zero
 4006470:	31000017 	ldw	r4,0(r6)
 4006474:	41400017 	ldw	r5,0(r8)
 4006478:	42000104 	addi	r8,r8,4
 400647c:	20bfffcc 	andi	r2,r4,65535
 4006480:	28ffffcc 	andi	r3,r5,65535
 4006484:	10c5c83a 	sub	r2,r2,r3
 4006488:	1245883a 	add	r2,r2,r9
 400648c:	2008d43a 	srli	r4,r4,16
 4006490:	280ad43a 	srli	r5,r5,16
 4006494:	1007d43a 	srai	r3,r2,16
 4006498:	3880000d 	sth	r2,0(r7)
 400649c:	2149c83a 	sub	r4,r4,r5
 40064a0:	20c9883a 	add	r4,r4,r3
 40064a4:	3900008d 	sth	r4,2(r7)
 40064a8:	31800104 	addi	r6,r6,4
 40064ac:	39c00104 	addi	r7,r7,4
 40064b0:	2013d43a 	srai	r9,r4,16
 40064b4:	42ffee36 	bltu	r8,r11,4006470 <__mdiff+0x80>
 40064b8:	33400c2e 	bgeu	r6,r13,40064ec <__mdiff+0xfc>
 40064bc:	30800017 	ldw	r2,0(r6)
 40064c0:	31800104 	addi	r6,r6,4
 40064c4:	10ffffcc 	andi	r3,r2,65535
 40064c8:	1a47883a 	add	r3,r3,r9
 40064cc:	1004d43a 	srli	r2,r2,16
 40064d0:	1809d43a 	srai	r4,r3,16
 40064d4:	38c0000d 	sth	r3,0(r7)
 40064d8:	1105883a 	add	r2,r2,r4
 40064dc:	3880008d 	sth	r2,2(r7)
 40064e0:	1013d43a 	srai	r9,r2,16
 40064e4:	39c00104 	addi	r7,r7,4
 40064e8:	337ff436 	bltu	r6,r13,40064bc <__mdiff+0xcc>
 40064ec:	38bfff17 	ldw	r2,-4(r7)
 40064f0:	38ffff04 	addi	r3,r7,-4
 40064f4:	1000041e 	bne	r2,zero,4006508 <__mdiff+0x118>
 40064f8:	18ffff04 	addi	r3,r3,-4
 40064fc:	18800017 	ldw	r2,0(r3)
 4006500:	52bfffc4 	addi	r10,r10,-1
 4006504:	103ffc26 	beq	r2,zero,40064f8 <__mdiff+0x108>
 4006508:	6005883a 	mov	r2,r12
 400650c:	62800415 	stw	r10,16(r12)
 4006510:	dfc00417 	ldw	ra,16(sp)
 4006514:	dcc00317 	ldw	r19,12(sp)
 4006518:	dc800217 	ldw	r18,8(sp)
 400651c:	dc400117 	ldw	r17,4(sp)
 4006520:	dc000017 	ldw	r16,0(sp)
 4006524:	dec00504 	addi	sp,sp,20
 4006528:	f800283a 	ret
 400652c:	9009883a 	mov	r4,r18
 4006530:	000b883a 	mov	r5,zero
 4006534:	40061b80 	call	40061b8 <_Balloc>
 4006538:	1019883a 	mov	r12,r2
 400653c:	00800044 	movi	r2,1
 4006540:	60800415 	stw	r2,16(r12)
 4006544:	6005883a 	mov	r2,r12
 4006548:	60000515 	stw	zero,20(r12)
 400654c:	dfc00417 	ldw	ra,16(sp)
 4006550:	dcc00317 	ldw	r19,12(sp)
 4006554:	dc800217 	ldw	r18,8(sp)
 4006558:	dc400117 	ldw	r17,4(sp)
 400655c:	dc000017 	ldw	r16,0(sp)
 4006560:	dec00504 	addi	sp,sp,20
 4006564:	f800283a 	ret
 4006568:	880d883a 	mov	r6,r17
 400656c:	04c00044 	movi	r19,1
 4006570:	8023883a 	mov	r17,r16
 4006574:	3021883a 	mov	r16,r6
 4006578:	003fac06 	br	400642c <__mdiff+0x3c>

0400657c <__lshift>:
 400657c:	defff904 	addi	sp,sp,-28
 4006580:	28800417 	ldw	r2,16(r5)
 4006584:	dc000015 	stw	r16,0(sp)
 4006588:	3021d17a 	srai	r16,r6,5
 400658c:	28c00217 	ldw	r3,8(r5)
 4006590:	10800044 	addi	r2,r2,1
 4006594:	dc400115 	stw	r17,4(sp)
 4006598:	80a3883a 	add	r17,r16,r2
 400659c:	dd400515 	stw	r21,20(sp)
 40065a0:	dd000415 	stw	r20,16(sp)
 40065a4:	dc800215 	stw	r18,8(sp)
 40065a8:	dfc00615 	stw	ra,24(sp)
 40065ac:	2825883a 	mov	r18,r5
 40065b0:	dcc00315 	stw	r19,12(sp)
 40065b4:	3029883a 	mov	r20,r6
 40065b8:	202b883a 	mov	r21,r4
 40065bc:	29400117 	ldw	r5,4(r5)
 40065c0:	1c40030e 	bge	r3,r17,40065d0 <__lshift+0x54>
 40065c4:	18c7883a 	add	r3,r3,r3
 40065c8:	29400044 	addi	r5,r5,1
 40065cc:	1c7ffd16 	blt	r3,r17,40065c4 <__lshift+0x48>
 40065d0:	a809883a 	mov	r4,r21
 40065d4:	40061b80 	call	40061b8 <_Balloc>
 40065d8:	1027883a 	mov	r19,r2
 40065dc:	11400504 	addi	r5,r2,20
 40065e0:	0400090e 	bge	zero,r16,4006608 <__lshift+0x8c>
 40065e4:	2805883a 	mov	r2,r5
 40065e8:	0007883a 	mov	r3,zero
 40065ec:	18c00044 	addi	r3,r3,1
 40065f0:	10000015 	stw	zero,0(r2)
 40065f4:	10800104 	addi	r2,r2,4
 40065f8:	80fffc1e 	bne	r16,r3,40065ec <__lshift+0x70>
 40065fc:	8405883a 	add	r2,r16,r16
 4006600:	1085883a 	add	r2,r2,r2
 4006604:	288b883a 	add	r5,r5,r2
 4006608:	90800417 	ldw	r2,16(r18)
 400660c:	91000504 	addi	r4,r18,20
 4006610:	a18007cc 	andi	r6,r20,31
 4006614:	1085883a 	add	r2,r2,r2
 4006618:	1085883a 	add	r2,r2,r2
 400661c:	208f883a 	add	r7,r4,r2
 4006620:	30001e26 	beq	r6,zero,400669c <__lshift+0x120>
 4006624:	00800804 	movi	r2,32
 4006628:	1191c83a 	sub	r8,r2,r6
 400662c:	0007883a 	mov	r3,zero
 4006630:	20800017 	ldw	r2,0(r4)
 4006634:	1184983a 	sll	r2,r2,r6
 4006638:	1884b03a 	or	r2,r3,r2
 400663c:	28800015 	stw	r2,0(r5)
 4006640:	20c00017 	ldw	r3,0(r4)
 4006644:	21000104 	addi	r4,r4,4
 4006648:	29400104 	addi	r5,r5,4
 400664c:	1a06d83a 	srl	r3,r3,r8
 4006650:	21fff736 	bltu	r4,r7,4006630 <__lshift+0xb4>
 4006654:	28c00015 	stw	r3,0(r5)
 4006658:	18000126 	beq	r3,zero,4006660 <__lshift+0xe4>
 400665c:	8c400044 	addi	r17,r17,1
 4006660:	88bfffc4 	addi	r2,r17,-1
 4006664:	98800415 	stw	r2,16(r19)
 4006668:	a809883a 	mov	r4,r21
 400666c:	900b883a 	mov	r5,r18
 4006670:	4005c380 	call	4005c38 <_Bfree>
 4006674:	9805883a 	mov	r2,r19
 4006678:	dfc00617 	ldw	ra,24(sp)
 400667c:	dd400517 	ldw	r21,20(sp)
 4006680:	dd000417 	ldw	r20,16(sp)
 4006684:	dcc00317 	ldw	r19,12(sp)
 4006688:	dc800217 	ldw	r18,8(sp)
 400668c:	dc400117 	ldw	r17,4(sp)
 4006690:	dc000017 	ldw	r16,0(sp)
 4006694:	dec00704 	addi	sp,sp,28
 4006698:	f800283a 	ret
 400669c:	20800017 	ldw	r2,0(r4)
 40066a0:	21000104 	addi	r4,r4,4
 40066a4:	28800015 	stw	r2,0(r5)
 40066a8:	29400104 	addi	r5,r5,4
 40066ac:	21ffec2e 	bgeu	r4,r7,4006660 <__lshift+0xe4>
 40066b0:	20800017 	ldw	r2,0(r4)
 40066b4:	21000104 	addi	r4,r4,4
 40066b8:	28800015 	stw	r2,0(r5)
 40066bc:	29400104 	addi	r5,r5,4
 40066c0:	21fff636 	bltu	r4,r7,400669c <__lshift+0x120>
 40066c4:	003fe606 	br	4006660 <__lshift+0xe4>

040066c8 <__multiply>:
 40066c8:	defff904 	addi	sp,sp,-28
 40066cc:	dcc00315 	stw	r19,12(sp)
 40066d0:	dc800215 	stw	r18,8(sp)
 40066d4:	2cc00417 	ldw	r19,16(r5)
 40066d8:	34800417 	ldw	r18,16(r6)
 40066dc:	dd000415 	stw	r20,16(sp)
 40066e0:	dc400115 	stw	r17,4(sp)
 40066e4:	dfc00615 	stw	ra,24(sp)
 40066e8:	dd400515 	stw	r21,20(sp)
 40066ec:	dc000015 	stw	r16,0(sp)
 40066f0:	2823883a 	mov	r17,r5
 40066f4:	3029883a 	mov	r20,r6
 40066f8:	9c80040e 	bge	r19,r18,400670c <__multiply+0x44>
 40066fc:	9027883a 	mov	r19,r18
 4006700:	2c800417 	ldw	r18,16(r5)
 4006704:	2829883a 	mov	r20,r5
 4006708:	3023883a 	mov	r17,r6
 400670c:	88800217 	ldw	r2,8(r17)
 4006710:	9ca1883a 	add	r16,r19,r18
 4006714:	89400117 	ldw	r5,4(r17)
 4006718:	1400010e 	bge	r2,r16,4006720 <__multiply+0x58>
 400671c:	29400044 	addi	r5,r5,1
 4006720:	40061b80 	call	40061b8 <_Balloc>
 4006724:	102b883a 	mov	r21,r2
 4006728:	8405883a 	add	r2,r16,r16
 400672c:	1085883a 	add	r2,r2,r2
 4006730:	a9000504 	addi	r4,r21,20
 4006734:	209d883a 	add	r14,r4,r2
 4006738:	2380042e 	bgeu	r4,r14,400674c <__multiply+0x84>
 400673c:	2005883a 	mov	r2,r4
 4006740:	10000015 	stw	zero,0(r2)
 4006744:	10800104 	addi	r2,r2,4
 4006748:	13bffd36 	bltu	r2,r14,4006740 <__multiply+0x78>
 400674c:	9485883a 	add	r2,r18,r18
 4006750:	9cc7883a 	add	r3,r19,r19
 4006754:	a1800504 	addi	r6,r20,20
 4006758:	1085883a 	add	r2,r2,r2
 400675c:	8b400504 	addi	r13,r17,20
 4006760:	18c7883a 	add	r3,r3,r3
 4006764:	309f883a 	add	r15,r6,r2
 4006768:	68d7883a 	add	r11,r13,r3
 400676c:	33c03b2e 	bgeu	r6,r15,400685c <__multiply+0x194>
 4006770:	2019883a 	mov	r12,r4
 4006774:	30800017 	ldw	r2,0(r6)
 4006778:	127fffcc 	andi	r9,r2,65535
 400677c:	48001826 	beq	r9,zero,40067e0 <__multiply+0x118>
 4006780:	6811883a 	mov	r8,r13
 4006784:	600f883a 	mov	r7,r12
 4006788:	0015883a 	mov	r10,zero
 400678c:	40c00017 	ldw	r3,0(r8)
 4006790:	39400017 	ldw	r5,0(r7)
 4006794:	42000104 	addi	r8,r8,4
 4006798:	193fffcc 	andi	r4,r3,65535
 400679c:	4909383a 	mul	r4,r9,r4
 40067a0:	1806d43a 	srli	r3,r3,16
 40067a4:	28bfffcc 	andi	r2,r5,65535
 40067a8:	5085883a 	add	r2,r10,r2
 40067ac:	2089883a 	add	r4,r4,r2
 40067b0:	48c7383a 	mul	r3,r9,r3
 40067b4:	280ad43a 	srli	r5,r5,16
 40067b8:	2004d43a 	srli	r2,r4,16
 40067bc:	3900000d 	sth	r4,0(r7)
 40067c0:	1947883a 	add	r3,r3,r5
 40067c4:	10c5883a 	add	r2,r2,r3
 40067c8:	3880008d 	sth	r2,2(r7)
 40067cc:	1014d43a 	srli	r10,r2,16
 40067d0:	39c00104 	addi	r7,r7,4
 40067d4:	42ffed36 	bltu	r8,r11,400678c <__multiply+0xc4>
 40067d8:	3a800015 	stw	r10,0(r7)
 40067dc:	30800017 	ldw	r2,0(r6)
 40067e0:	1012d43a 	srli	r9,r2,16
 40067e4:	48001926 	beq	r9,zero,400684c <__multiply+0x184>
 40067e8:	60800017 	ldw	r2,0(r12)
 40067ec:	6811883a 	mov	r8,r13
 40067f0:	600f883a 	mov	r7,r12
 40067f4:	0015883a 	mov	r10,zero
 40067f8:	100b883a 	mov	r5,r2
 40067fc:	41000017 	ldw	r4,0(r8)
 4006800:	2806d43a 	srli	r3,r5,16
 4006804:	3880000d 	sth	r2,0(r7)
 4006808:	20bfffcc 	andi	r2,r4,65535
 400680c:	4885383a 	mul	r2,r9,r2
 4006810:	50c7883a 	add	r3,r10,r3
 4006814:	2008d43a 	srli	r4,r4,16
 4006818:	10c5883a 	add	r2,r2,r3
 400681c:	3880008d 	sth	r2,2(r7)
 4006820:	39c00104 	addi	r7,r7,4
 4006824:	39400017 	ldw	r5,0(r7)
 4006828:	4909383a 	mul	r4,r9,r4
 400682c:	1004d43a 	srli	r2,r2,16
 4006830:	28ffffcc 	andi	r3,r5,65535
 4006834:	20c9883a 	add	r4,r4,r3
 4006838:	1105883a 	add	r2,r2,r4
 400683c:	42000104 	addi	r8,r8,4
 4006840:	1014d43a 	srli	r10,r2,16
 4006844:	42ffed36 	bltu	r8,r11,40067fc <__multiply+0x134>
 4006848:	38800015 	stw	r2,0(r7)
 400684c:	31800104 	addi	r6,r6,4
 4006850:	33c0022e 	bgeu	r6,r15,400685c <__multiply+0x194>
 4006854:	63000104 	addi	r12,r12,4
 4006858:	003fc606 	br	4006774 <__multiply+0xac>
 400685c:	0400090e 	bge	zero,r16,4006884 <__multiply+0x1bc>
 4006860:	70bfff17 	ldw	r2,-4(r14)
 4006864:	70ffff04 	addi	r3,r14,-4
 4006868:	10000326 	beq	r2,zero,4006878 <__multiply+0x1b0>
 400686c:	00000506 	br	4006884 <__multiply+0x1bc>
 4006870:	18800017 	ldw	r2,0(r3)
 4006874:	1000031e 	bne	r2,zero,4006884 <__multiply+0x1bc>
 4006878:	843fffc4 	addi	r16,r16,-1
 400687c:	18ffff04 	addi	r3,r3,-4
 4006880:	803ffb1e 	bne	r16,zero,4006870 <__multiply+0x1a8>
 4006884:	a805883a 	mov	r2,r21
 4006888:	ac000415 	stw	r16,16(r21)
 400688c:	dfc00617 	ldw	ra,24(sp)
 4006890:	dd400517 	ldw	r21,20(sp)
 4006894:	dd000417 	ldw	r20,16(sp)
 4006898:	dcc00317 	ldw	r19,12(sp)
 400689c:	dc800217 	ldw	r18,8(sp)
 40068a0:	dc400117 	ldw	r17,4(sp)
 40068a4:	dc000017 	ldw	r16,0(sp)
 40068a8:	dec00704 	addi	sp,sp,28
 40068ac:	f800283a 	ret

040068b0 <__i2b>:
 40068b0:	defffd04 	addi	sp,sp,-12
 40068b4:	dc000015 	stw	r16,0(sp)
 40068b8:	04000044 	movi	r16,1
 40068bc:	dc800115 	stw	r18,4(sp)
 40068c0:	2825883a 	mov	r18,r5
 40068c4:	800b883a 	mov	r5,r16
 40068c8:	dfc00215 	stw	ra,8(sp)
 40068cc:	40061b80 	call	40061b8 <_Balloc>
 40068d0:	14000415 	stw	r16,16(r2)
 40068d4:	14800515 	stw	r18,20(r2)
 40068d8:	dfc00217 	ldw	ra,8(sp)
 40068dc:	dc800117 	ldw	r18,4(sp)
 40068e0:	dc000017 	ldw	r16,0(sp)
 40068e4:	dec00304 	addi	sp,sp,12
 40068e8:	f800283a 	ret

040068ec <__multadd>:
 40068ec:	defffa04 	addi	sp,sp,-24
 40068f0:	dc800215 	stw	r18,8(sp)
 40068f4:	2c800417 	ldw	r18,16(r5)
 40068f8:	dd000415 	stw	r20,16(sp)
 40068fc:	dcc00315 	stw	r19,12(sp)
 4006900:	dc000015 	stw	r16,0(sp)
 4006904:	dfc00515 	stw	ra,20(sp)
 4006908:	3821883a 	mov	r16,r7
 400690c:	dc400115 	stw	r17,4(sp)
 4006910:	2827883a 	mov	r19,r5
 4006914:	2029883a 	mov	r20,r4
 4006918:	2a000504 	addi	r8,r5,20
 400691c:	000f883a 	mov	r7,zero
 4006920:	40800017 	ldw	r2,0(r8)
 4006924:	39c00044 	addi	r7,r7,1
 4006928:	10ffffcc 	andi	r3,r2,65535
 400692c:	1987383a 	mul	r3,r3,r6
 4006930:	1004d43a 	srli	r2,r2,16
 4006934:	1c07883a 	add	r3,r3,r16
 4006938:	180ad43a 	srli	r5,r3,16
 400693c:	1185383a 	mul	r2,r2,r6
 4006940:	18ffffcc 	andi	r3,r3,65535
 4006944:	1145883a 	add	r2,r2,r5
 4006948:	1008943a 	slli	r4,r2,16
 400694c:	1020d43a 	srli	r16,r2,16
 4006950:	20c9883a 	add	r4,r4,r3
 4006954:	41000015 	stw	r4,0(r8)
 4006958:	42000104 	addi	r8,r8,4
 400695c:	3cbff016 	blt	r7,r18,4006920 <__multadd+0x34>
 4006960:	80000826 	beq	r16,zero,4006984 <__multadd+0x98>
 4006964:	98800217 	ldw	r2,8(r19)
 4006968:	90800f0e 	bge	r18,r2,40069a8 <__multadd+0xbc>
 400696c:	9485883a 	add	r2,r18,r18
 4006970:	1085883a 	add	r2,r2,r2
 4006974:	14c5883a 	add	r2,r2,r19
 4006978:	90c00044 	addi	r3,r18,1
 400697c:	14000515 	stw	r16,20(r2)
 4006980:	98c00415 	stw	r3,16(r19)
 4006984:	9805883a 	mov	r2,r19
 4006988:	dfc00517 	ldw	ra,20(sp)
 400698c:	dd000417 	ldw	r20,16(sp)
 4006990:	dcc00317 	ldw	r19,12(sp)
 4006994:	dc800217 	ldw	r18,8(sp)
 4006998:	dc400117 	ldw	r17,4(sp)
 400699c:	dc000017 	ldw	r16,0(sp)
 40069a0:	dec00604 	addi	sp,sp,24
 40069a4:	f800283a 	ret
 40069a8:	99400117 	ldw	r5,4(r19)
 40069ac:	a009883a 	mov	r4,r20
 40069b0:	29400044 	addi	r5,r5,1
 40069b4:	40061b80 	call	40061b8 <_Balloc>
 40069b8:	99800417 	ldw	r6,16(r19)
 40069bc:	99400304 	addi	r5,r19,12
 40069c0:	11000304 	addi	r4,r2,12
 40069c4:	318d883a 	add	r6,r6,r6
 40069c8:	318d883a 	add	r6,r6,r6
 40069cc:	31800204 	addi	r6,r6,8
 40069d0:	1023883a 	mov	r17,r2
 40069d4:	4005a200 	call	4005a20 <memcpy>
 40069d8:	980b883a 	mov	r5,r19
 40069dc:	a009883a 	mov	r4,r20
 40069e0:	4005c380 	call	4005c38 <_Bfree>
 40069e4:	8827883a 	mov	r19,r17
 40069e8:	003fe006 	br	400696c <__multadd+0x80>

040069ec <__pow5mult>:
 40069ec:	defffa04 	addi	sp,sp,-24
 40069f0:	308000cc 	andi	r2,r6,3
 40069f4:	dd000415 	stw	r20,16(sp)
 40069f8:	dcc00315 	stw	r19,12(sp)
 40069fc:	dc000015 	stw	r16,0(sp)
 4006a00:	dfc00515 	stw	ra,20(sp)
 4006a04:	dc800215 	stw	r18,8(sp)
 4006a08:	dc400115 	stw	r17,4(sp)
 4006a0c:	3021883a 	mov	r16,r6
 4006a10:	2027883a 	mov	r19,r4
 4006a14:	2829883a 	mov	r20,r5
 4006a18:	10002b1e 	bne	r2,zero,4006ac8 <__pow5mult+0xdc>
 4006a1c:	8025d0ba 	srai	r18,r16,2
 4006a20:	90001b26 	beq	r18,zero,4006a90 <__pow5mult+0xa4>
 4006a24:	9c001217 	ldw	r16,72(r19)
 4006a28:	8000081e 	bne	r16,zero,4006a4c <__pow5mult+0x60>
 4006a2c:	00003006 	br	4006af0 <__pow5mult+0x104>
 4006a30:	800b883a 	mov	r5,r16
 4006a34:	800d883a 	mov	r6,r16
 4006a38:	9809883a 	mov	r4,r19
 4006a3c:	90001426 	beq	r18,zero,4006a90 <__pow5mult+0xa4>
 4006a40:	80800017 	ldw	r2,0(r16)
 4006a44:	10001b26 	beq	r2,zero,4006ab4 <__pow5mult+0xc8>
 4006a48:	1021883a 	mov	r16,r2
 4006a4c:	9080004c 	andi	r2,r18,1
 4006a50:	1005003a 	cmpeq	r2,r2,zero
 4006a54:	9025d07a 	srai	r18,r18,1
 4006a58:	800d883a 	mov	r6,r16
 4006a5c:	9809883a 	mov	r4,r19
 4006a60:	a00b883a 	mov	r5,r20
 4006a64:	103ff21e 	bne	r2,zero,4006a30 <__pow5mult+0x44>
 4006a68:	40066c80 	call	40066c8 <__multiply>
 4006a6c:	a00b883a 	mov	r5,r20
 4006a70:	9809883a 	mov	r4,r19
 4006a74:	1023883a 	mov	r17,r2
 4006a78:	4005c380 	call	4005c38 <_Bfree>
 4006a7c:	8829883a 	mov	r20,r17
 4006a80:	800b883a 	mov	r5,r16
 4006a84:	800d883a 	mov	r6,r16
 4006a88:	9809883a 	mov	r4,r19
 4006a8c:	903fec1e 	bne	r18,zero,4006a40 <__pow5mult+0x54>
 4006a90:	a005883a 	mov	r2,r20
 4006a94:	dfc00517 	ldw	ra,20(sp)
 4006a98:	dd000417 	ldw	r20,16(sp)
 4006a9c:	dcc00317 	ldw	r19,12(sp)
 4006aa0:	dc800217 	ldw	r18,8(sp)
 4006aa4:	dc400117 	ldw	r17,4(sp)
 4006aa8:	dc000017 	ldw	r16,0(sp)
 4006aac:	dec00604 	addi	sp,sp,24
 4006ab0:	f800283a 	ret
 4006ab4:	40066c80 	call	40066c8 <__multiply>
 4006ab8:	80800015 	stw	r2,0(r16)
 4006abc:	1021883a 	mov	r16,r2
 4006ac0:	10000015 	stw	zero,0(r2)
 4006ac4:	003fe106 	br	4006a4c <__pow5mult+0x60>
 4006ac8:	1085883a 	add	r2,r2,r2
 4006acc:	00c10074 	movhi	r3,1025
 4006ad0:	18da3504 	addi	r3,r3,26836
 4006ad4:	1085883a 	add	r2,r2,r2
 4006ad8:	10c5883a 	add	r2,r2,r3
 4006adc:	11bfff17 	ldw	r6,-4(r2)
 4006ae0:	000f883a 	mov	r7,zero
 4006ae4:	40068ec0 	call	40068ec <__multadd>
 4006ae8:	1029883a 	mov	r20,r2
 4006aec:	003fcb06 	br	4006a1c <__pow5mult+0x30>
 4006af0:	9809883a 	mov	r4,r19
 4006af4:	01409c44 	movi	r5,625
 4006af8:	40068b00 	call	40068b0 <__i2b>
 4006afc:	98801215 	stw	r2,72(r19)
 4006b00:	1021883a 	mov	r16,r2
 4006b04:	10000015 	stw	zero,0(r2)
 4006b08:	003fd006 	br	4006a4c <__pow5mult+0x60>

04006b0c <__s2b>:
 4006b0c:	defff904 	addi	sp,sp,-28
 4006b10:	dcc00315 	stw	r19,12(sp)
 4006b14:	dc800215 	stw	r18,8(sp)
 4006b18:	2827883a 	mov	r19,r5
 4006b1c:	2025883a 	mov	r18,r4
 4006b20:	01400244 	movi	r5,9
 4006b24:	39000204 	addi	r4,r7,8
 4006b28:	dd000415 	stw	r20,16(sp)
 4006b2c:	dc400115 	stw	r17,4(sp)
 4006b30:	dfc00615 	stw	ra,24(sp)
 4006b34:	dd400515 	stw	r21,20(sp)
 4006b38:	dc000015 	stw	r16,0(sp)
 4006b3c:	3829883a 	mov	r20,r7
 4006b40:	3023883a 	mov	r17,r6
 4006b44:	40096d00 	call	40096d0 <__divsi3>
 4006b48:	00c00044 	movi	r3,1
 4006b4c:	1880350e 	bge	r3,r2,4006c24 <__s2b+0x118>
 4006b50:	000b883a 	mov	r5,zero
 4006b54:	18c7883a 	add	r3,r3,r3
 4006b58:	29400044 	addi	r5,r5,1
 4006b5c:	18bffd16 	blt	r3,r2,4006b54 <__s2b+0x48>
 4006b60:	9009883a 	mov	r4,r18
 4006b64:	40061b80 	call	40061b8 <_Balloc>
 4006b68:	1011883a 	mov	r8,r2
 4006b6c:	d8800717 	ldw	r2,28(sp)
 4006b70:	00c00044 	movi	r3,1
 4006b74:	01800244 	movi	r6,9
 4006b78:	40800515 	stw	r2,20(r8)
 4006b7c:	40c00415 	stw	r3,16(r8)
 4006b80:	3440260e 	bge	r6,r17,4006c1c <__s2b+0x110>
 4006b84:	3021883a 	mov	r16,r6
 4006b88:	99ab883a 	add	r21,r19,r6
 4006b8c:	9c05883a 	add	r2,r19,r16
 4006b90:	11c00007 	ldb	r7,0(r2)
 4006b94:	400b883a 	mov	r5,r8
 4006b98:	9009883a 	mov	r4,r18
 4006b9c:	39fff404 	addi	r7,r7,-48
 4006ba0:	01800284 	movi	r6,10
 4006ba4:	40068ec0 	call	40068ec <__multadd>
 4006ba8:	84000044 	addi	r16,r16,1
 4006bac:	1011883a 	mov	r8,r2
 4006bb0:	8c3ff61e 	bne	r17,r16,4006b8c <__s2b+0x80>
 4006bb4:	ac45883a 	add	r2,r21,r17
 4006bb8:	117ffe04 	addi	r5,r2,-8
 4006bbc:	880d883a 	mov	r6,r17
 4006bc0:	35000c0e 	bge	r6,r20,4006bf4 <__s2b+0xe8>
 4006bc4:	a185c83a 	sub	r2,r20,r6
 4006bc8:	2821883a 	mov	r16,r5
 4006bcc:	28a3883a 	add	r17,r5,r2
 4006bd0:	81c00007 	ldb	r7,0(r16)
 4006bd4:	400b883a 	mov	r5,r8
 4006bd8:	9009883a 	mov	r4,r18
 4006bdc:	39fff404 	addi	r7,r7,-48
 4006be0:	01800284 	movi	r6,10
 4006be4:	40068ec0 	call	40068ec <__multadd>
 4006be8:	84000044 	addi	r16,r16,1
 4006bec:	1011883a 	mov	r8,r2
 4006bf0:	847ff71e 	bne	r16,r17,4006bd0 <__s2b+0xc4>
 4006bf4:	4005883a 	mov	r2,r8
 4006bf8:	dfc00617 	ldw	ra,24(sp)
 4006bfc:	dd400517 	ldw	r21,20(sp)
 4006c00:	dd000417 	ldw	r20,16(sp)
 4006c04:	dcc00317 	ldw	r19,12(sp)
 4006c08:	dc800217 	ldw	r18,8(sp)
 4006c0c:	dc400117 	ldw	r17,4(sp)
 4006c10:	dc000017 	ldw	r16,0(sp)
 4006c14:	dec00704 	addi	sp,sp,28
 4006c18:	f800283a 	ret
 4006c1c:	99400284 	addi	r5,r19,10
 4006c20:	003fe706 	br	4006bc0 <__s2b+0xb4>
 4006c24:	000b883a 	mov	r5,zero
 4006c28:	003fcd06 	br	4006b60 <__s2b+0x54>

04006c2c <_realloc_r>:
 4006c2c:	defff404 	addi	sp,sp,-48
 4006c30:	dd800815 	stw	r22,32(sp)
 4006c34:	dc800415 	stw	r18,16(sp)
 4006c38:	dc400315 	stw	r17,12(sp)
 4006c3c:	dfc00b15 	stw	ra,44(sp)
 4006c40:	df000a15 	stw	fp,40(sp)
 4006c44:	ddc00915 	stw	r23,36(sp)
 4006c48:	dd400715 	stw	r21,28(sp)
 4006c4c:	dd000615 	stw	r20,24(sp)
 4006c50:	dcc00515 	stw	r19,20(sp)
 4006c54:	dc000215 	stw	r16,8(sp)
 4006c58:	2825883a 	mov	r18,r5
 4006c5c:	3023883a 	mov	r17,r6
 4006c60:	202d883a 	mov	r22,r4
 4006c64:	2800c926 	beq	r5,zero,4006f8c <_realloc_r+0x360>
 4006c68:	400a8e40 	call	400a8e4 <__malloc_lock>
 4006c6c:	943ffe04 	addi	r16,r18,-8
 4006c70:	88c002c4 	addi	r3,r17,11
 4006c74:	00800584 	movi	r2,22
 4006c78:	82000117 	ldw	r8,4(r16)
 4006c7c:	10c01b2e 	bgeu	r2,r3,4006cec <_realloc_r+0xc0>
 4006c80:	00bffe04 	movi	r2,-8
 4006c84:	188e703a 	and	r7,r3,r2
 4006c88:	3839883a 	mov	fp,r7
 4006c8c:	38001a16 	blt	r7,zero,4006cf8 <_realloc_r+0xcc>
 4006c90:	e4401936 	bltu	fp,r17,4006cf8 <_realloc_r+0xcc>
 4006c94:	013fff04 	movi	r4,-4
 4006c98:	4126703a 	and	r19,r8,r4
 4006c9c:	99c02616 	blt	r19,r7,4006d38 <_realloc_r+0x10c>
 4006ca0:	802b883a 	mov	r21,r16
 4006ca4:	9829883a 	mov	r20,r19
 4006ca8:	84000204 	addi	r16,r16,8
 4006cac:	a80f883a 	mov	r7,r21
 4006cb0:	a70dc83a 	sub	r6,r20,fp
 4006cb4:	008003c4 	movi	r2,15
 4006cb8:	1180c136 	bltu	r2,r6,4006fc0 <_realloc_r+0x394>
 4006cbc:	38800117 	ldw	r2,4(r7)
 4006cc0:	a549883a 	add	r4,r20,r21
 4006cc4:	1080004c 	andi	r2,r2,1
 4006cc8:	a084b03a 	or	r2,r20,r2
 4006ccc:	38800115 	stw	r2,4(r7)
 4006cd0:	20c00117 	ldw	r3,4(r4)
 4006cd4:	18c00054 	ori	r3,r3,1
 4006cd8:	20c00115 	stw	r3,4(r4)
 4006cdc:	b009883a 	mov	r4,r22
 4006ce0:	400a9ec0 	call	400a9ec <__malloc_unlock>
 4006ce4:	8023883a 	mov	r17,r16
 4006ce8:	00000606 	br	4006d04 <_realloc_r+0xd8>
 4006cec:	01c00404 	movi	r7,16
 4006cf0:	3839883a 	mov	fp,r7
 4006cf4:	e47fe72e 	bgeu	fp,r17,4006c94 <_realloc_r+0x68>
 4006cf8:	00800304 	movi	r2,12
 4006cfc:	0023883a 	mov	r17,zero
 4006d00:	b0800015 	stw	r2,0(r22)
 4006d04:	8805883a 	mov	r2,r17
 4006d08:	dfc00b17 	ldw	ra,44(sp)
 4006d0c:	df000a17 	ldw	fp,40(sp)
 4006d10:	ddc00917 	ldw	r23,36(sp)
 4006d14:	dd800817 	ldw	r22,32(sp)
 4006d18:	dd400717 	ldw	r21,28(sp)
 4006d1c:	dd000617 	ldw	r20,24(sp)
 4006d20:	dcc00517 	ldw	r19,20(sp)
 4006d24:	dc800417 	ldw	r18,16(sp)
 4006d28:	dc400317 	ldw	r17,12(sp)
 4006d2c:	dc000217 	ldw	r16,8(sp)
 4006d30:	dec00c04 	addi	sp,sp,48
 4006d34:	f800283a 	ret
 4006d38:	00810074 	movhi	r2,1025
 4006d3c:	109be304 	addi	r2,r2,28556
 4006d40:	12400217 	ldw	r9,8(r2)
 4006d44:	84cd883a 	add	r6,r16,r19
 4006d48:	802b883a 	mov	r21,r16
 4006d4c:	3240b926 	beq	r6,r9,4007034 <_realloc_r+0x408>
 4006d50:	31400117 	ldw	r5,4(r6)
 4006d54:	00bfff84 	movi	r2,-2
 4006d58:	2884703a 	and	r2,r5,r2
 4006d5c:	1185883a 	add	r2,r2,r6
 4006d60:	10c00117 	ldw	r3,4(r2)
 4006d64:	18c0004c 	andi	r3,r3,1
 4006d68:	1807003a 	cmpeq	r3,r3,zero
 4006d6c:	1800a326 	beq	r3,zero,4006ffc <_realloc_r+0x3d0>
 4006d70:	2908703a 	and	r4,r5,r4
 4006d74:	9929883a 	add	r20,r19,r4
 4006d78:	a1c0a30e 	bge	r20,r7,4007008 <_realloc_r+0x3dc>
 4006d7c:	4080004c 	andi	r2,r8,1
 4006d80:	1000551e 	bne	r2,zero,4006ed8 <_realloc_r+0x2ac>
 4006d84:	80800017 	ldw	r2,0(r16)
 4006d88:	80afc83a 	sub	r23,r16,r2
 4006d8c:	b8c00117 	ldw	r3,4(r23)
 4006d90:	00bfff04 	movi	r2,-4
 4006d94:	1884703a 	and	r2,r3,r2
 4006d98:	30002e26 	beq	r6,zero,4006e54 <_realloc_r+0x228>
 4006d9c:	3240b926 	beq	r6,r9,4007084 <_realloc_r+0x458>
 4006da0:	98a9883a 	add	r20,r19,r2
 4006da4:	2509883a 	add	r4,r4,r20
 4006da8:	d9000015 	stw	r4,0(sp)
 4006dac:	21c02a16 	blt	r4,r7,4006e58 <_realloc_r+0x22c>
 4006db0:	30800317 	ldw	r2,12(r6)
 4006db4:	30c00217 	ldw	r3,8(r6)
 4006db8:	01400904 	movi	r5,36
 4006dbc:	99bfff04 	addi	r6,r19,-4
 4006dc0:	18800315 	stw	r2,12(r3)
 4006dc4:	10c00215 	stw	r3,8(r2)
 4006dc8:	b9000317 	ldw	r4,12(r23)
 4006dcc:	b8800217 	ldw	r2,8(r23)
 4006dd0:	b82b883a 	mov	r21,r23
 4006dd4:	bc000204 	addi	r16,r23,8
 4006dd8:	20800215 	stw	r2,8(r4)
 4006ddc:	11000315 	stw	r4,12(r2)
 4006de0:	2980e436 	bltu	r5,r6,4007174 <_realloc_r+0x548>
 4006de4:	008004c4 	movi	r2,19
 4006de8:	9009883a 	mov	r4,r18
 4006dec:	8011883a 	mov	r8,r16
 4006df0:	11800f2e 	bgeu	r2,r6,4006e30 <_realloc_r+0x204>
 4006df4:	90800017 	ldw	r2,0(r18)
 4006df8:	ba000404 	addi	r8,r23,16
 4006dfc:	91000204 	addi	r4,r18,8
 4006e00:	b8800215 	stw	r2,8(r23)
 4006e04:	90c00117 	ldw	r3,4(r18)
 4006e08:	008006c4 	movi	r2,27
 4006e0c:	b8c00315 	stw	r3,12(r23)
 4006e10:	1180072e 	bgeu	r2,r6,4006e30 <_realloc_r+0x204>
 4006e14:	90c00217 	ldw	r3,8(r18)
 4006e18:	ba000604 	addi	r8,r23,24
 4006e1c:	91000404 	addi	r4,r18,16
 4006e20:	b8c00415 	stw	r3,16(r23)
 4006e24:	90800317 	ldw	r2,12(r18)
 4006e28:	b8800515 	stw	r2,20(r23)
 4006e2c:	3140e726 	beq	r6,r5,40071cc <_realloc_r+0x5a0>
 4006e30:	20800017 	ldw	r2,0(r4)
 4006e34:	dd000017 	ldw	r20,0(sp)
 4006e38:	b80f883a 	mov	r7,r23
 4006e3c:	40800015 	stw	r2,0(r8)
 4006e40:	20c00117 	ldw	r3,4(r4)
 4006e44:	40c00115 	stw	r3,4(r8)
 4006e48:	20800217 	ldw	r2,8(r4)
 4006e4c:	40800215 	stw	r2,8(r8)
 4006e50:	003f9706 	br	4006cb0 <_realloc_r+0x84>
 4006e54:	98a9883a 	add	r20,r19,r2
 4006e58:	a1c01f16 	blt	r20,r7,4006ed8 <_realloc_r+0x2ac>
 4006e5c:	b8c00317 	ldw	r3,12(r23)
 4006e60:	b8800217 	ldw	r2,8(r23)
 4006e64:	99bfff04 	addi	r6,r19,-4
 4006e68:	01400904 	movi	r5,36
 4006e6c:	b82b883a 	mov	r21,r23
 4006e70:	18800215 	stw	r2,8(r3)
 4006e74:	10c00315 	stw	r3,12(r2)
 4006e78:	bc000204 	addi	r16,r23,8
 4006e7c:	2980c336 	bltu	r5,r6,400718c <_realloc_r+0x560>
 4006e80:	008004c4 	movi	r2,19
 4006e84:	9009883a 	mov	r4,r18
 4006e88:	8011883a 	mov	r8,r16
 4006e8c:	11800f2e 	bgeu	r2,r6,4006ecc <_realloc_r+0x2a0>
 4006e90:	90800017 	ldw	r2,0(r18)
 4006e94:	ba000404 	addi	r8,r23,16
 4006e98:	91000204 	addi	r4,r18,8
 4006e9c:	b8800215 	stw	r2,8(r23)
 4006ea0:	90c00117 	ldw	r3,4(r18)
 4006ea4:	008006c4 	movi	r2,27
 4006ea8:	b8c00315 	stw	r3,12(r23)
 4006eac:	1180072e 	bgeu	r2,r6,4006ecc <_realloc_r+0x2a0>
 4006eb0:	90c00217 	ldw	r3,8(r18)
 4006eb4:	ba000604 	addi	r8,r23,24
 4006eb8:	91000404 	addi	r4,r18,16
 4006ebc:	b8c00415 	stw	r3,16(r23)
 4006ec0:	90800317 	ldw	r2,12(r18)
 4006ec4:	b8800515 	stw	r2,20(r23)
 4006ec8:	3140c726 	beq	r6,r5,40071e8 <_realloc_r+0x5bc>
 4006ecc:	20800017 	ldw	r2,0(r4)
 4006ed0:	b80f883a 	mov	r7,r23
 4006ed4:	003fd906 	br	4006e3c <_realloc_r+0x210>
 4006ed8:	880b883a 	mov	r5,r17
 4006edc:	b009883a 	mov	r4,r22
 4006ee0:	40051fc0 	call	40051fc <_malloc_r>
 4006ee4:	1023883a 	mov	r17,r2
 4006ee8:	10002526 	beq	r2,zero,4006f80 <_realloc_r+0x354>
 4006eec:	80800117 	ldw	r2,4(r16)
 4006ef0:	00ffff84 	movi	r3,-2
 4006ef4:	893ffe04 	addi	r4,r17,-8
 4006ef8:	10c4703a 	and	r2,r2,r3
 4006efc:	8085883a 	add	r2,r16,r2
 4006f00:	20809526 	beq	r4,r2,4007158 <_realloc_r+0x52c>
 4006f04:	99bfff04 	addi	r6,r19,-4
 4006f08:	01c00904 	movi	r7,36
 4006f0c:	39804536 	bltu	r7,r6,4007024 <_realloc_r+0x3f8>
 4006f10:	008004c4 	movi	r2,19
 4006f14:	9009883a 	mov	r4,r18
 4006f18:	880b883a 	mov	r5,r17
 4006f1c:	11800f2e 	bgeu	r2,r6,4006f5c <_realloc_r+0x330>
 4006f20:	90800017 	ldw	r2,0(r18)
 4006f24:	89400204 	addi	r5,r17,8
 4006f28:	91000204 	addi	r4,r18,8
 4006f2c:	88800015 	stw	r2,0(r17)
 4006f30:	90c00117 	ldw	r3,4(r18)
 4006f34:	008006c4 	movi	r2,27
 4006f38:	88c00115 	stw	r3,4(r17)
 4006f3c:	1180072e 	bgeu	r2,r6,4006f5c <_realloc_r+0x330>
 4006f40:	90c00217 	ldw	r3,8(r18)
 4006f44:	89400404 	addi	r5,r17,16
 4006f48:	91000404 	addi	r4,r18,16
 4006f4c:	88c00215 	stw	r3,8(r17)
 4006f50:	90800317 	ldw	r2,12(r18)
 4006f54:	88800315 	stw	r2,12(r17)
 4006f58:	31c09126 	beq	r6,r7,40071a0 <_realloc_r+0x574>
 4006f5c:	20800017 	ldw	r2,0(r4)
 4006f60:	28800015 	stw	r2,0(r5)
 4006f64:	20c00117 	ldw	r3,4(r4)
 4006f68:	28c00115 	stw	r3,4(r5)
 4006f6c:	20800217 	ldw	r2,8(r4)
 4006f70:	28800215 	stw	r2,8(r5)
 4006f74:	900b883a 	mov	r5,r18
 4006f78:	b009883a 	mov	r4,r22
 4006f7c:	40046740 	call	4004674 <_free_r>
 4006f80:	b009883a 	mov	r4,r22
 4006f84:	400a9ec0 	call	400a9ec <__malloc_unlock>
 4006f88:	003f5e06 	br	4006d04 <_realloc_r+0xd8>
 4006f8c:	300b883a 	mov	r5,r6
 4006f90:	dfc00b17 	ldw	ra,44(sp)
 4006f94:	df000a17 	ldw	fp,40(sp)
 4006f98:	ddc00917 	ldw	r23,36(sp)
 4006f9c:	dd800817 	ldw	r22,32(sp)
 4006fa0:	dd400717 	ldw	r21,28(sp)
 4006fa4:	dd000617 	ldw	r20,24(sp)
 4006fa8:	dcc00517 	ldw	r19,20(sp)
 4006fac:	dc800417 	ldw	r18,16(sp)
 4006fb0:	dc400317 	ldw	r17,12(sp)
 4006fb4:	dc000217 	ldw	r16,8(sp)
 4006fb8:	dec00c04 	addi	sp,sp,48
 4006fbc:	40051fc1 	jmpi	40051fc <_malloc_r>
 4006fc0:	38800117 	ldw	r2,4(r7)
 4006fc4:	e54b883a 	add	r5,fp,r21
 4006fc8:	31000054 	ori	r4,r6,1
 4006fcc:	1080004c 	andi	r2,r2,1
 4006fd0:	1704b03a 	or	r2,r2,fp
 4006fd4:	38800115 	stw	r2,4(r7)
 4006fd8:	29000115 	stw	r4,4(r5)
 4006fdc:	2987883a 	add	r3,r5,r6
 4006fe0:	18800117 	ldw	r2,4(r3)
 4006fe4:	29400204 	addi	r5,r5,8
 4006fe8:	b009883a 	mov	r4,r22
 4006fec:	10800054 	ori	r2,r2,1
 4006ff0:	18800115 	stw	r2,4(r3)
 4006ff4:	40046740 	call	4004674 <_free_r>
 4006ff8:	003f3806 	br	4006cdc <_realloc_r+0xb0>
 4006ffc:	000d883a 	mov	r6,zero
 4007000:	0009883a 	mov	r4,zero
 4007004:	003f5d06 	br	4006d7c <_realloc_r+0x150>
 4007008:	30c00217 	ldw	r3,8(r6)
 400700c:	30800317 	ldw	r2,12(r6)
 4007010:	800f883a 	mov	r7,r16
 4007014:	84000204 	addi	r16,r16,8
 4007018:	10c00215 	stw	r3,8(r2)
 400701c:	18800315 	stw	r2,12(r3)
 4007020:	003f2306 	br	4006cb0 <_realloc_r+0x84>
 4007024:	8809883a 	mov	r4,r17
 4007028:	900b883a 	mov	r5,r18
 400702c:	4005ac00 	call	4005ac0 <memmove>
 4007030:	003fd006 	br	4006f74 <_realloc_r+0x348>
 4007034:	30800117 	ldw	r2,4(r6)
 4007038:	e0c00404 	addi	r3,fp,16
 400703c:	1108703a 	and	r4,r2,r4
 4007040:	9905883a 	add	r2,r19,r4
 4007044:	10ff4d16 	blt	r2,r3,4006d7c <_realloc_r+0x150>
 4007048:	1705c83a 	sub	r2,r2,fp
 400704c:	870b883a 	add	r5,r16,fp
 4007050:	10800054 	ori	r2,r2,1
 4007054:	28800115 	stw	r2,4(r5)
 4007058:	80c00117 	ldw	r3,4(r16)
 400705c:	00810074 	movhi	r2,1025
 4007060:	109be304 	addi	r2,r2,28556
 4007064:	b009883a 	mov	r4,r22
 4007068:	18c0004c 	andi	r3,r3,1
 400706c:	e0c6b03a 	or	r3,fp,r3
 4007070:	11400215 	stw	r5,8(r2)
 4007074:	80c00115 	stw	r3,4(r16)
 4007078:	400a9ec0 	call	400a9ec <__malloc_unlock>
 400707c:	84400204 	addi	r17,r16,8
 4007080:	003f2006 	br	4006d04 <_realloc_r+0xd8>
 4007084:	98a9883a 	add	r20,r19,r2
 4007088:	2509883a 	add	r4,r4,r20
 400708c:	e0800404 	addi	r2,fp,16
 4007090:	d9000115 	stw	r4,4(sp)
 4007094:	20bf7016 	blt	r4,r2,4006e58 <_realloc_r+0x22c>
 4007098:	b8c00317 	ldw	r3,12(r23)
 400709c:	b8800217 	ldw	r2,8(r23)
 40070a0:	99bfff04 	addi	r6,r19,-4
 40070a4:	01400904 	movi	r5,36
 40070a8:	18800215 	stw	r2,8(r3)
 40070ac:	10c00315 	stw	r3,12(r2)
 40070b0:	bc400204 	addi	r17,r23,8
 40070b4:	29804136 	bltu	r5,r6,40071bc <_realloc_r+0x590>
 40070b8:	008004c4 	movi	r2,19
 40070bc:	9009883a 	mov	r4,r18
 40070c0:	880f883a 	mov	r7,r17
 40070c4:	11800f2e 	bgeu	r2,r6,4007104 <_realloc_r+0x4d8>
 40070c8:	90800017 	ldw	r2,0(r18)
 40070cc:	b9c00404 	addi	r7,r23,16
 40070d0:	91000204 	addi	r4,r18,8
 40070d4:	b8800215 	stw	r2,8(r23)
 40070d8:	90c00117 	ldw	r3,4(r18)
 40070dc:	008006c4 	movi	r2,27
 40070e0:	b8c00315 	stw	r3,12(r23)
 40070e4:	1180072e 	bgeu	r2,r6,4007104 <_realloc_r+0x4d8>
 40070e8:	90c00217 	ldw	r3,8(r18)
 40070ec:	b9c00604 	addi	r7,r23,24
 40070f0:	91000404 	addi	r4,r18,16
 40070f4:	b8c00415 	stw	r3,16(r23)
 40070f8:	90800317 	ldw	r2,12(r18)
 40070fc:	b8800515 	stw	r2,20(r23)
 4007100:	31404026 	beq	r6,r5,4007204 <_realloc_r+0x5d8>
 4007104:	20800017 	ldw	r2,0(r4)
 4007108:	38800015 	stw	r2,0(r7)
 400710c:	20c00117 	ldw	r3,4(r4)
 4007110:	38c00115 	stw	r3,4(r7)
 4007114:	20800217 	ldw	r2,8(r4)
 4007118:	38800215 	stw	r2,8(r7)
 400711c:	d8c00117 	ldw	r3,4(sp)
 4007120:	bf0b883a 	add	r5,r23,fp
 4007124:	b009883a 	mov	r4,r22
 4007128:	1f05c83a 	sub	r2,r3,fp
 400712c:	10800054 	ori	r2,r2,1
 4007130:	28800115 	stw	r2,4(r5)
 4007134:	b8c00117 	ldw	r3,4(r23)
 4007138:	00810074 	movhi	r2,1025
 400713c:	109be304 	addi	r2,r2,28556
 4007140:	11400215 	stw	r5,8(r2)
 4007144:	18c0004c 	andi	r3,r3,1
 4007148:	e0c6b03a 	or	r3,fp,r3
 400714c:	b8c00115 	stw	r3,4(r23)
 4007150:	400a9ec0 	call	400a9ec <__malloc_unlock>
 4007154:	003eeb06 	br	4006d04 <_realloc_r+0xd8>
 4007158:	20800117 	ldw	r2,4(r4)
 400715c:	00ffff04 	movi	r3,-4
 4007160:	800f883a 	mov	r7,r16
 4007164:	10c4703a 	and	r2,r2,r3
 4007168:	98a9883a 	add	r20,r19,r2
 400716c:	84000204 	addi	r16,r16,8
 4007170:	003ecf06 	br	4006cb0 <_realloc_r+0x84>
 4007174:	900b883a 	mov	r5,r18
 4007178:	8009883a 	mov	r4,r16
 400717c:	4005ac00 	call	4005ac0 <memmove>
 4007180:	dd000017 	ldw	r20,0(sp)
 4007184:	b80f883a 	mov	r7,r23
 4007188:	003ec906 	br	4006cb0 <_realloc_r+0x84>
 400718c:	900b883a 	mov	r5,r18
 4007190:	8009883a 	mov	r4,r16
 4007194:	4005ac00 	call	4005ac0 <memmove>
 4007198:	b80f883a 	mov	r7,r23
 400719c:	003ec406 	br	4006cb0 <_realloc_r+0x84>
 40071a0:	90c00417 	ldw	r3,16(r18)
 40071a4:	89400604 	addi	r5,r17,24
 40071a8:	91000604 	addi	r4,r18,24
 40071ac:	88c00415 	stw	r3,16(r17)
 40071b0:	90800517 	ldw	r2,20(r18)
 40071b4:	88800515 	stw	r2,20(r17)
 40071b8:	003f6806 	br	4006f5c <_realloc_r+0x330>
 40071bc:	900b883a 	mov	r5,r18
 40071c0:	8809883a 	mov	r4,r17
 40071c4:	4005ac00 	call	4005ac0 <memmove>
 40071c8:	003fd406 	br	400711c <_realloc_r+0x4f0>
 40071cc:	90c00417 	ldw	r3,16(r18)
 40071d0:	91000604 	addi	r4,r18,24
 40071d4:	ba000804 	addi	r8,r23,32
 40071d8:	b8c00615 	stw	r3,24(r23)
 40071dc:	90800517 	ldw	r2,20(r18)
 40071e0:	b8800715 	stw	r2,28(r23)
 40071e4:	003f1206 	br	4006e30 <_realloc_r+0x204>
 40071e8:	90c00417 	ldw	r3,16(r18)
 40071ec:	91000604 	addi	r4,r18,24
 40071f0:	ba000804 	addi	r8,r23,32
 40071f4:	b8c00615 	stw	r3,24(r23)
 40071f8:	90800517 	ldw	r2,20(r18)
 40071fc:	b8800715 	stw	r2,28(r23)
 4007200:	003f3206 	br	4006ecc <_realloc_r+0x2a0>
 4007204:	90c00417 	ldw	r3,16(r18)
 4007208:	91000604 	addi	r4,r18,24
 400720c:	b9c00804 	addi	r7,r23,32
 4007210:	b8c00615 	stw	r3,24(r23)
 4007214:	90800517 	ldw	r2,20(r18)
 4007218:	b8800715 	stw	r2,28(r23)
 400721c:	003fb906 	br	4007104 <_realloc_r+0x4d8>

04007220 <__isinfd>:
 4007220:	200d883a 	mov	r6,r4
 4007224:	0109c83a 	sub	r4,zero,r4
 4007228:	2188b03a 	or	r4,r4,r6
 400722c:	2008d7fa 	srli	r4,r4,31
 4007230:	00a00034 	movhi	r2,32768
 4007234:	10bfffc4 	addi	r2,r2,-1
 4007238:	1144703a 	and	r2,r2,r5
 400723c:	2088b03a 	or	r4,r4,r2
 4007240:	009ffc34 	movhi	r2,32752
 4007244:	1105c83a 	sub	r2,r2,r4
 4007248:	0087c83a 	sub	r3,zero,r2
 400724c:	10c4b03a 	or	r2,r2,r3
 4007250:	1004d7fa 	srli	r2,r2,31
 4007254:	00c00044 	movi	r3,1
 4007258:	1885c83a 	sub	r2,r3,r2
 400725c:	f800283a 	ret

04007260 <__isnand>:
 4007260:	200d883a 	mov	r6,r4
 4007264:	0109c83a 	sub	r4,zero,r4
 4007268:	2188b03a 	or	r4,r4,r6
 400726c:	2008d7fa 	srli	r4,r4,31
 4007270:	00a00034 	movhi	r2,32768
 4007274:	10bfffc4 	addi	r2,r2,-1
 4007278:	1144703a 	and	r2,r2,r5
 400727c:	2088b03a 	or	r4,r4,r2
 4007280:	009ffc34 	movhi	r2,32752
 4007284:	1105c83a 	sub	r2,r2,r4
 4007288:	1004d7fa 	srli	r2,r2,31
 400728c:	f800283a 	ret

04007290 <_sbrk_r>:
 4007290:	defffd04 	addi	sp,sp,-12
 4007294:	dc000015 	stw	r16,0(sp)
 4007298:	040100b4 	movhi	r16,1026
 400729c:	8421d504 	addi	r16,r16,-30892
 40072a0:	dc400115 	stw	r17,4(sp)
 40072a4:	80000015 	stw	zero,0(r16)
 40072a8:	2023883a 	mov	r17,r4
 40072ac:	2809883a 	mov	r4,r5
 40072b0:	dfc00215 	stw	ra,8(sp)
 40072b4:	400a5a00 	call	400a5a0 <sbrk>
 40072b8:	1007883a 	mov	r3,r2
 40072bc:	00bfffc4 	movi	r2,-1
 40072c0:	18800626 	beq	r3,r2,40072dc <_sbrk_r+0x4c>
 40072c4:	1805883a 	mov	r2,r3
 40072c8:	dfc00217 	ldw	ra,8(sp)
 40072cc:	dc400117 	ldw	r17,4(sp)
 40072d0:	dc000017 	ldw	r16,0(sp)
 40072d4:	dec00304 	addi	sp,sp,12
 40072d8:	f800283a 	ret
 40072dc:	80800017 	ldw	r2,0(r16)
 40072e0:	103ff826 	beq	r2,zero,40072c4 <_sbrk_r+0x34>
 40072e4:	88800015 	stw	r2,0(r17)
 40072e8:	1805883a 	mov	r2,r3
 40072ec:	dfc00217 	ldw	ra,8(sp)
 40072f0:	dc400117 	ldw	r17,4(sp)
 40072f4:	dc000017 	ldw	r16,0(sp)
 40072f8:	dec00304 	addi	sp,sp,12
 40072fc:	f800283a 	ret

04007300 <__sclose>:
 4007300:	2940038f 	ldh	r5,14(r5)
 4007304:	40076341 	jmpi	4007634 <_close_r>

04007308 <__sseek>:
 4007308:	defffe04 	addi	sp,sp,-8
 400730c:	dc000015 	stw	r16,0(sp)
 4007310:	2821883a 	mov	r16,r5
 4007314:	2940038f 	ldh	r5,14(r5)
 4007318:	dfc00115 	stw	ra,4(sp)
 400731c:	40078ac0 	call	40078ac <_lseek_r>
 4007320:	1007883a 	mov	r3,r2
 4007324:	00bfffc4 	movi	r2,-1
 4007328:	18800926 	beq	r3,r2,4007350 <__sseek+0x48>
 400732c:	8080030b 	ldhu	r2,12(r16)
 4007330:	80c01415 	stw	r3,80(r16)
 4007334:	10840014 	ori	r2,r2,4096
 4007338:	8080030d 	sth	r2,12(r16)
 400733c:	1805883a 	mov	r2,r3
 4007340:	dfc00117 	ldw	ra,4(sp)
 4007344:	dc000017 	ldw	r16,0(sp)
 4007348:	dec00204 	addi	sp,sp,8
 400734c:	f800283a 	ret
 4007350:	8080030b 	ldhu	r2,12(r16)
 4007354:	10bbffcc 	andi	r2,r2,61439
 4007358:	8080030d 	sth	r2,12(r16)
 400735c:	1805883a 	mov	r2,r3
 4007360:	dfc00117 	ldw	ra,4(sp)
 4007364:	dc000017 	ldw	r16,0(sp)
 4007368:	dec00204 	addi	sp,sp,8
 400736c:	f800283a 	ret

04007370 <__swrite>:
 4007370:	2880030b 	ldhu	r2,12(r5)
 4007374:	defffb04 	addi	sp,sp,-20
 4007378:	dcc00315 	stw	r19,12(sp)
 400737c:	1080400c 	andi	r2,r2,256
 4007380:	dc800215 	stw	r18,8(sp)
 4007384:	dc400115 	stw	r17,4(sp)
 4007388:	dc000015 	stw	r16,0(sp)
 400738c:	3027883a 	mov	r19,r6
 4007390:	3825883a 	mov	r18,r7
 4007394:	dfc00415 	stw	ra,16(sp)
 4007398:	2821883a 	mov	r16,r5
 400739c:	000d883a 	mov	r6,zero
 40073a0:	01c00084 	movi	r7,2
 40073a4:	2023883a 	mov	r17,r4
 40073a8:	10000226 	beq	r2,zero,40073b4 <__swrite+0x44>
 40073ac:	2940038f 	ldh	r5,14(r5)
 40073b0:	40078ac0 	call	40078ac <_lseek_r>
 40073b4:	8080030b 	ldhu	r2,12(r16)
 40073b8:	8140038f 	ldh	r5,14(r16)
 40073bc:	8809883a 	mov	r4,r17
 40073c0:	10bbffcc 	andi	r2,r2,61439
 40073c4:	980d883a 	mov	r6,r19
 40073c8:	900f883a 	mov	r7,r18
 40073cc:	8080030d 	sth	r2,12(r16)
 40073d0:	dfc00417 	ldw	ra,16(sp)
 40073d4:	dcc00317 	ldw	r19,12(sp)
 40073d8:	dc800217 	ldw	r18,8(sp)
 40073dc:	dc400117 	ldw	r17,4(sp)
 40073e0:	dc000017 	ldw	r16,0(sp)
 40073e4:	dec00504 	addi	sp,sp,20
 40073e8:	40075081 	jmpi	4007508 <_write_r>

040073ec <__sread>:
 40073ec:	defffe04 	addi	sp,sp,-8
 40073f0:	dc000015 	stw	r16,0(sp)
 40073f4:	2821883a 	mov	r16,r5
 40073f8:	2940038f 	ldh	r5,14(r5)
 40073fc:	dfc00115 	stw	ra,4(sp)
 4007400:	40079240 	call	4007924 <_read_r>
 4007404:	1007883a 	mov	r3,r2
 4007408:	10000816 	blt	r2,zero,400742c <__sread+0x40>
 400740c:	80801417 	ldw	r2,80(r16)
 4007410:	10c5883a 	add	r2,r2,r3
 4007414:	80801415 	stw	r2,80(r16)
 4007418:	1805883a 	mov	r2,r3
 400741c:	dfc00117 	ldw	ra,4(sp)
 4007420:	dc000017 	ldw	r16,0(sp)
 4007424:	dec00204 	addi	sp,sp,8
 4007428:	f800283a 	ret
 400742c:	8080030b 	ldhu	r2,12(r16)
 4007430:	10bbffcc 	andi	r2,r2,61439
 4007434:	8080030d 	sth	r2,12(r16)
 4007438:	1805883a 	mov	r2,r3
 400743c:	dfc00117 	ldw	ra,4(sp)
 4007440:	dc000017 	ldw	r16,0(sp)
 4007444:	dec00204 	addi	sp,sp,8
 4007448:	f800283a 	ret

0400744c <strcmp>:
 400744c:	2144b03a 	or	r2,r4,r5
 4007450:	108000cc 	andi	r2,r2,3
 4007454:	10001d1e 	bne	r2,zero,40074cc <strcmp+0x80>
 4007458:	200f883a 	mov	r7,r4
 400745c:	28800017 	ldw	r2,0(r5)
 4007460:	21000017 	ldw	r4,0(r4)
 4007464:	280d883a 	mov	r6,r5
 4007468:	2080161e 	bne	r4,r2,40074c4 <strcmp+0x78>
 400746c:	023fbff4 	movhi	r8,65279
 4007470:	423fbfc4 	addi	r8,r8,-257
 4007474:	2207883a 	add	r3,r4,r8
 4007478:	01602074 	movhi	r5,32897
 400747c:	29602004 	addi	r5,r5,-32640
 4007480:	1946703a 	and	r3,r3,r5
 4007484:	0104303a 	nor	r2,zero,r4
 4007488:	10c4703a 	and	r2,r2,r3
 400748c:	10001c1e 	bne	r2,zero,4007500 <strcmp+0xb4>
 4007490:	4013883a 	mov	r9,r8
 4007494:	2811883a 	mov	r8,r5
 4007498:	00000106 	br	40074a0 <strcmp+0x54>
 400749c:	1800181e 	bne	r3,zero,4007500 <strcmp+0xb4>
 40074a0:	39c00104 	addi	r7,r7,4
 40074a4:	39000017 	ldw	r4,0(r7)
 40074a8:	31800104 	addi	r6,r6,4
 40074ac:	31400017 	ldw	r5,0(r6)
 40074b0:	2245883a 	add	r2,r4,r9
 40074b4:	1204703a 	and	r2,r2,r8
 40074b8:	0106303a 	nor	r3,zero,r4
 40074bc:	1886703a 	and	r3,r3,r2
 40074c0:	217ff626 	beq	r4,r5,400749c <strcmp+0x50>
 40074c4:	3809883a 	mov	r4,r7
 40074c8:	300b883a 	mov	r5,r6
 40074cc:	20c00007 	ldb	r3,0(r4)
 40074d0:	1800051e 	bne	r3,zero,40074e8 <strcmp+0x9c>
 40074d4:	00000606 	br	40074f0 <strcmp+0xa4>
 40074d8:	21000044 	addi	r4,r4,1
 40074dc:	20c00007 	ldb	r3,0(r4)
 40074e0:	29400044 	addi	r5,r5,1
 40074e4:	18000226 	beq	r3,zero,40074f0 <strcmp+0xa4>
 40074e8:	28800007 	ldb	r2,0(r5)
 40074ec:	18bffa26 	beq	r3,r2,40074d8 <strcmp+0x8c>
 40074f0:	20c00003 	ldbu	r3,0(r4)
 40074f4:	28800003 	ldbu	r2,0(r5)
 40074f8:	1885c83a 	sub	r2,r3,r2
 40074fc:	f800283a 	ret
 4007500:	0005883a 	mov	r2,zero
 4007504:	f800283a 	ret

04007508 <_write_r>:
 4007508:	defffd04 	addi	sp,sp,-12
 400750c:	dc000015 	stw	r16,0(sp)
 4007510:	040100b4 	movhi	r16,1026
 4007514:	8421d504 	addi	r16,r16,-30892
 4007518:	dc400115 	stw	r17,4(sp)
 400751c:	80000015 	stw	zero,0(r16)
 4007520:	2023883a 	mov	r17,r4
 4007524:	2809883a 	mov	r4,r5
 4007528:	300b883a 	mov	r5,r6
 400752c:	380d883a 	mov	r6,r7
 4007530:	dfc00215 	stw	ra,8(sp)
 4007534:	400a65c0 	call	400a65c <write>
 4007538:	1007883a 	mov	r3,r2
 400753c:	00bfffc4 	movi	r2,-1
 4007540:	18800626 	beq	r3,r2,400755c <_write_r+0x54>
 4007544:	1805883a 	mov	r2,r3
 4007548:	dfc00217 	ldw	ra,8(sp)
 400754c:	dc400117 	ldw	r17,4(sp)
 4007550:	dc000017 	ldw	r16,0(sp)
 4007554:	dec00304 	addi	sp,sp,12
 4007558:	f800283a 	ret
 400755c:	80800017 	ldw	r2,0(r16)
 4007560:	103ff826 	beq	r2,zero,4007544 <_write_r+0x3c>
 4007564:	88800015 	stw	r2,0(r17)
 4007568:	1805883a 	mov	r2,r3
 400756c:	dfc00217 	ldw	ra,8(sp)
 4007570:	dc400117 	ldw	r17,4(sp)
 4007574:	dc000017 	ldw	r16,0(sp)
 4007578:	dec00304 	addi	sp,sp,12
 400757c:	f800283a 	ret

04007580 <_calloc_r>:
 4007580:	298b383a 	mul	r5,r5,r6
 4007584:	defffe04 	addi	sp,sp,-8
 4007588:	dc000015 	stw	r16,0(sp)
 400758c:	dfc00115 	stw	ra,4(sp)
 4007590:	40051fc0 	call	40051fc <_malloc_r>
 4007594:	1021883a 	mov	r16,r2
 4007598:	01c00904 	movi	r7,36
 400759c:	10000d26 	beq	r2,zero,40075d4 <_calloc_r+0x54>
 40075a0:	10ffff17 	ldw	r3,-4(r2)
 40075a4:	1009883a 	mov	r4,r2
 40075a8:	00bfff04 	movi	r2,-4
 40075ac:	1886703a 	and	r3,r3,r2
 40075b0:	1887883a 	add	r3,r3,r2
 40075b4:	180d883a 	mov	r6,r3
 40075b8:	000b883a 	mov	r5,zero
 40075bc:	38c01736 	bltu	r7,r3,400761c <_calloc_r+0x9c>
 40075c0:	008004c4 	movi	r2,19
 40075c4:	10c00836 	bltu	r2,r3,40075e8 <_calloc_r+0x68>
 40075c8:	20000215 	stw	zero,8(r4)
 40075cc:	20000015 	stw	zero,0(r4)
 40075d0:	20000115 	stw	zero,4(r4)
 40075d4:	8005883a 	mov	r2,r16
 40075d8:	dfc00117 	ldw	ra,4(sp)
 40075dc:	dc000017 	ldw	r16,0(sp)
 40075e0:	dec00204 	addi	sp,sp,8
 40075e4:	f800283a 	ret
 40075e8:	008006c4 	movi	r2,27
 40075ec:	80000015 	stw	zero,0(r16)
 40075f0:	80000115 	stw	zero,4(r16)
 40075f4:	81000204 	addi	r4,r16,8
 40075f8:	10fff32e 	bgeu	r2,r3,40075c8 <_calloc_r+0x48>
 40075fc:	80000215 	stw	zero,8(r16)
 4007600:	80000315 	stw	zero,12(r16)
 4007604:	81000404 	addi	r4,r16,16
 4007608:	19ffef1e 	bne	r3,r7,40075c8 <_calloc_r+0x48>
 400760c:	81000604 	addi	r4,r16,24
 4007610:	80000415 	stw	zero,16(r16)
 4007614:	80000515 	stw	zero,20(r16)
 4007618:	003feb06 	br	40075c8 <_calloc_r+0x48>
 400761c:	4005ba00 	call	4005ba0 <memset>
 4007620:	8005883a 	mov	r2,r16
 4007624:	dfc00117 	ldw	ra,4(sp)
 4007628:	dc000017 	ldw	r16,0(sp)
 400762c:	dec00204 	addi	sp,sp,8
 4007630:	f800283a 	ret

04007634 <_close_r>:
 4007634:	defffd04 	addi	sp,sp,-12
 4007638:	dc000015 	stw	r16,0(sp)
 400763c:	040100b4 	movhi	r16,1026
 4007640:	8421d504 	addi	r16,r16,-30892
 4007644:	dc400115 	stw	r17,4(sp)
 4007648:	80000015 	stw	zero,0(r16)
 400764c:	2023883a 	mov	r17,r4
 4007650:	2809883a 	mov	r4,r5
 4007654:	dfc00215 	stw	ra,8(sp)
 4007658:	4009dcc0 	call	4009dcc <close>
 400765c:	1007883a 	mov	r3,r2
 4007660:	00bfffc4 	movi	r2,-1
 4007664:	18800626 	beq	r3,r2,4007680 <_close_r+0x4c>
 4007668:	1805883a 	mov	r2,r3
 400766c:	dfc00217 	ldw	ra,8(sp)
 4007670:	dc400117 	ldw	r17,4(sp)
 4007674:	dc000017 	ldw	r16,0(sp)
 4007678:	dec00304 	addi	sp,sp,12
 400767c:	f800283a 	ret
 4007680:	80800017 	ldw	r2,0(r16)
 4007684:	103ff826 	beq	r2,zero,4007668 <_close_r+0x34>
 4007688:	88800015 	stw	r2,0(r17)
 400768c:	1805883a 	mov	r2,r3
 4007690:	dfc00217 	ldw	ra,8(sp)
 4007694:	dc400117 	ldw	r17,4(sp)
 4007698:	dc000017 	ldw	r16,0(sp)
 400769c:	dec00304 	addi	sp,sp,12
 40076a0:	f800283a 	ret

040076a4 <_fclose_r>:
 40076a4:	defffc04 	addi	sp,sp,-16
 40076a8:	dc400115 	stw	r17,4(sp)
 40076ac:	dc000015 	stw	r16,0(sp)
 40076b0:	dfc00315 	stw	ra,12(sp)
 40076b4:	dc800215 	stw	r18,8(sp)
 40076b8:	2821883a 	mov	r16,r5
 40076bc:	2023883a 	mov	r17,r4
 40076c0:	28002926 	beq	r5,zero,4007768 <_fclose_r+0xc4>
 40076c4:	40042e00 	call	40042e0 <__sfp_lock_acquire>
 40076c8:	88000226 	beq	r17,zero,40076d4 <_fclose_r+0x30>
 40076cc:	88800e17 	ldw	r2,56(r17)
 40076d0:	10002d26 	beq	r2,zero,4007788 <_fclose_r+0xe4>
 40076d4:	8080030f 	ldh	r2,12(r16)
 40076d8:	10002226 	beq	r2,zero,4007764 <_fclose_r+0xc0>
 40076dc:	8809883a 	mov	r4,r17
 40076e0:	800b883a 	mov	r5,r16
 40076e4:	40040580 	call	4004058 <_fflush_r>
 40076e8:	1025883a 	mov	r18,r2
 40076ec:	80800b17 	ldw	r2,44(r16)
 40076f0:	10000426 	beq	r2,zero,4007704 <_fclose_r+0x60>
 40076f4:	81400717 	ldw	r5,28(r16)
 40076f8:	8809883a 	mov	r4,r17
 40076fc:	103ee83a 	callr	r2
 4007700:	10002a16 	blt	r2,zero,40077ac <_fclose_r+0x108>
 4007704:	8080030b 	ldhu	r2,12(r16)
 4007708:	1080200c 	andi	r2,r2,128
 400770c:	1000231e 	bne	r2,zero,400779c <_fclose_r+0xf8>
 4007710:	81400c17 	ldw	r5,48(r16)
 4007714:	28000526 	beq	r5,zero,400772c <_fclose_r+0x88>
 4007718:	80801004 	addi	r2,r16,64
 400771c:	28800226 	beq	r5,r2,4007728 <_fclose_r+0x84>
 4007720:	8809883a 	mov	r4,r17
 4007724:	40046740 	call	4004674 <_free_r>
 4007728:	80000c15 	stw	zero,48(r16)
 400772c:	81401117 	ldw	r5,68(r16)
 4007730:	28000326 	beq	r5,zero,4007740 <_fclose_r+0x9c>
 4007734:	8809883a 	mov	r4,r17
 4007738:	40046740 	call	4004674 <_free_r>
 400773c:	80001115 	stw	zero,68(r16)
 4007740:	8000030d 	sth	zero,12(r16)
 4007744:	40042e40 	call	40042e4 <__sfp_lock_release>
 4007748:	9005883a 	mov	r2,r18
 400774c:	dfc00317 	ldw	ra,12(sp)
 4007750:	dc800217 	ldw	r18,8(sp)
 4007754:	dc400117 	ldw	r17,4(sp)
 4007758:	dc000017 	ldw	r16,0(sp)
 400775c:	dec00404 	addi	sp,sp,16
 4007760:	f800283a 	ret
 4007764:	40042e40 	call	40042e4 <__sfp_lock_release>
 4007768:	0025883a 	mov	r18,zero
 400776c:	9005883a 	mov	r2,r18
 4007770:	dfc00317 	ldw	ra,12(sp)
 4007774:	dc800217 	ldw	r18,8(sp)
 4007778:	dc400117 	ldw	r17,4(sp)
 400777c:	dc000017 	ldw	r16,0(sp)
 4007780:	dec00404 	addi	sp,sp,16
 4007784:	f800283a 	ret
 4007788:	8809883a 	mov	r4,r17
 400778c:	40042f00 	call	40042f0 <__sinit>
 4007790:	8080030f 	ldh	r2,12(r16)
 4007794:	103fd11e 	bne	r2,zero,40076dc <_fclose_r+0x38>
 4007798:	003ff206 	br	4007764 <_fclose_r+0xc0>
 400779c:	81400417 	ldw	r5,16(r16)
 40077a0:	8809883a 	mov	r4,r17
 40077a4:	40046740 	call	4004674 <_free_r>
 40077a8:	003fd906 	br	4007710 <_fclose_r+0x6c>
 40077ac:	04bfffc4 	movi	r18,-1
 40077b0:	003fd406 	br	4007704 <_fclose_r+0x60>

040077b4 <fclose>:
 40077b4:	008100b4 	movhi	r2,1026
 40077b8:	10a19b04 	addi	r2,r2,-31124
 40077bc:	200b883a 	mov	r5,r4
 40077c0:	11000017 	ldw	r4,0(r2)
 40077c4:	40076a41 	jmpi	40076a4 <_fclose_r>

040077c8 <_fstat_r>:
 40077c8:	defffd04 	addi	sp,sp,-12
 40077cc:	dc000015 	stw	r16,0(sp)
 40077d0:	040100b4 	movhi	r16,1026
 40077d4:	8421d504 	addi	r16,r16,-30892
 40077d8:	dc400115 	stw	r17,4(sp)
 40077dc:	80000015 	stw	zero,0(r16)
 40077e0:	2023883a 	mov	r17,r4
 40077e4:	2809883a 	mov	r4,r5
 40077e8:	300b883a 	mov	r5,r6
 40077ec:	dfc00215 	stw	ra,8(sp)
 40077f0:	4009f540 	call	4009f54 <fstat>
 40077f4:	1007883a 	mov	r3,r2
 40077f8:	00bfffc4 	movi	r2,-1
 40077fc:	18800626 	beq	r3,r2,4007818 <_fstat_r+0x50>
 4007800:	1805883a 	mov	r2,r3
 4007804:	dfc00217 	ldw	ra,8(sp)
 4007808:	dc400117 	ldw	r17,4(sp)
 400780c:	dc000017 	ldw	r16,0(sp)
 4007810:	dec00304 	addi	sp,sp,12
 4007814:	f800283a 	ret
 4007818:	80800017 	ldw	r2,0(r16)
 400781c:	103ff826 	beq	r2,zero,4007800 <_fstat_r+0x38>
 4007820:	88800015 	stw	r2,0(r17)
 4007824:	1805883a 	mov	r2,r3
 4007828:	dfc00217 	ldw	ra,8(sp)
 400782c:	dc400117 	ldw	r17,4(sp)
 4007830:	dc000017 	ldw	r16,0(sp)
 4007834:	dec00304 	addi	sp,sp,12
 4007838:	f800283a 	ret

0400783c <_isatty_r>:
 400783c:	defffd04 	addi	sp,sp,-12
 4007840:	dc000015 	stw	r16,0(sp)
 4007844:	040100b4 	movhi	r16,1026
 4007848:	8421d504 	addi	r16,r16,-30892
 400784c:	dc400115 	stw	r17,4(sp)
 4007850:	80000015 	stw	zero,0(r16)
 4007854:	2023883a 	mov	r17,r4
 4007858:	2809883a 	mov	r4,r5
 400785c:	dfc00215 	stw	ra,8(sp)
 4007860:	400a0880 	call	400a088 <isatty>
 4007864:	1007883a 	mov	r3,r2
 4007868:	00bfffc4 	movi	r2,-1
 400786c:	18800626 	beq	r3,r2,4007888 <_isatty_r+0x4c>
 4007870:	1805883a 	mov	r2,r3
 4007874:	dfc00217 	ldw	ra,8(sp)
 4007878:	dc400117 	ldw	r17,4(sp)
 400787c:	dc000017 	ldw	r16,0(sp)
 4007880:	dec00304 	addi	sp,sp,12
 4007884:	f800283a 	ret
 4007888:	80800017 	ldw	r2,0(r16)
 400788c:	103ff826 	beq	r2,zero,4007870 <_isatty_r+0x34>
 4007890:	88800015 	stw	r2,0(r17)
 4007894:	1805883a 	mov	r2,r3
 4007898:	dfc00217 	ldw	ra,8(sp)
 400789c:	dc400117 	ldw	r17,4(sp)
 40078a0:	dc000017 	ldw	r16,0(sp)
 40078a4:	dec00304 	addi	sp,sp,12
 40078a8:	f800283a 	ret

040078ac <_lseek_r>:
 40078ac:	defffd04 	addi	sp,sp,-12
 40078b0:	dc000015 	stw	r16,0(sp)
 40078b4:	040100b4 	movhi	r16,1026
 40078b8:	8421d504 	addi	r16,r16,-30892
 40078bc:	dc400115 	stw	r17,4(sp)
 40078c0:	80000015 	stw	zero,0(r16)
 40078c4:	2023883a 	mov	r17,r4
 40078c8:	2809883a 	mov	r4,r5
 40078cc:	300b883a 	mov	r5,r6
 40078d0:	380d883a 	mov	r6,r7
 40078d4:	dfc00215 	stw	ra,8(sp)
 40078d8:	400a1a80 	call	400a1a8 <lseek>
 40078dc:	1007883a 	mov	r3,r2
 40078e0:	00bfffc4 	movi	r2,-1
 40078e4:	18800626 	beq	r3,r2,4007900 <_lseek_r+0x54>
 40078e8:	1805883a 	mov	r2,r3
 40078ec:	dfc00217 	ldw	ra,8(sp)
 40078f0:	dc400117 	ldw	r17,4(sp)
 40078f4:	dc000017 	ldw	r16,0(sp)
 40078f8:	dec00304 	addi	sp,sp,12
 40078fc:	f800283a 	ret
 4007900:	80800017 	ldw	r2,0(r16)
 4007904:	103ff826 	beq	r2,zero,40078e8 <_lseek_r+0x3c>
 4007908:	88800015 	stw	r2,0(r17)
 400790c:	1805883a 	mov	r2,r3
 4007910:	dfc00217 	ldw	ra,8(sp)
 4007914:	dc400117 	ldw	r17,4(sp)
 4007918:	dc000017 	ldw	r16,0(sp)
 400791c:	dec00304 	addi	sp,sp,12
 4007920:	f800283a 	ret

04007924 <_read_r>:
 4007924:	defffd04 	addi	sp,sp,-12
 4007928:	dc000015 	stw	r16,0(sp)
 400792c:	040100b4 	movhi	r16,1026
 4007930:	8421d504 	addi	r16,r16,-30892
 4007934:	dc400115 	stw	r17,4(sp)
 4007938:	80000015 	stw	zero,0(r16)
 400793c:	2023883a 	mov	r17,r4
 4007940:	2809883a 	mov	r4,r5
 4007944:	300b883a 	mov	r5,r6
 4007948:	380d883a 	mov	r6,r7
 400794c:	dfc00215 	stw	ra,8(sp)
 4007950:	400a3c00 	call	400a3c0 <read>
 4007954:	1007883a 	mov	r3,r2
 4007958:	00bfffc4 	movi	r2,-1
 400795c:	18800626 	beq	r3,r2,4007978 <_read_r+0x54>
 4007960:	1805883a 	mov	r2,r3
 4007964:	dfc00217 	ldw	ra,8(sp)
 4007968:	dc400117 	ldw	r17,4(sp)
 400796c:	dc000017 	ldw	r16,0(sp)
 4007970:	dec00304 	addi	sp,sp,12
 4007974:	f800283a 	ret
 4007978:	80800017 	ldw	r2,0(r16)
 400797c:	103ff826 	beq	r2,zero,4007960 <_read_r+0x3c>
 4007980:	88800015 	stw	r2,0(r17)
 4007984:	1805883a 	mov	r2,r3
 4007988:	dfc00217 	ldw	ra,8(sp)
 400798c:	dc400117 	ldw	r17,4(sp)
 4007990:	dc000017 	ldw	r16,0(sp)
 4007994:	dec00304 	addi	sp,sp,12
 4007998:	f800283a 	ret

0400799c <__udivdi3>:
 400799c:	defff004 	addi	sp,sp,-64
 40079a0:	2005883a 	mov	r2,r4
 40079a4:	3011883a 	mov	r8,r6
 40079a8:	df000e15 	stw	fp,56(sp)
 40079ac:	dd000a15 	stw	r20,40(sp)
 40079b0:	dc000615 	stw	r16,24(sp)
 40079b4:	dfc00f15 	stw	ra,60(sp)
 40079b8:	ddc00d15 	stw	r23,52(sp)
 40079bc:	dd800c15 	stw	r22,48(sp)
 40079c0:	dd400b15 	stw	r21,44(sp)
 40079c4:	dcc00915 	stw	r19,36(sp)
 40079c8:	dc800815 	stw	r18,32(sp)
 40079cc:	dc400715 	stw	r17,28(sp)
 40079d0:	4021883a 	mov	r16,r8
 40079d4:	1039883a 	mov	fp,r2
 40079d8:	2829883a 	mov	r20,r5
 40079dc:	38003b1e 	bne	r7,zero,4007acc <__udivdi3+0x130>
 40079e0:	2a005c36 	bltu	r5,r8,4007b54 <__udivdi3+0x1b8>
 40079e4:	4000a626 	beq	r8,zero,4007c80 <__udivdi3+0x2e4>
 40079e8:	00bfffd4 	movui	r2,65535
 40079ec:	14009e36 	bltu	r2,r16,4007c68 <__udivdi3+0x2cc>
 40079f0:	00803fc4 	movi	r2,255
 40079f4:	14013d36 	bltu	r2,r16,4007eec <__udivdi3+0x550>
 40079f8:	000b883a 	mov	r5,zero
 40079fc:	0005883a 	mov	r2,zero
 4007a00:	8084d83a 	srl	r2,r16,r2
 4007a04:	01010074 	movhi	r4,1025
 4007a08:	211a3d04 	addi	r4,r4,26868
 4007a0c:	01800804 	movi	r6,32
 4007a10:	1105883a 	add	r2,r2,r4
 4007a14:	10c00003 	ldbu	r3,0(r2)
 4007a18:	28c7883a 	add	r3,r5,r3
 4007a1c:	30edc83a 	sub	r22,r6,r3
 4007a20:	b000ee1e 	bne	r22,zero,4007ddc <__udivdi3+0x440>
 4007a24:	802ad43a 	srli	r21,r16,16
 4007a28:	00800044 	movi	r2,1
 4007a2c:	a423c83a 	sub	r17,r20,r16
 4007a30:	85ffffcc 	andi	r23,r16,65535
 4007a34:	d8800315 	stw	r2,12(sp)
 4007a38:	8809883a 	mov	r4,r17
 4007a3c:	a80b883a 	mov	r5,r21
 4007a40:	40097900 	call	4009790 <__udivsi3>
 4007a44:	8809883a 	mov	r4,r17
 4007a48:	a80b883a 	mov	r5,r21
 4007a4c:	102d883a 	mov	r22,r2
 4007a50:	40097980 	call	4009798 <__umodsi3>
 4007a54:	1004943a 	slli	r2,r2,16
 4007a58:	e006d43a 	srli	r3,fp,16
 4007a5c:	bda3383a 	mul	r17,r23,r22
 4007a60:	10c4b03a 	or	r2,r2,r3
 4007a64:	1440042e 	bgeu	r2,r17,4007a78 <__udivdi3+0xdc>
 4007a68:	1405883a 	add	r2,r2,r16
 4007a6c:	b5bfffc4 	addi	r22,r22,-1
 4007a70:	14000136 	bltu	r2,r16,4007a78 <__udivdi3+0xdc>
 4007a74:	14413d36 	bltu	r2,r17,4007f6c <__udivdi3+0x5d0>
 4007a78:	1463c83a 	sub	r17,r2,r17
 4007a7c:	8809883a 	mov	r4,r17
 4007a80:	a80b883a 	mov	r5,r21
 4007a84:	40097900 	call	4009790 <__udivsi3>
 4007a88:	8809883a 	mov	r4,r17
 4007a8c:	a80b883a 	mov	r5,r21
 4007a90:	1029883a 	mov	r20,r2
 4007a94:	40097980 	call	4009798 <__umodsi3>
 4007a98:	1004943a 	slli	r2,r2,16
 4007a9c:	bd09383a 	mul	r4,r23,r20
 4007aa0:	e0ffffcc 	andi	r3,fp,65535
 4007aa4:	10c4b03a 	or	r2,r2,r3
 4007aa8:	1100042e 	bgeu	r2,r4,4007abc <__udivdi3+0x120>
 4007aac:	8085883a 	add	r2,r16,r2
 4007ab0:	a53fffc4 	addi	r20,r20,-1
 4007ab4:	14000136 	bltu	r2,r16,4007abc <__udivdi3+0x120>
 4007ab8:	11012036 	bltu	r2,r4,4007f3c <__udivdi3+0x5a0>
 4007abc:	b004943a 	slli	r2,r22,16
 4007ac0:	d9000317 	ldw	r4,12(sp)
 4007ac4:	a084b03a 	or	r2,r20,r2
 4007ac8:	00001506 	br	4007b20 <__udivdi3+0x184>
 4007acc:	380d883a 	mov	r6,r7
 4007ad0:	29c06236 	bltu	r5,r7,4007c5c <__udivdi3+0x2c0>
 4007ad4:	00bfffd4 	movui	r2,65535
 4007ad8:	11c05a36 	bltu	r2,r7,4007c44 <__udivdi3+0x2a8>
 4007adc:	00803fc4 	movi	r2,255
 4007ae0:	11c0fc36 	bltu	r2,r7,4007ed4 <__udivdi3+0x538>
 4007ae4:	000b883a 	mov	r5,zero
 4007ae8:	0005883a 	mov	r2,zero
 4007aec:	3084d83a 	srl	r2,r6,r2
 4007af0:	01010074 	movhi	r4,1025
 4007af4:	211a3d04 	addi	r4,r4,26868
 4007af8:	01c00804 	movi	r7,32
 4007afc:	1105883a 	add	r2,r2,r4
 4007b00:	10c00003 	ldbu	r3,0(r2)
 4007b04:	28c7883a 	add	r3,r5,r3
 4007b08:	38efc83a 	sub	r23,r7,r3
 4007b0c:	b800691e 	bne	r23,zero,4007cb4 <__udivdi3+0x318>
 4007b10:	35000136 	bltu	r6,r20,4007b18 <__udivdi3+0x17c>
 4007b14:	e4005136 	bltu	fp,r16,4007c5c <__udivdi3+0x2c0>
 4007b18:	00800044 	movi	r2,1
 4007b1c:	0009883a 	mov	r4,zero
 4007b20:	2007883a 	mov	r3,r4
 4007b24:	dfc00f17 	ldw	ra,60(sp)
 4007b28:	df000e17 	ldw	fp,56(sp)
 4007b2c:	ddc00d17 	ldw	r23,52(sp)
 4007b30:	dd800c17 	ldw	r22,48(sp)
 4007b34:	dd400b17 	ldw	r21,44(sp)
 4007b38:	dd000a17 	ldw	r20,40(sp)
 4007b3c:	dcc00917 	ldw	r19,36(sp)
 4007b40:	dc800817 	ldw	r18,32(sp)
 4007b44:	dc400717 	ldw	r17,28(sp)
 4007b48:	dc000617 	ldw	r16,24(sp)
 4007b4c:	dec01004 	addi	sp,sp,64
 4007b50:	f800283a 	ret
 4007b54:	00bfffd4 	movui	r2,65535
 4007b58:	12005036 	bltu	r2,r8,4007c9c <__udivdi3+0x300>
 4007b5c:	00803fc4 	movi	r2,255
 4007b60:	1200e836 	bltu	r2,r8,4007f04 <__udivdi3+0x568>
 4007b64:	000b883a 	mov	r5,zero
 4007b68:	0005883a 	mov	r2,zero
 4007b6c:	8084d83a 	srl	r2,r16,r2
 4007b70:	01010074 	movhi	r4,1025
 4007b74:	211a3d04 	addi	r4,r4,26868
 4007b78:	01800804 	movi	r6,32
 4007b7c:	1105883a 	add	r2,r2,r4
 4007b80:	10c00003 	ldbu	r3,0(r2)
 4007b84:	28c7883a 	add	r3,r5,r3
 4007b88:	30cbc83a 	sub	r5,r6,r3
 4007b8c:	28000626 	beq	r5,zero,4007ba8 <__udivdi3+0x20c>
 4007b90:	3145c83a 	sub	r2,r6,r5
 4007b94:	e084d83a 	srl	r2,fp,r2
 4007b98:	a146983a 	sll	r3,r20,r5
 4007b9c:	e178983a 	sll	fp,fp,r5
 4007ba0:	8160983a 	sll	r16,r16,r5
 4007ba4:	18a8b03a 	or	r20,r3,r2
 4007ba8:	802ad43a 	srli	r21,r16,16
 4007bac:	a009883a 	mov	r4,r20
 4007bb0:	85ffffcc 	andi	r23,r16,65535
 4007bb4:	a80b883a 	mov	r5,r21
 4007bb8:	40097900 	call	4009790 <__udivsi3>
 4007bbc:	a009883a 	mov	r4,r20
 4007bc0:	a80b883a 	mov	r5,r21
 4007bc4:	102d883a 	mov	r22,r2
 4007bc8:	40097980 	call	4009798 <__umodsi3>
 4007bcc:	1004943a 	slli	r2,r2,16
 4007bd0:	e006d43a 	srli	r3,fp,16
 4007bd4:	bda3383a 	mul	r17,r23,r22
 4007bd8:	10c4b03a 	or	r2,r2,r3
 4007bdc:	1440042e 	bgeu	r2,r17,4007bf0 <__udivdi3+0x254>
 4007be0:	1405883a 	add	r2,r2,r16
 4007be4:	b5bfffc4 	addi	r22,r22,-1
 4007be8:	14000136 	bltu	r2,r16,4007bf0 <__udivdi3+0x254>
 4007bec:	1440d536 	bltu	r2,r17,4007f44 <__udivdi3+0x5a8>
 4007bf0:	1463c83a 	sub	r17,r2,r17
 4007bf4:	8809883a 	mov	r4,r17
 4007bf8:	a80b883a 	mov	r5,r21
 4007bfc:	40097900 	call	4009790 <__udivsi3>
 4007c00:	8809883a 	mov	r4,r17
 4007c04:	a80b883a 	mov	r5,r21
 4007c08:	1029883a 	mov	r20,r2
 4007c0c:	40097980 	call	4009798 <__umodsi3>
 4007c10:	1004943a 	slli	r2,r2,16
 4007c14:	bd09383a 	mul	r4,r23,r20
 4007c18:	e0ffffcc 	andi	r3,fp,65535
 4007c1c:	10c4b03a 	or	r2,r2,r3
 4007c20:	1100042e 	bgeu	r2,r4,4007c34 <__udivdi3+0x298>
 4007c24:	8085883a 	add	r2,r16,r2
 4007c28:	a53fffc4 	addi	r20,r20,-1
 4007c2c:	14000136 	bltu	r2,r16,4007c34 <__udivdi3+0x298>
 4007c30:	1100c736 	bltu	r2,r4,4007f50 <__udivdi3+0x5b4>
 4007c34:	b004943a 	slli	r2,r22,16
 4007c38:	0009883a 	mov	r4,zero
 4007c3c:	a084b03a 	or	r2,r20,r2
 4007c40:	003fb706 	br	4007b20 <__udivdi3+0x184>
 4007c44:	00804034 	movhi	r2,256
 4007c48:	10bfffc4 	addi	r2,r2,-1
 4007c4c:	11c0a436 	bltu	r2,r7,4007ee0 <__udivdi3+0x544>
 4007c50:	01400404 	movi	r5,16
 4007c54:	2805883a 	mov	r2,r5
 4007c58:	003fa406 	br	4007aec <__udivdi3+0x150>
 4007c5c:	0005883a 	mov	r2,zero
 4007c60:	0009883a 	mov	r4,zero
 4007c64:	003fae06 	br	4007b20 <__udivdi3+0x184>
 4007c68:	00804034 	movhi	r2,256
 4007c6c:	10bfffc4 	addi	r2,r2,-1
 4007c70:	1400a136 	bltu	r2,r16,4007ef8 <__udivdi3+0x55c>
 4007c74:	01400404 	movi	r5,16
 4007c78:	2805883a 	mov	r2,r5
 4007c7c:	003f6006 	br	4007a00 <__udivdi3+0x64>
 4007c80:	01000044 	movi	r4,1
 4007c84:	000b883a 	mov	r5,zero
 4007c88:	40097900 	call	4009790 <__udivsi3>
 4007c8c:	1021883a 	mov	r16,r2
 4007c90:	00bfffd4 	movui	r2,65535
 4007c94:	143ff436 	bltu	r2,r16,4007c68 <__udivdi3+0x2cc>
 4007c98:	003f5506 	br	40079f0 <__udivdi3+0x54>
 4007c9c:	00804034 	movhi	r2,256
 4007ca0:	10bfffc4 	addi	r2,r2,-1
 4007ca4:	12009a36 	bltu	r2,r8,4007f10 <__udivdi3+0x574>
 4007ca8:	01400404 	movi	r5,16
 4007cac:	2805883a 	mov	r2,r5
 4007cb0:	003fae06 	br	4007b6c <__udivdi3+0x1d0>
 4007cb4:	3dc5c83a 	sub	r2,r7,r23
 4007cb8:	35c8983a 	sll	r4,r6,r23
 4007cbc:	8086d83a 	srl	r3,r16,r2
 4007cc0:	a0a2d83a 	srl	r17,r20,r2
 4007cc4:	e084d83a 	srl	r2,fp,r2
 4007cc8:	20eab03a 	or	r21,r4,r3
 4007ccc:	a82cd43a 	srli	r22,r21,16
 4007cd0:	a5c6983a 	sll	r3,r20,r23
 4007cd4:	8809883a 	mov	r4,r17
 4007cd8:	b00b883a 	mov	r5,r22
 4007cdc:	1886b03a 	or	r3,r3,r2
 4007ce0:	d8c00215 	stw	r3,8(sp)
 4007ce4:	40097900 	call	4009790 <__udivsi3>
 4007ce8:	8809883a 	mov	r4,r17
 4007cec:	b00b883a 	mov	r5,r22
 4007cf0:	1029883a 	mov	r20,r2
 4007cf4:	40097980 	call	4009798 <__umodsi3>
 4007cf8:	a8ffffcc 	andi	r3,r21,65535
 4007cfc:	d8c00515 	stw	r3,20(sp)
 4007d00:	d9000217 	ldw	r4,8(sp)
 4007d04:	d9400517 	ldw	r5,20(sp)
 4007d08:	1004943a 	slli	r2,r2,16
 4007d0c:	2006d43a 	srli	r3,r4,16
 4007d10:	85e0983a 	sll	r16,r16,r23
 4007d14:	2d23383a 	mul	r17,r5,r20
 4007d18:	10c4b03a 	or	r2,r2,r3
 4007d1c:	dc000015 	stw	r16,0(sp)
 4007d20:	1440032e 	bgeu	r2,r17,4007d30 <__udivdi3+0x394>
 4007d24:	1545883a 	add	r2,r2,r21
 4007d28:	a53fffc4 	addi	r20,r20,-1
 4007d2c:	15407f2e 	bgeu	r2,r21,4007f2c <__udivdi3+0x590>
 4007d30:	1463c83a 	sub	r17,r2,r17
 4007d34:	8809883a 	mov	r4,r17
 4007d38:	b00b883a 	mov	r5,r22
 4007d3c:	40097900 	call	4009790 <__udivsi3>
 4007d40:	8809883a 	mov	r4,r17
 4007d44:	b00b883a 	mov	r5,r22
 4007d48:	1021883a 	mov	r16,r2
 4007d4c:	40097980 	call	4009798 <__umodsi3>
 4007d50:	d8c00517 	ldw	r3,20(sp)
 4007d54:	d9000217 	ldw	r4,8(sp)
 4007d58:	1004943a 	slli	r2,r2,16
 4007d5c:	1c0f383a 	mul	r7,r3,r16
 4007d60:	20ffffcc 	andi	r3,r4,65535
 4007d64:	10e2b03a 	or	r17,r2,r3
 4007d68:	89c0032e 	bgeu	r17,r7,4007d78 <__udivdi3+0x3dc>
 4007d6c:	8d63883a 	add	r17,r17,r21
 4007d70:	843fffc4 	addi	r16,r16,-1
 4007d74:	8d40692e 	bgeu	r17,r21,4007f1c <__udivdi3+0x580>
 4007d78:	a008943a 	slli	r4,r20,16
 4007d7c:	d9400017 	ldw	r5,0(sp)
 4007d80:	89e3c83a 	sub	r17,r17,r7
 4007d84:	8110b03a 	or	r8,r16,r4
 4007d88:	280cd43a 	srli	r6,r5,16
 4007d8c:	28ffffcc 	andi	r3,r5,65535
 4007d90:	40bfffcc 	andi	r2,r8,65535
 4007d94:	400ad43a 	srli	r5,r8,16
 4007d98:	10d3383a 	mul	r9,r2,r3
 4007d9c:	1185383a 	mul	r2,r2,r6
 4007da0:	28c7383a 	mul	r3,r5,r3
 4007da4:	4808d43a 	srli	r4,r9,16
 4007da8:	298b383a 	mul	r5,r5,r6
 4007dac:	10c5883a 	add	r2,r2,r3
 4007db0:	2089883a 	add	r4,r4,r2
 4007db4:	20c0022e 	bgeu	r4,r3,4007dc0 <__udivdi3+0x424>
 4007db8:	00800074 	movhi	r2,1
 4007dbc:	288b883a 	add	r5,r5,r2
 4007dc0:	2004d43a 	srli	r2,r4,16
 4007dc4:	288b883a 	add	r5,r5,r2
 4007dc8:	89403f36 	bltu	r17,r5,4007ec8 <__udivdi3+0x52c>
 4007dcc:	89403926 	beq	r17,r5,4007eb4 <__udivdi3+0x518>
 4007dd0:	4005883a 	mov	r2,r8
 4007dd4:	0009883a 	mov	r4,zero
 4007dd8:	003f5106 	br	4007b20 <__udivdi3+0x184>
 4007ddc:	85a0983a 	sll	r16,r16,r22
 4007de0:	3585c83a 	sub	r2,r6,r22
 4007de4:	a0a2d83a 	srl	r17,r20,r2
 4007de8:	802ad43a 	srli	r21,r16,16
 4007dec:	e084d83a 	srl	r2,fp,r2
 4007df0:	a586983a 	sll	r3,r20,r22
 4007df4:	8809883a 	mov	r4,r17
 4007df8:	a80b883a 	mov	r5,r21
 4007dfc:	1886b03a 	or	r3,r3,r2
 4007e00:	d8c00115 	stw	r3,4(sp)
 4007e04:	40097900 	call	4009790 <__udivsi3>
 4007e08:	8809883a 	mov	r4,r17
 4007e0c:	a80b883a 	mov	r5,r21
 4007e10:	d8800415 	stw	r2,16(sp)
 4007e14:	40097980 	call	4009798 <__umodsi3>
 4007e18:	d9000117 	ldw	r4,4(sp)
 4007e1c:	d9400417 	ldw	r5,16(sp)
 4007e20:	1004943a 	slli	r2,r2,16
 4007e24:	85ffffcc 	andi	r23,r16,65535
 4007e28:	2006d43a 	srli	r3,r4,16
 4007e2c:	b963383a 	mul	r17,r23,r5
 4007e30:	10c4b03a 	or	r2,r2,r3
 4007e34:	1440042e 	bgeu	r2,r17,4007e48 <__udivdi3+0x4ac>
 4007e38:	297fffc4 	addi	r5,r5,-1
 4007e3c:	1405883a 	add	r2,r2,r16
 4007e40:	d9400415 	stw	r5,16(sp)
 4007e44:	1400442e 	bgeu	r2,r16,4007f58 <__udivdi3+0x5bc>
 4007e48:	1463c83a 	sub	r17,r2,r17
 4007e4c:	8809883a 	mov	r4,r17
 4007e50:	a80b883a 	mov	r5,r21
 4007e54:	40097900 	call	4009790 <__udivsi3>
 4007e58:	8809883a 	mov	r4,r17
 4007e5c:	a80b883a 	mov	r5,r21
 4007e60:	1029883a 	mov	r20,r2
 4007e64:	40097980 	call	4009798 <__umodsi3>
 4007e68:	d9400117 	ldw	r5,4(sp)
 4007e6c:	1004943a 	slli	r2,r2,16
 4007e70:	bd09383a 	mul	r4,r23,r20
 4007e74:	28ffffcc 	andi	r3,r5,65535
 4007e78:	10c6b03a 	or	r3,r2,r3
 4007e7c:	1900062e 	bgeu	r3,r4,4007e98 <__udivdi3+0x4fc>
 4007e80:	1c07883a 	add	r3,r3,r16
 4007e84:	a53fffc4 	addi	r20,r20,-1
 4007e88:	1c000336 	bltu	r3,r16,4007e98 <__udivdi3+0x4fc>
 4007e8c:	1900022e 	bgeu	r3,r4,4007e98 <__udivdi3+0x4fc>
 4007e90:	a53fffc4 	addi	r20,r20,-1
 4007e94:	1c07883a 	add	r3,r3,r16
 4007e98:	d9400417 	ldw	r5,16(sp)
 4007e9c:	e5b8983a 	sll	fp,fp,r22
 4007ea0:	1923c83a 	sub	r17,r3,r4
 4007ea4:	2804943a 	slli	r2,r5,16
 4007ea8:	a0a8b03a 	or	r20,r20,r2
 4007eac:	dd000315 	stw	r20,12(sp)
 4007eb0:	003ee106 	br	4007a38 <__udivdi3+0x9c>
 4007eb4:	2004943a 	slli	r2,r4,16
 4007eb8:	e5c8983a 	sll	r4,fp,r23
 4007ebc:	48ffffcc 	andi	r3,r9,65535
 4007ec0:	10c5883a 	add	r2,r2,r3
 4007ec4:	20bfc22e 	bgeu	r4,r2,4007dd0 <__udivdi3+0x434>
 4007ec8:	40bfffc4 	addi	r2,r8,-1
 4007ecc:	0009883a 	mov	r4,zero
 4007ed0:	003f1306 	br	4007b20 <__udivdi3+0x184>
 4007ed4:	01400204 	movi	r5,8
 4007ed8:	2805883a 	mov	r2,r5
 4007edc:	003f0306 	br	4007aec <__udivdi3+0x150>
 4007ee0:	01400604 	movi	r5,24
 4007ee4:	2805883a 	mov	r2,r5
 4007ee8:	003f0006 	br	4007aec <__udivdi3+0x150>
 4007eec:	01400204 	movi	r5,8
 4007ef0:	2805883a 	mov	r2,r5
 4007ef4:	003ec206 	br	4007a00 <__udivdi3+0x64>
 4007ef8:	01400604 	movi	r5,24
 4007efc:	2805883a 	mov	r2,r5
 4007f00:	003ebf06 	br	4007a00 <__udivdi3+0x64>
 4007f04:	01400204 	movi	r5,8
 4007f08:	2805883a 	mov	r2,r5
 4007f0c:	003f1706 	br	4007b6c <__udivdi3+0x1d0>
 4007f10:	01400604 	movi	r5,24
 4007f14:	2805883a 	mov	r2,r5
 4007f18:	003f1406 	br	4007b6c <__udivdi3+0x1d0>
 4007f1c:	89ff962e 	bgeu	r17,r7,4007d78 <__udivdi3+0x3dc>
 4007f20:	8d63883a 	add	r17,r17,r21
 4007f24:	843fffc4 	addi	r16,r16,-1
 4007f28:	003f9306 	br	4007d78 <__udivdi3+0x3dc>
 4007f2c:	147f802e 	bgeu	r2,r17,4007d30 <__udivdi3+0x394>
 4007f30:	a53fffc4 	addi	r20,r20,-1
 4007f34:	1545883a 	add	r2,r2,r21
 4007f38:	003f7d06 	br	4007d30 <__udivdi3+0x394>
 4007f3c:	a53fffc4 	addi	r20,r20,-1
 4007f40:	003ede06 	br	4007abc <__udivdi3+0x120>
 4007f44:	b5bfffc4 	addi	r22,r22,-1
 4007f48:	1405883a 	add	r2,r2,r16
 4007f4c:	003f2806 	br	4007bf0 <__udivdi3+0x254>
 4007f50:	a53fffc4 	addi	r20,r20,-1
 4007f54:	003f3706 	br	4007c34 <__udivdi3+0x298>
 4007f58:	147fbb2e 	bgeu	r2,r17,4007e48 <__udivdi3+0x4ac>
 4007f5c:	297fffc4 	addi	r5,r5,-1
 4007f60:	1405883a 	add	r2,r2,r16
 4007f64:	d9400415 	stw	r5,16(sp)
 4007f68:	003fb706 	br	4007e48 <__udivdi3+0x4ac>
 4007f6c:	b5bfffc4 	addi	r22,r22,-1
 4007f70:	1405883a 	add	r2,r2,r16
 4007f74:	003ec006 	br	4007a78 <__udivdi3+0xdc>

04007f78 <__umoddi3>:
 4007f78:	defff104 	addi	sp,sp,-60
 4007f7c:	dd800b15 	stw	r22,44(sp)
 4007f80:	dd000915 	stw	r20,36(sp)
 4007f84:	dc000515 	stw	r16,20(sp)
 4007f88:	dfc00e15 	stw	ra,56(sp)
 4007f8c:	df000d15 	stw	fp,52(sp)
 4007f90:	ddc00c15 	stw	r23,48(sp)
 4007f94:	dd400a15 	stw	r21,40(sp)
 4007f98:	dcc00815 	stw	r19,32(sp)
 4007f9c:	dc800715 	stw	r18,28(sp)
 4007fa0:	dc400615 	stw	r17,24(sp)
 4007fa4:	3021883a 	mov	r16,r6
 4007fa8:	202d883a 	mov	r22,r4
 4007fac:	2829883a 	mov	r20,r5
 4007fb0:	38002b1e 	bne	r7,zero,4008060 <__umoddi3+0xe8>
 4007fb4:	29805036 	bltu	r5,r6,40080f8 <__umoddi3+0x180>
 4007fb8:	30008a26 	beq	r6,zero,40081e4 <__umoddi3+0x26c>
 4007fbc:	00bfffd4 	movui	r2,65535
 4007fc0:	14008236 	bltu	r2,r16,40081cc <__umoddi3+0x254>
 4007fc4:	00803fc4 	movi	r2,255
 4007fc8:	14013636 	bltu	r2,r16,40084a4 <__umoddi3+0x52c>
 4007fcc:	000b883a 	mov	r5,zero
 4007fd0:	0005883a 	mov	r2,zero
 4007fd4:	8084d83a 	srl	r2,r16,r2
 4007fd8:	01010074 	movhi	r4,1025
 4007fdc:	211a3d04 	addi	r4,r4,26868
 4007fe0:	01800804 	movi	r6,32
 4007fe4:	1105883a 	add	r2,r2,r4
 4007fe8:	10c00003 	ldbu	r3,0(r2)
 4007fec:	28c7883a 	add	r3,r5,r3
 4007ff0:	30efc83a 	sub	r23,r6,r3
 4007ff4:	b800941e 	bne	r23,zero,4008248 <__umoddi3+0x2d0>
 4007ff8:	802ad43a 	srli	r21,r16,16
 4007ffc:	a423c83a 	sub	r17,r20,r16
 4008000:	0039883a 	mov	fp,zero
 4008004:	853fffcc 	andi	r20,r16,65535
 4008008:	8809883a 	mov	r4,r17
 400800c:	a80b883a 	mov	r5,r21
 4008010:	40097900 	call	4009790 <__udivsi3>
 4008014:	8809883a 	mov	r4,r17
 4008018:	a80b883a 	mov	r5,r21
 400801c:	a0a3383a 	mul	r17,r20,r2
 4008020:	40097980 	call	4009798 <__umodsi3>
 4008024:	1004943a 	slli	r2,r2,16
 4008028:	b006d43a 	srli	r3,r22,16
 400802c:	10c4b03a 	or	r2,r2,r3
 4008030:	1440032e 	bgeu	r2,r17,4008040 <__umoddi3+0xc8>
 4008034:	1405883a 	add	r2,r2,r16
 4008038:	14000136 	bltu	r2,r16,4008040 <__umoddi3+0xc8>
 400803c:	14413536 	bltu	r2,r17,4008514 <__umoddi3+0x59c>
 4008040:	1463c83a 	sub	r17,r2,r17
 4008044:	8809883a 	mov	r4,r17
 4008048:	a80b883a 	mov	r5,r21
 400804c:	40097900 	call	4009790 <__udivsi3>
 4008050:	8809883a 	mov	r4,r17
 4008054:	a0a3383a 	mul	r17,r20,r2
 4008058:	a80b883a 	mov	r5,r21
 400805c:	00004d06 	br	4008194 <__umoddi3+0x21c>
 4008060:	380d883a 	mov	r6,r7
 4008064:	29c0102e 	bgeu	r5,r7,40080a8 <__umoddi3+0x130>
 4008068:	2011883a 	mov	r8,r4
 400806c:	2813883a 	mov	r9,r5
 4008070:	4005883a 	mov	r2,r8
 4008074:	4807883a 	mov	r3,r9
 4008078:	dfc00e17 	ldw	ra,56(sp)
 400807c:	df000d17 	ldw	fp,52(sp)
 4008080:	ddc00c17 	ldw	r23,48(sp)
 4008084:	dd800b17 	ldw	r22,44(sp)
 4008088:	dd400a17 	ldw	r21,40(sp)
 400808c:	dd000917 	ldw	r20,36(sp)
 4008090:	dcc00817 	ldw	r19,32(sp)
 4008094:	dc800717 	ldw	r18,28(sp)
 4008098:	dc400617 	ldw	r17,24(sp)
 400809c:	dc000517 	ldw	r16,20(sp)
 40080a0:	dec00f04 	addi	sp,sp,60
 40080a4:	f800283a 	ret
 40080a8:	00bfffd4 	movui	r2,65535
 40080ac:	11c05a36 	bltu	r2,r7,4008218 <__umoddi3+0x2a0>
 40080b0:	00803fc4 	movi	r2,255
 40080b4:	11c0fe36 	bltu	r2,r7,40084b0 <__umoddi3+0x538>
 40080b8:	000b883a 	mov	r5,zero
 40080bc:	0005883a 	mov	r2,zero
 40080c0:	3084d83a 	srl	r2,r6,r2
 40080c4:	01010074 	movhi	r4,1025
 40080c8:	211a3d04 	addi	r4,r4,26868
 40080cc:	01c00804 	movi	r7,32
 40080d0:	1105883a 	add	r2,r2,r4
 40080d4:	10c00003 	ldbu	r3,0(r2)
 40080d8:	28c7883a 	add	r3,r5,r3
 40080dc:	38ebc83a 	sub	r21,r7,r3
 40080e0:	a800851e 	bne	r21,zero,40082f8 <__umoddi3+0x380>
 40080e4:	35005236 	bltu	r6,r20,4008230 <__umoddi3+0x2b8>
 40080e8:	b400512e 	bgeu	r22,r16,4008230 <__umoddi3+0x2b8>
 40080ec:	b011883a 	mov	r8,r22
 40080f0:	a013883a 	mov	r9,r20
 40080f4:	003fde06 	br	4008070 <__umoddi3+0xf8>
 40080f8:	00bfffd4 	movui	r2,65535
 40080fc:	11804036 	bltu	r2,r6,4008200 <__umoddi3+0x288>
 4008100:	00803fc4 	movi	r2,255
 4008104:	1180ed36 	bltu	r2,r6,40084bc <__umoddi3+0x544>
 4008108:	000b883a 	mov	r5,zero
 400810c:	0005883a 	mov	r2,zero
 4008110:	8084d83a 	srl	r2,r16,r2
 4008114:	01010074 	movhi	r4,1025
 4008118:	211a3d04 	addi	r4,r4,26868
 400811c:	01800804 	movi	r6,32
 4008120:	1105883a 	add	r2,r2,r4
 4008124:	10c00003 	ldbu	r3,0(r2)
 4008128:	28c7883a 	add	r3,r5,r3
 400812c:	30c7c83a 	sub	r3,r6,r3
 4008130:	1800bf1e 	bne	r3,zero,4008430 <__umoddi3+0x4b8>
 4008134:	0039883a 	mov	fp,zero
 4008138:	802ad43a 	srli	r21,r16,16
 400813c:	a009883a 	mov	r4,r20
 4008140:	85ffffcc 	andi	r23,r16,65535
 4008144:	a80b883a 	mov	r5,r21
 4008148:	40097900 	call	4009790 <__udivsi3>
 400814c:	a009883a 	mov	r4,r20
 4008150:	a80b883a 	mov	r5,r21
 4008154:	b8a3383a 	mul	r17,r23,r2
 4008158:	40097980 	call	4009798 <__umodsi3>
 400815c:	1004943a 	slli	r2,r2,16
 4008160:	b006d43a 	srli	r3,r22,16
 4008164:	10c4b03a 	or	r2,r2,r3
 4008168:	1440032e 	bgeu	r2,r17,4008178 <__umoddi3+0x200>
 400816c:	1405883a 	add	r2,r2,r16
 4008170:	14000136 	bltu	r2,r16,4008178 <__umoddi3+0x200>
 4008174:	1440e536 	bltu	r2,r17,400850c <__umoddi3+0x594>
 4008178:	1463c83a 	sub	r17,r2,r17
 400817c:	8809883a 	mov	r4,r17
 4008180:	a80b883a 	mov	r5,r21
 4008184:	40097900 	call	4009790 <__udivsi3>
 4008188:	8809883a 	mov	r4,r17
 400818c:	b8a3383a 	mul	r17,r23,r2
 4008190:	a80b883a 	mov	r5,r21
 4008194:	40097980 	call	4009798 <__umodsi3>
 4008198:	1004943a 	slli	r2,r2,16
 400819c:	b0ffffcc 	andi	r3,r22,65535
 40081a0:	10c4b03a 	or	r2,r2,r3
 40081a4:	1440042e 	bgeu	r2,r17,40081b8 <__umoddi3+0x240>
 40081a8:	1405883a 	add	r2,r2,r16
 40081ac:	14000236 	bltu	r2,r16,40081b8 <__umoddi3+0x240>
 40081b0:	1440012e 	bgeu	r2,r17,40081b8 <__umoddi3+0x240>
 40081b4:	1405883a 	add	r2,r2,r16
 40081b8:	1445c83a 	sub	r2,r2,r17
 40081bc:	1724d83a 	srl	r18,r2,fp
 40081c0:	0013883a 	mov	r9,zero
 40081c4:	9011883a 	mov	r8,r18
 40081c8:	003fa906 	br	4008070 <__umoddi3+0xf8>
 40081cc:	00804034 	movhi	r2,256
 40081d0:	10bfffc4 	addi	r2,r2,-1
 40081d4:	1400b036 	bltu	r2,r16,4008498 <__umoddi3+0x520>
 40081d8:	01400404 	movi	r5,16
 40081dc:	2805883a 	mov	r2,r5
 40081e0:	003f7c06 	br	4007fd4 <__umoddi3+0x5c>
 40081e4:	01000044 	movi	r4,1
 40081e8:	000b883a 	mov	r5,zero
 40081ec:	40097900 	call	4009790 <__udivsi3>
 40081f0:	1021883a 	mov	r16,r2
 40081f4:	00bfffd4 	movui	r2,65535
 40081f8:	143ff436 	bltu	r2,r16,40081cc <__umoddi3+0x254>
 40081fc:	003f7106 	br	4007fc4 <__umoddi3+0x4c>
 4008200:	00804034 	movhi	r2,256
 4008204:	10bfffc4 	addi	r2,r2,-1
 4008208:	1180af36 	bltu	r2,r6,40084c8 <__umoddi3+0x550>
 400820c:	01400404 	movi	r5,16
 4008210:	2805883a 	mov	r2,r5
 4008214:	003fbe06 	br	4008110 <__umoddi3+0x198>
 4008218:	00804034 	movhi	r2,256
 400821c:	10bfffc4 	addi	r2,r2,-1
 4008220:	11c0ac36 	bltu	r2,r7,40084d4 <__umoddi3+0x55c>
 4008224:	01400404 	movi	r5,16
 4008228:	2805883a 	mov	r2,r5
 400822c:	003fa406 	br	40080c0 <__umoddi3+0x148>
 4008230:	b409c83a 	sub	r4,r22,r16
 4008234:	b105803a 	cmpltu	r2,r22,r4
 4008238:	a187c83a 	sub	r3,r20,r6
 400823c:	18a9c83a 	sub	r20,r3,r2
 4008240:	202d883a 	mov	r22,r4
 4008244:	003fa906 	br	40080ec <__umoddi3+0x174>
 4008248:	85e0983a 	sll	r16,r16,r23
 400824c:	35c5c83a 	sub	r2,r6,r23
 4008250:	a0a2d83a 	srl	r17,r20,r2
 4008254:	802ad43a 	srli	r21,r16,16
 4008258:	b084d83a 	srl	r2,r22,r2
 400825c:	a5c6983a 	sll	r3,r20,r23
 4008260:	8809883a 	mov	r4,r17
 4008264:	a80b883a 	mov	r5,r21
 4008268:	1886b03a 	or	r3,r3,r2
 400826c:	d8c00115 	stw	r3,4(sp)
 4008270:	853fffcc 	andi	r20,r16,65535
 4008274:	40097900 	call	4009790 <__udivsi3>
 4008278:	8809883a 	mov	r4,r17
 400827c:	a80b883a 	mov	r5,r21
 4008280:	a0a3383a 	mul	r17,r20,r2
 4008284:	40097980 	call	4009798 <__umodsi3>
 4008288:	d9000117 	ldw	r4,4(sp)
 400828c:	1004943a 	slli	r2,r2,16
 4008290:	b839883a 	mov	fp,r23
 4008294:	2006d43a 	srli	r3,r4,16
 4008298:	10c4b03a 	or	r2,r2,r3
 400829c:	1440022e 	bgeu	r2,r17,40082a8 <__umoddi3+0x330>
 40082a0:	1405883a 	add	r2,r2,r16
 40082a4:	1400962e 	bgeu	r2,r16,4008500 <__umoddi3+0x588>
 40082a8:	1463c83a 	sub	r17,r2,r17
 40082ac:	8809883a 	mov	r4,r17
 40082b0:	a80b883a 	mov	r5,r21
 40082b4:	40097900 	call	4009790 <__udivsi3>
 40082b8:	8809883a 	mov	r4,r17
 40082bc:	a80b883a 	mov	r5,r21
 40082c0:	a0a3383a 	mul	r17,r20,r2
 40082c4:	40097980 	call	4009798 <__umodsi3>
 40082c8:	d9400117 	ldw	r5,4(sp)
 40082cc:	1004943a 	slli	r2,r2,16
 40082d0:	28ffffcc 	andi	r3,r5,65535
 40082d4:	10c4b03a 	or	r2,r2,r3
 40082d8:	1440042e 	bgeu	r2,r17,40082ec <__umoddi3+0x374>
 40082dc:	1405883a 	add	r2,r2,r16
 40082e0:	14000236 	bltu	r2,r16,40082ec <__umoddi3+0x374>
 40082e4:	1440012e 	bgeu	r2,r17,40082ec <__umoddi3+0x374>
 40082e8:	1405883a 	add	r2,r2,r16
 40082ec:	b5ec983a 	sll	r22,r22,r23
 40082f0:	1463c83a 	sub	r17,r2,r17
 40082f4:	003f4406 	br	4008008 <__umoddi3+0x90>
 40082f8:	3d4fc83a 	sub	r7,r7,r21
 40082fc:	3546983a 	sll	r3,r6,r21
 4008300:	81c4d83a 	srl	r2,r16,r7
 4008304:	a1e2d83a 	srl	r17,r20,r7
 4008308:	a54c983a 	sll	r6,r20,r21
 400830c:	18aeb03a 	or	r23,r3,r2
 4008310:	b828d43a 	srli	r20,r23,16
 4008314:	b1c4d83a 	srl	r2,r22,r7
 4008318:	8809883a 	mov	r4,r17
 400831c:	a00b883a 	mov	r5,r20
 4008320:	308cb03a 	or	r6,r6,r2
 4008324:	d9c00315 	stw	r7,12(sp)
 4008328:	d9800215 	stw	r6,8(sp)
 400832c:	40097900 	call	4009790 <__udivsi3>
 4008330:	8809883a 	mov	r4,r17
 4008334:	a00b883a 	mov	r5,r20
 4008338:	1039883a 	mov	fp,r2
 400833c:	40097980 	call	4009798 <__umodsi3>
 4008340:	b8ffffcc 	andi	r3,r23,65535
 4008344:	d8c00415 	stw	r3,16(sp)
 4008348:	d9000217 	ldw	r4,8(sp)
 400834c:	d9400417 	ldw	r5,16(sp)
 4008350:	1004943a 	slli	r2,r2,16
 4008354:	2006d43a 	srli	r3,r4,16
 4008358:	8560983a 	sll	r16,r16,r21
 400835c:	2f23383a 	mul	r17,r5,fp
 4008360:	10c4b03a 	or	r2,r2,r3
 4008364:	dc000015 	stw	r16,0(sp)
 4008368:	b56c983a 	sll	r22,r22,r21
 400836c:	1440032e 	bgeu	r2,r17,400837c <__umoddi3+0x404>
 4008370:	15c5883a 	add	r2,r2,r23
 4008374:	e73fffc4 	addi	fp,fp,-1
 4008378:	15c05d2e 	bgeu	r2,r23,40084f0 <__umoddi3+0x578>
 400837c:	1463c83a 	sub	r17,r2,r17
 4008380:	8809883a 	mov	r4,r17
 4008384:	a00b883a 	mov	r5,r20
 4008388:	40097900 	call	4009790 <__udivsi3>
 400838c:	8809883a 	mov	r4,r17
 4008390:	a00b883a 	mov	r5,r20
 4008394:	1021883a 	mov	r16,r2
 4008398:	40097980 	call	4009798 <__umodsi3>
 400839c:	d8c00417 	ldw	r3,16(sp)
 40083a0:	d9000217 	ldw	r4,8(sp)
 40083a4:	1004943a 	slli	r2,r2,16
 40083a8:	1c23383a 	mul	r17,r3,r16
 40083ac:	20ffffcc 	andi	r3,r4,65535
 40083b0:	10ceb03a 	or	r7,r2,r3
 40083b4:	3c40032e 	bgeu	r7,r17,40083c4 <__umoddi3+0x44c>
 40083b8:	3dcf883a 	add	r7,r7,r23
 40083bc:	843fffc4 	addi	r16,r16,-1
 40083c0:	3dc0472e 	bgeu	r7,r23,40084e0 <__umoddi3+0x568>
 40083c4:	e004943a 	slli	r2,fp,16
 40083c8:	d9400017 	ldw	r5,0(sp)
 40083cc:	3c4fc83a 	sub	r7,r7,r17
 40083d0:	8084b03a 	or	r2,r16,r2
 40083d4:	28ffffcc 	andi	r3,r5,65535
 40083d8:	280cd43a 	srli	r6,r5,16
 40083dc:	100ad43a 	srli	r5,r2,16
 40083e0:	10bfffcc 	andi	r2,r2,65535
 40083e4:	10d1383a 	mul	r8,r2,r3
 40083e8:	28c7383a 	mul	r3,r5,r3
 40083ec:	1185383a 	mul	r2,r2,r6
 40083f0:	4008d43a 	srli	r4,r8,16
 40083f4:	298b383a 	mul	r5,r5,r6
 40083f8:	10c5883a 	add	r2,r2,r3
 40083fc:	2089883a 	add	r4,r4,r2
 4008400:	20c0022e 	bgeu	r4,r3,400840c <__umoddi3+0x494>
 4008404:	00800074 	movhi	r2,1
 4008408:	288b883a 	add	r5,r5,r2
 400840c:	2004d43a 	srli	r2,r4,16
 4008410:	2008943a 	slli	r4,r4,16
 4008414:	40ffffcc 	andi	r3,r8,65535
 4008418:	288b883a 	add	r5,r5,r2
 400841c:	20c9883a 	add	r4,r4,r3
 4008420:	39400b36 	bltu	r7,r5,4008450 <__umoddi3+0x4d8>
 4008424:	39403d26 	beq	r7,r5,400851c <__umoddi3+0x5a4>
 4008428:	394bc83a 	sub	r5,r7,r5
 400842c:	00000f06 	br	400846c <__umoddi3+0x4f4>
 4008430:	30c5c83a 	sub	r2,r6,r3
 4008434:	1839883a 	mov	fp,r3
 4008438:	b084d83a 	srl	r2,r22,r2
 400843c:	a0c6983a 	sll	r3,r20,r3
 4008440:	8720983a 	sll	r16,r16,fp
 4008444:	b72c983a 	sll	r22,r22,fp
 4008448:	18a8b03a 	or	r20,r3,r2
 400844c:	003f3a06 	br	4008138 <__umoddi3+0x1c0>
 4008450:	d8c00017 	ldw	r3,0(sp)
 4008454:	20c5c83a 	sub	r2,r4,r3
 4008458:	2089803a 	cmpltu	r4,r4,r2
 400845c:	2dc7c83a 	sub	r3,r5,r23
 4008460:	1907c83a 	sub	r3,r3,r4
 4008464:	38cbc83a 	sub	r5,r7,r3
 4008468:	1009883a 	mov	r4,r2
 400846c:	b105c83a 	sub	r2,r22,r4
 4008470:	b087803a 	cmpltu	r3,r22,r2
 4008474:	28c7c83a 	sub	r3,r5,r3
 4008478:	d9400317 	ldw	r5,12(sp)
 400847c:	1544d83a 	srl	r2,r2,r21
 4008480:	1948983a 	sll	r4,r3,r5
 4008484:	1d46d83a 	srl	r3,r3,r21
 4008488:	20a4b03a 	or	r18,r4,r2
 400848c:	9011883a 	mov	r8,r18
 4008490:	1813883a 	mov	r9,r3
 4008494:	003ef606 	br	4008070 <__umoddi3+0xf8>
 4008498:	01400604 	movi	r5,24
 400849c:	2805883a 	mov	r2,r5
 40084a0:	003ecc06 	br	4007fd4 <__umoddi3+0x5c>
 40084a4:	01400204 	movi	r5,8
 40084a8:	2805883a 	mov	r2,r5
 40084ac:	003ec906 	br	4007fd4 <__umoddi3+0x5c>
 40084b0:	01400204 	movi	r5,8
 40084b4:	2805883a 	mov	r2,r5
 40084b8:	003f0106 	br	40080c0 <__umoddi3+0x148>
 40084bc:	01400204 	movi	r5,8
 40084c0:	2805883a 	mov	r2,r5
 40084c4:	003f1206 	br	4008110 <__umoddi3+0x198>
 40084c8:	01400604 	movi	r5,24
 40084cc:	2805883a 	mov	r2,r5
 40084d0:	003f0f06 	br	4008110 <__umoddi3+0x198>
 40084d4:	01400604 	movi	r5,24
 40084d8:	2805883a 	mov	r2,r5
 40084dc:	003ef806 	br	40080c0 <__umoddi3+0x148>
 40084e0:	3c7fb82e 	bgeu	r7,r17,40083c4 <__umoddi3+0x44c>
 40084e4:	843fffc4 	addi	r16,r16,-1
 40084e8:	3dcf883a 	add	r7,r7,r23
 40084ec:	003fb506 	br	40083c4 <__umoddi3+0x44c>
 40084f0:	147fa22e 	bgeu	r2,r17,400837c <__umoddi3+0x404>
 40084f4:	e73fffc4 	addi	fp,fp,-1
 40084f8:	15c5883a 	add	r2,r2,r23
 40084fc:	003f9f06 	br	400837c <__umoddi3+0x404>
 4008500:	147f692e 	bgeu	r2,r17,40082a8 <__umoddi3+0x330>
 4008504:	1405883a 	add	r2,r2,r16
 4008508:	003f6706 	br	40082a8 <__umoddi3+0x330>
 400850c:	1405883a 	add	r2,r2,r16
 4008510:	003f1906 	br	4008178 <__umoddi3+0x200>
 4008514:	1405883a 	add	r2,r2,r16
 4008518:	003ec906 	br	4008040 <__umoddi3+0xc8>
 400851c:	b13fcc36 	bltu	r22,r4,4008450 <__umoddi3+0x4d8>
 4008520:	000b883a 	mov	r5,zero
 4008524:	003fd106 	br	400846c <__umoddi3+0x4f4>

04008528 <_fpadd_parts>:
 4008528:	defff804 	addi	sp,sp,-32
 400852c:	dcc00315 	stw	r19,12(sp)
 4008530:	2027883a 	mov	r19,r4
 4008534:	21000017 	ldw	r4,0(r4)
 4008538:	00c00044 	movi	r3,1
 400853c:	dd400515 	stw	r21,20(sp)
 4008540:	dd000415 	stw	r20,16(sp)
 4008544:	ddc00715 	stw	r23,28(sp)
 4008548:	dd800615 	stw	r22,24(sp)
 400854c:	dc800215 	stw	r18,8(sp)
 4008550:	dc400115 	stw	r17,4(sp)
 4008554:	dc000015 	stw	r16,0(sp)
 4008558:	282b883a 	mov	r21,r5
 400855c:	3029883a 	mov	r20,r6
 4008560:	1900632e 	bgeu	r3,r4,40086f0 <_fpadd_parts+0x1c8>
 4008564:	28800017 	ldw	r2,0(r5)
 4008568:	1880812e 	bgeu	r3,r2,4008770 <_fpadd_parts+0x248>
 400856c:	00c00104 	movi	r3,4
 4008570:	20c0dc26 	beq	r4,r3,40088e4 <_fpadd_parts+0x3bc>
 4008574:	10c07e26 	beq	r2,r3,4008770 <_fpadd_parts+0x248>
 4008578:	00c00084 	movi	r3,2
 400857c:	10c06726 	beq	r2,r3,400871c <_fpadd_parts+0x1f4>
 4008580:	20c07b26 	beq	r4,r3,4008770 <_fpadd_parts+0x248>
 4008584:	9dc00217 	ldw	r23,8(r19)
 4008588:	28c00217 	ldw	r3,8(r5)
 400858c:	9c400317 	ldw	r17,12(r19)
 4008590:	2bc00317 	ldw	r15,12(r5)
 4008594:	b8cdc83a 	sub	r6,r23,r3
 4008598:	9c800417 	ldw	r18,16(r19)
 400859c:	2c000417 	ldw	r16,16(r5)
 40085a0:	3009883a 	mov	r4,r6
 40085a4:	30009716 	blt	r6,zero,4008804 <_fpadd_parts+0x2dc>
 40085a8:	00800fc4 	movi	r2,63
 40085ac:	11806b16 	blt	r2,r6,400875c <_fpadd_parts+0x234>
 40085b0:	0100a40e 	bge	zero,r4,4008844 <_fpadd_parts+0x31c>
 40085b4:	35bff804 	addi	r22,r6,-32
 40085b8:	b000bc16 	blt	r22,zero,40088ac <_fpadd_parts+0x384>
 40085bc:	8596d83a 	srl	r11,r16,r22
 40085c0:	0019883a 	mov	r12,zero
 40085c4:	0013883a 	mov	r9,zero
 40085c8:	01000044 	movi	r4,1
 40085cc:	0015883a 	mov	r10,zero
 40085d0:	b000be16 	blt	r22,zero,40088cc <_fpadd_parts+0x3a4>
 40085d4:	2590983a 	sll	r8,r4,r22
 40085d8:	000f883a 	mov	r7,zero
 40085dc:	00bfffc4 	movi	r2,-1
 40085e0:	3889883a 	add	r4,r7,r2
 40085e4:	408b883a 	add	r5,r8,r2
 40085e8:	21cd803a 	cmpltu	r6,r4,r7
 40085ec:	314b883a 	add	r5,r6,r5
 40085f0:	7904703a 	and	r2,r15,r4
 40085f4:	8146703a 	and	r3,r16,r5
 40085f8:	10c4b03a 	or	r2,r2,r3
 40085fc:	10000226 	beq	r2,zero,4008608 <_fpadd_parts+0xe0>
 4008600:	02400044 	movi	r9,1
 4008604:	0015883a 	mov	r10,zero
 4008608:	5a5eb03a 	or	r15,r11,r9
 400860c:	62a0b03a 	or	r16,r12,r10
 4008610:	99400117 	ldw	r5,4(r19)
 4008614:	a8800117 	ldw	r2,4(r21)
 4008618:	28806e26 	beq	r5,r2,40087d4 <_fpadd_parts+0x2ac>
 400861c:	28006626 	beq	r5,zero,40087b8 <_fpadd_parts+0x290>
 4008620:	7c45c83a 	sub	r2,r15,r17
 4008624:	7889803a 	cmpltu	r4,r15,r2
 4008628:	8487c83a 	sub	r3,r16,r18
 400862c:	1909c83a 	sub	r4,r3,r4
 4008630:	100d883a 	mov	r6,r2
 4008634:	200f883a 	mov	r7,r4
 4008638:	38007716 	blt	r7,zero,4008818 <_fpadd_parts+0x2f0>
 400863c:	a5c00215 	stw	r23,8(r20)
 4008640:	a1c00415 	stw	r7,16(r20)
 4008644:	a0000115 	stw	zero,4(r20)
 4008648:	a1800315 	stw	r6,12(r20)
 400864c:	a2000317 	ldw	r8,12(r20)
 4008650:	a2400417 	ldw	r9,16(r20)
 4008654:	00bfffc4 	movi	r2,-1
 4008658:	408b883a 	add	r5,r8,r2
 400865c:	2a09803a 	cmpltu	r4,r5,r8
 4008660:	488d883a 	add	r6,r9,r2
 4008664:	01c40034 	movhi	r7,4096
 4008668:	39ffffc4 	addi	r7,r7,-1
 400866c:	218d883a 	add	r6,r4,r6
 4008670:	39801736 	bltu	r7,r6,40086d0 <_fpadd_parts+0x1a8>
 4008674:	31c06526 	beq	r6,r7,400880c <_fpadd_parts+0x2e4>
 4008678:	a3000217 	ldw	r12,8(r20)
 400867c:	4209883a 	add	r4,r8,r8
 4008680:	00bfffc4 	movi	r2,-1
 4008684:	220f803a 	cmpltu	r7,r4,r8
 4008688:	4a4b883a 	add	r5,r9,r9
 400868c:	394f883a 	add	r7,r7,r5
 4008690:	2095883a 	add	r10,r4,r2
 4008694:	3897883a 	add	r11,r7,r2
 4008698:	510d803a 	cmpltu	r6,r10,r4
 400869c:	6099883a 	add	r12,r12,r2
 40086a0:	32d7883a 	add	r11,r6,r11
 40086a4:	00840034 	movhi	r2,4096
 40086a8:	10bfffc4 	addi	r2,r2,-1
 40086ac:	2011883a 	mov	r8,r4
 40086b0:	3813883a 	mov	r9,r7
 40086b4:	a1000315 	stw	r4,12(r20)
 40086b8:	a1c00415 	stw	r7,16(r20)
 40086bc:	a3000215 	stw	r12,8(r20)
 40086c0:	12c00336 	bltu	r2,r11,40086d0 <_fpadd_parts+0x1a8>
 40086c4:	58bfed1e 	bne	r11,r2,400867c <_fpadd_parts+0x154>
 40086c8:	00bfff84 	movi	r2,-2
 40086cc:	12bfeb2e 	bgeu	r2,r10,400867c <_fpadd_parts+0x154>
 40086d0:	a2800417 	ldw	r10,16(r20)
 40086d4:	008000c4 	movi	r2,3
 40086d8:	00c80034 	movhi	r3,8192
 40086dc:	18ffffc4 	addi	r3,r3,-1
 40086e0:	a2400317 	ldw	r9,12(r20)
 40086e4:	a0800015 	stw	r2,0(r20)
 40086e8:	1a802336 	bltu	r3,r10,4008778 <_fpadd_parts+0x250>
 40086ec:	a027883a 	mov	r19,r20
 40086f0:	9805883a 	mov	r2,r19
 40086f4:	ddc00717 	ldw	r23,28(sp)
 40086f8:	dd800617 	ldw	r22,24(sp)
 40086fc:	dd400517 	ldw	r21,20(sp)
 4008700:	dd000417 	ldw	r20,16(sp)
 4008704:	dcc00317 	ldw	r19,12(sp)
 4008708:	dc800217 	ldw	r18,8(sp)
 400870c:	dc400117 	ldw	r17,4(sp)
 4008710:	dc000017 	ldw	r16,0(sp)
 4008714:	dec00804 	addi	sp,sp,32
 4008718:	f800283a 	ret
 400871c:	20fff41e 	bne	r4,r3,40086f0 <_fpadd_parts+0x1c8>
 4008720:	31000015 	stw	r4,0(r6)
 4008724:	98800117 	ldw	r2,4(r19)
 4008728:	30800115 	stw	r2,4(r6)
 400872c:	98c00217 	ldw	r3,8(r19)
 4008730:	30c00215 	stw	r3,8(r6)
 4008734:	98800317 	ldw	r2,12(r19)
 4008738:	30800315 	stw	r2,12(r6)
 400873c:	98c00417 	ldw	r3,16(r19)
 4008740:	30c00415 	stw	r3,16(r6)
 4008744:	98800117 	ldw	r2,4(r19)
 4008748:	28c00117 	ldw	r3,4(r5)
 400874c:	3027883a 	mov	r19,r6
 4008750:	10c4703a 	and	r2,r2,r3
 4008754:	30800115 	stw	r2,4(r6)
 4008758:	003fe506 	br	40086f0 <_fpadd_parts+0x1c8>
 400875c:	1dc02616 	blt	r3,r23,40087f8 <_fpadd_parts+0x2d0>
 4008760:	0023883a 	mov	r17,zero
 4008764:	182f883a 	mov	r23,r3
 4008768:	0025883a 	mov	r18,zero
 400876c:	003fa806 	br	4008610 <_fpadd_parts+0xe8>
 4008770:	a827883a 	mov	r19,r21
 4008774:	003fde06 	br	40086f0 <_fpadd_parts+0x1c8>
 4008778:	01800044 	movi	r6,1
 400877c:	500497fa 	slli	r2,r10,31
 4008780:	4808d07a 	srli	r4,r9,1
 4008784:	518ad83a 	srl	r5,r10,r6
 4008788:	a2000217 	ldw	r8,8(r20)
 400878c:	1108b03a 	or	r4,r2,r4
 4008790:	0007883a 	mov	r3,zero
 4008794:	4984703a 	and	r2,r9,r6
 4008798:	208cb03a 	or	r6,r4,r2
 400879c:	28ceb03a 	or	r7,r5,r3
 40087a0:	42000044 	addi	r8,r8,1
 40087a4:	a027883a 	mov	r19,r20
 40087a8:	a1c00415 	stw	r7,16(r20)
 40087ac:	a2000215 	stw	r8,8(r20)
 40087b0:	a1800315 	stw	r6,12(r20)
 40087b4:	003fce06 	br	40086f0 <_fpadd_parts+0x1c8>
 40087b8:	8bc5c83a 	sub	r2,r17,r15
 40087bc:	8889803a 	cmpltu	r4,r17,r2
 40087c0:	9407c83a 	sub	r3,r18,r16
 40087c4:	1909c83a 	sub	r4,r3,r4
 40087c8:	100d883a 	mov	r6,r2
 40087cc:	200f883a 	mov	r7,r4
 40087d0:	003f9906 	br	4008638 <_fpadd_parts+0x110>
 40087d4:	8bc5883a 	add	r2,r17,r15
 40087d8:	1449803a 	cmpltu	r4,r2,r17
 40087dc:	9407883a 	add	r3,r18,r16
 40087e0:	20c9883a 	add	r4,r4,r3
 40087e4:	a1400115 	stw	r5,4(r20)
 40087e8:	a5c00215 	stw	r23,8(r20)
 40087ec:	a0800315 	stw	r2,12(r20)
 40087f0:	a1000415 	stw	r4,16(r20)
 40087f4:	003fb606 	br	40086d0 <_fpadd_parts+0x1a8>
 40087f8:	001f883a 	mov	r15,zero
 40087fc:	0021883a 	mov	r16,zero
 4008800:	003f8306 	br	4008610 <_fpadd_parts+0xe8>
 4008804:	018dc83a 	sub	r6,zero,r6
 4008808:	003f6706 	br	40085a8 <_fpadd_parts+0x80>
 400880c:	00bfff84 	movi	r2,-2
 4008810:	117faf36 	bltu	r2,r5,40086d0 <_fpadd_parts+0x1a8>
 4008814:	003f9806 	br	4008678 <_fpadd_parts+0x150>
 4008818:	0005883a 	mov	r2,zero
 400881c:	1189c83a 	sub	r4,r2,r6
 4008820:	1105803a 	cmpltu	r2,r2,r4
 4008824:	01cbc83a 	sub	r5,zero,r7
 4008828:	2885c83a 	sub	r2,r5,r2
 400882c:	01800044 	movi	r6,1
 4008830:	a1800115 	stw	r6,4(r20)
 4008834:	a5c00215 	stw	r23,8(r20)
 4008838:	a1000315 	stw	r4,12(r20)
 400883c:	a0800415 	stw	r2,16(r20)
 4008840:	003f8206 	br	400864c <_fpadd_parts+0x124>
 4008844:	203f7226 	beq	r4,zero,4008610 <_fpadd_parts+0xe8>
 4008848:	35bff804 	addi	r22,r6,-32
 400884c:	b9af883a 	add	r23,r23,r6
 4008850:	b0003116 	blt	r22,zero,4008918 <_fpadd_parts+0x3f0>
 4008854:	959ad83a 	srl	r13,r18,r22
 4008858:	001d883a 	mov	r14,zero
 400885c:	000f883a 	mov	r7,zero
 4008860:	01000044 	movi	r4,1
 4008864:	0011883a 	mov	r8,zero
 4008868:	b0002516 	blt	r22,zero,4008900 <_fpadd_parts+0x3d8>
 400886c:	2594983a 	sll	r10,r4,r22
 4008870:	0013883a 	mov	r9,zero
 4008874:	00bfffc4 	movi	r2,-1
 4008878:	4889883a 	add	r4,r9,r2
 400887c:	508b883a 	add	r5,r10,r2
 4008880:	224d803a 	cmpltu	r6,r4,r9
 4008884:	314b883a 	add	r5,r6,r5
 4008888:	8904703a 	and	r2,r17,r4
 400888c:	9146703a 	and	r3,r18,r5
 4008890:	10c4b03a 	or	r2,r2,r3
 4008894:	10000226 	beq	r2,zero,40088a0 <_fpadd_parts+0x378>
 4008898:	01c00044 	movi	r7,1
 400889c:	0011883a 	mov	r8,zero
 40088a0:	69e2b03a 	or	r17,r13,r7
 40088a4:	7224b03a 	or	r18,r14,r8
 40088a8:	003f5906 	br	4008610 <_fpadd_parts+0xe8>
 40088ac:	8407883a 	add	r3,r16,r16
 40088b0:	008007c4 	movi	r2,31
 40088b4:	1185c83a 	sub	r2,r2,r6
 40088b8:	1886983a 	sll	r3,r3,r2
 40088bc:	7996d83a 	srl	r11,r15,r6
 40088c0:	8198d83a 	srl	r12,r16,r6
 40088c4:	1ad6b03a 	or	r11,r3,r11
 40088c8:	003f3e06 	br	40085c4 <_fpadd_parts+0x9c>
 40088cc:	2006d07a 	srli	r3,r4,1
 40088d0:	008007c4 	movi	r2,31
 40088d4:	1185c83a 	sub	r2,r2,r6
 40088d8:	1890d83a 	srl	r8,r3,r2
 40088dc:	218e983a 	sll	r7,r4,r6
 40088e0:	003f3e06 	br	40085dc <_fpadd_parts+0xb4>
 40088e4:	113f821e 	bne	r2,r4,40086f0 <_fpadd_parts+0x1c8>
 40088e8:	28c00117 	ldw	r3,4(r5)
 40088ec:	98800117 	ldw	r2,4(r19)
 40088f0:	10ff7f26 	beq	r2,r3,40086f0 <_fpadd_parts+0x1c8>
 40088f4:	04c10074 	movhi	r19,1025
 40088f8:	9cda3804 	addi	r19,r19,26848
 40088fc:	003f7c06 	br	40086f0 <_fpadd_parts+0x1c8>
 4008900:	2006d07a 	srli	r3,r4,1
 4008904:	008007c4 	movi	r2,31
 4008908:	1185c83a 	sub	r2,r2,r6
 400890c:	1894d83a 	srl	r10,r3,r2
 4008910:	2192983a 	sll	r9,r4,r6
 4008914:	003fd706 	br	4008874 <_fpadd_parts+0x34c>
 4008918:	9487883a 	add	r3,r18,r18
 400891c:	008007c4 	movi	r2,31
 4008920:	1185c83a 	sub	r2,r2,r6
 4008924:	1886983a 	sll	r3,r3,r2
 4008928:	899ad83a 	srl	r13,r17,r6
 400892c:	919cd83a 	srl	r14,r18,r6
 4008930:	1b5ab03a 	or	r13,r3,r13
 4008934:	003fc906 	br	400885c <_fpadd_parts+0x334>

04008938 <__subdf3>:
 4008938:	deffea04 	addi	sp,sp,-88
 400893c:	dcc01415 	stw	r19,80(sp)
 4008940:	dcc00404 	addi	r19,sp,16
 4008944:	2011883a 	mov	r8,r4
 4008948:	2813883a 	mov	r9,r5
 400894c:	dc401315 	stw	r17,76(sp)
 4008950:	d809883a 	mov	r4,sp
 4008954:	980b883a 	mov	r5,r19
 4008958:	dc400904 	addi	r17,sp,36
 400895c:	dfc01515 	stw	ra,84(sp)
 4008960:	da400115 	stw	r9,4(sp)
 4008964:	d9c00315 	stw	r7,12(sp)
 4008968:	da000015 	stw	r8,0(sp)
 400896c:	d9800215 	stw	r6,8(sp)
 4008970:	4009bcc0 	call	4009bcc <__unpack_d>
 4008974:	d9000204 	addi	r4,sp,8
 4008978:	880b883a 	mov	r5,r17
 400897c:	4009bcc0 	call	4009bcc <__unpack_d>
 4008980:	d8800a17 	ldw	r2,40(sp)
 4008984:	880b883a 	mov	r5,r17
 4008988:	9809883a 	mov	r4,r19
 400898c:	d9800e04 	addi	r6,sp,56
 4008990:	1080005c 	xori	r2,r2,1
 4008994:	d8800a15 	stw	r2,40(sp)
 4008998:	40085280 	call	4008528 <_fpadd_parts>
 400899c:	1009883a 	mov	r4,r2
 40089a0:	40098b80 	call	40098b8 <__pack_d>
 40089a4:	dfc01517 	ldw	ra,84(sp)
 40089a8:	dcc01417 	ldw	r19,80(sp)
 40089ac:	dc401317 	ldw	r17,76(sp)
 40089b0:	dec01604 	addi	sp,sp,88
 40089b4:	f800283a 	ret

040089b8 <__adddf3>:
 40089b8:	deffea04 	addi	sp,sp,-88
 40089bc:	dcc01415 	stw	r19,80(sp)
 40089c0:	dcc00404 	addi	r19,sp,16
 40089c4:	2011883a 	mov	r8,r4
 40089c8:	2813883a 	mov	r9,r5
 40089cc:	dc401315 	stw	r17,76(sp)
 40089d0:	d809883a 	mov	r4,sp
 40089d4:	980b883a 	mov	r5,r19
 40089d8:	dc400904 	addi	r17,sp,36
 40089dc:	dfc01515 	stw	ra,84(sp)
 40089e0:	da400115 	stw	r9,4(sp)
 40089e4:	d9c00315 	stw	r7,12(sp)
 40089e8:	da000015 	stw	r8,0(sp)
 40089ec:	d9800215 	stw	r6,8(sp)
 40089f0:	4009bcc0 	call	4009bcc <__unpack_d>
 40089f4:	d9000204 	addi	r4,sp,8
 40089f8:	880b883a 	mov	r5,r17
 40089fc:	4009bcc0 	call	4009bcc <__unpack_d>
 4008a00:	d9800e04 	addi	r6,sp,56
 4008a04:	9809883a 	mov	r4,r19
 4008a08:	880b883a 	mov	r5,r17
 4008a0c:	40085280 	call	4008528 <_fpadd_parts>
 4008a10:	1009883a 	mov	r4,r2
 4008a14:	40098b80 	call	40098b8 <__pack_d>
 4008a18:	dfc01517 	ldw	ra,84(sp)
 4008a1c:	dcc01417 	ldw	r19,80(sp)
 4008a20:	dc401317 	ldw	r17,76(sp)
 4008a24:	dec01604 	addi	sp,sp,88
 4008a28:	f800283a 	ret

04008a2c <__muldf3>:
 4008a2c:	deffe004 	addi	sp,sp,-128
 4008a30:	dc401815 	stw	r17,96(sp)
 4008a34:	dc400404 	addi	r17,sp,16
 4008a38:	2011883a 	mov	r8,r4
 4008a3c:	2813883a 	mov	r9,r5
 4008a40:	dc001715 	stw	r16,92(sp)
 4008a44:	d809883a 	mov	r4,sp
 4008a48:	880b883a 	mov	r5,r17
 4008a4c:	dc000904 	addi	r16,sp,36
 4008a50:	dfc01f15 	stw	ra,124(sp)
 4008a54:	da400115 	stw	r9,4(sp)
 4008a58:	d9c00315 	stw	r7,12(sp)
 4008a5c:	da000015 	stw	r8,0(sp)
 4008a60:	d9800215 	stw	r6,8(sp)
 4008a64:	ddc01e15 	stw	r23,120(sp)
 4008a68:	dd801d15 	stw	r22,116(sp)
 4008a6c:	dd401c15 	stw	r21,112(sp)
 4008a70:	dd001b15 	stw	r20,108(sp)
 4008a74:	dcc01a15 	stw	r19,104(sp)
 4008a78:	dc801915 	stw	r18,100(sp)
 4008a7c:	4009bcc0 	call	4009bcc <__unpack_d>
 4008a80:	d9000204 	addi	r4,sp,8
 4008a84:	800b883a 	mov	r5,r16
 4008a88:	4009bcc0 	call	4009bcc <__unpack_d>
 4008a8c:	d9000417 	ldw	r4,16(sp)
 4008a90:	00800044 	movi	r2,1
 4008a94:	1100102e 	bgeu	r2,r4,4008ad8 <__muldf3+0xac>
 4008a98:	d8c00917 	ldw	r3,36(sp)
 4008a9c:	10c0062e 	bgeu	r2,r3,4008ab8 <__muldf3+0x8c>
 4008aa0:	00800104 	movi	r2,4
 4008aa4:	20800a26 	beq	r4,r2,4008ad0 <__muldf3+0xa4>
 4008aa8:	1880cc26 	beq	r3,r2,4008ddc <__muldf3+0x3b0>
 4008aac:	00800084 	movi	r2,2
 4008ab0:	20800926 	beq	r4,r2,4008ad8 <__muldf3+0xac>
 4008ab4:	1880191e 	bne	r3,r2,4008b1c <__muldf3+0xf0>
 4008ab8:	d8c00a17 	ldw	r3,40(sp)
 4008abc:	d8800517 	ldw	r2,20(sp)
 4008ac0:	8009883a 	mov	r4,r16
 4008ac4:	10c4c03a 	cmpne	r2,r2,r3
 4008ac8:	d8800a15 	stw	r2,40(sp)
 4008acc:	00000706 	br	4008aec <__muldf3+0xc0>
 4008ad0:	00800084 	movi	r2,2
 4008ad4:	1880c326 	beq	r3,r2,4008de4 <__muldf3+0x3b8>
 4008ad8:	d8800517 	ldw	r2,20(sp)
 4008adc:	d8c00a17 	ldw	r3,40(sp)
 4008ae0:	8809883a 	mov	r4,r17
 4008ae4:	10c4c03a 	cmpne	r2,r2,r3
 4008ae8:	d8800515 	stw	r2,20(sp)
 4008aec:	40098b80 	call	40098b8 <__pack_d>
 4008af0:	dfc01f17 	ldw	ra,124(sp)
 4008af4:	ddc01e17 	ldw	r23,120(sp)
 4008af8:	dd801d17 	ldw	r22,116(sp)
 4008afc:	dd401c17 	ldw	r21,112(sp)
 4008b00:	dd001b17 	ldw	r20,108(sp)
 4008b04:	dcc01a17 	ldw	r19,104(sp)
 4008b08:	dc801917 	ldw	r18,100(sp)
 4008b0c:	dc401817 	ldw	r17,96(sp)
 4008b10:	dc001717 	ldw	r16,92(sp)
 4008b14:	dec02004 	addi	sp,sp,128
 4008b18:	f800283a 	ret
 4008b1c:	dd800717 	ldw	r22,28(sp)
 4008b20:	dc800c17 	ldw	r18,48(sp)
 4008b24:	002b883a 	mov	r21,zero
 4008b28:	0023883a 	mov	r17,zero
 4008b2c:	a80b883a 	mov	r5,r21
 4008b30:	b00d883a 	mov	r6,r22
 4008b34:	880f883a 	mov	r7,r17
 4008b38:	ddc00817 	ldw	r23,32(sp)
 4008b3c:	dcc00d17 	ldw	r19,52(sp)
 4008b40:	9009883a 	mov	r4,r18
 4008b44:	40097a00 	call	40097a0 <__muldi3>
 4008b48:	001b883a 	mov	r13,zero
 4008b4c:	680f883a 	mov	r7,r13
 4008b50:	b009883a 	mov	r4,r22
 4008b54:	000b883a 	mov	r5,zero
 4008b58:	980d883a 	mov	r6,r19
 4008b5c:	b82d883a 	mov	r22,r23
 4008b60:	002f883a 	mov	r23,zero
 4008b64:	db401615 	stw	r13,88(sp)
 4008b68:	d8801315 	stw	r2,76(sp)
 4008b6c:	d8c01415 	stw	r3,80(sp)
 4008b70:	dcc01515 	stw	r19,84(sp)
 4008b74:	40097a00 	call	40097a0 <__muldi3>
 4008b78:	b00d883a 	mov	r6,r22
 4008b7c:	000b883a 	mov	r5,zero
 4008b80:	9009883a 	mov	r4,r18
 4008b84:	b80f883a 	mov	r7,r23
 4008b88:	1021883a 	mov	r16,r2
 4008b8c:	1823883a 	mov	r17,r3
 4008b90:	40097a00 	call	40097a0 <__muldi3>
 4008b94:	8085883a 	add	r2,r16,r2
 4008b98:	140d803a 	cmpltu	r6,r2,r16
 4008b9c:	88c7883a 	add	r3,r17,r3
 4008ba0:	30cd883a 	add	r6,r6,r3
 4008ba4:	1029883a 	mov	r20,r2
 4008ba8:	302b883a 	mov	r21,r6
 4008bac:	da801317 	ldw	r10,76(sp)
 4008bb0:	dac01417 	ldw	r11,80(sp)
 4008bb4:	db001517 	ldw	r12,84(sp)
 4008bb8:	db401617 	ldw	r13,88(sp)
 4008bbc:	3440612e 	bgeu	r6,r17,4008d44 <__muldf3+0x318>
 4008bc0:	0009883a 	mov	r4,zero
 4008bc4:	5105883a 	add	r2,r10,r4
 4008bc8:	128d803a 	cmpltu	r6,r2,r10
 4008bcc:	5d07883a 	add	r3,r11,r20
 4008bd0:	30cd883a 	add	r6,r6,r3
 4008bd4:	0021883a 	mov	r16,zero
 4008bd8:	04400044 	movi	r17,1
 4008bdc:	1025883a 	mov	r18,r2
 4008be0:	3027883a 	mov	r19,r6
 4008be4:	32c06236 	bltu	r6,r11,4008d70 <__muldf3+0x344>
 4008be8:	59807a26 	beq	r11,r6,4008dd4 <__muldf3+0x3a8>
 4008bec:	680b883a 	mov	r5,r13
 4008bf0:	b80f883a 	mov	r7,r23
 4008bf4:	6009883a 	mov	r4,r12
 4008bf8:	b00d883a 	mov	r6,r22
 4008bfc:	40097a00 	call	40097a0 <__muldi3>
 4008c00:	1009883a 	mov	r4,r2
 4008c04:	000f883a 	mov	r7,zero
 4008c08:	1545883a 	add	r2,r2,r21
 4008c0c:	1111803a 	cmpltu	r8,r2,r4
 4008c10:	19c7883a 	add	r3,r3,r7
 4008c14:	40c7883a 	add	r3,r8,r3
 4008c18:	88cb883a 	add	r5,r17,r3
 4008c1c:	d8c00617 	ldw	r3,24(sp)
 4008c20:	8089883a 	add	r4,r16,r2
 4008c24:	d8800b17 	ldw	r2,44(sp)
 4008c28:	18c00104 	addi	r3,r3,4
 4008c2c:	240d803a 	cmpltu	r6,r4,r16
 4008c30:	10c7883a 	add	r3,r2,r3
 4008c34:	2013883a 	mov	r9,r4
 4008c38:	d8800a17 	ldw	r2,40(sp)
 4008c3c:	d9000517 	ldw	r4,20(sp)
 4008c40:	314d883a 	add	r6,r6,r5
 4008c44:	3015883a 	mov	r10,r6
 4008c48:	2088c03a 	cmpne	r4,r4,r2
 4008c4c:	00880034 	movhi	r2,8192
 4008c50:	10bfffc4 	addi	r2,r2,-1
 4008c54:	d9000f15 	stw	r4,60(sp)
 4008c58:	d8c01015 	stw	r3,64(sp)
 4008c5c:	1180162e 	bgeu	r2,r6,4008cb8 <__muldf3+0x28c>
 4008c60:	1811883a 	mov	r8,r3
 4008c64:	101f883a 	mov	r15,r2
 4008c68:	980497fa 	slli	r2,r19,31
 4008c6c:	9016d07a 	srli	r11,r18,1
 4008c70:	500697fa 	slli	r3,r10,31
 4008c74:	480cd07a 	srli	r6,r9,1
 4008c78:	500ed07a 	srli	r7,r10,1
 4008c7c:	12d6b03a 	or	r11,r2,r11
 4008c80:	00800044 	movi	r2,1
 4008c84:	198cb03a 	or	r6,r3,r6
 4008c88:	4888703a 	and	r4,r9,r2
 4008c8c:	9818d07a 	srli	r12,r19,1
 4008c90:	001b883a 	mov	r13,zero
 4008c94:	03a00034 	movhi	r14,32768
 4008c98:	3013883a 	mov	r9,r6
 4008c9c:	3815883a 	mov	r10,r7
 4008ca0:	4091883a 	add	r8,r8,r2
 4008ca4:	20000226 	beq	r4,zero,4008cb0 <__muldf3+0x284>
 4008ca8:	5b64b03a 	or	r18,r11,r13
 4008cac:	63a6b03a 	or	r19,r12,r14
 4008cb0:	7abfed36 	bltu	r15,r10,4008c68 <__muldf3+0x23c>
 4008cb4:	da001015 	stw	r8,64(sp)
 4008cb8:	00840034 	movhi	r2,4096
 4008cbc:	10bfffc4 	addi	r2,r2,-1
 4008cc0:	12801436 	bltu	r2,r10,4008d14 <__muldf3+0x2e8>
 4008cc4:	da001017 	ldw	r8,64(sp)
 4008cc8:	101f883a 	mov	r15,r2
 4008ccc:	4a45883a 	add	r2,r9,r9
 4008cd0:	124d803a 	cmpltu	r6,r2,r9
 4008cd4:	5287883a 	add	r3,r10,r10
 4008cd8:	9497883a 	add	r11,r18,r18
 4008cdc:	5c8f803a 	cmpltu	r7,r11,r18
 4008ce0:	9cd9883a 	add	r12,r19,r19
 4008ce4:	01000044 	movi	r4,1
 4008ce8:	30cd883a 	add	r6,r6,r3
 4008cec:	3b0f883a 	add	r7,r7,r12
 4008cf0:	423fffc4 	addi	r8,r8,-1
 4008cf4:	1013883a 	mov	r9,r2
 4008cf8:	3015883a 	mov	r10,r6
 4008cfc:	111ab03a 	or	r13,r2,r4
 4008d00:	98003016 	blt	r19,zero,4008dc4 <__muldf3+0x398>
 4008d04:	5825883a 	mov	r18,r11
 4008d08:	3827883a 	mov	r19,r7
 4008d0c:	7abfef2e 	bgeu	r15,r10,4008ccc <__muldf3+0x2a0>
 4008d10:	da001015 	stw	r8,64(sp)
 4008d14:	00803fc4 	movi	r2,255
 4008d18:	488e703a 	and	r7,r9,r2
 4008d1c:	00802004 	movi	r2,128
 4008d20:	0007883a 	mov	r3,zero
 4008d24:	0011883a 	mov	r8,zero
 4008d28:	38801826 	beq	r7,r2,4008d8c <__muldf3+0x360>
 4008d2c:	008000c4 	movi	r2,3
 4008d30:	d9000e04 	addi	r4,sp,56
 4008d34:	da801215 	stw	r10,72(sp)
 4008d38:	d8800e15 	stw	r2,56(sp)
 4008d3c:	da401115 	stw	r9,68(sp)
 4008d40:	003f6a06 	br	4008aec <__muldf3+0xc0>
 4008d44:	89802126 	beq	r17,r6,4008dcc <__muldf3+0x3a0>
 4008d48:	0009883a 	mov	r4,zero
 4008d4c:	5105883a 	add	r2,r10,r4
 4008d50:	128d803a 	cmpltu	r6,r2,r10
 4008d54:	5d07883a 	add	r3,r11,r20
 4008d58:	30cd883a 	add	r6,r6,r3
 4008d5c:	0021883a 	mov	r16,zero
 4008d60:	0023883a 	mov	r17,zero
 4008d64:	1025883a 	mov	r18,r2
 4008d68:	3027883a 	mov	r19,r6
 4008d6c:	32ff9e2e 	bgeu	r6,r11,4008be8 <__muldf3+0x1bc>
 4008d70:	00800044 	movi	r2,1
 4008d74:	8089883a 	add	r4,r16,r2
 4008d78:	240d803a 	cmpltu	r6,r4,r16
 4008d7c:	344d883a 	add	r6,r6,r17
 4008d80:	2021883a 	mov	r16,r4
 4008d84:	3023883a 	mov	r17,r6
 4008d88:	003f9806 	br	4008bec <__muldf3+0x1c0>
 4008d8c:	403fe71e 	bne	r8,zero,4008d2c <__muldf3+0x300>
 4008d90:	01004004 	movi	r4,256
 4008d94:	4904703a 	and	r2,r9,r4
 4008d98:	10c4b03a 	or	r2,r2,r3
 4008d9c:	103fe31e 	bne	r2,zero,4008d2c <__muldf3+0x300>
 4008da0:	94c4b03a 	or	r2,r18,r19
 4008da4:	103fe126 	beq	r2,zero,4008d2c <__muldf3+0x300>
 4008da8:	49c5883a 	add	r2,r9,r7
 4008dac:	1251803a 	cmpltu	r8,r2,r9
 4008db0:	4291883a 	add	r8,r8,r10
 4008db4:	013fc004 	movi	r4,-256
 4008db8:	1112703a 	and	r9,r2,r4
 4008dbc:	4015883a 	mov	r10,r8
 4008dc0:	003fda06 	br	4008d2c <__muldf3+0x300>
 4008dc4:	6813883a 	mov	r9,r13
 4008dc8:	003fce06 	br	4008d04 <__muldf3+0x2d8>
 4008dcc:	143f7c36 	bltu	r2,r16,4008bc0 <__muldf3+0x194>
 4008dd0:	003fdd06 	br	4008d48 <__muldf3+0x31c>
 4008dd4:	12bf852e 	bgeu	r2,r10,4008bec <__muldf3+0x1c0>
 4008dd8:	003fe506 	br	4008d70 <__muldf3+0x344>
 4008ddc:	00800084 	movi	r2,2
 4008de0:	20bf351e 	bne	r4,r2,4008ab8 <__muldf3+0x8c>
 4008de4:	01010074 	movhi	r4,1025
 4008de8:	211a3804 	addi	r4,r4,26848
 4008dec:	003f3f06 	br	4008aec <__muldf3+0xc0>

04008df0 <__divdf3>:
 4008df0:	deffed04 	addi	sp,sp,-76
 4008df4:	dcc01115 	stw	r19,68(sp)
 4008df8:	dcc00404 	addi	r19,sp,16
 4008dfc:	2011883a 	mov	r8,r4
 4008e00:	2813883a 	mov	r9,r5
 4008e04:	dc000e15 	stw	r16,56(sp)
 4008e08:	d809883a 	mov	r4,sp
 4008e0c:	980b883a 	mov	r5,r19
 4008e10:	dc000904 	addi	r16,sp,36
 4008e14:	dfc01215 	stw	ra,72(sp)
 4008e18:	da400115 	stw	r9,4(sp)
 4008e1c:	d9c00315 	stw	r7,12(sp)
 4008e20:	da000015 	stw	r8,0(sp)
 4008e24:	d9800215 	stw	r6,8(sp)
 4008e28:	dc801015 	stw	r18,64(sp)
 4008e2c:	dc400f15 	stw	r17,60(sp)
 4008e30:	4009bcc0 	call	4009bcc <__unpack_d>
 4008e34:	d9000204 	addi	r4,sp,8
 4008e38:	800b883a 	mov	r5,r16
 4008e3c:	4009bcc0 	call	4009bcc <__unpack_d>
 4008e40:	d9000417 	ldw	r4,16(sp)
 4008e44:	00800044 	movi	r2,1
 4008e48:	11000b2e 	bgeu	r2,r4,4008e78 <__divdf3+0x88>
 4008e4c:	d9400917 	ldw	r5,36(sp)
 4008e50:	1140762e 	bgeu	r2,r5,400902c <__divdf3+0x23c>
 4008e54:	d8800517 	ldw	r2,20(sp)
 4008e58:	d8c00a17 	ldw	r3,40(sp)
 4008e5c:	01800104 	movi	r6,4
 4008e60:	10c4f03a 	xor	r2,r2,r3
 4008e64:	d8800515 	stw	r2,20(sp)
 4008e68:	21800226 	beq	r4,r6,4008e74 <__divdf3+0x84>
 4008e6c:	00800084 	movi	r2,2
 4008e70:	2080141e 	bne	r4,r2,4008ec4 <__divdf3+0xd4>
 4008e74:	29000926 	beq	r5,r4,4008e9c <__divdf3+0xac>
 4008e78:	9809883a 	mov	r4,r19
 4008e7c:	40098b80 	call	40098b8 <__pack_d>
 4008e80:	dfc01217 	ldw	ra,72(sp)
 4008e84:	dcc01117 	ldw	r19,68(sp)
 4008e88:	dc801017 	ldw	r18,64(sp)
 4008e8c:	dc400f17 	ldw	r17,60(sp)
 4008e90:	dc000e17 	ldw	r16,56(sp)
 4008e94:	dec01304 	addi	sp,sp,76
 4008e98:	f800283a 	ret
 4008e9c:	01010074 	movhi	r4,1025
 4008ea0:	211a3804 	addi	r4,r4,26848
 4008ea4:	40098b80 	call	40098b8 <__pack_d>
 4008ea8:	dfc01217 	ldw	ra,72(sp)
 4008eac:	dcc01117 	ldw	r19,68(sp)
 4008eb0:	dc801017 	ldw	r18,64(sp)
 4008eb4:	dc400f17 	ldw	r17,60(sp)
 4008eb8:	dc000e17 	ldw	r16,56(sp)
 4008ebc:	dec01304 	addi	sp,sp,76
 4008ec0:	f800283a 	ret
 4008ec4:	29805b26 	beq	r5,r6,4009034 <__divdf3+0x244>
 4008ec8:	28802d26 	beq	r5,r2,4008f80 <__divdf3+0x190>
 4008ecc:	d8c00617 	ldw	r3,24(sp)
 4008ed0:	d8800b17 	ldw	r2,44(sp)
 4008ed4:	d9c00817 	ldw	r7,32(sp)
 4008ed8:	dc400d17 	ldw	r17,52(sp)
 4008edc:	188bc83a 	sub	r5,r3,r2
 4008ee0:	d9800717 	ldw	r6,28(sp)
 4008ee4:	dc000c17 	ldw	r16,48(sp)
 4008ee8:	d9400615 	stw	r5,24(sp)
 4008eec:	3c403836 	bltu	r7,r17,4008fd0 <__divdf3+0x1e0>
 4008ef0:	89c03626 	beq	r17,r7,4008fcc <__divdf3+0x1dc>
 4008ef4:	0015883a 	mov	r10,zero
 4008ef8:	001d883a 	mov	r14,zero
 4008efc:	02c40034 	movhi	r11,4096
 4008f00:	001f883a 	mov	r15,zero
 4008f04:	003f883a 	mov	ra,zero
 4008f08:	04800f44 	movi	r18,61
 4008f0c:	00000f06 	br	4008f4c <__divdf3+0x15c>
 4008f10:	601d883a 	mov	r14,r12
 4008f14:	681f883a 	mov	r15,r13
 4008f18:	400d883a 	mov	r6,r8
 4008f1c:	100f883a 	mov	r7,r2
 4008f20:	3191883a 	add	r8,r6,r6
 4008f24:	5808d07a 	srli	r4,r11,1
 4008f28:	4185803a 	cmpltu	r2,r8,r6
 4008f2c:	39d3883a 	add	r9,r7,r7
 4008f30:	28c6b03a 	or	r3,r5,r3
 4008f34:	1245883a 	add	r2,r2,r9
 4008f38:	1815883a 	mov	r10,r3
 4008f3c:	2017883a 	mov	r11,r4
 4008f40:	400d883a 	mov	r6,r8
 4008f44:	100f883a 	mov	r7,r2
 4008f48:	fc801726 	beq	ra,r18,4008fa8 <__divdf3+0x1b8>
 4008f4c:	580a97fa 	slli	r5,r11,31
 4008f50:	5006d07a 	srli	r3,r10,1
 4008f54:	ffc00044 	addi	ra,ra,1
 4008f58:	3c7ff136 	bltu	r7,r17,4008f20 <__divdf3+0x130>
 4008f5c:	3411c83a 	sub	r8,r6,r16
 4008f60:	3205803a 	cmpltu	r2,r6,r8
 4008f64:	3c53c83a 	sub	r9,r7,r17
 4008f68:	7298b03a 	or	r12,r14,r10
 4008f6c:	7adab03a 	or	r13,r15,r11
 4008f70:	4885c83a 	sub	r2,r9,r2
 4008f74:	89ffe61e 	bne	r17,r7,4008f10 <__divdf3+0x120>
 4008f78:	343fe936 	bltu	r6,r16,4008f20 <__divdf3+0x130>
 4008f7c:	003fe406 	br	4008f10 <__divdf3+0x120>
 4008f80:	9809883a 	mov	r4,r19
 4008f84:	d9800415 	stw	r6,16(sp)
 4008f88:	40098b80 	call	40098b8 <__pack_d>
 4008f8c:	dfc01217 	ldw	ra,72(sp)
 4008f90:	dcc01117 	ldw	r19,68(sp)
 4008f94:	dc801017 	ldw	r18,64(sp)
 4008f98:	dc400f17 	ldw	r17,60(sp)
 4008f9c:	dc000e17 	ldw	r16,56(sp)
 4008fa0:	dec01304 	addi	sp,sp,76
 4008fa4:	f800283a 	ret
 4008fa8:	00803fc4 	movi	r2,255
 4008fac:	7090703a 	and	r8,r14,r2
 4008fb0:	00802004 	movi	r2,128
 4008fb4:	0007883a 	mov	r3,zero
 4008fb8:	0013883a 	mov	r9,zero
 4008fbc:	40800d26 	beq	r8,r2,4008ff4 <__divdf3+0x204>
 4008fc0:	dbc00815 	stw	r15,32(sp)
 4008fc4:	db800715 	stw	r14,28(sp)
 4008fc8:	003fab06 	br	4008e78 <__divdf3+0x88>
 4008fcc:	343fc92e 	bgeu	r6,r16,4008ef4 <__divdf3+0x104>
 4008fd0:	3185883a 	add	r2,r6,r6
 4008fd4:	1189803a 	cmpltu	r4,r2,r6
 4008fd8:	39c7883a 	add	r3,r7,r7
 4008fdc:	20c9883a 	add	r4,r4,r3
 4008fe0:	297fffc4 	addi	r5,r5,-1
 4008fe4:	100d883a 	mov	r6,r2
 4008fe8:	200f883a 	mov	r7,r4
 4008fec:	d9400615 	stw	r5,24(sp)
 4008ff0:	003fc006 	br	4008ef4 <__divdf3+0x104>
 4008ff4:	483ff21e 	bne	r9,zero,4008fc0 <__divdf3+0x1d0>
 4008ff8:	01004004 	movi	r4,256
 4008ffc:	7104703a 	and	r2,r14,r4
 4009000:	10c4b03a 	or	r2,r2,r3
 4009004:	103fee1e 	bne	r2,zero,4008fc0 <__divdf3+0x1d0>
 4009008:	31c4b03a 	or	r2,r6,r7
 400900c:	103fec26 	beq	r2,zero,4008fc0 <__divdf3+0x1d0>
 4009010:	7205883a 	add	r2,r14,r8
 4009014:	1391803a 	cmpltu	r8,r2,r14
 4009018:	43d1883a 	add	r8,r8,r15
 400901c:	013fc004 	movi	r4,-256
 4009020:	111c703a 	and	r14,r2,r4
 4009024:	401f883a 	mov	r15,r8
 4009028:	003fe506 	br	4008fc0 <__divdf3+0x1d0>
 400902c:	8009883a 	mov	r4,r16
 4009030:	003f9206 	br	4008e7c <__divdf3+0x8c>
 4009034:	9809883a 	mov	r4,r19
 4009038:	d8000715 	stw	zero,28(sp)
 400903c:	d8000815 	stw	zero,32(sp)
 4009040:	d8000615 	stw	zero,24(sp)
 4009044:	003f8d06 	br	4008e7c <__divdf3+0x8c>

04009048 <__eqdf2>:
 4009048:	deffef04 	addi	sp,sp,-68
 400904c:	dc400f15 	stw	r17,60(sp)
 4009050:	dc400404 	addi	r17,sp,16
 4009054:	2005883a 	mov	r2,r4
 4009058:	2807883a 	mov	r3,r5
 400905c:	dc000e15 	stw	r16,56(sp)
 4009060:	d809883a 	mov	r4,sp
 4009064:	880b883a 	mov	r5,r17
 4009068:	dc000904 	addi	r16,sp,36
 400906c:	d8c00115 	stw	r3,4(sp)
 4009070:	d8800015 	stw	r2,0(sp)
 4009074:	d9800215 	stw	r6,8(sp)
 4009078:	dfc01015 	stw	ra,64(sp)
 400907c:	d9c00315 	stw	r7,12(sp)
 4009080:	4009bcc0 	call	4009bcc <__unpack_d>
 4009084:	d9000204 	addi	r4,sp,8
 4009088:	800b883a 	mov	r5,r16
 400908c:	4009bcc0 	call	4009bcc <__unpack_d>
 4009090:	d8800417 	ldw	r2,16(sp)
 4009094:	00c00044 	movi	r3,1
 4009098:	180d883a 	mov	r6,r3
 400909c:	1880062e 	bgeu	r3,r2,40090b8 <__eqdf2+0x70>
 40090a0:	d8800917 	ldw	r2,36(sp)
 40090a4:	8809883a 	mov	r4,r17
 40090a8:	800b883a 	mov	r5,r16
 40090ac:	1880022e 	bgeu	r3,r2,40090b8 <__eqdf2+0x70>
 40090b0:	4009d040 	call	4009d04 <__fpcmp_parts_d>
 40090b4:	100d883a 	mov	r6,r2
 40090b8:	3005883a 	mov	r2,r6
 40090bc:	dfc01017 	ldw	ra,64(sp)
 40090c0:	dc400f17 	ldw	r17,60(sp)
 40090c4:	dc000e17 	ldw	r16,56(sp)
 40090c8:	dec01104 	addi	sp,sp,68
 40090cc:	f800283a 	ret

040090d0 <__nedf2>:
 40090d0:	deffef04 	addi	sp,sp,-68
 40090d4:	dc400f15 	stw	r17,60(sp)
 40090d8:	dc400404 	addi	r17,sp,16
 40090dc:	2005883a 	mov	r2,r4
 40090e0:	2807883a 	mov	r3,r5
 40090e4:	dc000e15 	stw	r16,56(sp)
 40090e8:	d809883a 	mov	r4,sp
 40090ec:	880b883a 	mov	r5,r17
 40090f0:	dc000904 	addi	r16,sp,36
 40090f4:	d8c00115 	stw	r3,4(sp)
 40090f8:	d8800015 	stw	r2,0(sp)
 40090fc:	d9800215 	stw	r6,8(sp)
 4009100:	dfc01015 	stw	ra,64(sp)
 4009104:	d9c00315 	stw	r7,12(sp)
 4009108:	4009bcc0 	call	4009bcc <__unpack_d>
 400910c:	d9000204 	addi	r4,sp,8
 4009110:	800b883a 	mov	r5,r16
 4009114:	4009bcc0 	call	4009bcc <__unpack_d>
 4009118:	d8800417 	ldw	r2,16(sp)
 400911c:	00c00044 	movi	r3,1
 4009120:	180d883a 	mov	r6,r3
 4009124:	1880062e 	bgeu	r3,r2,4009140 <__nedf2+0x70>
 4009128:	d8800917 	ldw	r2,36(sp)
 400912c:	8809883a 	mov	r4,r17
 4009130:	800b883a 	mov	r5,r16
 4009134:	1880022e 	bgeu	r3,r2,4009140 <__nedf2+0x70>
 4009138:	4009d040 	call	4009d04 <__fpcmp_parts_d>
 400913c:	100d883a 	mov	r6,r2
 4009140:	3005883a 	mov	r2,r6
 4009144:	dfc01017 	ldw	ra,64(sp)
 4009148:	dc400f17 	ldw	r17,60(sp)
 400914c:	dc000e17 	ldw	r16,56(sp)
 4009150:	dec01104 	addi	sp,sp,68
 4009154:	f800283a 	ret

04009158 <__gtdf2>:
 4009158:	deffef04 	addi	sp,sp,-68
 400915c:	dc400f15 	stw	r17,60(sp)
 4009160:	dc400404 	addi	r17,sp,16
 4009164:	2005883a 	mov	r2,r4
 4009168:	2807883a 	mov	r3,r5
 400916c:	dc000e15 	stw	r16,56(sp)
 4009170:	d809883a 	mov	r4,sp
 4009174:	880b883a 	mov	r5,r17
 4009178:	dc000904 	addi	r16,sp,36
 400917c:	d8c00115 	stw	r3,4(sp)
 4009180:	d8800015 	stw	r2,0(sp)
 4009184:	d9800215 	stw	r6,8(sp)
 4009188:	dfc01015 	stw	ra,64(sp)
 400918c:	d9c00315 	stw	r7,12(sp)
 4009190:	4009bcc0 	call	4009bcc <__unpack_d>
 4009194:	d9000204 	addi	r4,sp,8
 4009198:	800b883a 	mov	r5,r16
 400919c:	4009bcc0 	call	4009bcc <__unpack_d>
 40091a0:	d8800417 	ldw	r2,16(sp)
 40091a4:	00c00044 	movi	r3,1
 40091a8:	01bfffc4 	movi	r6,-1
 40091ac:	1880062e 	bgeu	r3,r2,40091c8 <__gtdf2+0x70>
 40091b0:	d8800917 	ldw	r2,36(sp)
 40091b4:	8809883a 	mov	r4,r17
 40091b8:	800b883a 	mov	r5,r16
 40091bc:	1880022e 	bgeu	r3,r2,40091c8 <__gtdf2+0x70>
 40091c0:	4009d040 	call	4009d04 <__fpcmp_parts_d>
 40091c4:	100d883a 	mov	r6,r2
 40091c8:	3005883a 	mov	r2,r6
 40091cc:	dfc01017 	ldw	ra,64(sp)
 40091d0:	dc400f17 	ldw	r17,60(sp)
 40091d4:	dc000e17 	ldw	r16,56(sp)
 40091d8:	dec01104 	addi	sp,sp,68
 40091dc:	f800283a 	ret

040091e0 <__gedf2>:
 40091e0:	deffef04 	addi	sp,sp,-68
 40091e4:	dc400f15 	stw	r17,60(sp)
 40091e8:	dc400404 	addi	r17,sp,16
 40091ec:	2005883a 	mov	r2,r4
 40091f0:	2807883a 	mov	r3,r5
 40091f4:	dc000e15 	stw	r16,56(sp)
 40091f8:	d809883a 	mov	r4,sp
 40091fc:	880b883a 	mov	r5,r17
 4009200:	dc000904 	addi	r16,sp,36
 4009204:	d8c00115 	stw	r3,4(sp)
 4009208:	d8800015 	stw	r2,0(sp)
 400920c:	d9800215 	stw	r6,8(sp)
 4009210:	dfc01015 	stw	ra,64(sp)
 4009214:	d9c00315 	stw	r7,12(sp)
 4009218:	4009bcc0 	call	4009bcc <__unpack_d>
 400921c:	d9000204 	addi	r4,sp,8
 4009220:	800b883a 	mov	r5,r16
 4009224:	4009bcc0 	call	4009bcc <__unpack_d>
 4009228:	d8800417 	ldw	r2,16(sp)
 400922c:	00c00044 	movi	r3,1
 4009230:	01bfffc4 	movi	r6,-1
 4009234:	1880062e 	bgeu	r3,r2,4009250 <__gedf2+0x70>
 4009238:	d8800917 	ldw	r2,36(sp)
 400923c:	8809883a 	mov	r4,r17
 4009240:	800b883a 	mov	r5,r16
 4009244:	1880022e 	bgeu	r3,r2,4009250 <__gedf2+0x70>
 4009248:	4009d040 	call	4009d04 <__fpcmp_parts_d>
 400924c:	100d883a 	mov	r6,r2
 4009250:	3005883a 	mov	r2,r6
 4009254:	dfc01017 	ldw	ra,64(sp)
 4009258:	dc400f17 	ldw	r17,60(sp)
 400925c:	dc000e17 	ldw	r16,56(sp)
 4009260:	dec01104 	addi	sp,sp,68
 4009264:	f800283a 	ret

04009268 <__ltdf2>:
 4009268:	deffef04 	addi	sp,sp,-68
 400926c:	dc400f15 	stw	r17,60(sp)
 4009270:	dc400404 	addi	r17,sp,16
 4009274:	2005883a 	mov	r2,r4
 4009278:	2807883a 	mov	r3,r5
 400927c:	dc000e15 	stw	r16,56(sp)
 4009280:	d809883a 	mov	r4,sp
 4009284:	880b883a 	mov	r5,r17
 4009288:	dc000904 	addi	r16,sp,36
 400928c:	d8c00115 	stw	r3,4(sp)
 4009290:	d8800015 	stw	r2,0(sp)
 4009294:	d9800215 	stw	r6,8(sp)
 4009298:	dfc01015 	stw	ra,64(sp)
 400929c:	d9c00315 	stw	r7,12(sp)
 40092a0:	4009bcc0 	call	4009bcc <__unpack_d>
 40092a4:	d9000204 	addi	r4,sp,8
 40092a8:	800b883a 	mov	r5,r16
 40092ac:	4009bcc0 	call	4009bcc <__unpack_d>
 40092b0:	d8800417 	ldw	r2,16(sp)
 40092b4:	00c00044 	movi	r3,1
 40092b8:	180d883a 	mov	r6,r3
 40092bc:	1880062e 	bgeu	r3,r2,40092d8 <__ltdf2+0x70>
 40092c0:	d8800917 	ldw	r2,36(sp)
 40092c4:	8809883a 	mov	r4,r17
 40092c8:	800b883a 	mov	r5,r16
 40092cc:	1880022e 	bgeu	r3,r2,40092d8 <__ltdf2+0x70>
 40092d0:	4009d040 	call	4009d04 <__fpcmp_parts_d>
 40092d4:	100d883a 	mov	r6,r2
 40092d8:	3005883a 	mov	r2,r6
 40092dc:	dfc01017 	ldw	ra,64(sp)
 40092e0:	dc400f17 	ldw	r17,60(sp)
 40092e4:	dc000e17 	ldw	r16,56(sp)
 40092e8:	dec01104 	addi	sp,sp,68
 40092ec:	f800283a 	ret

040092f0 <__floatsidf>:
 40092f0:	2006d7fa 	srli	r3,r4,31
 40092f4:	defff604 	addi	sp,sp,-40
 40092f8:	008000c4 	movi	r2,3
 40092fc:	dfc00915 	stw	ra,36(sp)
 4009300:	dcc00815 	stw	r19,32(sp)
 4009304:	dc800715 	stw	r18,28(sp)
 4009308:	dc400615 	stw	r17,24(sp)
 400930c:	dc000515 	stw	r16,20(sp)
 4009310:	d8800015 	stw	r2,0(sp)
 4009314:	d8c00115 	stw	r3,4(sp)
 4009318:	20000f1e 	bne	r4,zero,4009358 <__floatsidf+0x68>
 400931c:	00800084 	movi	r2,2
 4009320:	d8800015 	stw	r2,0(sp)
 4009324:	d809883a 	mov	r4,sp
 4009328:	40098b80 	call	40098b8 <__pack_d>
 400932c:	1009883a 	mov	r4,r2
 4009330:	180b883a 	mov	r5,r3
 4009334:	2005883a 	mov	r2,r4
 4009338:	2807883a 	mov	r3,r5
 400933c:	dfc00917 	ldw	ra,36(sp)
 4009340:	dcc00817 	ldw	r19,32(sp)
 4009344:	dc800717 	ldw	r18,28(sp)
 4009348:	dc400617 	ldw	r17,24(sp)
 400934c:	dc000517 	ldw	r16,20(sp)
 4009350:	dec00a04 	addi	sp,sp,40
 4009354:	f800283a 	ret
 4009358:	00800f04 	movi	r2,60
 400935c:	1807003a 	cmpeq	r3,r3,zero
 4009360:	d8800215 	stw	r2,8(sp)
 4009364:	18001126 	beq	r3,zero,40093ac <__floatsidf+0xbc>
 4009368:	0027883a 	mov	r19,zero
 400936c:	2025883a 	mov	r18,r4
 4009370:	d9000315 	stw	r4,12(sp)
 4009374:	dcc00415 	stw	r19,16(sp)
 4009378:	40098380 	call	4009838 <__clzsi2>
 400937c:	11000744 	addi	r4,r2,29
 4009380:	013fe80e 	bge	zero,r4,4009324 <__floatsidf+0x34>
 4009384:	10bfff44 	addi	r2,r2,-3
 4009388:	10000c16 	blt	r2,zero,40093bc <__floatsidf+0xcc>
 400938c:	90a2983a 	sll	r17,r18,r2
 4009390:	0021883a 	mov	r16,zero
 4009394:	d8800217 	ldw	r2,8(sp)
 4009398:	dc400415 	stw	r17,16(sp)
 400939c:	dc000315 	stw	r16,12(sp)
 40093a0:	1105c83a 	sub	r2,r2,r4
 40093a4:	d8800215 	stw	r2,8(sp)
 40093a8:	003fde06 	br	4009324 <__floatsidf+0x34>
 40093ac:	00a00034 	movhi	r2,32768
 40093b0:	20800a26 	beq	r4,r2,40093dc <__floatsidf+0xec>
 40093b4:	0109c83a 	sub	r4,zero,r4
 40093b8:	003feb06 	br	4009368 <__floatsidf+0x78>
 40093bc:	9006d07a 	srli	r3,r18,1
 40093c0:	008007c4 	movi	r2,31
 40093c4:	1105c83a 	sub	r2,r2,r4
 40093c8:	1886d83a 	srl	r3,r3,r2
 40093cc:	9922983a 	sll	r17,r19,r4
 40093d0:	9120983a 	sll	r16,r18,r4
 40093d4:	1c62b03a 	or	r17,r3,r17
 40093d8:	003fee06 	br	4009394 <__floatsidf+0xa4>
 40093dc:	0009883a 	mov	r4,zero
 40093e0:	01707834 	movhi	r5,49632
 40093e4:	003fd306 	br	4009334 <__floatsidf+0x44>

040093e8 <__fixdfsi>:
 40093e8:	defff804 	addi	sp,sp,-32
 40093ec:	2005883a 	mov	r2,r4
 40093f0:	2807883a 	mov	r3,r5
 40093f4:	d809883a 	mov	r4,sp
 40093f8:	d9400204 	addi	r5,sp,8
 40093fc:	d8c00115 	stw	r3,4(sp)
 4009400:	d8800015 	stw	r2,0(sp)
 4009404:	dfc00715 	stw	ra,28(sp)
 4009408:	4009bcc0 	call	4009bcc <__unpack_d>
 400940c:	d8c00217 	ldw	r3,8(sp)
 4009410:	00800084 	movi	r2,2
 4009414:	1880051e 	bne	r3,r2,400942c <__fixdfsi+0x44>
 4009418:	0007883a 	mov	r3,zero
 400941c:	1805883a 	mov	r2,r3
 4009420:	dfc00717 	ldw	ra,28(sp)
 4009424:	dec00804 	addi	sp,sp,32
 4009428:	f800283a 	ret
 400942c:	00800044 	movi	r2,1
 4009430:	10fff92e 	bgeu	r2,r3,4009418 <__fixdfsi+0x30>
 4009434:	00800104 	movi	r2,4
 4009438:	18800426 	beq	r3,r2,400944c <__fixdfsi+0x64>
 400943c:	d8c00417 	ldw	r3,16(sp)
 4009440:	183ff516 	blt	r3,zero,4009418 <__fixdfsi+0x30>
 4009444:	00800784 	movi	r2,30
 4009448:	10c0080e 	bge	r2,r3,400946c <__fixdfsi+0x84>
 400944c:	d8800317 	ldw	r2,12(sp)
 4009450:	1000121e 	bne	r2,zero,400949c <__fixdfsi+0xb4>
 4009454:	00e00034 	movhi	r3,32768
 4009458:	18ffffc4 	addi	r3,r3,-1
 400945c:	1805883a 	mov	r2,r3
 4009460:	dfc00717 	ldw	ra,28(sp)
 4009464:	dec00804 	addi	sp,sp,32
 4009468:	f800283a 	ret
 400946c:	00800f04 	movi	r2,60
 4009470:	10d1c83a 	sub	r8,r2,r3
 4009474:	40bff804 	addi	r2,r8,-32
 4009478:	d9800517 	ldw	r6,20(sp)
 400947c:	d9c00617 	ldw	r7,24(sp)
 4009480:	10000816 	blt	r2,zero,40094a4 <__fixdfsi+0xbc>
 4009484:	3888d83a 	srl	r4,r7,r2
 4009488:	d8800317 	ldw	r2,12(sp)
 400948c:	2007883a 	mov	r3,r4
 4009490:	103fe226 	beq	r2,zero,400941c <__fixdfsi+0x34>
 4009494:	0107c83a 	sub	r3,zero,r4
 4009498:	003fe006 	br	400941c <__fixdfsi+0x34>
 400949c:	00e00034 	movhi	r3,32768
 40094a0:	003fde06 	br	400941c <__fixdfsi+0x34>
 40094a4:	39c7883a 	add	r3,r7,r7
 40094a8:	008007c4 	movi	r2,31
 40094ac:	1205c83a 	sub	r2,r2,r8
 40094b0:	1886983a 	sll	r3,r3,r2
 40094b4:	3208d83a 	srl	r4,r6,r8
 40094b8:	1908b03a 	or	r4,r3,r4
 40094bc:	003ff206 	br	4009488 <__fixdfsi+0xa0>

040094c0 <__floatunsidf>:
 40094c0:	defff204 	addi	sp,sp,-56
 40094c4:	dfc00d15 	stw	ra,52(sp)
 40094c8:	ddc00c15 	stw	r23,48(sp)
 40094cc:	dd800b15 	stw	r22,44(sp)
 40094d0:	dd400a15 	stw	r21,40(sp)
 40094d4:	dd000915 	stw	r20,36(sp)
 40094d8:	dcc00815 	stw	r19,32(sp)
 40094dc:	dc800715 	stw	r18,28(sp)
 40094e0:	dc400615 	stw	r17,24(sp)
 40094e4:	dc000515 	stw	r16,20(sp)
 40094e8:	d8000115 	stw	zero,4(sp)
 40094ec:	20000f1e 	bne	r4,zero,400952c <__floatunsidf+0x6c>
 40094f0:	00800084 	movi	r2,2
 40094f4:	d8800015 	stw	r2,0(sp)
 40094f8:	d809883a 	mov	r4,sp
 40094fc:	40098b80 	call	40098b8 <__pack_d>
 4009500:	dfc00d17 	ldw	ra,52(sp)
 4009504:	ddc00c17 	ldw	r23,48(sp)
 4009508:	dd800b17 	ldw	r22,44(sp)
 400950c:	dd400a17 	ldw	r21,40(sp)
 4009510:	dd000917 	ldw	r20,36(sp)
 4009514:	dcc00817 	ldw	r19,32(sp)
 4009518:	dc800717 	ldw	r18,28(sp)
 400951c:	dc400617 	ldw	r17,24(sp)
 4009520:	dc000517 	ldw	r16,20(sp)
 4009524:	dec00e04 	addi	sp,sp,56
 4009528:	f800283a 	ret
 400952c:	008000c4 	movi	r2,3
 4009530:	00c00f04 	movi	r3,60
 4009534:	002f883a 	mov	r23,zero
 4009538:	202d883a 	mov	r22,r4
 400953c:	d8800015 	stw	r2,0(sp)
 4009540:	d8c00215 	stw	r3,8(sp)
 4009544:	d9000315 	stw	r4,12(sp)
 4009548:	ddc00415 	stw	r23,16(sp)
 400954c:	40098380 	call	4009838 <__clzsi2>
 4009550:	12400744 	addi	r9,r2,29
 4009554:	48000b16 	blt	r9,zero,4009584 <__floatunsidf+0xc4>
 4009558:	483fe726 	beq	r9,zero,40094f8 <__floatunsidf+0x38>
 400955c:	10bfff44 	addi	r2,r2,-3
 4009560:	10002e16 	blt	r2,zero,400961c <__floatunsidf+0x15c>
 4009564:	b0a2983a 	sll	r17,r22,r2
 4009568:	0021883a 	mov	r16,zero
 400956c:	d8800217 	ldw	r2,8(sp)
 4009570:	dc400415 	stw	r17,16(sp)
 4009574:	dc000315 	stw	r16,12(sp)
 4009578:	1245c83a 	sub	r2,r2,r9
 400957c:	d8800215 	stw	r2,8(sp)
 4009580:	003fdd06 	br	40094f8 <__floatunsidf+0x38>
 4009584:	0255c83a 	sub	r10,zero,r9
 4009588:	51bff804 	addi	r6,r10,-32
 400958c:	30001b16 	blt	r6,zero,40095fc <__floatunsidf+0x13c>
 4009590:	b9a8d83a 	srl	r20,r23,r6
 4009594:	002b883a 	mov	r21,zero
 4009598:	000f883a 	mov	r7,zero
 400959c:	01000044 	movi	r4,1
 40095a0:	0011883a 	mov	r8,zero
 40095a4:	30002516 	blt	r6,zero,400963c <__floatunsidf+0x17c>
 40095a8:	21a6983a 	sll	r19,r4,r6
 40095ac:	0025883a 	mov	r18,zero
 40095b0:	00bfffc4 	movi	r2,-1
 40095b4:	9089883a 	add	r4,r18,r2
 40095b8:	988b883a 	add	r5,r19,r2
 40095bc:	248d803a 	cmpltu	r6,r4,r18
 40095c0:	314b883a 	add	r5,r6,r5
 40095c4:	b104703a 	and	r2,r22,r4
 40095c8:	b946703a 	and	r3,r23,r5
 40095cc:	10c4b03a 	or	r2,r2,r3
 40095d0:	10000226 	beq	r2,zero,40095dc <__floatunsidf+0x11c>
 40095d4:	01c00044 	movi	r7,1
 40095d8:	0011883a 	mov	r8,zero
 40095dc:	d9000217 	ldw	r4,8(sp)
 40095e0:	a1c4b03a 	or	r2,r20,r7
 40095e4:	aa06b03a 	or	r3,r21,r8
 40095e8:	2249c83a 	sub	r4,r4,r9
 40095ec:	d8c00415 	stw	r3,16(sp)
 40095f0:	d9000215 	stw	r4,8(sp)
 40095f4:	d8800315 	stw	r2,12(sp)
 40095f8:	003fbf06 	br	40094f8 <__floatunsidf+0x38>
 40095fc:	bdc7883a 	add	r3,r23,r23
 4009600:	008007c4 	movi	r2,31
 4009604:	1285c83a 	sub	r2,r2,r10
 4009608:	1886983a 	sll	r3,r3,r2
 400960c:	b2a8d83a 	srl	r20,r22,r10
 4009610:	baaad83a 	srl	r21,r23,r10
 4009614:	1d28b03a 	or	r20,r3,r20
 4009618:	003fdf06 	br	4009598 <__floatunsidf+0xd8>
 400961c:	b006d07a 	srli	r3,r22,1
 4009620:	008007c4 	movi	r2,31
 4009624:	1245c83a 	sub	r2,r2,r9
 4009628:	1886d83a 	srl	r3,r3,r2
 400962c:	ba62983a 	sll	r17,r23,r9
 4009630:	b260983a 	sll	r16,r22,r9
 4009634:	1c62b03a 	or	r17,r3,r17
 4009638:	003fcc06 	br	400956c <__floatunsidf+0xac>
 400963c:	2006d07a 	srli	r3,r4,1
 4009640:	008007c4 	movi	r2,31
 4009644:	1285c83a 	sub	r2,r2,r10
 4009648:	18a6d83a 	srl	r19,r3,r2
 400964c:	22a4983a 	sll	r18,r4,r10
 4009650:	003fd706 	br	40095b0 <__floatunsidf+0xf0>

04009654 <udivmodsi4>:
 4009654:	29001b2e 	bgeu	r5,r4,40096c4 <udivmodsi4+0x70>
 4009658:	28001a16 	blt	r5,zero,40096c4 <udivmodsi4+0x70>
 400965c:	00800044 	movi	r2,1
 4009660:	0007883a 	mov	r3,zero
 4009664:	01c007c4 	movi	r7,31
 4009668:	00000306 	br	4009678 <udivmodsi4+0x24>
 400966c:	19c01326 	beq	r3,r7,40096bc <udivmodsi4+0x68>
 4009670:	18c00044 	addi	r3,r3,1
 4009674:	28000416 	blt	r5,zero,4009688 <udivmodsi4+0x34>
 4009678:	294b883a 	add	r5,r5,r5
 400967c:	1085883a 	add	r2,r2,r2
 4009680:	293ffa36 	bltu	r5,r4,400966c <udivmodsi4+0x18>
 4009684:	10000d26 	beq	r2,zero,40096bc <udivmodsi4+0x68>
 4009688:	0007883a 	mov	r3,zero
 400968c:	21400236 	bltu	r4,r5,4009698 <udivmodsi4+0x44>
 4009690:	2149c83a 	sub	r4,r4,r5
 4009694:	1886b03a 	or	r3,r3,r2
 4009698:	1004d07a 	srli	r2,r2,1
 400969c:	280ad07a 	srli	r5,r5,1
 40096a0:	103ffa1e 	bne	r2,zero,400968c <udivmodsi4+0x38>
 40096a4:	30000226 	beq	r6,zero,40096b0 <udivmodsi4+0x5c>
 40096a8:	2005883a 	mov	r2,r4
 40096ac:	f800283a 	ret
 40096b0:	1809883a 	mov	r4,r3
 40096b4:	2005883a 	mov	r2,r4
 40096b8:	f800283a 	ret
 40096bc:	0007883a 	mov	r3,zero
 40096c0:	003ff806 	br	40096a4 <udivmodsi4+0x50>
 40096c4:	00800044 	movi	r2,1
 40096c8:	0007883a 	mov	r3,zero
 40096cc:	003fef06 	br	400968c <udivmodsi4+0x38>

040096d0 <__divsi3>:
 40096d0:	defffe04 	addi	sp,sp,-8
 40096d4:	dc000015 	stw	r16,0(sp)
 40096d8:	dfc00115 	stw	ra,4(sp)
 40096dc:	0021883a 	mov	r16,zero
 40096e0:	20000c16 	blt	r4,zero,4009714 <__divsi3+0x44>
 40096e4:	000d883a 	mov	r6,zero
 40096e8:	28000e16 	blt	r5,zero,4009724 <__divsi3+0x54>
 40096ec:	40096540 	call	4009654 <udivmodsi4>
 40096f0:	1007883a 	mov	r3,r2
 40096f4:	8005003a 	cmpeq	r2,r16,zero
 40096f8:	1000011e 	bne	r2,zero,4009700 <__divsi3+0x30>
 40096fc:	00c7c83a 	sub	r3,zero,r3
 4009700:	1805883a 	mov	r2,r3
 4009704:	dfc00117 	ldw	ra,4(sp)
 4009708:	dc000017 	ldw	r16,0(sp)
 400970c:	dec00204 	addi	sp,sp,8
 4009710:	f800283a 	ret
 4009714:	0109c83a 	sub	r4,zero,r4
 4009718:	04000044 	movi	r16,1
 400971c:	000d883a 	mov	r6,zero
 4009720:	283ff20e 	bge	r5,zero,40096ec <__divsi3+0x1c>
 4009724:	014bc83a 	sub	r5,zero,r5
 4009728:	8021003a 	cmpeq	r16,r16,zero
 400972c:	003fef06 	br	40096ec <__divsi3+0x1c>

04009730 <__modsi3>:
 4009730:	deffff04 	addi	sp,sp,-4
 4009734:	dfc00015 	stw	ra,0(sp)
 4009738:	01800044 	movi	r6,1
 400973c:	2807883a 	mov	r3,r5
 4009740:	20000416 	blt	r4,zero,4009754 <__modsi3+0x24>
 4009744:	28000c16 	blt	r5,zero,4009778 <__modsi3+0x48>
 4009748:	dfc00017 	ldw	ra,0(sp)
 400974c:	dec00104 	addi	sp,sp,4
 4009750:	40096541 	jmpi	4009654 <udivmodsi4>
 4009754:	0109c83a 	sub	r4,zero,r4
 4009758:	28000b16 	blt	r5,zero,4009788 <__modsi3+0x58>
 400975c:	180b883a 	mov	r5,r3
 4009760:	01800044 	movi	r6,1
 4009764:	40096540 	call	4009654 <udivmodsi4>
 4009768:	0085c83a 	sub	r2,zero,r2
 400976c:	dfc00017 	ldw	ra,0(sp)
 4009770:	dec00104 	addi	sp,sp,4
 4009774:	f800283a 	ret
 4009778:	014bc83a 	sub	r5,zero,r5
 400977c:	dfc00017 	ldw	ra,0(sp)
 4009780:	dec00104 	addi	sp,sp,4
 4009784:	40096541 	jmpi	4009654 <udivmodsi4>
 4009788:	0147c83a 	sub	r3,zero,r5
 400978c:	003ff306 	br	400975c <__modsi3+0x2c>

04009790 <__udivsi3>:
 4009790:	000d883a 	mov	r6,zero
 4009794:	40096541 	jmpi	4009654 <udivmodsi4>

04009798 <__umodsi3>:
 4009798:	01800044 	movi	r6,1
 400979c:	40096541 	jmpi	4009654 <udivmodsi4>

040097a0 <__muldi3>:
 40097a0:	2011883a 	mov	r8,r4
 40097a4:	427fffcc 	andi	r9,r8,65535
 40097a8:	4018d43a 	srli	r12,r8,16
 40097ac:	32bfffcc 	andi	r10,r6,65535
 40097b0:	3016d43a 	srli	r11,r6,16
 40097b4:	4a85383a 	mul	r2,r9,r10
 40097b8:	6295383a 	mul	r10,r12,r10
 40097bc:	4ad3383a 	mul	r9,r9,r11
 40097c0:	113fffcc 	andi	r4,r2,65535
 40097c4:	1004d43a 	srli	r2,r2,16
 40097c8:	4a93883a 	add	r9,r9,r10
 40097cc:	3807883a 	mov	r3,r7
 40097d0:	1245883a 	add	r2,r2,r9
 40097d4:	280f883a 	mov	r7,r5
 40097d8:	180b883a 	mov	r5,r3
 40097dc:	1006943a 	slli	r3,r2,16
 40097e0:	defffd04 	addi	sp,sp,-12
 40097e4:	dc800215 	stw	r18,8(sp)
 40097e8:	1907883a 	add	r3,r3,r4
 40097ec:	dc400115 	stw	r17,4(sp)
 40097f0:	dc000015 	stw	r16,0(sp)
 40097f4:	4165383a 	mul	r18,r8,r5
 40097f8:	31e3383a 	mul	r17,r6,r7
 40097fc:	1012d43a 	srli	r9,r2,16
 4009800:	62d9383a 	mul	r12,r12,r11
 4009804:	181f883a 	mov	r15,r3
 4009808:	1280022e 	bgeu	r2,r10,4009814 <__muldi3+0x74>
 400980c:	00800074 	movhi	r2,1
 4009810:	6099883a 	add	r12,r12,r2
 4009814:	624d883a 	add	r6,r12,r9
 4009818:	9187883a 	add	r3,r18,r6
 400981c:	88c7883a 	add	r3,r17,r3
 4009820:	7805883a 	mov	r2,r15
 4009824:	dc800217 	ldw	r18,8(sp)
 4009828:	dc400117 	ldw	r17,4(sp)
 400982c:	dc000017 	ldw	r16,0(sp)
 4009830:	dec00304 	addi	sp,sp,12
 4009834:	f800283a 	ret

04009838 <__clzsi2>:
 4009838:	00bfffd4 	movui	r2,65535
 400983c:	11000e36 	bltu	r2,r4,4009878 <__clzsi2+0x40>
 4009840:	00803fc4 	movi	r2,255
 4009844:	01400204 	movi	r5,8
 4009848:	0007883a 	mov	r3,zero
 400984c:	11001036 	bltu	r2,r4,4009890 <__clzsi2+0x58>
 4009850:	000b883a 	mov	r5,zero
 4009854:	20c6d83a 	srl	r3,r4,r3
 4009858:	00810074 	movhi	r2,1025
 400985c:	109a3d04 	addi	r2,r2,26868
 4009860:	1887883a 	add	r3,r3,r2
 4009864:	18800003 	ldbu	r2,0(r3)
 4009868:	00c00804 	movi	r3,32
 400986c:	2885883a 	add	r2,r5,r2
 4009870:	1885c83a 	sub	r2,r3,r2
 4009874:	f800283a 	ret
 4009878:	01400404 	movi	r5,16
 400987c:	00804034 	movhi	r2,256
 4009880:	10bfffc4 	addi	r2,r2,-1
 4009884:	2807883a 	mov	r3,r5
 4009888:	113ff22e 	bgeu	r2,r4,4009854 <__clzsi2+0x1c>
 400988c:	01400604 	movi	r5,24
 4009890:	2807883a 	mov	r3,r5
 4009894:	20c6d83a 	srl	r3,r4,r3
 4009898:	00810074 	movhi	r2,1025
 400989c:	109a3d04 	addi	r2,r2,26868
 40098a0:	1887883a 	add	r3,r3,r2
 40098a4:	18800003 	ldbu	r2,0(r3)
 40098a8:	00c00804 	movi	r3,32
 40098ac:	2885883a 	add	r2,r5,r2
 40098b0:	1885c83a 	sub	r2,r3,r2
 40098b4:	f800283a 	ret

040098b8 <__pack_d>:
 40098b8:	20c00017 	ldw	r3,0(r4)
 40098bc:	defffd04 	addi	sp,sp,-12
 40098c0:	dc000015 	stw	r16,0(sp)
 40098c4:	dc800215 	stw	r18,8(sp)
 40098c8:	dc400115 	stw	r17,4(sp)
 40098cc:	00800044 	movi	r2,1
 40098d0:	22000317 	ldw	r8,12(r4)
 40098d4:	001f883a 	mov	r15,zero
 40098d8:	22400417 	ldw	r9,16(r4)
 40098dc:	24000117 	ldw	r16,4(r4)
 40098e0:	10c0552e 	bgeu	r2,r3,4009a38 <__pack_d+0x180>
 40098e4:	00800104 	movi	r2,4
 40098e8:	18804f26 	beq	r3,r2,4009a28 <__pack_d+0x170>
 40098ec:	00800084 	movi	r2,2
 40098f0:	18800226 	beq	r3,r2,40098fc <__pack_d+0x44>
 40098f4:	4244b03a 	or	r2,r8,r9
 40098f8:	10001a1e 	bne	r2,zero,4009964 <__pack_d+0xac>
 40098fc:	000d883a 	mov	r6,zero
 4009900:	000f883a 	mov	r7,zero
 4009904:	0011883a 	mov	r8,zero
 4009908:	00800434 	movhi	r2,16
 400990c:	10bfffc4 	addi	r2,r2,-1
 4009910:	301d883a 	mov	r14,r6
 4009914:	3884703a 	and	r2,r7,r2
 4009918:	400a953a 	slli	r5,r8,20
 400991c:	79bffc2c 	andhi	r6,r15,65520
 4009920:	308cb03a 	or	r6,r6,r2
 4009924:	00e00434 	movhi	r3,32784
 4009928:	18ffffc4 	addi	r3,r3,-1
 400992c:	800497fa 	slli	r2,r16,31
 4009930:	30c6703a 	and	r3,r6,r3
 4009934:	1946b03a 	or	r3,r3,r5
 4009938:	01600034 	movhi	r5,32768
 400993c:	297fffc4 	addi	r5,r5,-1
 4009940:	194a703a 	and	r5,r3,r5
 4009944:	288ab03a 	or	r5,r5,r2
 4009948:	2807883a 	mov	r3,r5
 400994c:	7005883a 	mov	r2,r14
 4009950:	dc800217 	ldw	r18,8(sp)
 4009954:	dc400117 	ldw	r17,4(sp)
 4009958:	dc000017 	ldw	r16,0(sp)
 400995c:	dec00304 	addi	sp,sp,12
 4009960:	f800283a 	ret
 4009964:	21000217 	ldw	r4,8(r4)
 4009968:	00bf0084 	movi	r2,-1022
 400996c:	20803f16 	blt	r4,r2,4009a6c <__pack_d+0x1b4>
 4009970:	0080ffc4 	movi	r2,1023
 4009974:	11002c16 	blt	r2,r4,4009a28 <__pack_d+0x170>
 4009978:	00803fc4 	movi	r2,255
 400997c:	408c703a 	and	r6,r8,r2
 4009980:	00802004 	movi	r2,128
 4009984:	0007883a 	mov	r3,zero
 4009988:	000f883a 	mov	r7,zero
 400998c:	2280ffc4 	addi	r10,r4,1023
 4009990:	30801e26 	beq	r6,r2,4009a0c <__pack_d+0x154>
 4009994:	00801fc4 	movi	r2,127
 4009998:	4089883a 	add	r4,r8,r2
 400999c:	220d803a 	cmpltu	r6,r4,r8
 40099a0:	324d883a 	add	r6,r6,r9
 40099a4:	2011883a 	mov	r8,r4
 40099a8:	3013883a 	mov	r9,r6
 40099ac:	00880034 	movhi	r2,8192
 40099b0:	10bfffc4 	addi	r2,r2,-1
 40099b4:	12400d36 	bltu	r2,r9,40099ec <__pack_d+0x134>
 40099b8:	4804963a 	slli	r2,r9,24
 40099bc:	400cd23a 	srli	r6,r8,8
 40099c0:	480ed23a 	srli	r7,r9,8
 40099c4:	013fffc4 	movi	r4,-1
 40099c8:	118cb03a 	or	r6,r2,r6
 40099cc:	01400434 	movhi	r5,16
 40099d0:	297fffc4 	addi	r5,r5,-1
 40099d4:	3104703a 	and	r2,r6,r4
 40099d8:	3946703a 	and	r3,r7,r5
 40099dc:	5201ffcc 	andi	r8,r10,2047
 40099e0:	100d883a 	mov	r6,r2
 40099e4:	180f883a 	mov	r7,r3
 40099e8:	003fc706 	br	4009908 <__pack_d+0x50>
 40099ec:	480897fa 	slli	r4,r9,31
 40099f0:	4004d07a 	srli	r2,r8,1
 40099f4:	4806d07a 	srli	r3,r9,1
 40099f8:	52800044 	addi	r10,r10,1
 40099fc:	2084b03a 	or	r2,r4,r2
 4009a00:	1011883a 	mov	r8,r2
 4009a04:	1813883a 	mov	r9,r3
 4009a08:	003feb06 	br	40099b8 <__pack_d+0x100>
 4009a0c:	383fe11e 	bne	r7,zero,4009994 <__pack_d+0xdc>
 4009a10:	01004004 	movi	r4,256
 4009a14:	4104703a 	and	r2,r8,r4
 4009a18:	10c4b03a 	or	r2,r2,r3
 4009a1c:	103fe326 	beq	r2,zero,40099ac <__pack_d+0xf4>
 4009a20:	3005883a 	mov	r2,r6
 4009a24:	003fdc06 	br	4009998 <__pack_d+0xe0>
 4009a28:	000d883a 	mov	r6,zero
 4009a2c:	000f883a 	mov	r7,zero
 4009a30:	0201ffc4 	movi	r8,2047
 4009a34:	003fb406 	br	4009908 <__pack_d+0x50>
 4009a38:	0005883a 	mov	r2,zero
 4009a3c:	00c00234 	movhi	r3,8
 4009a40:	408cb03a 	or	r6,r8,r2
 4009a44:	48ceb03a 	or	r7,r9,r3
 4009a48:	013fffc4 	movi	r4,-1
 4009a4c:	01400434 	movhi	r5,16
 4009a50:	297fffc4 	addi	r5,r5,-1
 4009a54:	3104703a 	and	r2,r6,r4
 4009a58:	3946703a 	and	r3,r7,r5
 4009a5c:	100d883a 	mov	r6,r2
 4009a60:	180f883a 	mov	r7,r3
 4009a64:	0201ffc4 	movi	r8,2047
 4009a68:	003fa706 	br	4009908 <__pack_d+0x50>
 4009a6c:	1109c83a 	sub	r4,r2,r4
 4009a70:	00800e04 	movi	r2,56
 4009a74:	11004316 	blt	r2,r4,4009b84 <__pack_d+0x2cc>
 4009a78:	21fff804 	addi	r7,r4,-32
 4009a7c:	38004516 	blt	r7,zero,4009b94 <__pack_d+0x2dc>
 4009a80:	49d8d83a 	srl	r12,r9,r7
 4009a84:	001b883a 	mov	r13,zero
 4009a88:	0023883a 	mov	r17,zero
 4009a8c:	01400044 	movi	r5,1
 4009a90:	0025883a 	mov	r18,zero
 4009a94:	38004716 	blt	r7,zero,4009bb4 <__pack_d+0x2fc>
 4009a98:	29d6983a 	sll	r11,r5,r7
 4009a9c:	0015883a 	mov	r10,zero
 4009aa0:	00bfffc4 	movi	r2,-1
 4009aa4:	5089883a 	add	r4,r10,r2
 4009aa8:	588b883a 	add	r5,r11,r2
 4009aac:	228d803a 	cmpltu	r6,r4,r10
 4009ab0:	314b883a 	add	r5,r6,r5
 4009ab4:	4104703a 	and	r2,r8,r4
 4009ab8:	4946703a 	and	r3,r9,r5
 4009abc:	10c4b03a 	or	r2,r2,r3
 4009ac0:	10000226 	beq	r2,zero,4009acc <__pack_d+0x214>
 4009ac4:	04400044 	movi	r17,1
 4009ac8:	0025883a 	mov	r18,zero
 4009acc:	00803fc4 	movi	r2,255
 4009ad0:	644eb03a 	or	r7,r12,r17
 4009ad4:	3892703a 	and	r9,r7,r2
 4009ad8:	00802004 	movi	r2,128
 4009adc:	6c90b03a 	or	r8,r13,r18
 4009ae0:	0015883a 	mov	r10,zero
 4009ae4:	48801626 	beq	r9,r2,4009b40 <__pack_d+0x288>
 4009ae8:	01001fc4 	movi	r4,127
 4009aec:	3905883a 	add	r2,r7,r4
 4009af0:	11cd803a 	cmpltu	r6,r2,r7
 4009af4:	320d883a 	add	r6,r6,r8
 4009af8:	100f883a 	mov	r7,r2
 4009afc:	00840034 	movhi	r2,4096
 4009b00:	10bfffc4 	addi	r2,r2,-1
 4009b04:	3011883a 	mov	r8,r6
 4009b08:	0007883a 	mov	r3,zero
 4009b0c:	11801b36 	bltu	r2,r6,4009b7c <__pack_d+0x2c4>
 4009b10:	4004963a 	slli	r2,r8,24
 4009b14:	3808d23a 	srli	r4,r7,8
 4009b18:	400ad23a 	srli	r5,r8,8
 4009b1c:	1813883a 	mov	r9,r3
 4009b20:	1108b03a 	or	r4,r2,r4
 4009b24:	00bfffc4 	movi	r2,-1
 4009b28:	00c00434 	movhi	r3,16
 4009b2c:	18ffffc4 	addi	r3,r3,-1
 4009b30:	208c703a 	and	r6,r4,r2
 4009b34:	28ce703a 	and	r7,r5,r3
 4009b38:	4a01ffcc 	andi	r8,r9,2047
 4009b3c:	003f7206 	br	4009908 <__pack_d+0x50>
 4009b40:	503fe91e 	bne	r10,zero,4009ae8 <__pack_d+0x230>
 4009b44:	01004004 	movi	r4,256
 4009b48:	3904703a 	and	r2,r7,r4
 4009b4c:	0007883a 	mov	r3,zero
 4009b50:	10c4b03a 	or	r2,r2,r3
 4009b54:	10000626 	beq	r2,zero,4009b70 <__pack_d+0x2b8>
 4009b58:	3a45883a 	add	r2,r7,r9
 4009b5c:	11cd803a 	cmpltu	r6,r2,r7
 4009b60:	320d883a 	add	r6,r6,r8
 4009b64:	100f883a 	mov	r7,r2
 4009b68:	3011883a 	mov	r8,r6
 4009b6c:	0007883a 	mov	r3,zero
 4009b70:	00840034 	movhi	r2,4096
 4009b74:	10bfffc4 	addi	r2,r2,-1
 4009b78:	123fe52e 	bgeu	r2,r8,4009b10 <__pack_d+0x258>
 4009b7c:	00c00044 	movi	r3,1
 4009b80:	003fe306 	br	4009b10 <__pack_d+0x258>
 4009b84:	0009883a 	mov	r4,zero
 4009b88:	0013883a 	mov	r9,zero
 4009b8c:	000b883a 	mov	r5,zero
 4009b90:	003fe406 	br	4009b24 <__pack_d+0x26c>
 4009b94:	4a47883a 	add	r3,r9,r9
 4009b98:	008007c4 	movi	r2,31
 4009b9c:	1105c83a 	sub	r2,r2,r4
 4009ba0:	1886983a 	sll	r3,r3,r2
 4009ba4:	4118d83a 	srl	r12,r8,r4
 4009ba8:	491ad83a 	srl	r13,r9,r4
 4009bac:	1b18b03a 	or	r12,r3,r12
 4009bb0:	003fb506 	br	4009a88 <__pack_d+0x1d0>
 4009bb4:	2806d07a 	srli	r3,r5,1
 4009bb8:	008007c4 	movi	r2,31
 4009bbc:	1105c83a 	sub	r2,r2,r4
 4009bc0:	1896d83a 	srl	r11,r3,r2
 4009bc4:	2914983a 	sll	r10,r5,r4
 4009bc8:	003fb506 	br	4009aa0 <__pack_d+0x1e8>

04009bcc <__unpack_d>:
 4009bcc:	20c00117 	ldw	r3,4(r4)
 4009bd0:	22400017 	ldw	r9,0(r4)
 4009bd4:	00800434 	movhi	r2,16
 4009bd8:	10bfffc4 	addi	r2,r2,-1
 4009bdc:	1808d53a 	srli	r4,r3,20
 4009be0:	180cd7fa 	srli	r6,r3,31
 4009be4:	1894703a 	and	r10,r3,r2
 4009be8:	2201ffcc 	andi	r8,r4,2047
 4009bec:	281b883a 	mov	r13,r5
 4009bf0:	4817883a 	mov	r11,r9
 4009bf4:	29800115 	stw	r6,4(r5)
 4009bf8:	5019883a 	mov	r12,r10
 4009bfc:	40001e1e 	bne	r8,zero,4009c78 <__unpack_d+0xac>
 4009c00:	4a84b03a 	or	r2,r9,r10
 4009c04:	10001926 	beq	r2,zero,4009c6c <__unpack_d+0xa0>
 4009c08:	4804d63a 	srli	r2,r9,24
 4009c0c:	500c923a 	slli	r6,r10,8
 4009c10:	013f0084 	movi	r4,-1022
 4009c14:	00c40034 	movhi	r3,4096
 4009c18:	18ffffc4 	addi	r3,r3,-1
 4009c1c:	118cb03a 	or	r6,r2,r6
 4009c20:	008000c4 	movi	r2,3
 4009c24:	480a923a 	slli	r5,r9,8
 4009c28:	68800015 	stw	r2,0(r13)
 4009c2c:	69000215 	stw	r4,8(r13)
 4009c30:	19800b36 	bltu	r3,r6,4009c60 <__unpack_d+0x94>
 4009c34:	200f883a 	mov	r7,r4
 4009c38:	1811883a 	mov	r8,r3
 4009c3c:	2945883a 	add	r2,r5,r5
 4009c40:	1149803a 	cmpltu	r4,r2,r5
 4009c44:	3187883a 	add	r3,r6,r6
 4009c48:	20c9883a 	add	r4,r4,r3
 4009c4c:	100b883a 	mov	r5,r2
 4009c50:	200d883a 	mov	r6,r4
 4009c54:	39ffffc4 	addi	r7,r7,-1
 4009c58:	413ff82e 	bgeu	r8,r4,4009c3c <__unpack_d+0x70>
 4009c5c:	69c00215 	stw	r7,8(r13)
 4009c60:	69800415 	stw	r6,16(r13)
 4009c64:	69400315 	stw	r5,12(r13)
 4009c68:	f800283a 	ret
 4009c6c:	00800084 	movi	r2,2
 4009c70:	28800015 	stw	r2,0(r5)
 4009c74:	f800283a 	ret
 4009c78:	0081ffc4 	movi	r2,2047
 4009c7c:	40800f26 	beq	r8,r2,4009cbc <__unpack_d+0xf0>
 4009c80:	480cd63a 	srli	r6,r9,24
 4009c84:	5006923a 	slli	r3,r10,8
 4009c88:	4804923a 	slli	r2,r9,8
 4009c8c:	0009883a 	mov	r4,zero
 4009c90:	30c6b03a 	or	r3,r6,r3
 4009c94:	01440034 	movhi	r5,4096
 4009c98:	110cb03a 	or	r6,r2,r4
 4009c9c:	423f0044 	addi	r8,r8,-1023
 4009ca0:	194eb03a 	or	r7,r3,r5
 4009ca4:	008000c4 	movi	r2,3
 4009ca8:	69c00415 	stw	r7,16(r13)
 4009cac:	6a000215 	stw	r8,8(r13)
 4009cb0:	68800015 	stw	r2,0(r13)
 4009cb4:	69800315 	stw	r6,12(r13)
 4009cb8:	f800283a 	ret
 4009cbc:	4a84b03a 	or	r2,r9,r10
 4009cc0:	1000031e 	bne	r2,zero,4009cd0 <__unpack_d+0x104>
 4009cc4:	00800104 	movi	r2,4
 4009cc8:	28800015 	stw	r2,0(r5)
 4009ccc:	f800283a 	ret
 4009cd0:	0009883a 	mov	r4,zero
 4009cd4:	01400234 	movhi	r5,8
 4009cd8:	4904703a 	and	r2,r9,r4
 4009cdc:	5146703a 	and	r3,r10,r5
 4009ce0:	10c4b03a 	or	r2,r2,r3
 4009ce4:	10000526 	beq	r2,zero,4009cfc <__unpack_d+0x130>
 4009ce8:	00800044 	movi	r2,1
 4009cec:	68800015 	stw	r2,0(r13)
 4009cf0:	6b000415 	stw	r12,16(r13)
 4009cf4:	6ac00315 	stw	r11,12(r13)
 4009cf8:	f800283a 	ret
 4009cfc:	68000015 	stw	zero,0(r13)
 4009d00:	003ffb06 	br	4009cf0 <__unpack_d+0x124>

04009d04 <__fpcmp_parts_d>:
 4009d04:	21800017 	ldw	r6,0(r4)
 4009d08:	00c00044 	movi	r3,1
 4009d0c:	19800a2e 	bgeu	r3,r6,4009d38 <__fpcmp_parts_d+0x34>
 4009d10:	28800017 	ldw	r2,0(r5)
 4009d14:	1880082e 	bgeu	r3,r2,4009d38 <__fpcmp_parts_d+0x34>
 4009d18:	00c00104 	movi	r3,4
 4009d1c:	30c02626 	beq	r6,r3,4009db8 <__fpcmp_parts_d+0xb4>
 4009d20:	10c02226 	beq	r2,r3,4009dac <__fpcmp_parts_d+0xa8>
 4009d24:	00c00084 	movi	r3,2
 4009d28:	30c00526 	beq	r6,r3,4009d40 <__fpcmp_parts_d+0x3c>
 4009d2c:	10c0071e 	bne	r2,r3,4009d4c <__fpcmp_parts_d+0x48>
 4009d30:	20800117 	ldw	r2,4(r4)
 4009d34:	1000091e 	bne	r2,zero,4009d5c <__fpcmp_parts_d+0x58>
 4009d38:	00800044 	movi	r2,1
 4009d3c:	f800283a 	ret
 4009d40:	10c01a1e 	bne	r2,r3,4009dac <__fpcmp_parts_d+0xa8>
 4009d44:	0005883a 	mov	r2,zero
 4009d48:	f800283a 	ret
 4009d4c:	22000117 	ldw	r8,4(r4)
 4009d50:	28800117 	ldw	r2,4(r5)
 4009d54:	40800326 	beq	r8,r2,4009d64 <__fpcmp_parts_d+0x60>
 4009d58:	403ff726 	beq	r8,zero,4009d38 <__fpcmp_parts_d+0x34>
 4009d5c:	00bfffc4 	movi	r2,-1
 4009d60:	f800283a 	ret
 4009d64:	20c00217 	ldw	r3,8(r4)
 4009d68:	28800217 	ldw	r2,8(r5)
 4009d6c:	10fffa16 	blt	r2,r3,4009d58 <__fpcmp_parts_d+0x54>
 4009d70:	18800916 	blt	r3,r2,4009d98 <__fpcmp_parts_d+0x94>
 4009d74:	21c00417 	ldw	r7,16(r4)
 4009d78:	28c00417 	ldw	r3,16(r5)
 4009d7c:	21800317 	ldw	r6,12(r4)
 4009d80:	28800317 	ldw	r2,12(r5)
 4009d84:	19fff436 	bltu	r3,r7,4009d58 <__fpcmp_parts_d+0x54>
 4009d88:	38c00526 	beq	r7,r3,4009da0 <__fpcmp_parts_d+0x9c>
 4009d8c:	38c00236 	bltu	r7,r3,4009d98 <__fpcmp_parts_d+0x94>
 4009d90:	19ffec1e 	bne	r3,r7,4009d44 <__fpcmp_parts_d+0x40>
 4009d94:	30bfeb2e 	bgeu	r6,r2,4009d44 <__fpcmp_parts_d+0x40>
 4009d98:	403fe71e 	bne	r8,zero,4009d38 <__fpcmp_parts_d+0x34>
 4009d9c:	003fef06 	br	4009d5c <__fpcmp_parts_d+0x58>
 4009da0:	11bffa2e 	bgeu	r2,r6,4009d8c <__fpcmp_parts_d+0x88>
 4009da4:	403fe426 	beq	r8,zero,4009d38 <__fpcmp_parts_d+0x34>
 4009da8:	003fec06 	br	4009d5c <__fpcmp_parts_d+0x58>
 4009dac:	28800117 	ldw	r2,4(r5)
 4009db0:	103fe11e 	bne	r2,zero,4009d38 <__fpcmp_parts_d+0x34>
 4009db4:	003fe906 	br	4009d5c <__fpcmp_parts_d+0x58>
 4009db8:	11bfdd1e 	bne	r2,r6,4009d30 <__fpcmp_parts_d+0x2c>
 4009dbc:	28c00117 	ldw	r3,4(r5)
 4009dc0:	20800117 	ldw	r2,4(r4)
 4009dc4:	1885c83a 	sub	r2,r3,r2
 4009dc8:	f800283a 	ret

04009dcc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4009dcc:	defff804 	addi	sp,sp,-32
 4009dd0:	dfc00715 	stw	ra,28(sp)
 4009dd4:	df000615 	stw	fp,24(sp)
 4009dd8:	df000604 	addi	fp,sp,24
 4009ddc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4009de0:	e0bffc17 	ldw	r2,-16(fp)
 4009de4:	1004803a 	cmplt	r2,r2,zero
 4009de8:	1000081e 	bne	r2,zero,4009e0c <close+0x40>
 4009dec:	e0bffc17 	ldw	r2,-16(fp)
 4009df0:	10800324 	muli	r2,r2,12
 4009df4:	1007883a 	mov	r3,r2
 4009df8:	00810074 	movhi	r2,1025
 4009dfc:	109cef04 	addi	r2,r2,29628
 4009e00:	1887883a 	add	r3,r3,r2
 4009e04:	e0ffff15 	stw	r3,-4(fp)
 4009e08:	00000106 	br	4009e10 <close+0x44>
 4009e0c:	e03fff15 	stw	zero,-4(fp)
 4009e10:	e0bfff17 	ldw	r2,-4(fp)
 4009e14:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4009e18:	e0bffb17 	ldw	r2,-20(fp)
 4009e1c:	1005003a 	cmpeq	r2,r2,zero
 4009e20:	10001d1e 	bne	r2,zero,4009e98 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4009e24:	e0bffb17 	ldw	r2,-20(fp)
 4009e28:	10800017 	ldw	r2,0(r2)
 4009e2c:	10800417 	ldw	r2,16(r2)
 4009e30:	1005003a 	cmpeq	r2,r2,zero
 4009e34:	1000071e 	bne	r2,zero,4009e54 <close+0x88>
 4009e38:	e0bffb17 	ldw	r2,-20(fp)
 4009e3c:	10800017 	ldw	r2,0(r2)
 4009e40:	10800417 	ldw	r2,16(r2)
 4009e44:	e13ffb17 	ldw	r4,-20(fp)
 4009e48:	103ee83a 	callr	r2
 4009e4c:	e0bffe15 	stw	r2,-8(fp)
 4009e50:	00000106 	br	4009e58 <close+0x8c>
 4009e54:	e03ffe15 	stw	zero,-8(fp)
 4009e58:	e0bffe17 	ldw	r2,-8(fp)
 4009e5c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4009e60:	e13ffc17 	ldw	r4,-16(fp)
 4009e64:	400a5400 	call	400a540 <alt_release_fd>
    if (rval < 0)
 4009e68:	e0bffa17 	ldw	r2,-24(fp)
 4009e6c:	1004403a 	cmpge	r2,r2,zero
 4009e70:	1000071e 	bne	r2,zero,4009e90 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 4009e74:	4009ec80 	call	4009ec8 <alt_get_errno>
 4009e78:	e0fffa17 	ldw	r3,-24(fp)
 4009e7c:	00c7c83a 	sub	r3,zero,r3
 4009e80:	10c00015 	stw	r3,0(r2)
      return -1;
 4009e84:	00bfffc4 	movi	r2,-1
 4009e88:	e0bffd15 	stw	r2,-12(fp)
 4009e8c:	00000806 	br	4009eb0 <close+0xe4>
    }
    return 0;
 4009e90:	e03ffd15 	stw	zero,-12(fp)
 4009e94:	00000606 	br	4009eb0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4009e98:	4009ec80 	call	4009ec8 <alt_get_errno>
 4009e9c:	1007883a 	mov	r3,r2
 4009ea0:	00801444 	movi	r2,81
 4009ea4:	18800015 	stw	r2,0(r3)
    return -1;
 4009ea8:	00bfffc4 	movi	r2,-1
 4009eac:	e0bffd15 	stw	r2,-12(fp)
 4009eb0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 4009eb4:	e037883a 	mov	sp,fp
 4009eb8:	dfc00117 	ldw	ra,4(sp)
 4009ebc:	df000017 	ldw	fp,0(sp)
 4009ec0:	dec00204 	addi	sp,sp,8
 4009ec4:	f800283a 	ret

04009ec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009ec8:	defffd04 	addi	sp,sp,-12
 4009ecc:	dfc00215 	stw	ra,8(sp)
 4009ed0:	df000115 	stw	fp,4(sp)
 4009ed4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4009ed8:	008100b4 	movhi	r2,1026
 4009edc:	10a1a604 	addi	r2,r2,-31080
 4009ee0:	10800017 	ldw	r2,0(r2)
 4009ee4:	1005003a 	cmpeq	r2,r2,zero
 4009ee8:	1000061e 	bne	r2,zero,4009f04 <alt_get_errno+0x3c>
 4009eec:	008100b4 	movhi	r2,1026
 4009ef0:	10a1a604 	addi	r2,r2,-31080
 4009ef4:	10800017 	ldw	r2,0(r2)
 4009ef8:	103ee83a 	callr	r2
 4009efc:	e0bfff15 	stw	r2,-4(fp)
 4009f00:	00000306 	br	4009f10 <alt_get_errno+0x48>
 4009f04:	008100b4 	movhi	r2,1026
 4009f08:	10a1d504 	addi	r2,r2,-30892
 4009f0c:	e0bfff15 	stw	r2,-4(fp)
 4009f10:	e0bfff17 	ldw	r2,-4(fp)
}
 4009f14:	e037883a 	mov	sp,fp
 4009f18:	dfc00117 	ldw	ra,4(sp)
 4009f1c:	df000017 	ldw	fp,0(sp)
 4009f20:	dec00204 	addi	sp,sp,8
 4009f24:	f800283a 	ret

04009f28 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4009f28:	defffc04 	addi	sp,sp,-16
 4009f2c:	df000315 	stw	fp,12(sp)
 4009f30:	df000304 	addi	fp,sp,12
 4009f34:	e13ffd15 	stw	r4,-12(fp)
 4009f38:	e17ffe15 	stw	r5,-8(fp)
 4009f3c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4009f40:	e0bfff17 	ldw	r2,-4(fp)
}
 4009f44:	e037883a 	mov	sp,fp
 4009f48:	df000017 	ldw	fp,0(sp)
 4009f4c:	dec00104 	addi	sp,sp,4
 4009f50:	f800283a 	ret

04009f54 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4009f54:	defff904 	addi	sp,sp,-28
 4009f58:	dfc00615 	stw	ra,24(sp)
 4009f5c:	df000515 	stw	fp,20(sp)
 4009f60:	df000504 	addi	fp,sp,20
 4009f64:	e13ffc15 	stw	r4,-16(fp)
 4009f68:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4009f6c:	e0bffc17 	ldw	r2,-16(fp)
 4009f70:	1004803a 	cmplt	r2,r2,zero
 4009f74:	1000081e 	bne	r2,zero,4009f98 <fstat+0x44>
 4009f78:	e0bffc17 	ldw	r2,-16(fp)
 4009f7c:	10800324 	muli	r2,r2,12
 4009f80:	1007883a 	mov	r3,r2
 4009f84:	00810074 	movhi	r2,1025
 4009f88:	109cef04 	addi	r2,r2,29628
 4009f8c:	1887883a 	add	r3,r3,r2
 4009f90:	e0ffff15 	stw	r3,-4(fp)
 4009f94:	00000106 	br	4009f9c <fstat+0x48>
 4009f98:	e03fff15 	stw	zero,-4(fp)
 4009f9c:	e0bfff17 	ldw	r2,-4(fp)
 4009fa0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4009fa4:	e0bffb17 	ldw	r2,-20(fp)
 4009fa8:	1005003a 	cmpeq	r2,r2,zero
 4009fac:	1000121e 	bne	r2,zero,4009ff8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4009fb0:	e0bffb17 	ldw	r2,-20(fp)
 4009fb4:	10800017 	ldw	r2,0(r2)
 4009fb8:	10800817 	ldw	r2,32(r2)
 4009fbc:	1005003a 	cmpeq	r2,r2,zero
 4009fc0:	1000081e 	bne	r2,zero,4009fe4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 4009fc4:	e0bffb17 	ldw	r2,-20(fp)
 4009fc8:	10800017 	ldw	r2,0(r2)
 4009fcc:	10800817 	ldw	r2,32(r2)
 4009fd0:	e13ffb17 	ldw	r4,-20(fp)
 4009fd4:	e17ffd17 	ldw	r5,-12(fp)
 4009fd8:	103ee83a 	callr	r2
 4009fdc:	e0bffe15 	stw	r2,-8(fp)
 4009fe0:	00000b06 	br	400a010 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4009fe4:	e0fffd17 	ldw	r3,-12(fp)
 4009fe8:	00880004 	movi	r2,8192
 4009fec:	18800115 	stw	r2,4(r3)
      return 0;
 4009ff0:	e03ffe15 	stw	zero,-8(fp)
 4009ff4:	00000606 	br	400a010 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4009ff8:	400a0280 	call	400a028 <alt_get_errno>
 4009ffc:	1007883a 	mov	r3,r2
 400a000:	00801444 	movi	r2,81
 400a004:	18800015 	stw	r2,0(r3)
    return -1;
 400a008:	00bfffc4 	movi	r2,-1
 400a00c:	e0bffe15 	stw	r2,-8(fp)
 400a010:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 400a014:	e037883a 	mov	sp,fp
 400a018:	dfc00117 	ldw	ra,4(sp)
 400a01c:	df000017 	ldw	fp,0(sp)
 400a020:	dec00204 	addi	sp,sp,8
 400a024:	f800283a 	ret

0400a028 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a028:	defffd04 	addi	sp,sp,-12
 400a02c:	dfc00215 	stw	ra,8(sp)
 400a030:	df000115 	stw	fp,4(sp)
 400a034:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400a038:	008100b4 	movhi	r2,1026
 400a03c:	10a1a604 	addi	r2,r2,-31080
 400a040:	10800017 	ldw	r2,0(r2)
 400a044:	1005003a 	cmpeq	r2,r2,zero
 400a048:	1000061e 	bne	r2,zero,400a064 <alt_get_errno+0x3c>
 400a04c:	008100b4 	movhi	r2,1026
 400a050:	10a1a604 	addi	r2,r2,-31080
 400a054:	10800017 	ldw	r2,0(r2)
 400a058:	103ee83a 	callr	r2
 400a05c:	e0bfff15 	stw	r2,-4(fp)
 400a060:	00000306 	br	400a070 <alt_get_errno+0x48>
 400a064:	008100b4 	movhi	r2,1026
 400a068:	10a1d504 	addi	r2,r2,-30892
 400a06c:	e0bfff15 	stw	r2,-4(fp)
 400a070:	e0bfff17 	ldw	r2,-4(fp)
}
 400a074:	e037883a 	mov	sp,fp
 400a078:	dfc00117 	ldw	ra,4(sp)
 400a07c:	df000017 	ldw	fp,0(sp)
 400a080:	dec00204 	addi	sp,sp,8
 400a084:	f800283a 	ret

0400a088 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400a088:	deffeb04 	addi	sp,sp,-84
 400a08c:	dfc01415 	stw	ra,80(sp)
 400a090:	df001315 	stw	fp,76(sp)
 400a094:	df001304 	addi	fp,sp,76
 400a098:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a09c:	e0bffd17 	ldw	r2,-12(fp)
 400a0a0:	1004803a 	cmplt	r2,r2,zero
 400a0a4:	1000081e 	bne	r2,zero,400a0c8 <isatty+0x40>
 400a0a8:	e0bffd17 	ldw	r2,-12(fp)
 400a0ac:	10800324 	muli	r2,r2,12
 400a0b0:	1007883a 	mov	r3,r2
 400a0b4:	00810074 	movhi	r2,1025
 400a0b8:	109cef04 	addi	r2,r2,29628
 400a0bc:	1887883a 	add	r3,r3,r2
 400a0c0:	e0ffff15 	stw	r3,-4(fp)
 400a0c4:	00000106 	br	400a0cc <isatty+0x44>
 400a0c8:	e03fff15 	stw	zero,-4(fp)
 400a0cc:	e0bfff17 	ldw	r2,-4(fp)
 400a0d0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 400a0d4:	e0bfed17 	ldw	r2,-76(fp)
 400a0d8:	1005003a 	cmpeq	r2,r2,zero
 400a0dc:	10000f1e 	bne	r2,zero,400a11c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400a0e0:	e0bfed17 	ldw	r2,-76(fp)
 400a0e4:	10800017 	ldw	r2,0(r2)
 400a0e8:	10800817 	ldw	r2,32(r2)
 400a0ec:	1004c03a 	cmpne	r2,r2,zero
 400a0f0:	1000031e 	bne	r2,zero,400a100 <isatty+0x78>
    {
      return 1;
 400a0f4:	00800044 	movi	r2,1
 400a0f8:	e0bffe15 	stw	r2,-8(fp)
 400a0fc:	00000c06 	br	400a130 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400a100:	e17fee04 	addi	r5,fp,-72
 400a104:	e13ffd17 	ldw	r4,-12(fp)
 400a108:	4009f540 	call	4009f54 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400a10c:	e0bfef17 	ldw	r2,-68(fp)
 400a110:	10880020 	cmpeqi	r2,r2,8192
 400a114:	e0bffe15 	stw	r2,-8(fp)
 400a118:	00000506 	br	400a130 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400a11c:	400a1480 	call	400a148 <alt_get_errno>
 400a120:	1007883a 	mov	r3,r2
 400a124:	00801444 	movi	r2,81
 400a128:	18800015 	stw	r2,0(r3)
    return 0;
 400a12c:	e03ffe15 	stw	zero,-8(fp)
 400a130:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 400a134:	e037883a 	mov	sp,fp
 400a138:	dfc00117 	ldw	ra,4(sp)
 400a13c:	df000017 	ldw	fp,0(sp)
 400a140:	dec00204 	addi	sp,sp,8
 400a144:	f800283a 	ret

0400a148 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a148:	defffd04 	addi	sp,sp,-12
 400a14c:	dfc00215 	stw	ra,8(sp)
 400a150:	df000115 	stw	fp,4(sp)
 400a154:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400a158:	008100b4 	movhi	r2,1026
 400a15c:	10a1a604 	addi	r2,r2,-31080
 400a160:	10800017 	ldw	r2,0(r2)
 400a164:	1005003a 	cmpeq	r2,r2,zero
 400a168:	1000061e 	bne	r2,zero,400a184 <alt_get_errno+0x3c>
 400a16c:	008100b4 	movhi	r2,1026
 400a170:	10a1a604 	addi	r2,r2,-31080
 400a174:	10800017 	ldw	r2,0(r2)
 400a178:	103ee83a 	callr	r2
 400a17c:	e0bfff15 	stw	r2,-4(fp)
 400a180:	00000306 	br	400a190 <alt_get_errno+0x48>
 400a184:	008100b4 	movhi	r2,1026
 400a188:	10a1d504 	addi	r2,r2,-30892
 400a18c:	e0bfff15 	stw	r2,-4(fp)
 400a190:	e0bfff17 	ldw	r2,-4(fp)
}
 400a194:	e037883a 	mov	sp,fp
 400a198:	dfc00117 	ldw	ra,4(sp)
 400a19c:	df000017 	ldw	fp,0(sp)
 400a1a0:	dec00204 	addi	sp,sp,8
 400a1a4:	f800283a 	ret

0400a1a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400a1a8:	defff804 	addi	sp,sp,-32
 400a1ac:	dfc00715 	stw	ra,28(sp)
 400a1b0:	df000615 	stw	fp,24(sp)
 400a1b4:	df000604 	addi	fp,sp,24
 400a1b8:	e13ffc15 	stw	r4,-16(fp)
 400a1bc:	e17ffd15 	stw	r5,-12(fp)
 400a1c0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400a1c4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a1c8:	e0bffc17 	ldw	r2,-16(fp)
 400a1cc:	1004803a 	cmplt	r2,r2,zero
 400a1d0:	1000081e 	bne	r2,zero,400a1f4 <lseek+0x4c>
 400a1d4:	e0bffc17 	ldw	r2,-16(fp)
 400a1d8:	10800324 	muli	r2,r2,12
 400a1dc:	1007883a 	mov	r3,r2
 400a1e0:	00810074 	movhi	r2,1025
 400a1e4:	109cef04 	addi	r2,r2,29628
 400a1e8:	1887883a 	add	r3,r3,r2
 400a1ec:	e0ffff15 	stw	r3,-4(fp)
 400a1f0:	00000106 	br	400a1f8 <lseek+0x50>
 400a1f4:	e03fff15 	stw	zero,-4(fp)
 400a1f8:	e0bfff17 	ldw	r2,-4(fp)
 400a1fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 400a200:	e0bffb17 	ldw	r2,-20(fp)
 400a204:	1005003a 	cmpeq	r2,r2,zero
 400a208:	1000111e 	bne	r2,zero,400a250 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400a20c:	e0bffb17 	ldw	r2,-20(fp)
 400a210:	10800017 	ldw	r2,0(r2)
 400a214:	10800717 	ldw	r2,28(r2)
 400a218:	1005003a 	cmpeq	r2,r2,zero
 400a21c:	1000091e 	bne	r2,zero,400a244 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400a220:	e0bffb17 	ldw	r2,-20(fp)
 400a224:	10800017 	ldw	r2,0(r2)
 400a228:	10800717 	ldw	r2,28(r2)
 400a22c:	e13ffb17 	ldw	r4,-20(fp)
 400a230:	e17ffd17 	ldw	r5,-12(fp)
 400a234:	e1bffe17 	ldw	r6,-8(fp)
 400a238:	103ee83a 	callr	r2
 400a23c:	e0bffa15 	stw	r2,-24(fp)
 400a240:	00000506 	br	400a258 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400a244:	00bfde84 	movi	r2,-134
 400a248:	e0bffa15 	stw	r2,-24(fp)
 400a24c:	00000206 	br	400a258 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400a250:	00bfebc4 	movi	r2,-81
 400a254:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 400a258:	e0bffa17 	ldw	r2,-24(fp)
 400a25c:	1004403a 	cmpge	r2,r2,zero
 400a260:	1000071e 	bne	r2,zero,400a280 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 400a264:	400a2980 	call	400a298 <alt_get_errno>
 400a268:	1007883a 	mov	r3,r2
 400a26c:	e0bffa17 	ldw	r2,-24(fp)
 400a270:	0085c83a 	sub	r2,zero,r2
 400a274:	18800015 	stw	r2,0(r3)
    rc = -1;
 400a278:	00bfffc4 	movi	r2,-1
 400a27c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 400a280:	e0bffa17 	ldw	r2,-24(fp)
}
 400a284:	e037883a 	mov	sp,fp
 400a288:	dfc00117 	ldw	ra,4(sp)
 400a28c:	df000017 	ldw	fp,0(sp)
 400a290:	dec00204 	addi	sp,sp,8
 400a294:	f800283a 	ret

0400a298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a298:	defffd04 	addi	sp,sp,-12
 400a29c:	dfc00215 	stw	ra,8(sp)
 400a2a0:	df000115 	stw	fp,4(sp)
 400a2a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400a2a8:	008100b4 	movhi	r2,1026
 400a2ac:	10a1a604 	addi	r2,r2,-31080
 400a2b0:	10800017 	ldw	r2,0(r2)
 400a2b4:	1005003a 	cmpeq	r2,r2,zero
 400a2b8:	1000061e 	bne	r2,zero,400a2d4 <alt_get_errno+0x3c>
 400a2bc:	008100b4 	movhi	r2,1026
 400a2c0:	10a1a604 	addi	r2,r2,-31080
 400a2c4:	10800017 	ldw	r2,0(r2)
 400a2c8:	103ee83a 	callr	r2
 400a2cc:	e0bfff15 	stw	r2,-4(fp)
 400a2d0:	00000306 	br	400a2e0 <alt_get_errno+0x48>
 400a2d4:	008100b4 	movhi	r2,1026
 400a2d8:	10a1d504 	addi	r2,r2,-30892
 400a2dc:	e0bfff15 	stw	r2,-4(fp)
 400a2e0:	e0bfff17 	ldw	r2,-4(fp)
}
 400a2e4:	e037883a 	mov	sp,fp
 400a2e8:	dfc00117 	ldw	ra,4(sp)
 400a2ec:	df000017 	ldw	fp,0(sp)
 400a2f0:	dec00204 	addi	sp,sp,8
 400a2f4:	f800283a 	ret

0400a2f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400a2f8:	defffb04 	addi	sp,sp,-20
 400a2fc:	dfc00415 	stw	ra,16(sp)
 400a300:	df000315 	stw	fp,12(sp)
 400a304:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400a308:	0009883a 	mov	r4,zero
 400a30c:	4012ed00 	call	4012ed0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400a310:	400b3e40 	call	400b3e4 <OSInit>
 400a314:	01000044 	movi	r4,1
 400a318:	401042c0 	call	401042c <OSSemCreate>
 400a31c:	1007883a 	mov	r3,r2
 400a320:	008100b4 	movhi	r2,1026
 400a324:	10a1db04 	addi	r2,r2,-30868
 400a328:	10c00015 	stw	r3,0(r2)
 400a32c:	01000044 	movi	r4,1
 400a330:	401042c0 	call	401042c <OSSemCreate>
 400a334:	1007883a 	mov	r3,r2
 400a338:	008100b4 	movhi	r2,1026
 400a33c:	10a1dd04 	addi	r2,r2,-30860
 400a340:	10c00015 	stw	r3,0(r2)
 400a344:	008100b4 	movhi	r2,1026
 400a348:	10a1d604 	addi	r2,r2,-30888
 400a34c:	e0bffd15 	stw	r2,-12(fp)
 400a350:	00800044 	movi	r2,1
 400a354:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 400a358:	e13ffe0b 	ldhu	r4,-8(fp)
 400a35c:	401042c0 	call	401042c <OSSemCreate>
 400a360:	1007883a 	mov	r3,r2
 400a364:	e0bffd17 	ldw	r2,-12(fp)
 400a368:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400a36c:	4012f040 	call	4012f04 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400a370:	01010074 	movhi	r4,1025
 400a374:	211a8004 	addi	r4,r4,27136
 400a378:	01410074 	movhi	r5,1025
 400a37c:	295a8004 	addi	r5,r5,27136
 400a380:	01810074 	movhi	r6,1025
 400a384:	319a8004 	addi	r6,r6,27136
 400a388:	40153200 	call	4015320 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400a38c:	4014df80 	call	4014df8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400a390:	01010074 	movhi	r4,1025
 400a394:	21139704 	addi	r4,r4,20060
 400a398:	40161ec0 	call	40161ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400a39c:	d1203c17 	ldw	r4,-32528(gp)
 400a3a0:	d1603d17 	ldw	r5,-32524(gp)
 400a3a4:	d1a03e17 	ldw	r6,-32520(gp)
 400a3a8:	40001f40 	call	40001f4 <main>
 400a3ac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400a3b0:	01000044 	movi	r4,1
 400a3b4:	4009dcc0 	call	4009dcc <close>
  exit (result);
 400a3b8:	e13fff17 	ldw	r4,-4(fp)
 400a3bc:	40162000 	call	4016200 <exit>

0400a3c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400a3c0:	defff704 	addi	sp,sp,-36
 400a3c4:	dfc00815 	stw	ra,32(sp)
 400a3c8:	df000715 	stw	fp,28(sp)
 400a3cc:	df000704 	addi	fp,sp,28
 400a3d0:	e13ffb15 	stw	r4,-20(fp)
 400a3d4:	e17ffc15 	stw	r5,-16(fp)
 400a3d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a3dc:	e0bffb17 	ldw	r2,-20(fp)
 400a3e0:	1004803a 	cmplt	r2,r2,zero
 400a3e4:	1000081e 	bne	r2,zero,400a408 <read+0x48>
 400a3e8:	e0bffb17 	ldw	r2,-20(fp)
 400a3ec:	10800324 	muli	r2,r2,12
 400a3f0:	1007883a 	mov	r3,r2
 400a3f4:	00810074 	movhi	r2,1025
 400a3f8:	109cef04 	addi	r2,r2,29628
 400a3fc:	1887883a 	add	r3,r3,r2
 400a400:	e0ffff15 	stw	r3,-4(fp)
 400a404:	00000106 	br	400a40c <read+0x4c>
 400a408:	e03fff15 	stw	zero,-4(fp)
 400a40c:	e0bfff17 	ldw	r2,-4(fp)
 400a410:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 400a414:	e0bffa17 	ldw	r2,-24(fp)
 400a418:	1005003a 	cmpeq	r2,r2,zero
 400a41c:	1000241e 	bne	r2,zero,400a4b0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400a420:	e0bffa17 	ldw	r2,-24(fp)
 400a424:	10800217 	ldw	r2,8(r2)
 400a428:	108000cc 	andi	r2,r2,3
 400a42c:	10800060 	cmpeqi	r2,r2,1
 400a430:	10001a1e 	bne	r2,zero,400a49c <read+0xdc>
 400a434:	e0bffa17 	ldw	r2,-24(fp)
 400a438:	10800017 	ldw	r2,0(r2)
 400a43c:	10800517 	ldw	r2,20(r2)
 400a440:	1005003a 	cmpeq	r2,r2,zero
 400a444:	1000151e 	bne	r2,zero,400a49c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400a448:	e0bffa17 	ldw	r2,-24(fp)
 400a44c:	10800017 	ldw	r2,0(r2)
 400a450:	10800517 	ldw	r2,20(r2)
 400a454:	e17ffc17 	ldw	r5,-16(fp)
 400a458:	e1bffd17 	ldw	r6,-12(fp)
 400a45c:	e13ffa17 	ldw	r4,-24(fp)
 400a460:	103ee83a 	callr	r2
 400a464:	e0bff915 	stw	r2,-28(fp)
 400a468:	e0bff917 	ldw	r2,-28(fp)
 400a46c:	1004403a 	cmpge	r2,r2,zero
 400a470:	1000071e 	bne	r2,zero,400a490 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 400a474:	400a4e00 	call	400a4e0 <alt_get_errno>
 400a478:	e0fff917 	ldw	r3,-28(fp)
 400a47c:	00c7c83a 	sub	r3,zero,r3
 400a480:	10c00015 	stw	r3,0(r2)
          return -1;
 400a484:	00bfffc4 	movi	r2,-1
 400a488:	e0bffe15 	stw	r2,-8(fp)
 400a48c:	00000e06 	br	400a4c8 <read+0x108>
        }
        return rval;
 400a490:	e0bff917 	ldw	r2,-28(fp)
 400a494:	e0bffe15 	stw	r2,-8(fp)
 400a498:	00000b06 	br	400a4c8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400a49c:	400a4e00 	call	400a4e0 <alt_get_errno>
 400a4a0:	1007883a 	mov	r3,r2
 400a4a4:	00800344 	movi	r2,13
 400a4a8:	18800015 	stw	r2,0(r3)
 400a4ac:	00000406 	br	400a4c0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400a4b0:	400a4e00 	call	400a4e0 <alt_get_errno>
 400a4b4:	1007883a 	mov	r3,r2
 400a4b8:	00801444 	movi	r2,81
 400a4bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400a4c0:	00bfffc4 	movi	r2,-1
 400a4c4:	e0bffe15 	stw	r2,-8(fp)
 400a4c8:	e0bffe17 	ldw	r2,-8(fp)
}
 400a4cc:	e037883a 	mov	sp,fp
 400a4d0:	dfc00117 	ldw	ra,4(sp)
 400a4d4:	df000017 	ldw	fp,0(sp)
 400a4d8:	dec00204 	addi	sp,sp,8
 400a4dc:	f800283a 	ret

0400a4e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a4e0:	defffd04 	addi	sp,sp,-12
 400a4e4:	dfc00215 	stw	ra,8(sp)
 400a4e8:	df000115 	stw	fp,4(sp)
 400a4ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400a4f0:	008100b4 	movhi	r2,1026
 400a4f4:	10a1a604 	addi	r2,r2,-31080
 400a4f8:	10800017 	ldw	r2,0(r2)
 400a4fc:	1005003a 	cmpeq	r2,r2,zero
 400a500:	1000061e 	bne	r2,zero,400a51c <alt_get_errno+0x3c>
 400a504:	008100b4 	movhi	r2,1026
 400a508:	10a1a604 	addi	r2,r2,-31080
 400a50c:	10800017 	ldw	r2,0(r2)
 400a510:	103ee83a 	callr	r2
 400a514:	e0bfff15 	stw	r2,-4(fp)
 400a518:	00000306 	br	400a528 <alt_get_errno+0x48>
 400a51c:	008100b4 	movhi	r2,1026
 400a520:	10a1d504 	addi	r2,r2,-30892
 400a524:	e0bfff15 	stw	r2,-4(fp)
 400a528:	e0bfff17 	ldw	r2,-4(fp)
}
 400a52c:	e037883a 	mov	sp,fp
 400a530:	dfc00117 	ldw	ra,4(sp)
 400a534:	df000017 	ldw	fp,0(sp)
 400a538:	dec00204 	addi	sp,sp,8
 400a53c:	f800283a 	ret

0400a540 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400a540:	defffe04 	addi	sp,sp,-8
 400a544:	df000115 	stw	fp,4(sp)
 400a548:	df000104 	addi	fp,sp,4
 400a54c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400a550:	e0bfff17 	ldw	r2,-4(fp)
 400a554:	108000d0 	cmplti	r2,r2,3
 400a558:	10000d1e 	bne	r2,zero,400a590 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400a55c:	e0bfff17 	ldw	r2,-4(fp)
 400a560:	00c10074 	movhi	r3,1025
 400a564:	18dcef04 	addi	r3,r3,29628
 400a568:	10800324 	muli	r2,r2,12
 400a56c:	10c5883a 	add	r2,r2,r3
 400a570:	10800204 	addi	r2,r2,8
 400a574:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400a578:	e0bfff17 	ldw	r2,-4(fp)
 400a57c:	00c10074 	movhi	r3,1025
 400a580:	18dcef04 	addi	r3,r3,29628
 400a584:	10800324 	muli	r2,r2,12
 400a588:	10c5883a 	add	r2,r2,r3
 400a58c:	10000015 	stw	zero,0(r2)
  }
}
 400a590:	e037883a 	mov	sp,fp
 400a594:	df000017 	ldw	fp,0(sp)
 400a598:	dec00104 	addi	sp,sp,4
 400a59c:	f800283a 	ret

0400a5a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400a5a0:	defff804 	addi	sp,sp,-32
 400a5a4:	df000715 	stw	fp,28(sp)
 400a5a8:	df000704 	addi	fp,sp,28
 400a5ac:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a5b0:	0005303a 	rdctl	r2,status
 400a5b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a5b8:	e0fffb17 	ldw	r3,-20(fp)
 400a5bc:	00bfff84 	movi	r2,-2
 400a5c0:	1884703a 	and	r2,r3,r2
 400a5c4:	1001703a 	wrctl	status,r2
  
  return context;
 400a5c8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400a5cc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400a5d0:	d0a00c17 	ldw	r2,-32720(gp)
 400a5d4:	10c000c4 	addi	r3,r2,3
 400a5d8:	00bfff04 	movi	r2,-4
 400a5dc:	1884703a 	and	r2,r3,r2
 400a5e0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400a5e4:	d0e00c17 	ldw	r3,-32720(gp)
 400a5e8:	e0bffe17 	ldw	r2,-8(fp)
 400a5ec:	1887883a 	add	r3,r3,r2
 400a5f0:	00818034 	movhi	r2,1536
 400a5f4:	10800004 	addi	r2,r2,0
 400a5f8:	10c0072e 	bgeu	r2,r3,400a618 <sbrk+0x78>
 400a5fc:	e0bffd17 	ldw	r2,-12(fp)
 400a600:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a604:	e0bffa17 	ldw	r2,-24(fp)
 400a608:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400a60c:	00bfffc4 	movi	r2,-1
 400a610:	e0bfff15 	stw	r2,-4(fp)
 400a614:	00000c06 	br	400a648 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 400a618:	d0a00c17 	ldw	r2,-32720(gp)
 400a61c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 400a620:	d0e00c17 	ldw	r3,-32720(gp)
 400a624:	e0bffe17 	ldw	r2,-8(fp)
 400a628:	1885883a 	add	r2,r3,r2
 400a62c:	d0a00c15 	stw	r2,-32720(gp)
 400a630:	e0bffd17 	ldw	r2,-12(fp)
 400a634:	e0bff915 	stw	r2,-28(fp)
 400a638:	e0bff917 	ldw	r2,-28(fp)
 400a63c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400a640:	e0bffc17 	ldw	r2,-16(fp)
 400a644:	e0bfff15 	stw	r2,-4(fp)
 400a648:	e0bfff17 	ldw	r2,-4(fp)
} 
 400a64c:	e037883a 	mov	sp,fp
 400a650:	df000017 	ldw	fp,0(sp)
 400a654:	dec00104 	addi	sp,sp,4
 400a658:	f800283a 	ret

0400a65c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400a65c:	defff704 	addi	sp,sp,-36
 400a660:	dfc00815 	stw	ra,32(sp)
 400a664:	df000715 	stw	fp,28(sp)
 400a668:	df000704 	addi	fp,sp,28
 400a66c:	e13ffb15 	stw	r4,-20(fp)
 400a670:	e17ffc15 	stw	r5,-16(fp)
 400a674:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a678:	e0bffb17 	ldw	r2,-20(fp)
 400a67c:	1004803a 	cmplt	r2,r2,zero
 400a680:	1000081e 	bne	r2,zero,400a6a4 <write+0x48>
 400a684:	e0bffb17 	ldw	r2,-20(fp)
 400a688:	10800324 	muli	r2,r2,12
 400a68c:	1007883a 	mov	r3,r2
 400a690:	00810074 	movhi	r2,1025
 400a694:	109cef04 	addi	r2,r2,29628
 400a698:	1887883a 	add	r3,r3,r2
 400a69c:	e0ffff15 	stw	r3,-4(fp)
 400a6a0:	00000106 	br	400a6a8 <write+0x4c>
 400a6a4:	e03fff15 	stw	zero,-4(fp)
 400a6a8:	e0bfff17 	ldw	r2,-4(fp)
 400a6ac:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 400a6b0:	e0bffa17 	ldw	r2,-24(fp)
 400a6b4:	1005003a 	cmpeq	r2,r2,zero
 400a6b8:	1000241e 	bne	r2,zero,400a74c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400a6bc:	e0bffa17 	ldw	r2,-24(fp)
 400a6c0:	10800217 	ldw	r2,8(r2)
 400a6c4:	108000cc 	andi	r2,r2,3
 400a6c8:	1005003a 	cmpeq	r2,r2,zero
 400a6cc:	10001a1e 	bne	r2,zero,400a738 <write+0xdc>
 400a6d0:	e0bffa17 	ldw	r2,-24(fp)
 400a6d4:	10800017 	ldw	r2,0(r2)
 400a6d8:	10800617 	ldw	r2,24(r2)
 400a6dc:	1005003a 	cmpeq	r2,r2,zero
 400a6e0:	1000151e 	bne	r2,zero,400a738 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400a6e4:	e0bffa17 	ldw	r2,-24(fp)
 400a6e8:	10800017 	ldw	r2,0(r2)
 400a6ec:	10800617 	ldw	r2,24(r2)
 400a6f0:	e17ffc17 	ldw	r5,-16(fp)
 400a6f4:	e1bffd17 	ldw	r6,-12(fp)
 400a6f8:	e13ffa17 	ldw	r4,-24(fp)
 400a6fc:	103ee83a 	callr	r2
 400a700:	e0bff915 	stw	r2,-28(fp)
 400a704:	e0bff917 	ldw	r2,-28(fp)
 400a708:	1004403a 	cmpge	r2,r2,zero
 400a70c:	1000071e 	bne	r2,zero,400a72c <write+0xd0>
      {
        ALT_ERRNO = -rval;
 400a710:	400a77c0 	call	400a77c <alt_get_errno>
 400a714:	e0fff917 	ldw	r3,-28(fp)
 400a718:	00c7c83a 	sub	r3,zero,r3
 400a71c:	10c00015 	stw	r3,0(r2)
        return -1;
 400a720:	00bfffc4 	movi	r2,-1
 400a724:	e0bffe15 	stw	r2,-8(fp)
 400a728:	00000e06 	br	400a764 <write+0x108>
      }
      return rval;
 400a72c:	e0bff917 	ldw	r2,-28(fp)
 400a730:	e0bffe15 	stw	r2,-8(fp)
 400a734:	00000b06 	br	400a764 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400a738:	400a77c0 	call	400a77c <alt_get_errno>
 400a73c:	1007883a 	mov	r3,r2
 400a740:	00800344 	movi	r2,13
 400a744:	18800015 	stw	r2,0(r3)
 400a748:	00000406 	br	400a75c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400a74c:	400a77c0 	call	400a77c <alt_get_errno>
 400a750:	1007883a 	mov	r3,r2
 400a754:	00801444 	movi	r2,81
 400a758:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400a75c:	00bfffc4 	movi	r2,-1
 400a760:	e0bffe15 	stw	r2,-8(fp)
 400a764:	e0bffe17 	ldw	r2,-8(fp)
}
 400a768:	e037883a 	mov	sp,fp
 400a76c:	dfc00117 	ldw	ra,4(sp)
 400a770:	df000017 	ldw	fp,0(sp)
 400a774:	dec00204 	addi	sp,sp,8
 400a778:	f800283a 	ret

0400a77c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a77c:	defffd04 	addi	sp,sp,-12
 400a780:	dfc00215 	stw	ra,8(sp)
 400a784:	df000115 	stw	fp,4(sp)
 400a788:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400a78c:	008100b4 	movhi	r2,1026
 400a790:	10a1a604 	addi	r2,r2,-31080
 400a794:	10800017 	ldw	r2,0(r2)
 400a798:	1005003a 	cmpeq	r2,r2,zero
 400a79c:	1000061e 	bne	r2,zero,400a7b8 <alt_get_errno+0x3c>
 400a7a0:	008100b4 	movhi	r2,1026
 400a7a4:	10a1a604 	addi	r2,r2,-31080
 400a7a8:	10800017 	ldw	r2,0(r2)
 400a7ac:	103ee83a 	callr	r2
 400a7b0:	e0bfff15 	stw	r2,-4(fp)
 400a7b4:	00000306 	br	400a7c4 <alt_get_errno+0x48>
 400a7b8:	008100b4 	movhi	r2,1026
 400a7bc:	10a1d504 	addi	r2,r2,-30892
 400a7c0:	e0bfff15 	stw	r2,-4(fp)
 400a7c4:	e0bfff17 	ldw	r2,-4(fp)
}
 400a7c8:	e037883a 	mov	sp,fp
 400a7cc:	dfc00117 	ldw	ra,4(sp)
 400a7d0:	df000017 	ldw	fp,0(sp)
 400a7d4:	dec00204 	addi	sp,sp,8
 400a7d8:	f800283a 	ret

0400a7dc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 400a7dc:	deffdd04 	addi	sp,sp,-140
 400a7e0:	dfc02215 	stw	ra,136(sp)
 400a7e4:	df002115 	stw	fp,132(sp)
 400a7e8:	df002104 	addi	fp,sp,132
 400a7ec:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400a7f0:	e17fe004 	addi	r5,fp,-128
 400a7f4:	01003fc4 	movi	r4,255
 400a7f8:	401277c0 	call	401277c <OSTaskQuery>
 400a7fc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 400a800:	e0bffe83 	ldbu	r2,-6(fp)
 400a804:	10803fcc 	andi	r2,r2,255
 400a808:	1004c03a 	cmpne	r2,r2,zero
 400a80c:	1000191e 	bne	r2,zero,400a874 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 400a810:	e0bfec83 	ldbu	r2,-78(fp)
 400a814:	10803fcc 	andi	r2,r2,255
 400a818:	e0bfdf15 	stw	r2,-132(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 400a81c:	d1204017 	ldw	r4,-32512(gp)
 400a820:	e17ffd04 	addi	r5,fp,-12
 400a824:	4010d000 	call	4010d00 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 400a828:	e0bffe43 	ldbu	r2,-7(fp)
 400a82c:	10803fcc 	andi	r2,r2,255
 400a830:	1005003a 	cmpeq	r2,r2,zero
 400a834:	1000071e 	bne	r2,zero,400a854 <__env_lock+0x78>
 400a838:	d0e00d17 	ldw	r3,-32716(gp)
 400a83c:	e0bfdf17 	ldw	r2,-132(fp)
 400a840:	10c0041e 	bne	r2,r3,400a854 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 400a844:	d0a03f17 	ldw	r2,-32516(gp)
 400a848:	10800044 	addi	r2,r2,1
 400a84c:	d0a03f15 	stw	r2,-32516(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 400a850:	00000806 	br	400a874 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 400a854:	d1204017 	ldw	r4,-32512(gp)
 400a858:	e1bffe84 	addi	r6,fp,-6
 400a85c:	000b883a 	mov	r5,zero
 400a860:	40107e00 	call	40107e0 <OSSemPend>
    locks  = 1;
 400a864:	00800044 	movi	r2,1
 400a868:	d0a03f15 	stw	r2,-32516(gp)
    lockid = id;
 400a86c:	e0bfdf17 	ldw	r2,-132(fp)
 400a870:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400a874:	e037883a 	mov	sp,fp
 400a878:	dfc00117 	ldw	ra,4(sp)
 400a87c:	df000017 	ldw	fp,0(sp)
 400a880:	dec00204 	addi	sp,sp,8
 400a884:	f800283a 	ret

0400a888 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 400a888:	defffd04 	addi	sp,sp,-12
 400a88c:	dfc00215 	stw	ra,8(sp)
 400a890:	df000115 	stw	fp,4(sp)
 400a894:	df000104 	addi	fp,sp,4
 400a898:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 400a89c:	d0a03f17 	ldw	r2,-32516(gp)
 400a8a0:	1005003a 	cmpeq	r2,r2,zero
 400a8a4:	10000a1e 	bne	r2,zero,400a8d0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 400a8a8:	d0a03f17 	ldw	r2,-32516(gp)
 400a8ac:	10bfffc4 	addi	r2,r2,-1
 400a8b0:	d0a03f15 	stw	r2,-32516(gp)
 400a8b4:	d0a03f17 	ldw	r2,-32516(gp)
 400a8b8:	1004c03a 	cmpne	r2,r2,zero
 400a8bc:	1000041e 	bne	r2,zero,400a8d0 <__env_unlock+0x48>
  {
    lockid = -1;
 400a8c0:	00bfffc4 	movi	r2,-1
 400a8c4:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
 400a8c8:	d1204017 	ldw	r4,-32512(gp)
 400a8cc:	4010bd80 	call	4010bd8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 400a8d0:	e037883a 	mov	sp,fp
 400a8d4:	dfc00117 	ldw	ra,4(sp)
 400a8d8:	df000017 	ldw	fp,0(sp)
 400a8dc:	dec00204 	addi	sp,sp,8
 400a8e0:	f800283a 	ret

0400a8e4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 400a8e4:	deffd904 	addi	sp,sp,-156
 400a8e8:	dfc02615 	stw	ra,152(sp)
 400a8ec:	df002515 	stw	fp,148(sp)
 400a8f0:	df002504 	addi	fp,sp,148
 400a8f4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400a8f8:	e03fde15 	stw	zero,-136(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 400a8fc:	008100b4 	movhi	r2,1026
 400a900:	10a1de44 	addi	r2,r2,-30855
 400a904:	10800003 	ldbu	r2,0(r2)
 400a908:	10803fcc 	andi	r2,r2,255
 400a90c:	10800058 	cmpnei	r2,r2,1
 400a910:	1000311e 	bne	r2,zero,400a9d8 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400a914:	e17fe004 	addi	r5,fp,-128
 400a918:	01003fc4 	movi	r4,255
 400a91c:	401277c0 	call	401277c <OSTaskQuery>
 400a920:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 400a924:	e0bffe83 	ldbu	r2,-6(fp)
 400a928:	10803fcc 	andi	r2,r2,255
 400a92c:	1004c03a 	cmpne	r2,r2,zero
 400a930:	1000291e 	bne	r2,zero,400a9d8 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 400a934:	e0bfec83 	ldbu	r2,-78(fp)
 400a938:	10803fcc 	andi	r2,r2,255
 400a93c:	e0bfdf15 	stw	r2,-132(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 400a940:	d1204217 	ldw	r4,-32504(gp)
 400a944:	e17ffd04 	addi	r5,fp,-12
 400a948:	4010d000 	call	4010d00 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a94c:	0005303a 	rdctl	r2,status
 400a950:	e0bfdd15 	stw	r2,-140(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a954:	e0ffdd17 	ldw	r3,-140(fp)
 400a958:	00bfff84 	movi	r2,-2
 400a95c:	1884703a 	and	r2,r3,r2
 400a960:	1001703a 	wrctl	status,r2
  
  return context;
 400a964:	e0bfdd17 	ldw	r2,-140(fp)
  
  OS_ENTER_CRITICAL();
 400a968:	e0bfde15 	stw	r2,-136(fp)

  if( !semdata.OSCnt && id == lockid ) 
 400a96c:	e0bffd0b 	ldhu	r2,-12(fp)
 400a970:	10bfffcc 	andi	r2,r2,65535
 400a974:	1004c03a 	cmpne	r2,r2,zero
 400a978:	10000b1e 	bne	r2,zero,400a9a8 <__malloc_lock+0xc4>
 400a97c:	d0e00e17 	ldw	r3,-32712(gp)
 400a980:	e0bfdf17 	ldw	r2,-132(fp)
 400a984:	10c0081e 	bne	r2,r3,400a9a8 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 400a988:	d0a04117 	ldw	r2,-32508(gp)
 400a98c:	10800044 	addi	r2,r2,1
 400a990:	d0a04115 	stw	r2,-32508(gp)
 400a994:	e0bfde17 	ldw	r2,-136(fp)
 400a998:	e0bfdc15 	stw	r2,-144(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a99c:	e0bfdc17 	ldw	r2,-144(fp)
 400a9a0:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 400a9a4:	00000c06 	br	400a9d8 <__malloc_lock+0xf4>
 400a9a8:	e0bfde17 	ldw	r2,-136(fp)
 400a9ac:	e0bfdb15 	stw	r2,-148(fp)
 400a9b0:	e0bfdb17 	ldw	r2,-148(fp)
 400a9b4:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 400a9b8:	d1204217 	ldw	r4,-32504(gp)
 400a9bc:	e1bffe84 	addi	r6,fp,-6
 400a9c0:	000b883a 	mov	r5,zero
 400a9c4:	40107e00 	call	40107e0 <OSSemPend>
    locks  = 1;
 400a9c8:	00800044 	movi	r2,1
 400a9cc:	d0a04115 	stw	r2,-32508(gp)
    lockid = id;
 400a9d0:	e0bfdf17 	ldw	r2,-132(fp)
 400a9d4:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400a9d8:	e037883a 	mov	sp,fp
 400a9dc:	dfc00117 	ldw	ra,4(sp)
 400a9e0:	df000017 	ldw	fp,0(sp)
 400a9e4:	dec00204 	addi	sp,sp,8
 400a9e8:	f800283a 	ret

0400a9ec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400a9ec:	defff804 	addi	sp,sp,-32
 400a9f0:	dfc00715 	stw	ra,28(sp)
 400a9f4:	df000615 	stw	fp,24(sp)
 400a9f8:	df000604 	addi	fp,sp,24
 400a9fc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400aa00:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 400aa04:	008100b4 	movhi	r2,1026
 400aa08:	10a1de44 	addi	r2,r2,-30855
 400aa0c:	10800003 	ldbu	r2,0(r2)
 400aa10:	10803fcc 	andi	r2,r2,255
 400aa14:	10800058 	cmpnei	r2,r2,1
 400aa18:	1000231e 	bne	r2,zero,400aaa8 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400aa1c:	0005303a 	rdctl	r2,status
 400aa20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400aa24:	e0fffd17 	ldw	r3,-12(fp)
 400aa28:	00bfff84 	movi	r2,-2
 400aa2c:	1884703a 	and	r2,r3,r2
 400aa30:	1001703a 	wrctl	status,r2
  
  return context;
 400aa34:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 400aa38:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 400aa3c:	d0a04117 	ldw	r2,-32508(gp)
 400aa40:	1004c03a 	cmpne	r2,r2,zero
 400aa44:	1000051e 	bne	r2,zero,400aa5c <__malloc_unlock+0x70>
 400aa48:	e0bffe17 	ldw	r2,-8(fp)
 400aa4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400aa50:	e0bffc17 	ldw	r2,-16(fp)
 400aa54:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 400aa58:	00001306 	br	400aaa8 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 400aa5c:	d0a04117 	ldw	r2,-32508(gp)
 400aa60:	10bfffc4 	addi	r2,r2,-1
 400aa64:	d0a04115 	stw	r2,-32508(gp)
 400aa68:	d0a04117 	ldw	r2,-32508(gp)
 400aa6c:	1004c03a 	cmpne	r2,r2,zero
 400aa70:	1000091e 	bne	r2,zero,400aa98 <__malloc_unlock+0xac>
  {
    lockid = -1;
 400aa74:	00bfffc4 	movi	r2,-1
 400aa78:	d0a00e15 	stw	r2,-32712(gp)
 400aa7c:	e0bffe17 	ldw	r2,-8(fp)
 400aa80:	e0bffb15 	stw	r2,-20(fp)
 400aa84:	e0bffb17 	ldw	r2,-20(fp)
 400aa88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 400aa8c:	d1204217 	ldw	r4,-32504(gp)
 400aa90:	4010bd80 	call	4010bd8 <OSSemPost>
 400aa94:	00000406 	br	400aaa8 <__malloc_unlock+0xbc>
 400aa98:	e0bffe17 	ldw	r2,-8(fp)
 400aa9c:	e0bffa15 	stw	r2,-24(fp)
 400aaa0:	e0bffa17 	ldw	r2,-24(fp)
 400aaa4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 400aaa8:	e037883a 	mov	sp,fp
 400aaac:	dfc00117 	ldw	ra,4(sp)
 400aab0:	df000017 	ldw	fp,0(sp)
 400aab4:	dec00204 	addi	sp,sp,8
 400aab8:	f800283a 	ret

0400aabc <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 400aabc:	defff604 	addi	sp,sp,-40
 400aac0:	dfc00915 	stw	ra,36(sp)
 400aac4:	df000815 	stw	fp,32(sp)
 400aac8:	df000804 	addi	fp,sp,32
 400aacc:	e13ffc15 	stw	r4,-16(fp)
 400aad0:	e17ffd15 	stw	r5,-12(fp)
 400aad4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400aad8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400aadc:	e0bffe17 	ldw	r2,-8(fp)
 400aae0:	1004c03a 	cmpne	r2,r2,zero
 400aae4:	1000021e 	bne	r2,zero,400aaf0 <OSEventNameGet+0x34>
        return (0);
 400aae8:	e03fff15 	stw	zero,-4(fp)
 400aaec:	00003906 	br	400abd4 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 400aaf0:	e0bffc17 	ldw	r2,-16(fp)
 400aaf4:	1004c03a 	cmpne	r2,r2,zero
 400aaf8:	1000051e 	bne	r2,zero,400ab10 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 400aafc:	e0fffe17 	ldw	r3,-8(fp)
 400ab00:	00800104 	movi	r2,4
 400ab04:	18800005 	stb	r2,0(r3)
        return (0);
 400ab08:	e03fff15 	stw	zero,-4(fp)
 400ab0c:	00003106 	br	400abd4 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400ab10:	e0bffd17 	ldw	r2,-12(fp)
 400ab14:	1004c03a 	cmpne	r2,r2,zero
 400ab18:	1000051e 	bne	r2,zero,400ab30 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 400ab1c:	e0fffe17 	ldw	r3,-8(fp)
 400ab20:	00800304 	movi	r2,12
 400ab24:	18800005 	stb	r2,0(r3)
        return (0);
 400ab28:	e03fff15 	stw	zero,-4(fp)
 400ab2c:	00002906 	br	400abd4 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400ab30:	d0a05103 	ldbu	r2,-32444(gp)
 400ab34:	10803fcc 	andi	r2,r2,255
 400ab38:	1005003a 	cmpeq	r2,r2,zero
 400ab3c:	1000051e 	bne	r2,zero,400ab54 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 400ab40:	e0fffe17 	ldw	r3,-8(fp)
 400ab44:	00800444 	movi	r2,17
 400ab48:	18800005 	stb	r2,0(r3)
        return (0);
 400ab4c:	e03fff15 	stw	zero,-4(fp)
 400ab50:	00002006 	br	400abd4 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 400ab54:	e0bffc17 	ldw	r2,-16(fp)
 400ab58:	10800003 	ldbu	r2,0(r2)
 400ab5c:	10803fcc 	andi	r2,r2,255
 400ab60:	10bfffc4 	addi	r2,r2,-1
 400ab64:	10800128 	cmpgeui	r2,r2,4
 400ab68:	1000161e 	bne	r2,zero,400abc4 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ab6c:	0005303a 	rdctl	r2,status
 400ab70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ab74:	e0fff917 	ldw	r3,-28(fp)
 400ab78:	00bfff84 	movi	r2,-2
 400ab7c:	1884703a 	and	r2,r3,r2
 400ab80:	1001703a 	wrctl	status,r2
  
  return context;
 400ab84:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 400ab88:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 400ab8c:	e0bffc17 	ldw	r2,-16(fp)
 400ab90:	11400384 	addi	r5,r2,14
 400ab94:	e13ffd17 	ldw	r4,-12(fp)
 400ab98:	400c7c40 	call	400c7c4 <OS_StrCopy>
 400ab9c:	e0bffb05 	stb	r2,-20(fp)
 400aba0:	e0bffa17 	ldw	r2,-24(fp)
 400aba4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400aba8:	e0bff817 	ldw	r2,-32(fp)
 400abac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400abb0:	e0bffe17 	ldw	r2,-8(fp)
 400abb4:	10000005 	stb	zero,0(r2)
    return (len);
 400abb8:	e0bffb03 	ldbu	r2,-20(fp)
 400abbc:	e0bfff15 	stw	r2,-4(fp)
 400abc0:	00000406 	br	400abd4 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 400abc4:	e0fffe17 	ldw	r3,-8(fp)
 400abc8:	00800044 	movi	r2,1
 400abcc:	18800005 	stb	r2,0(r3)
             return (0);
 400abd0:	e03fff15 	stw	zero,-4(fp)
 400abd4:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 400abd8:	e037883a 	mov	sp,fp
 400abdc:	dfc00117 	ldw	ra,4(sp)
 400abe0:	df000017 	ldw	fp,0(sp)
 400abe4:	dec00204 	addi	sp,sp,8
 400abe8:	f800283a 	ret

0400abec <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 400abec:	defff604 	addi	sp,sp,-40
 400abf0:	dfc00915 	stw	ra,36(sp)
 400abf4:	df000815 	stw	fp,32(sp)
 400abf8:	df000804 	addi	fp,sp,32
 400abfc:	e13ffd15 	stw	r4,-12(fp)
 400ac00:	e17ffe15 	stw	r5,-8(fp)
 400ac04:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ac08:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400ac0c:	e0bfff17 	ldw	r2,-4(fp)
 400ac10:	1005003a 	cmpeq	r2,r2,zero
 400ac14:	1000411e 	bne	r2,zero,400ad1c <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 400ac18:	e0bffd17 	ldw	r2,-12(fp)
 400ac1c:	1004c03a 	cmpne	r2,r2,zero
 400ac20:	1000041e 	bne	r2,zero,400ac34 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 400ac24:	e0ffff17 	ldw	r3,-4(fp)
 400ac28:	00800104 	movi	r2,4
 400ac2c:	18800005 	stb	r2,0(r3)
        return;
 400ac30:	00003a06 	br	400ad1c <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400ac34:	e0bffe17 	ldw	r2,-8(fp)
 400ac38:	1004c03a 	cmpne	r2,r2,zero
 400ac3c:	1000041e 	bne	r2,zero,400ac50 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 400ac40:	e0ffff17 	ldw	r3,-4(fp)
 400ac44:	00800304 	movi	r2,12
 400ac48:	18800005 	stb	r2,0(r3)
        return;
 400ac4c:	00003306 	br	400ad1c <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400ac50:	d0a05103 	ldbu	r2,-32444(gp)
 400ac54:	10803fcc 	andi	r2,r2,255
 400ac58:	1005003a 	cmpeq	r2,r2,zero
 400ac5c:	1000041e 	bne	r2,zero,400ac70 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 400ac60:	e0ffff17 	ldw	r3,-4(fp)
 400ac64:	00800484 	movi	r2,18
 400ac68:	18800005 	stb	r2,0(r3)
        return;
 400ac6c:	00002b06 	br	400ad1c <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 400ac70:	e0bffd17 	ldw	r2,-12(fp)
 400ac74:	10800003 	ldbu	r2,0(r2)
 400ac78:	10803fcc 	andi	r2,r2,255
 400ac7c:	10bfffc4 	addi	r2,r2,-1
 400ac80:	10800128 	cmpgeui	r2,r2,4
 400ac84:	10000f1e 	bne	r2,zero,400acc4 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ac88:	0005303a 	rdctl	r2,status
 400ac8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ac90:	e0fffa17 	ldw	r3,-24(fp)
 400ac94:	00bfff84 	movi	r2,-2
 400ac98:	1884703a 	and	r2,r3,r2
 400ac9c:	1001703a 	wrctl	status,r2
  
  return context;
 400aca0:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 400aca4:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 400aca8:	e13ffe17 	ldw	r4,-8(fp)
 400acac:	400c8440 	call	400c844 <OS_StrLen>
 400acb0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 400acb4:	e0bffc03 	ldbu	r2,-16(fp)
 400acb8:	10800828 	cmpgeui	r2,r2,32
 400acbc:	1000051e 	bne	r2,zero,400acd4 <OSEventNameSet+0xe8>
 400acc0:	00000c06 	br	400acf4 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 400acc4:	e0ffff17 	ldw	r3,-4(fp)
 400acc8:	00800044 	movi	r2,1
 400accc:	18800005 	stb	r2,0(r3)
             return;
 400acd0:	00001206 	br	400ad1c <OSEventNameSet+0x130>
 400acd4:	e0bffb17 	ldw	r2,-20(fp)
 400acd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400acdc:	e0bff917 	ldw	r2,-28(fp)
 400ace0:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 400ace4:	e0ffff17 	ldw	r3,-4(fp)
 400ace8:	008002c4 	movi	r2,11
 400acec:	18800005 	stb	r2,0(r3)
        return;
 400acf0:	00000a06 	br	400ad1c <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 400acf4:	e0bffd17 	ldw	r2,-12(fp)
 400acf8:	11000384 	addi	r4,r2,14
 400acfc:	e17ffe17 	ldw	r5,-8(fp)
 400ad00:	400c7c40 	call	400c7c4 <OS_StrCopy>
 400ad04:	e0bffb17 	ldw	r2,-20(fp)
 400ad08:	e0bff815 	stw	r2,-32(fp)
 400ad0c:	e0bff817 	ldw	r2,-32(fp)
 400ad10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400ad14:	e0bfff17 	ldw	r2,-4(fp)
 400ad18:	10000005 	stb	zero,0(r2)
}
 400ad1c:	e037883a 	mov	sp,fp
 400ad20:	dfc00117 	ldw	ra,4(sp)
 400ad24:	df000017 	ldw	fp,0(sp)
 400ad28:	dec00204 	addi	sp,sp,8
 400ad2c:	f800283a 	ret

0400ad30 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 400ad30:	deffe704 	addi	sp,sp,-100
 400ad34:	dfc01815 	stw	ra,96(sp)
 400ad38:	df001715 	stw	fp,92(sp)
 400ad3c:	df001704 	addi	fp,sp,92
 400ad40:	e13ff615 	stw	r4,-40(fp)
 400ad44:	e17ff715 	stw	r5,-36(fp)
 400ad48:	e1bff815 	stw	r6,-32(fp)
 400ad4c:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 400ad50:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 400ad54:	e0800217 	ldw	r2,8(fp)
 400ad58:	1004c03a 	cmpne	r2,r2,zero
 400ad5c:	1000021e 	bne	r2,zero,400ad68 <OSEventPendMulti+0x38>
        return (0);
 400ad60:	e03fff15 	stw	zero,-4(fp)
 400ad64:	00019906 	br	400b3cc <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 400ad68:	e0bff617 	ldw	r2,-40(fp)
 400ad6c:	1004c03a 	cmpne	r2,r2,zero
 400ad70:	1000051e 	bne	r2,zero,400ad88 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 400ad74:	e0c00217 	ldw	r3,8(fp)
 400ad78:	00800104 	movi	r2,4
 400ad7c:	18800005 	stb	r2,0(r3)
        return (0);
 400ad80:	e03fff15 	stw	zero,-4(fp)
 400ad84:	00019106 	br	400b3cc <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 400ad88:	e0bff717 	ldw	r2,-36(fp)
 400ad8c:	1004c03a 	cmpne	r2,r2,zero
 400ad90:	1000051e 	bne	r2,zero,400ada8 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 400ad94:	e0c00217 	ldw	r3,8(fp)
 400ad98:	00800104 	movi	r2,4
 400ad9c:	18800005 	stb	r2,0(r3)
        return (0);
 400ada0:	e03fff15 	stw	zero,-4(fp)
 400ada4:	00018906 	br	400b3cc <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 400ada8:	e0bff817 	ldw	r2,-32(fp)
 400adac:	1004c03a 	cmpne	r2,r2,zero
 400adb0:	1000051e 	bne	r2,zero,400adc8 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 400adb4:	e0c00217 	ldw	r3,8(fp)
 400adb8:	00800104 	movi	r2,4
 400adbc:	18800005 	stb	r2,0(r3)
        return (0);
 400adc0:	e03fff15 	stw	zero,-4(fp)
 400adc4:	00018106 	br	400b3cc <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 400adc8:	e0bff717 	ldw	r2,-36(fp)
 400adcc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 400add0:	e0bff617 	ldw	r2,-40(fp)
 400add4:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 400add8:	e0bff517 	ldw	r2,-44(fp)
 400addc:	10800017 	ldw	r2,0(r2)
 400ade0:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 400ade4:	00001806 	br	400ae48 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 400ade8:	e0bff417 	ldw	r2,-48(fp)
 400adec:	10800003 	ldbu	r2,0(r2)
 400adf0:	10803fcc 	andi	r2,r2,255
 400adf4:	e0bffe15 	stw	r2,-8(fp)
 400adf8:	e0fffe17 	ldw	r3,-8(fp)
 400adfc:	188000a0 	cmpeqi	r2,r3,2
 400ae00:	10000b1e 	bne	r2,zero,400ae30 <OSEventPendMulti+0x100>
 400ae04:	e0fffe17 	ldw	r3,-8(fp)
 400ae08:	188000e0 	cmpeqi	r2,r3,3
 400ae0c:	1000081e 	bne	r2,zero,400ae30 <OSEventPendMulti+0x100>
 400ae10:	e0fffe17 	ldw	r3,-8(fp)
 400ae14:	18800060 	cmpeqi	r2,r3,1
 400ae18:	1000051e 	bne	r2,zero,400ae30 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:
            case OS_EVENT_TYPE_FLAG:
            default:
                *perr = OS_ERR_EVENT_TYPE;
 400ae1c:	e0c00217 	ldw	r3,8(fp)
 400ae20:	00800044 	movi	r2,1
 400ae24:	18800005 	stb	r2,0(r3)
                 return (0);
 400ae28:	e03fff15 	stw	zero,-4(fp)
 400ae2c:	00016706 	br	400b3cc <OSEventPendMulti+0x69c>
        }
        pevents++;
 400ae30:	e0bff517 	ldw	r2,-44(fp)
 400ae34:	10800104 	addi	r2,r2,4
 400ae38:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 400ae3c:	e0bff517 	ldw	r2,-44(fp)
 400ae40:	10800017 	ldw	r2,0(r2)
 400ae44:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 400ae48:	e0bff417 	ldw	r2,-48(fp)
 400ae4c:	1004c03a 	cmpne	r2,r2,zero
 400ae50:	103fe51e 	bne	r2,zero,400ade8 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 400ae54:	d0a05103 	ldbu	r2,-32444(gp)
 400ae58:	10803fcc 	andi	r2,r2,255
 400ae5c:	1005003a 	cmpeq	r2,r2,zero
 400ae60:	1000051e 	bne	r2,zero,400ae78 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 400ae64:	e0c00217 	ldw	r3,8(fp)
 400ae68:	00800084 	movi	r2,2
 400ae6c:	18800005 	stb	r2,0(r3)
        return (0);
 400ae70:	e03fff15 	stw	zero,-4(fp)
 400ae74:	00015506 	br	400b3cc <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 400ae78:	d0a04303 	ldbu	r2,-32500(gp)
 400ae7c:	10803fcc 	andi	r2,r2,255
 400ae80:	1005003a 	cmpeq	r2,r2,zero
 400ae84:	1000051e 	bne	r2,zero,400ae9c <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 400ae88:	e0c00217 	ldw	r3,8(fp)
 400ae8c:	00800344 	movi	r2,13
 400ae90:	18800005 	stb	r2,0(r3)
        return (0);
 400ae94:	e03fff15 	stw	zero,-4(fp)
 400ae98:	00014c06 	br	400b3cc <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ae9c:	0005303a 	rdctl	r2,status
 400aea0:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400aea4:	e0ffef17 	ldw	r3,-68(fp)
 400aea8:	00bfff84 	movi	r2,-2
 400aeac:	1884703a 	and	r2,r3,r2
 400aeb0:	1001703a 	wrctl	status,r2
  
  return context;
 400aeb4:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 400aeb8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 400aebc:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 400aec0:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 400aec4:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 400aec8:	e0bff617 	ldw	r2,-40(fp)
 400aecc:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 400aed0:	e0bff517 	ldw	r2,-44(fp)
 400aed4:	10800017 	ldw	r2,0(r2)
 400aed8:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 400aedc:	00008f06 	br	400b11c <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 400aee0:	e0bff417 	ldw	r2,-48(fp)
 400aee4:	10800003 	ldbu	r2,0(r2)
 400aee8:	10803fcc 	andi	r2,r2,255
 400aeec:	e0bffd15 	stw	r2,-12(fp)
 400aef0:	e0fffd17 	ldw	r3,-12(fp)
 400aef4:	188000a0 	cmpeqi	r2,r3,2
 400aef8:	1000441e 	bne	r2,zero,400b00c <OSEventPendMulti+0x2dc>
 400aefc:	e0fffd17 	ldw	r3,-12(fp)
 400af00:	188000e0 	cmpeqi	r2,r3,3
 400af04:	1000041e 	bne	r2,zero,400af18 <OSEventPendMulti+0x1e8>
 400af08:	e0fffd17 	ldw	r3,-12(fp)
 400af0c:	18800060 	cmpeqi	r2,r3,1
 400af10:	1000211e 	bne	r2,zero,400af98 <OSEventPendMulti+0x268>
 400af14:	00006f06 	br	400b0d4 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 400af18:	e0bff417 	ldw	r2,-48(fp)
 400af1c:	1080020b 	ldhu	r2,8(r2)
 400af20:	10bfffcc 	andi	r2,r2,65535
 400af24:	1005003a 	cmpeq	r2,r2,zero
 400af28:	1000171e 	bne	r2,zero,400af88 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 400af2c:	e0bff417 	ldw	r2,-48(fp)
 400af30:	1080020b 	ldhu	r2,8(r2)
 400af34:	10bfffc4 	addi	r2,r2,-1
 400af38:	1007883a 	mov	r3,r2
 400af3c:	e0bff417 	ldw	r2,-48(fp)
 400af40:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 400af44:	e0fff717 	ldw	r3,-36(fp)
 400af48:	e0bff417 	ldw	r2,-48(fp)
 400af4c:	18800015 	stw	r2,0(r3)
 400af50:	e0bff717 	ldw	r2,-36(fp)
 400af54:	10800104 	addi	r2,r2,4
 400af58:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 400af5c:	00800044 	movi	r2,1
 400af60:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 400af64:	e0bff817 	ldw	r2,-32(fp)
 400af68:	10000015 	stw	zero,0(r2)
 400af6c:	e0bff817 	ldw	r2,-32(fp)
 400af70:	10800104 	addi	r2,r2,4
 400af74:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 400af78:	e0bff18b 	ldhu	r2,-58(fp)
 400af7c:	10800044 	addi	r2,r2,1
 400af80:	e0bff18d 	sth	r2,-58(fp)
 400af84:	00005f06 	br	400b104 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 400af88:	e0bff103 	ldbu	r2,-60(fp)
 400af8c:	10800054 	ori	r2,r2,1
 400af90:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 400af94:	00005b06 	br	400b104 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 400af98:	e0bff417 	ldw	r2,-48(fp)
 400af9c:	10800117 	ldw	r2,4(r2)
 400afa0:	1005003a 	cmpeq	r2,r2,zero
 400afa4:	1000151e 	bne	r2,zero,400affc <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 400afa8:	e0bff417 	ldw	r2,-48(fp)
 400afac:	10c00117 	ldw	r3,4(r2)
 400afb0:	e0bff817 	ldw	r2,-32(fp)
 400afb4:	10c00015 	stw	r3,0(r2)
 400afb8:	e0bff817 	ldw	r2,-32(fp)
 400afbc:	10800104 	addi	r2,r2,4
 400afc0:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 400afc4:	e0bff417 	ldw	r2,-48(fp)
 400afc8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 400afcc:	e0fff717 	ldw	r3,-36(fp)
 400afd0:	e0bff417 	ldw	r2,-48(fp)
 400afd4:	18800015 	stw	r2,0(r3)
 400afd8:	e0bff717 	ldw	r2,-36(fp)
 400afdc:	10800104 	addi	r2,r2,4
 400afe0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 400afe4:	00800044 	movi	r2,1
 400afe8:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 400afec:	e0bff18b 	ldhu	r2,-58(fp)
 400aff0:	10800044 	addi	r2,r2,1
 400aff4:	e0bff18d 	sth	r2,-58(fp)
 400aff8:	00004206 	br	400b104 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 400affc:	e0bff103 	ldbu	r2,-60(fp)
 400b000:	10800094 	ori	r2,r2,2
 400b004:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 400b008:	00003e06 	br	400b104 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 400b00c:	e0bff417 	ldw	r2,-48(fp)
 400b010:	10800117 	ldw	r2,4(r2)
 400b014:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 400b018:	e0bff317 	ldw	r2,-52(fp)
 400b01c:	1080058b 	ldhu	r2,22(r2)
 400b020:	10bfffcc 	andi	r2,r2,65535
 400b024:	1005003a 	cmpeq	r2,r2,zero
 400b028:	1000261e 	bne	r2,zero,400b0c4 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 400b02c:	e0bff317 	ldw	r2,-52(fp)
 400b030:	11000417 	ldw	r4,16(r2)
 400b034:	20c00017 	ldw	r3,0(r4)
 400b038:	e0bff817 	ldw	r2,-32(fp)
 400b03c:	10c00015 	stw	r3,0(r2)
 400b040:	e0bff817 	ldw	r2,-32(fp)
 400b044:	10800104 	addi	r2,r2,4
 400b048:	e0bff815 	stw	r2,-32(fp)
 400b04c:	20c00104 	addi	r3,r4,4
 400b050:	e0bff317 	ldw	r2,-52(fp)
 400b054:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 400b058:	e0bff317 	ldw	r2,-52(fp)
 400b05c:	10c00417 	ldw	r3,16(r2)
 400b060:	e0bff317 	ldw	r2,-52(fp)
 400b064:	10800217 	ldw	r2,8(r2)
 400b068:	1880041e 	bne	r3,r2,400b07c <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 400b06c:	e0bff317 	ldw	r2,-52(fp)
 400b070:	10c00117 	ldw	r3,4(r2)
 400b074:	e0bff317 	ldw	r2,-52(fp)
 400b078:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 400b07c:	e0bff317 	ldw	r2,-52(fp)
 400b080:	1080058b 	ldhu	r2,22(r2)
 400b084:	10bfffc4 	addi	r2,r2,-1
 400b088:	1007883a 	mov	r3,r2
 400b08c:	e0bff317 	ldw	r2,-52(fp)
 400b090:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 400b094:	e0fff717 	ldw	r3,-36(fp)
 400b098:	e0bff417 	ldw	r2,-48(fp)
 400b09c:	18800015 	stw	r2,0(r3)
 400b0a0:	e0bff717 	ldw	r2,-36(fp)
 400b0a4:	10800104 	addi	r2,r2,4
 400b0a8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 400b0ac:	00800044 	movi	r2,1
 400b0b0:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 400b0b4:	e0bff18b 	ldhu	r2,-58(fp)
 400b0b8:	10800044 	addi	r2,r2,1
 400b0bc:	e0bff18d 	sth	r2,-58(fp)
 400b0c0:	00001006 	br	400b104 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 400b0c4:	e0bff103 	ldbu	r2,-60(fp)
 400b0c8:	10800114 	ori	r2,r2,4
 400b0cc:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 400b0d0:	00000c06 	br	400b104 <OSEventPendMulti+0x3d4>
 400b0d4:	e0bff017 	ldw	r2,-64(fp)
 400b0d8:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b0dc:	e0bfee17 	ldw	r2,-72(fp)
 400b0e0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:
            case OS_EVENT_TYPE_FLAG:
            default:
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 400b0e4:	e0bff717 	ldw	r2,-36(fp)
 400b0e8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 400b0ec:	e0c00217 	ldw	r3,8(fp)
 400b0f0:	00800044 	movi	r2,1
 400b0f4:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 400b0f8:	e0bff18b 	ldhu	r2,-58(fp)
 400b0fc:	e0bfff15 	stw	r2,-4(fp)
 400b100:	0000b206 	br	400b3cc <OSEventPendMulti+0x69c>
        }
        pevents++;
 400b104:	e0bff517 	ldw	r2,-44(fp)
 400b108:	10800104 	addi	r2,r2,4
 400b10c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 400b110:	e0bff517 	ldw	r2,-44(fp)
 400b114:	10800017 	ldw	r2,0(r2)
 400b118:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 400b11c:	e0bff417 	ldw	r2,-48(fp)
 400b120:	1004c03a 	cmpne	r2,r2,zero
 400b124:	103f6e1e 	bne	r2,zero,400aee0 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 400b128:	e0bff203 	ldbu	r2,-56(fp)
 400b12c:	10800058 	cmpnei	r2,r2,1
 400b130:	10000b1e 	bne	r2,zero,400b160 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 400b134:	e0bff717 	ldw	r2,-36(fp)
 400b138:	10000015 	stw	zero,0(r2)
 400b13c:	e0bff017 	ldw	r2,-64(fp)
 400b140:	e0bfed15 	stw	r2,-76(fp)
 400b144:	e0bfed17 	ldw	r2,-76(fp)
 400b148:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 400b14c:	e0800217 	ldw	r2,8(fp)
 400b150:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 400b154:	e0fff18b 	ldhu	r3,-58(fp)
 400b158:	e0ffff15 	stw	r3,-4(fp)
 400b15c:	00009b06 	br	400b3cc <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 400b160:	d1205217 	ldw	r4,-32440(gp)
 400b164:	d0a05217 	ldw	r2,-32440(gp)
 400b168:	10c00c03 	ldbu	r3,48(r2)
 400b16c:	e0bff103 	ldbu	r2,-60(fp)
 400b170:	1884b03a 	or	r2,r3,r2
 400b174:	1007883a 	mov	r3,r2
 400b178:	00bfe004 	movi	r2,-128
 400b17c:	1884b03a 	or	r2,r3,r2
 400b180:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 400b184:	d0a05217 	ldw	r2,-32440(gp)
 400b188:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 400b18c:	d0e05217 	ldw	r3,-32440(gp)
 400b190:	e0bff90b 	ldhu	r2,-28(fp)
 400b194:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 400b198:	e13ff617 	ldw	r4,-40(fp)
 400b19c:	400bebc0 	call	400bebc <OS_EventTaskWaitMulti>
 400b1a0:	e0bff017 	ldw	r2,-64(fp)
 400b1a4:	e0bfec15 	stw	r2,-80(fp)
 400b1a8:	e0bfec17 	ldw	r2,-80(fp)
 400b1ac:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 400b1b0:	400c6580 	call	400c658 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b1b4:	0005303a 	rdctl	r2,status
 400b1b8:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b1bc:	e0ffeb17 	ldw	r3,-84(fp)
 400b1c0:	00bfff84 	movi	r2,-2
 400b1c4:	1884703a 	and	r2,r3,r2
 400b1c8:	1001703a 	wrctl	status,r2
  
  return context;
 400b1cc:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 400b1d0:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 400b1d4:	d0a05217 	ldw	r2,-32440(gp)
 400b1d8:	10800c43 	ldbu	r2,49(r2)
 400b1dc:	10803fcc 	andi	r2,r2,255
 400b1e0:	e0bffc15 	stw	r2,-16(fp)
 400b1e4:	e0fffc17 	ldw	r3,-16(fp)
 400b1e8:	1805003a 	cmpeq	r2,r3,zero
 400b1ec:	1000041e 	bne	r2,zero,400b200 <OSEventPendMulti+0x4d0>
 400b1f0:	e0fffc17 	ldw	r3,-16(fp)
 400b1f4:	188000a0 	cmpeqi	r2,r3,2
 400b1f8:	1000011e 	bne	r2,zero,400b200 <OSEventPendMulti+0x4d0>
 400b1fc:	00001906 	br	400b264 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 400b200:	d0a05217 	ldw	r2,-32440(gp)
 400b204:	10800717 	ldw	r2,28(r2)
 400b208:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 400b20c:	e0bff417 	ldw	r2,-48(fp)
 400b210:	1005003a 	cmpeq	r2,r2,zero
 400b214:	10000c1e 	bne	r2,zero,400b248 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 400b218:	e0fff717 	ldw	r3,-36(fp)
 400b21c:	e0bff417 	ldw	r2,-48(fp)
 400b220:	18800015 	stw	r2,0(r3)
 400b224:	e0bff717 	ldw	r2,-36(fp)
 400b228:	10800104 	addi	r2,r2,4
 400b22c:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 400b230:	e0bff717 	ldw	r2,-36(fp)
 400b234:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 400b238:	e0bff18b 	ldhu	r2,-58(fp)
 400b23c:	10800044 	addi	r2,r2,1
 400b240:	e0bff18d 	sth	r2,-58(fp)
 400b244:	00000a06 	br	400b270 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 400b248:	d0a05217 	ldw	r2,-32440(gp)
 400b24c:	00c00044 	movi	r3,1
 400b250:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400b254:	d1205217 	ldw	r4,-32440(gp)
 400b258:	e17ff617 	ldw	r5,-40(fp)
 400b25c:	400c0c80 	call	400c0c8 <OS_EventTaskRemoveMulti>
             }
			 break;
 400b260:	00000306 	br	400b270 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400b264:	d1205217 	ldw	r4,-32440(gp)
 400b268:	e17ff617 	ldw	r5,-40(fp)
 400b26c:	400c0c80 	call	400c0c8 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 400b270:	d0a05217 	ldw	r2,-32440(gp)
 400b274:	10800c43 	ldbu	r2,49(r2)
 400b278:	10803fcc 	andi	r2,r2,255
 400b27c:	e0bffb15 	stw	r2,-20(fp)
 400b280:	e0fffb17 	ldw	r3,-20(fp)
 400b284:	1805003a 	cmpeq	r2,r3,zero
 400b288:	1000041e 	bne	r2,zero,400b29c <OSEventPendMulti+0x56c>
 400b28c:	e0fffb17 	ldw	r3,-20(fp)
 400b290:	188000a0 	cmpeqi	r2,r3,2
 400b294:	10002c1e 	bne	r2,zero,400b348 <OSEventPendMulti+0x618>
 400b298:	00003406 	br	400b36c <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 400b29c:	e0bff417 	ldw	r2,-48(fp)
 400b2a0:	10800003 	ldbu	r2,0(r2)
 400b2a4:	10803fcc 	andi	r2,r2,255
 400b2a8:	e0bffa15 	stw	r2,-24(fp)
 400b2ac:	e0fffa17 	ldw	r3,-24(fp)
 400b2b0:	18800050 	cmplti	r2,r3,1
 400b2b4:	1000151e 	bne	r2,zero,400b30c <OSEventPendMulti+0x5dc>
 400b2b8:	e0fffa17 	ldw	r3,-24(fp)
 400b2bc:	188000d0 	cmplti	r2,r3,3
 400b2c0:	10000a1e 	bne	r2,zero,400b2ec <OSEventPendMulti+0x5bc>
 400b2c4:	e0fffa17 	ldw	r3,-24(fp)
 400b2c8:	188000e0 	cmpeqi	r2,r3,3
 400b2cc:	1000011e 	bne	r2,zero,400b2d4 <OSEventPendMulti+0x5a4>
 400b2d0:	00000e06 	br	400b30c <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 400b2d4:	e0bff817 	ldw	r2,-32(fp)
 400b2d8:	10000015 	stw	zero,0(r2)
 400b2dc:	e0bff817 	ldw	r2,-32(fp)
 400b2e0:	10800104 	addi	r2,r2,4
 400b2e4:	e0bff815 	stw	r2,-32(fp)
                      break;
 400b2e8:	00001406 	br	400b33c <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 400b2ec:	d0a05217 	ldw	r2,-32440(gp)
 400b2f0:	10c00917 	ldw	r3,36(r2)
 400b2f4:	e0bff817 	ldw	r2,-32(fp)
 400b2f8:	10c00015 	stw	r3,0(r2)
 400b2fc:	e0bff817 	ldw	r2,-32(fp)
 400b300:	10800104 	addi	r2,r2,4
 400b304:	e0bff815 	stw	r2,-32(fp)
                      break;
 400b308:	00000c06 	br	400b33c <OSEventPendMulti+0x60c>
 400b30c:	e0bff017 	ldw	r2,-64(fp)
 400b310:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b314:	e0bfea17 	ldw	r2,-88(fp)
 400b318:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:
                 case OS_EVENT_TYPE_FLAG:
                 default:
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 400b31c:	e0bff717 	ldw	r2,-36(fp)
 400b320:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 400b324:	e0c00217 	ldw	r3,8(fp)
 400b328:	00800044 	movi	r2,1
 400b32c:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 400b330:	e0bff18b 	ldhu	r2,-58(fp)
 400b334:	e0bfff15 	stw	r2,-4(fp)
 400b338:	00002406 	br	400b3cc <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 400b33c:	e0800217 	ldw	r2,8(fp)
 400b340:	10000005 	stb	zero,0(r2)
             break;
 400b344:	00001106 	br	400b38c <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 400b348:	e0bff817 	ldw	r2,-32(fp)
 400b34c:	10000015 	stw	zero,0(r2)
 400b350:	e0bff817 	ldw	r2,-32(fp)
 400b354:	10800104 	addi	r2,r2,4
 400b358:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 400b35c:	e0c00217 	ldw	r3,8(fp)
 400b360:	00800384 	movi	r2,14
 400b364:	18800005 	stb	r2,0(r3)
             break;
 400b368:	00000806 	br	400b38c <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_TO:
        default:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 400b36c:	e0bff817 	ldw	r2,-32(fp)
 400b370:	10000015 	stw	zero,0(r2)
 400b374:	e0bff817 	ldw	r2,-32(fp)
 400b378:	10800104 	addi	r2,r2,4
 400b37c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 400b380:	e0c00217 	ldw	r3,8(fp)
 400b384:	00800284 	movi	r2,10
 400b388:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 400b38c:	d0a05217 	ldw	r2,-32440(gp)
 400b390:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 400b394:	d0a05217 	ldw	r2,-32440(gp)
 400b398:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 400b39c:	d0a05217 	ldw	r2,-32440(gp)
 400b3a0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 400b3a4:	d0a05217 	ldw	r2,-32440(gp)
 400b3a8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 400b3ac:	d0a05217 	ldw	r2,-32440(gp)
 400b3b0:	10000915 	stw	zero,36(r2)
 400b3b4:	e0bff017 	ldw	r2,-64(fp)
 400b3b8:	e0bfe915 	stw	r2,-92(fp)
 400b3bc:	e0bfe917 	ldw	r2,-92(fp)
 400b3c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 400b3c4:	e0fff18b 	ldhu	r3,-58(fp)
 400b3c8:	e0ffff15 	stw	r3,-4(fp)
 400b3cc:	e0bfff17 	ldw	r2,-4(fp)
}
 400b3d0:	e037883a 	mov	sp,fp
 400b3d4:	dfc00117 	ldw	ra,4(sp)
 400b3d8:	df000017 	ldw	fp,0(sp)
 400b3dc:	dec00204 	addi	sp,sp,8
 400b3e0:	f800283a 	ret

0400b3e4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 400b3e4:	defffe04 	addi	sp,sp,-8
 400b3e8:	dfc00115 	stw	ra,4(sp)
 400b3ec:	df000015 	stw	fp,0(sp)
 400b3f0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 400b3f4:	4015c980 	call	4015c98 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 400b3f8:	400c3100 	call	400c310 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 400b3fc:	400c3540 	call	400c354 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 400b400:	400c4b80 	call	400c4b8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 400b404:	400c2340 	call	400c234 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 400b408:	400e5900 	call	400e590 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 400b40c:	400ef680 	call	400ef68 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 400b410:	40102c00 	call	40102c0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 400b414:	400c3c00 	call	400c3c0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 400b418:	400c43c0 	call	400c43c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 400b41c:	4015cb40 	call	4015cb4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 400b420:	400cd680 	call	400cd68 <OSDebugInit>
#endif
}
 400b424:	e037883a 	mov	sp,fp
 400b428:	dfc00117 	ldw	ra,4(sp)
 400b42c:	df000017 	ldw	fp,0(sp)
 400b430:	dec00204 	addi	sp,sp,8
 400b434:	f800283a 	ret

0400b438 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 400b438:	defffc04 	addi	sp,sp,-16
 400b43c:	df000315 	stw	fp,12(sp)
 400b440:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400b444:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 400b448:	d0a04343 	ldbu	r2,-32499(gp)
 400b44c:	10803fcc 	andi	r2,r2,255
 400b450:	10800058 	cmpnei	r2,r2,1
 400b454:	1000131e 	bne	r2,zero,400b4a4 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b458:	0005303a 	rdctl	r2,status
 400b45c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b460:	e0fffe17 	ldw	r3,-8(fp)
 400b464:	00bfff84 	movi	r2,-2
 400b468:	1884703a 	and	r2,r3,r2
 400b46c:	1001703a 	wrctl	status,r2
  
  return context;
 400b470:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400b474:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 400b478:	d0a05103 	ldbu	r2,-32444(gp)
 400b47c:	10803fcc 	andi	r2,r2,255
 400b480:	10803fe0 	cmpeqi	r2,r2,255
 400b484:	1000031e 	bne	r2,zero,400b494 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 400b488:	d0a05103 	ldbu	r2,-32444(gp)
 400b48c:	10800044 	addi	r2,r2,1
 400b490:	d0a05105 	stb	r2,-32444(gp)
 400b494:	e0bfff17 	ldw	r2,-4(fp)
 400b498:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b49c:	e0bffd17 	ldw	r2,-12(fp)
 400b4a0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 400b4a4:	e037883a 	mov	sp,fp
 400b4a8:	df000017 	ldw	fp,0(sp)
 400b4ac:	dec00104 	addi	sp,sp,4
 400b4b0:	f800283a 	ret

0400b4b4 <getPrioHightRdy>:
*                 end of the ISR.
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

INT8U getPrioHightRdy(){
 400b4b4:	defffd04 	addi	sp,sp,-12
 400b4b8:	df000215 	stw	fp,8(sp)
 400b4bc:	df000204 	addi	fp,sp,8
    OS_TCB    *ptcb;

    INT8U prioHighRdy=20;
 400b4c0:	00800504 	movi	r2,20
 400b4c4:	e0bffe85 	stb	r2,-6(fp)
    INT16U deadLine=10000;
 400b4c8:	0089c404 	movi	r2,10000
 400b4cc:	e0bffe0d 	sth	r2,-8(fp)
    //printTCBList();
    ptcb = OSTCBList;                                  /* Point at first TCB in TCB list           */
 400b4d0:	d0a04617 	ldw	r2,-32488(gp)
 400b4d4:	e0bfff15 	stw	r2,-4(fp)
    while(ptcb->OSTCBPrio==1 || ptcb->OSTCBPrio==2 || ptcb->OSTCBPrio==3 || ptcb->OSTCBPrio==0){
 400b4d8:	00001806 	br	400b53c <getPrioHightRdy+0x88>
        if(ptcb->OSTCBStat==OS_STAT_RDY && !ptcb->OSTCBDly && ptcb->deadLine<deadLine){
 400b4dc:	e0bfff17 	ldw	r2,-4(fp)
 400b4e0:	10800c03 	ldbu	r2,48(r2)
 400b4e4:	10803fcc 	andi	r2,r2,255
 400b4e8:	1004c03a 	cmpne	r2,r2,zero
 400b4ec:	1000101e 	bne	r2,zero,400b530 <getPrioHightRdy+0x7c>
 400b4f0:	e0bfff17 	ldw	r2,-4(fp)
 400b4f4:	10800b8b 	ldhu	r2,46(r2)
 400b4f8:	10bfffcc 	andi	r2,r2,65535
 400b4fc:	1004c03a 	cmpne	r2,r2,zero
 400b500:	10000b1e 	bne	r2,zero,400b530 <getPrioHightRdy+0x7c>
 400b504:	e0bfff17 	ldw	r2,-4(fp)
 400b508:	10800e8b 	ldhu	r2,58(r2)
 400b50c:	10ffffcc 	andi	r3,r2,65535
 400b510:	e0bffe0b 	ldhu	r2,-8(fp)
 400b514:	1880062e 	bgeu	r3,r2,400b530 <getPrioHightRdy+0x7c>
            prioHighRdy = ptcb->OSTCBPrio;
 400b518:	e0bfff17 	ldw	r2,-4(fp)
 400b51c:	10800c83 	ldbu	r2,50(r2)
 400b520:	e0bffe85 	stb	r2,-6(fp)
            deadLine = ptcb->deadLine;
 400b524:	e0bfff17 	ldw	r2,-4(fp)
 400b528:	10800e8b 	ldhu	r2,58(r2)
 400b52c:	e0bffe0d 	sth	r2,-8(fp)
        }
        //printf("Priority:%d\tDeadline:%d\tOSTCBDly:%d,compTime %d\n", (int)ptcb->OSTCBPrio,(int) ptcb->deadLine,(int) ptcb->OSTCBDly,(int)ptcb->compTime);
        ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list            */
 400b530:	e0bfff17 	ldw	r2,-4(fp)
 400b534:	10800517 	ldw	r2,20(r2)
 400b538:	e0bfff15 	stw	r2,-4(fp)

    INT8U prioHighRdy=20;
    INT16U deadLine=10000;
    //printTCBList();
    ptcb = OSTCBList;                                  /* Point at first TCB in TCB list           */
    while(ptcb->OSTCBPrio==1 || ptcb->OSTCBPrio==2 || ptcb->OSTCBPrio==3 || ptcb->OSTCBPrio==0){
 400b53c:	e0bfff17 	ldw	r2,-4(fp)
 400b540:	10800c83 	ldbu	r2,50(r2)
 400b544:	10803fcc 	andi	r2,r2,255
 400b548:	10800060 	cmpeqi	r2,r2,1
 400b54c:	103fe31e 	bne	r2,zero,400b4dc <getPrioHightRdy+0x28>
 400b550:	e0bfff17 	ldw	r2,-4(fp)
 400b554:	10800c83 	ldbu	r2,50(r2)
 400b558:	10803fcc 	andi	r2,r2,255
 400b55c:	108000a0 	cmpeqi	r2,r2,2
 400b560:	103fde1e 	bne	r2,zero,400b4dc <getPrioHightRdy+0x28>
 400b564:	e0bfff17 	ldw	r2,-4(fp)
 400b568:	10800c83 	ldbu	r2,50(r2)
 400b56c:	10803fcc 	andi	r2,r2,255
 400b570:	108000e0 	cmpeqi	r2,r2,3
 400b574:	103fd91e 	bne	r2,zero,400b4dc <getPrioHightRdy+0x28>
 400b578:	e0bfff17 	ldw	r2,-4(fp)
 400b57c:	10800c83 	ldbu	r2,50(r2)
 400b580:	10803fcc 	andi	r2,r2,255
 400b584:	1005003a 	cmpeq	r2,r2,zero
 400b588:	103fd41e 	bne	r2,zero,400b4dc <getPrioHightRdy+0x28>
        //printf("Priority:%d\tDeadline:%d\tOSTCBDly:%d,compTime %d\n", (int)ptcb->OSTCBPrio,(int) ptcb->deadLine,(int) ptcb->OSTCBDly,(int)ptcb->compTime);
        ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list            */
    }
    //printf("select Priority:%d\n",(int)prioHighRdy);
    //sprintf(&CtxSwMessage[CtxSwMessageTop++],"time %d,deadline %d ,prioHighRdy %d, curPrio %d\n",(int)OSTime,(int)deadLine,(int)prioHighRdy,(int)OSPrioCur);
    return prioHighRdy;
 400b58c:	e0bffe83 	ldbu	r2,-6(fp)
}
 400b590:	e037883a 	mov	sp,fp
 400b594:	df000017 	ldw	fp,0(sp)
 400b598:	dec00104 	addi	sp,sp,4
 400b59c:	f800283a 	ret

0400b5a0 <OSIntExit>:
void  OSIntExit (void)
{
 400b5a0:	defffb04 	addi	sp,sp,-20
 400b5a4:	dfc00415 	stw	ra,16(sp)
 400b5a8:	df000315 	stw	fp,12(sp)
 400b5ac:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400b5b0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 400b5b4:	d0a04343 	ldbu	r2,-32499(gp)
 400b5b8:	10803fcc 	andi	r2,r2,255
 400b5bc:	10800058 	cmpnei	r2,r2,1
 400b5c0:	10003c1e 	bne	r2,zero,400b6b4 <OSIntExit+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b5c4:	0005303a 	rdctl	r2,status
 400b5c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b5cc:	e0fffe17 	ldw	r3,-8(fp)
 400b5d0:	00bfff84 	movi	r2,-2
 400b5d4:	1884703a 	and	r2,r3,r2
 400b5d8:	1001703a 	wrctl	status,r2
  
  return context;
 400b5dc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400b5e0:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 400b5e4:	d0a05103 	ldbu	r2,-32444(gp)
 400b5e8:	10803fcc 	andi	r2,r2,255
 400b5ec:	1005003a 	cmpeq	r2,r2,zero
 400b5f0:	1000031e 	bne	r2,zero,400b600 <OSIntExit+0x60>
            OSIntNesting--;
 400b5f4:	d0a05103 	ldbu	r2,-32444(gp)
 400b5f8:	10bfffc4 	addi	r2,r2,-1
 400b5fc:	d0a05105 	stb	r2,-32444(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 400b600:	d0a05103 	ldbu	r2,-32444(gp)
 400b604:	10803fcc 	andi	r2,r2,255
 400b608:	1004c03a 	cmpne	r2,r2,zero
 400b60c:	1000251e 	bne	r2,zero,400b6a4 <OSIntExit+0x104>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 400b610:	d0a04303 	ldbu	r2,-32500(gp)
 400b614:	10803fcc 	andi	r2,r2,255
 400b618:	1004c03a 	cmpne	r2,r2,zero
 400b61c:	1000211e 	bne	r2,zero,400b6a4 <OSIntExit+0x104>
                //OS_SchedNew();
                OSPrioHighRdy = getPrioHightRdy();
 400b620:	400b4b40 	call	400b4b4 <getPrioHightRdy>
 400b624:	d0a04505 	stb	r2,-32492(gp)
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 400b628:	d0a04503 	ldbu	r2,-32492(gp)
 400b62c:	d0e04543 	ldbu	r3,-32491(gp)
 400b630:	11003fcc 	andi	r4,r2,255
 400b634:	18803fcc 	andi	r2,r3,255
 400b638:	20801a26 	beq	r4,r2,400b6a4 <OSIntExit+0x104>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 400b63c:	d0a04503 	ldbu	r2,-32492(gp)
 400b640:	10803fcc 	andi	r2,r2,255
 400b644:	00c100b4 	movhi	r3,1026
 400b648:	18d3db04 	addi	r3,r3,20332
 400b64c:	1085883a 	add	r2,r2,r2
 400b650:	1085883a 	add	r2,r2,r2
 400b654:	10c5883a 	add	r2,r2,r3
 400b658:	10800017 	ldw	r2,0(r2)
 400b65c:	d0a04d15 	stw	r2,-32460(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 400b660:	d0e04d17 	ldw	r3,-32460(gp)
 400b664:	18801017 	ldw	r2,64(r3)
 400b668:	10800044 	addi	r2,r2,1
 400b66c:	18801015 	stw	r2,64(r3)
#endif

                printf("%5d preempty %d   %d\n",(int)OSTime,(int)OSPrioCur,(int)OSPrioHighRdy);
 400b670:	d0a05317 	ldw	r2,-32436(gp)
 400b674:	100b883a 	mov	r5,r2
 400b678:	d0a04543 	ldbu	r2,-32491(gp)
 400b67c:	11803fcc 	andi	r6,r2,255
 400b680:	d0a04503 	ldbu	r2,-32492(gp)
 400b684:	11c03fcc 	andi	r7,r2,255
 400b688:	01010074 	movhi	r4,1025
 400b68c:	211ac404 	addi	r4,r4,27408
 400b690:	40006880 	call	4000688 <printf>

                //sprintf(&CtxSwMessage[CtxSwMessageTop++],"%5d preempty %d   %d\n",(int)OSTime,(int)OSPrioCur,(int)OSPrioHighRdy);

                    //printf("%5d preempty %d   %d\n",(int)OSTime,(int)OSPrioCur,(int)OSPrioHighRdy);
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 400b694:	d0a04817 	ldw	r2,-32480(gp)
 400b698:	10800044 	addi	r2,r2,1
 400b69c:	d0a04815 	stw	r2,-32480(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 400b6a0:	40158240 	call	4015824 <OSCtxSw>
 400b6a4:	e0bfff17 	ldw	r2,-4(fp)
 400b6a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b6ac:	e0bffd17 	ldw	r2,-12(fp)
 400b6b0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 400b6b4:	e037883a 	mov	sp,fp
 400b6b8:	dfc00117 	ldw	ra,4(sp)
 400b6bc:	df000017 	ldw	fp,0(sp)
 400b6c0:	dec00204 	addi	sp,sp,8
 400b6c4:	f800283a 	ret

0400b6c8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 400b6c8:	defffc04 	addi	sp,sp,-16
 400b6cc:	df000315 	stw	fp,12(sp)
 400b6d0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400b6d4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 400b6d8:	d0a04343 	ldbu	r2,-32499(gp)
 400b6dc:	10803fcc 	andi	r2,r2,255
 400b6e0:	10800058 	cmpnei	r2,r2,1
 400b6e4:	1000171e 	bne	r2,zero,400b744 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b6e8:	0005303a 	rdctl	r2,status
 400b6ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b6f0:	e0fffe17 	ldw	r3,-8(fp)
 400b6f4:	00bfff84 	movi	r2,-2
 400b6f8:	1884703a 	and	r2,r3,r2
 400b6fc:	1001703a 	wrctl	status,r2
  
  return context;
 400b700:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400b704:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 400b708:	d0a05103 	ldbu	r2,-32444(gp)
 400b70c:	10803fcc 	andi	r2,r2,255
 400b710:	1004c03a 	cmpne	r2,r2,zero
 400b714:	1000071e 	bne	r2,zero,400b734 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 400b718:	d0a04303 	ldbu	r2,-32500(gp)
 400b71c:	10803fcc 	andi	r2,r2,255
 400b720:	10803fe0 	cmpeqi	r2,r2,255
 400b724:	1000031e 	bne	r2,zero,400b734 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 400b728:	d0a04303 	ldbu	r2,-32500(gp)
 400b72c:	10800044 	addi	r2,r2,1
 400b730:	d0a04305 	stb	r2,-32500(gp)
 400b734:	e0bfff17 	ldw	r2,-4(fp)
 400b738:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b73c:	e0bffd17 	ldw	r2,-12(fp)
 400b740:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 400b744:	e037883a 	mov	sp,fp
 400b748:	df000017 	ldw	fp,0(sp)
 400b74c:	dec00104 	addi	sp,sp,4
 400b750:	f800283a 	ret

0400b754 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 400b754:	defff804 	addi	sp,sp,-32
 400b758:	dfc00715 	stw	ra,28(sp)
 400b75c:	df000615 	stw	fp,24(sp)
 400b760:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400b764:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 400b768:	d0a04343 	ldbu	r2,-32499(gp)
 400b76c:	10803fcc 	andi	r2,r2,255
 400b770:	10800058 	cmpnei	r2,r2,1
 400b774:	10002b1e 	bne	r2,zero,400b824 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b778:	0005303a 	rdctl	r2,status
 400b77c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b780:	e0fffe17 	ldw	r3,-8(fp)
 400b784:	00bfff84 	movi	r2,-2
 400b788:	1884703a 	and	r2,r3,r2
 400b78c:	1001703a 	wrctl	status,r2
  
  return context;
 400b790:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400b794:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 400b798:	d0a04303 	ldbu	r2,-32500(gp)
 400b79c:	10803fcc 	andi	r2,r2,255
 400b7a0:	1005003a 	cmpeq	r2,r2,zero
 400b7a4:	10001b1e 	bne	r2,zero,400b814 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 400b7a8:	d0a04303 	ldbu	r2,-32500(gp)
 400b7ac:	10bfffc4 	addi	r2,r2,-1
 400b7b0:	d0a04305 	stb	r2,-32500(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 400b7b4:	d0a04303 	ldbu	r2,-32500(gp)
 400b7b8:	10803fcc 	andi	r2,r2,255
 400b7bc:	1004c03a 	cmpne	r2,r2,zero
 400b7c0:	10000f1e 	bne	r2,zero,400b800 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 400b7c4:	d0a05103 	ldbu	r2,-32444(gp)
 400b7c8:	10803fcc 	andi	r2,r2,255
 400b7cc:	1004c03a 	cmpne	r2,r2,zero
 400b7d0:	1000061e 	bne	r2,zero,400b7ec <OSSchedUnlock+0x98>
 400b7d4:	e0bfff17 	ldw	r2,-4(fp)
 400b7d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b7dc:	e0bffd17 	ldw	r2,-12(fp)
 400b7e0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 400b7e4:	400c6580 	call	400c658 <OS_Sched>
 400b7e8:	00000e06 	br	400b824 <OSSchedUnlock+0xd0>
 400b7ec:	e0bfff17 	ldw	r2,-4(fp)
 400b7f0:	e0bffc15 	stw	r2,-16(fp)
 400b7f4:	e0bffc17 	ldw	r2,-16(fp)
 400b7f8:	1001703a 	wrctl	status,r2
 400b7fc:	00000906 	br	400b824 <OSSchedUnlock+0xd0>
 400b800:	e0bfff17 	ldw	r2,-4(fp)
 400b804:	e0bffb15 	stw	r2,-20(fp)
 400b808:	e0bffb17 	ldw	r2,-20(fp)
 400b80c:	1001703a 	wrctl	status,r2
 400b810:	00000406 	br	400b824 <OSSchedUnlock+0xd0>
 400b814:	e0bfff17 	ldw	r2,-4(fp)
 400b818:	e0bffa15 	stw	r2,-24(fp)
 400b81c:	e0bffa17 	ldw	r2,-24(fp)
 400b820:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 400b824:	e037883a 	mov	sp,fp
 400b828:	dfc00117 	ldw	ra,4(sp)
 400b82c:	df000017 	ldw	fp,0(sp)
 400b830:	dec00204 	addi	sp,sp,8
 400b834:	f800283a 	ret

0400b838 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 400b838:	defffe04 	addi	sp,sp,-8
 400b83c:	dfc00115 	stw	ra,4(sp)
 400b840:	df000015 	stw	fp,0(sp)
 400b844:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 400b848:	d0a04343 	ldbu	r2,-32499(gp)
 400b84c:	10803fcc 	andi	r2,r2,255
 400b850:	1004c03a 	cmpne	r2,r2,zero
 400b854:	1000111e 	bne	r2,zero,400b89c <OSStart+0x64>
        OSPrioHighRdy = 0;
 400b858:	d0204505 	stb	zero,-32492(gp)
        OSPrioCur     = OSPrioHighRdy;
 400b85c:	d0a04503 	ldbu	r2,-32492(gp)
 400b860:	d0a04545 	stb	r2,-32491(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 400b864:	d0a04503 	ldbu	r2,-32492(gp)
 400b868:	10803fcc 	andi	r2,r2,255
 400b86c:	00c100b4 	movhi	r3,1026
 400b870:	18d3db04 	addi	r3,r3,20332
 400b874:	1085883a 	add	r2,r2,r2
 400b878:	1085883a 	add	r2,r2,r2
 400b87c:	10c5883a 	add	r2,r2,r3
 400b880:	10800017 	ldw	r2,0(r2)
 400b884:	d0a04d15 	stw	r2,-32460(gp)
        OSTCBCur      = OSTCBHighRdy;
 400b888:	d0a04d17 	ldw	r2,-32460(gp)
 400b88c:	d0a05215 	stw	r2,-32440(gp)
        OSTimeSet(0);
 400b890:	0009883a 	mov	r4,zero
 400b894:	4012e6c0 	call	4012e6c <OSTimeSet>

        OSStartHighRdy();                            /* Execute target specific code to start task     */
 400b898:	40158b00 	call	40158b0 <OSStartHighRdy>
    }
}
 400b89c:	e037883a 	mov	sp,fp
 400b8a0:	dfc00117 	ldw	ra,4(sp)
 400b8a4:	df000017 	ldw	fp,0(sp)
 400b8a8:	dec00204 	addi	sp,sp,8
 400b8ac:	f800283a 	ret

0400b8b0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 400b8b0:	defff904 	addi	sp,sp,-28
 400b8b4:	dfc00615 	stw	ra,24(sp)
 400b8b8:	df000515 	stw	fp,20(sp)
 400b8bc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400b8c0:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 400b8c4:	01000084 	movi	r4,2
 400b8c8:	401293c0 	call	401293c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b8cc:	0005303a 	rdctl	r2,status
 400b8d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b8d4:	e0fffe17 	ldw	r3,-8(fp)
 400b8d8:	00bfff84 	movi	r2,-2
 400b8dc:	1884703a 	and	r2,r3,r2
 400b8e0:	1001703a 	wrctl	status,r2
  
  return context;
 400b8e4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 400b8e8:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 400b8ec:	d0204415 	stw	zero,-32496(gp)
 400b8f0:	e0bfff17 	ldw	r2,-4(fp)
 400b8f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b8f8:	e0bffd17 	ldw	r2,-12(fp)
 400b8fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 400b900:	0009883a 	mov	r4,zero
 400b904:	401293c0 	call	401293c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b908:	0005303a 	rdctl	r2,status
 400b90c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b910:	e0fffc17 	ldw	r3,-16(fp)
 400b914:	00bfff84 	movi	r2,-2
 400b918:	1884703a 	and	r2,r3,r2
 400b91c:	1001703a 	wrctl	status,r2
  
  return context;
 400b920:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 400b924:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 400b928:	d0a04417 	ldw	r2,-32496(gp)
 400b92c:	d0a04915 	stw	r2,-32476(gp)
    OSStatRdy    = OS_TRUE;
 400b930:	00800044 	movi	r2,1
 400b934:	d0a05505 	stb	r2,-32428(gp)
 400b938:	e0bfff17 	ldw	r2,-4(fp)
 400b93c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b940:	e0bffb17 	ldw	r2,-20(fp)
 400b944:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 400b948:	e037883a 	mov	sp,fp
 400b94c:	dfc00117 	ldw	ra,4(sp)
 400b950:	df000017 	ldw	fp,0(sp)
 400b954:	dec00204 	addi	sp,sp,8
 400b958:	f800283a 	ret

0400b95c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 400b95c:	defff404 	addi	sp,sp,-48
 400b960:	dfc00b15 	stw	ra,44(sp)
 400b964:	df000a15 	stw	fp,40(sp)
 400b968:	df000a04 	addi	fp,sp,40
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400b96c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b970:	0005303a 	rdctl	r2,status
 400b974:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b978:	e0fffb17 	ldw	r3,-20(fp)
 400b97c:	00bfff84 	movi	r2,-2
 400b980:	1884703a 	and	r2,r3,r2
 400b984:	1001703a 	wrctl	status,r2
  
  return context;
 400b988:	e0bffb17 	ldw	r2,-20(fp)
#endif
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter           */
 400b98c:	e0bffc15 	stw	r2,-16(fp)
      OSTCBCur->compTime--;
 400b990:	d0e05217 	ldw	r3,-32440(gp)
 400b994:	18800d8b 	ldhu	r2,54(r3)
 400b998:	10bfffc4 	addi	r2,r2,-1
 400b99c:	18800d8d 	sth	r2,54(r3)
 400b9a0:	e0bffc17 	ldw	r2,-16(fp)
 400b9a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b9a8:	e0bffa17 	ldw	r2,-24(fp)
 400b9ac:	1001703a 	wrctl	status,r2
      OS_EXIT_CRITICAL();


#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 400b9b0:	4015c7c0 	call	4015c7c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b9b4:	0005303a 	rdctl	r2,status
 400b9b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b9bc:	e0fff917 	ldw	r3,-28(fp)
 400b9c0:	00bfff84 	movi	r2,-2
 400b9c4:	1884703a 	and	r2,r3,r2
 400b9c8:	1001703a 	wrctl	status,r2
  
  return context;
 400b9cc:	e0bff917 	ldw	r2,-28(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 400b9d0:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 400b9d4:	d0a05317 	ldw	r2,-32436(gp)
 400b9d8:	10800044 	addi	r2,r2,1
 400b9dc:	d0a05315 	stw	r2,-32436(gp)
 400b9e0:	e0bffc17 	ldw	r2,-16(fp)
 400b9e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b9e8:	e0bff817 	ldw	r2,-32(fp)
 400b9ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 400b9f0:	d0a04343 	ldbu	r2,-32499(gp)
 400b9f4:	10803fcc 	andi	r2,r2,255
 400b9f8:	10800058 	cmpnei	r2,r2,1
 400b9fc:	1000721e 	bne	r2,zero,400bbc8 <OSTimeTick+0x26c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 400ba00:	d0a04703 	ldbu	r2,-32484(gp)
 400ba04:	10803fcc 	andi	r2,r2,255
 400ba08:	e0bfff15 	stw	r2,-4(fp)
 400ba0c:	e0ffff17 	ldw	r3,-4(fp)
 400ba10:	18800060 	cmpeqi	r2,r3,1
 400ba14:	10000a1e 	bne	r2,zero,400ba40 <OSTimeTick+0xe4>
 400ba18:	e0ffff17 	ldw	r3,-4(fp)
 400ba1c:	188000a0 	cmpeqi	r2,r3,2
 400ba20:	1000091e 	bne	r2,zero,400ba48 <OSTimeTick+0xec>
 400ba24:	e0ffff17 	ldw	r3,-4(fp)
 400ba28:	1805003a 	cmpeq	r2,r3,zero
 400ba2c:	1000011e 	bne	r2,zero,400ba34 <OSTimeTick+0xd8>
 400ba30:	00000a06 	br	400ba5c <OSTimeTick+0x100>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 400ba34:	00800044 	movi	r2,1
 400ba38:	e0bffd05 	stb	r2,-12(fp)
                 break;
 400ba3c:	00000a06 	br	400ba68 <OSTimeTick+0x10c>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 400ba40:	e03ffd05 	stb	zero,-12(fp)
                 break;
 400ba44:	00000806 	br	400ba68 <OSTimeTick+0x10c>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 400ba48:	00800044 	movi	r2,1
 400ba4c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 400ba50:	00800044 	movi	r2,1
 400ba54:	d0a04705 	stb	r2,-32484(gp)
                 break;
 400ba58:	00000306 	br	400ba68 <OSTimeTick+0x10c>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 400ba5c:	00800044 	movi	r2,1
 400ba60:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 400ba64:	d0204705 	stb	zero,-32484(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 400ba68:	e0bffd03 	ldbu	r2,-12(fp)
 400ba6c:	1005003a 	cmpeq	r2,r2,zero
 400ba70:	1000551e 	bne	r2,zero,400bbc8 <OSTimeTick+0x26c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 400ba74:	d0a04617 	ldw	r2,-32488(gp)
 400ba78:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 400ba7c:	00004d06 	br	400bbb4 <OSTimeTick+0x258>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ba80:	0005303a 	rdctl	r2,status
 400ba84:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ba88:	e0fff717 	ldw	r3,-36(fp)
 400ba8c:	00bfff84 	movi	r2,-2
 400ba90:	1884703a 	and	r2,r3,r2
 400ba94:	1001703a 	wrctl	status,r2
  
  return context;
 400ba98:	e0bff717 	ldw	r2,-36(fp)
            OS_ENTER_CRITICAL();
 400ba9c:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 400baa0:	e0bffe17 	ldw	r2,-8(fp)
 400baa4:	10800b8b 	ldhu	r2,46(r2)
 400baa8:	10bfffcc 	andi	r2,r2,65535
 400baac:	1005003a 	cmpeq	r2,r2,zero
 400bab0:	1000391e 	bne	r2,zero,400bb98 <OSTimeTick+0x23c>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 400bab4:	e0bffe17 	ldw	r2,-8(fp)
 400bab8:	10800b8b 	ldhu	r2,46(r2)
 400babc:	10bfffc4 	addi	r2,r2,-1
 400bac0:	1007883a 	mov	r3,r2
 400bac4:	e0bffe17 	ldw	r2,-8(fp)
 400bac8:	10c00b8d 	sth	r3,46(r2)
 400bacc:	e0bffe17 	ldw	r2,-8(fp)
 400bad0:	10800b8b 	ldhu	r2,46(r2)
 400bad4:	10bfffcc 	andi	r2,r2,65535
 400bad8:	1004c03a 	cmpne	r2,r2,zero
 400badc:	10002e1e 	bne	r2,zero,400bb98 <OSTimeTick+0x23c>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 400bae0:	e0bffe17 	ldw	r2,-8(fp)
 400bae4:	10800c03 	ldbu	r2,48(r2)
 400bae8:	10803fcc 	andi	r2,r2,255
 400baec:	10800dcc 	andi	r2,r2,55
 400baf0:	1005003a 	cmpeq	r2,r2,zero
 400baf4:	10000b1e 	bne	r2,zero,400bb24 <OSTimeTick+0x1c8>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 400baf8:	e0bffe17 	ldw	r2,-8(fp)
 400bafc:	10c00c03 	ldbu	r3,48(r2)
 400bb00:	00bff204 	movi	r2,-56
 400bb04:	1884703a 	and	r2,r3,r2
 400bb08:	1007883a 	mov	r3,r2
 400bb0c:	e0bffe17 	ldw	r2,-8(fp)
 400bb10:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 400bb14:	e0fffe17 	ldw	r3,-8(fp)
 400bb18:	00800044 	movi	r2,1
 400bb1c:	18800c45 	stb	r2,49(r3)
 400bb20:	00000206 	br	400bb2c <OSTimeTick+0x1d0>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 400bb24:	e0bffe17 	ldw	r2,-8(fp)
 400bb28:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 400bb2c:	e0bffe17 	ldw	r2,-8(fp)
 400bb30:	10800c03 	ldbu	r2,48(r2)
 400bb34:	10803fcc 	andi	r2,r2,255
 400bb38:	1080020c 	andi	r2,r2,8
 400bb3c:	1004c03a 	cmpne	r2,r2,zero
 400bb40:	1000151e 	bne	r2,zero,400bb98 <OSTimeTick+0x23c>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 400bb44:	e0bffe17 	ldw	r2,-8(fp)
 400bb48:	10c00f43 	ldbu	r3,61(r2)
 400bb4c:	d0a04f03 	ldbu	r2,-32452(gp)
 400bb50:	1884b03a 	or	r2,r3,r2
 400bb54:	d0a04f05 	stb	r2,-32452(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400bb58:	e0bffe17 	ldw	r2,-8(fp)
 400bb5c:	10800d03 	ldbu	r2,52(r2)
 400bb60:	11003fcc 	andi	r4,r2,255
 400bb64:	e0bffe17 	ldw	r2,-8(fp)
 400bb68:	10800d03 	ldbu	r2,52(r2)
 400bb6c:	10c03fcc 	andi	r3,r2,255
 400bb70:	d0a04f44 	addi	r2,gp,-32451
 400bb74:	1885883a 	add	r2,r3,r2
 400bb78:	10c00003 	ldbu	r3,0(r2)
 400bb7c:	e0bffe17 	ldw	r2,-8(fp)
 400bb80:	10800f03 	ldbu	r2,60(r2)
 400bb84:	1884b03a 	or	r2,r3,r2
 400bb88:	1007883a 	mov	r3,r2
 400bb8c:	d0a04f44 	addi	r2,gp,-32451
 400bb90:	2085883a 	add	r2,r4,r2
 400bb94:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 400bb98:	e0bffe17 	ldw	r2,-8(fp)
 400bb9c:	10800517 	ldw	r2,20(r2)
 400bba0:	e0bffe15 	stw	r2,-8(fp)
 400bba4:	e0bffc17 	ldw	r2,-16(fp)
 400bba8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400bbac:	e0bff617 	ldw	r2,-40(fp)
 400bbb0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 400bbb4:	e0bffe17 	ldw	r2,-8(fp)
 400bbb8:	10800c83 	ldbu	r2,50(r2)
 400bbbc:	10803fcc 	andi	r2,r2,255
 400bbc0:	10800518 	cmpnei	r2,r2,20
 400bbc4:	103fae1e 	bne	r2,zero,400ba80 <OSTimeTick+0x124>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 400bbc8:	e037883a 	mov	sp,fp
 400bbcc:	dfc00117 	ldw	ra,4(sp)
 400bbd0:	df000017 	ldw	fp,0(sp)
 400bbd4:	dec00204 	addi	sp,sp,8
 400bbd8:	f800283a 	ret

0400bbdc <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 400bbdc:	deffff04 	addi	sp,sp,-4
 400bbe0:	df000015 	stw	fp,0(sp)
 400bbe4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 400bbe8:	00804784 	movi	r2,286
}
 400bbec:	e037883a 	mov	sp,fp
 400bbf0:	df000017 	ldw	fp,0(sp)
 400bbf4:	dec00104 	addi	sp,sp,4
 400bbf8:	f800283a 	ret

0400bbfc <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 400bbfc:	deffff04 	addi	sp,sp,-4
 400bc00:	df000015 	stw	fp,0(sp)
 400bc04:	d839883a 	mov	fp,sp
}
 400bc08:	e037883a 	mov	sp,fp
 400bc0c:	df000017 	ldw	fp,0(sp)
 400bc10:	dec00104 	addi	sp,sp,4
 400bc14:	f800283a 	ret

0400bc18 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 400bc18:	defff804 	addi	sp,sp,-32
 400bc1c:	dfc00715 	stw	ra,28(sp)
 400bc20:	df000615 	stw	fp,24(sp)
 400bc24:	df000604 	addi	fp,sp,24
 400bc28:	e13ffc15 	stw	r4,-16(fp)
 400bc2c:	e17ffd15 	stw	r5,-12(fp)
 400bc30:	e1bffe05 	stb	r6,-8(fp)
 400bc34:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 400bc38:	e0bffc17 	ldw	r2,-16(fp)
 400bc3c:	10800283 	ldbu	r2,10(r2)
 400bc40:	10c03fcc 	andi	r3,r2,255
 400bc44:	00810074 	movhi	r2,1025
 400bc48:	109a8404 	addi	r2,r2,27152
 400bc4c:	10c5883a 	add	r2,r2,r3
 400bc50:	10800003 	ldbu	r2,0(r2)
 400bc54:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 400bc58:	e0fffa83 	ldbu	r3,-22(fp)
 400bc5c:	e0bffc17 	ldw	r2,-16(fp)
 400bc60:	1885883a 	add	r2,r3,r2
 400bc64:	10800204 	addi	r2,r2,8
 400bc68:	108000c3 	ldbu	r2,3(r2)
 400bc6c:	10c03fcc 	andi	r3,r2,255
 400bc70:	00810074 	movhi	r2,1025
 400bc74:	109a8404 	addi	r2,r2,27152
 400bc78:	10c5883a 	add	r2,r2,r3
 400bc7c:	10800003 	ldbu	r2,0(r2)
 400bc80:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 400bc84:	e0bffa83 	ldbu	r2,-22(fp)
 400bc88:	100490fa 	slli	r2,r2,3
 400bc8c:	1007883a 	mov	r3,r2
 400bc90:	e0bffa43 	ldbu	r2,-23(fp)
 400bc94:	1885883a 	add	r2,r3,r2
 400bc98:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 400bc9c:	e0bffa03 	ldbu	r2,-24(fp)
 400bca0:	00c100b4 	movhi	r3,1026
 400bca4:	18d3db04 	addi	r3,r3,20332
 400bca8:	1085883a 	add	r2,r2,r2
 400bcac:	1085883a 	add	r2,r2,r2
 400bcb0:	10c5883a 	add	r2,r2,r3
 400bcb4:	10800017 	ldw	r2,0(r2)
 400bcb8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 400bcbc:	e0bffb17 	ldw	r2,-20(fp)
 400bcc0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 400bcc4:	e0fffb17 	ldw	r3,-20(fp)
 400bcc8:	e0bffd17 	ldw	r2,-12(fp)
 400bccc:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 400bcd0:	e0bffb17 	ldw	r2,-20(fp)
 400bcd4:	10800c03 	ldbu	r2,48(r2)
 400bcd8:	1007883a 	mov	r3,r2
 400bcdc:	e0bffe03 	ldbu	r2,-8(fp)
 400bce0:	0084303a 	nor	r2,zero,r2
 400bce4:	1884703a 	and	r2,r3,r2
 400bce8:	1007883a 	mov	r3,r2
 400bcec:	e0bffb17 	ldw	r2,-20(fp)
 400bcf0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 400bcf4:	e0fffb17 	ldw	r3,-20(fp)
 400bcf8:	e0bfff03 	ldbu	r2,-4(fp)
 400bcfc:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 400bd00:	e0bffb17 	ldw	r2,-20(fp)
 400bd04:	10800c03 	ldbu	r2,48(r2)
 400bd08:	10803fcc 	andi	r2,r2,255
 400bd0c:	1080020c 	andi	r2,r2,8
 400bd10:	1004c03a 	cmpne	r2,r2,zero
 400bd14:	1000111e 	bne	r2,zero,400bd5c <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 400bd18:	e0bffb17 	ldw	r2,-20(fp)
 400bd1c:	10c00f43 	ldbu	r3,61(r2)
 400bd20:	d0a04f03 	ldbu	r2,-32452(gp)
 400bd24:	1884b03a 	or	r2,r3,r2
 400bd28:	d0a04f05 	stb	r2,-32452(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 400bd2c:	e13ffa83 	ldbu	r4,-22(fp)
 400bd30:	e0fffa83 	ldbu	r3,-22(fp)
 400bd34:	d0a04f44 	addi	r2,gp,-32451
 400bd38:	1885883a 	add	r2,r3,r2
 400bd3c:	10c00003 	ldbu	r3,0(r2)
 400bd40:	e0bffb17 	ldw	r2,-20(fp)
 400bd44:	10800f03 	ldbu	r2,60(r2)
 400bd48:	1884b03a 	or	r2,r3,r2
 400bd4c:	1007883a 	mov	r3,r2
 400bd50:	d0a04f44 	addi	r2,gp,-32451
 400bd54:	2085883a 	add	r2,r4,r2
 400bd58:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 400bd5c:	e13ffb17 	ldw	r4,-20(fp)
 400bd60:	e17ffc17 	ldw	r5,-16(fp)
 400bd64:	400c0100 	call	400c010 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 400bd68:	e0bffb17 	ldw	r2,-20(fp)
 400bd6c:	10800817 	ldw	r2,32(r2)
 400bd70:	1005003a 	cmpeq	r2,r2,zero
 400bd74:	1000071e 	bne	r2,zero,400bd94 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 400bd78:	e0bffb17 	ldw	r2,-20(fp)
 400bd7c:	11400817 	ldw	r5,32(r2)
 400bd80:	e13ffb17 	ldw	r4,-20(fp)
 400bd84:	400c0c80 	call	400c0c8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 400bd88:	e0fffb17 	ldw	r3,-20(fp)
 400bd8c:	e0bffc17 	ldw	r2,-16(fp)
 400bd90:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 400bd94:	e0bffa03 	ldbu	r2,-24(fp)
}
 400bd98:	e037883a 	mov	sp,fp
 400bd9c:	dfc00117 	ldw	ra,4(sp)
 400bda0:	df000017 	ldw	fp,0(sp)
 400bda4:	dec00204 	addi	sp,sp,8
 400bda8:	f800283a 	ret

0400bdac <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 400bdac:	defffd04 	addi	sp,sp,-12
 400bdb0:	df000215 	stw	fp,8(sp)
 400bdb4:	df000204 	addi	fp,sp,8
 400bdb8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 400bdbc:	d0e05217 	ldw	r3,-32440(gp)
 400bdc0:	e0bfff17 	ldw	r2,-4(fp)
 400bdc4:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 400bdc8:	d0a05217 	ldw	r2,-32440(gp)
 400bdcc:	10800d03 	ldbu	r2,52(r2)
 400bdd0:	11003fcc 	andi	r4,r2,255
 400bdd4:	d0a05217 	ldw	r2,-32440(gp)
 400bdd8:	10800d03 	ldbu	r2,52(r2)
 400bddc:	10c03fcc 	andi	r3,r2,255
 400bde0:	e0bfff17 	ldw	r2,-4(fp)
 400bde4:	1885883a 	add	r2,r3,r2
 400bde8:	10800204 	addi	r2,r2,8
 400bdec:	10c000c3 	ldbu	r3,3(r2)
 400bdf0:	d0a05217 	ldw	r2,-32440(gp)
 400bdf4:	10800f03 	ldbu	r2,60(r2)
 400bdf8:	1884b03a 	or	r2,r3,r2
 400bdfc:	1007883a 	mov	r3,r2
 400be00:	e0bfff17 	ldw	r2,-4(fp)
 400be04:	2085883a 	add	r2,r4,r2
 400be08:	10800204 	addi	r2,r2,8
 400be0c:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400be10:	e0bfff17 	ldw	r2,-4(fp)
 400be14:	10c00283 	ldbu	r3,10(r2)
 400be18:	d0a05217 	ldw	r2,-32440(gp)
 400be1c:	10800f43 	ldbu	r2,61(r2)
 400be20:	1884b03a 	or	r2,r3,r2
 400be24:	1007883a 	mov	r3,r2
 400be28:	e0bfff17 	ldw	r2,-4(fp)
 400be2c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 400be30:	d0a05217 	ldw	r2,-32440(gp)
 400be34:	10800d03 	ldbu	r2,52(r2)
 400be38:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400be3c:	e13ffe03 	ldbu	r4,-8(fp)
 400be40:	e0fffe03 	ldbu	r3,-8(fp)
 400be44:	d0a04f44 	addi	r2,gp,-32451
 400be48:	1885883a 	add	r2,r3,r2
 400be4c:	10800003 	ldbu	r2,0(r2)
 400be50:	1007883a 	mov	r3,r2
 400be54:	d0a05217 	ldw	r2,-32440(gp)
 400be58:	10800f03 	ldbu	r2,60(r2)
 400be5c:	0084303a 	nor	r2,zero,r2
 400be60:	1884703a 	and	r2,r3,r2
 400be64:	1007883a 	mov	r3,r2
 400be68:	d0a04f44 	addi	r2,gp,-32451
 400be6c:	2085883a 	add	r2,r4,r2
 400be70:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 400be74:	e0fffe03 	ldbu	r3,-8(fp)
 400be78:	d0a04f44 	addi	r2,gp,-32451
 400be7c:	1885883a 	add	r2,r3,r2
 400be80:	10800003 	ldbu	r2,0(r2)
 400be84:	10803fcc 	andi	r2,r2,255
 400be88:	1004c03a 	cmpne	r2,r2,zero
 400be8c:	1000071e 	bne	r2,zero,400beac <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 400be90:	d0a05217 	ldw	r2,-32440(gp)
 400be94:	10800f43 	ldbu	r2,61(r2)
 400be98:	0084303a 	nor	r2,zero,r2
 400be9c:	1007883a 	mov	r3,r2
 400bea0:	d0a04f03 	ldbu	r2,-32452(gp)
 400bea4:	1884703a 	and	r2,r3,r2
 400bea8:	d0a04f05 	stb	r2,-32452(gp)
    }
}
 400beac:	e037883a 	mov	sp,fp
 400beb0:	df000017 	ldw	fp,0(sp)
 400beb4:	dec00104 	addi	sp,sp,4
 400beb8:	f800283a 	ret

0400bebc <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 400bebc:	defffb04 	addi	sp,sp,-20
 400bec0:	df000415 	stw	fp,16(sp)
 400bec4:	df000404 	addi	fp,sp,16
 400bec8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 400becc:	d0a05217 	ldw	r2,-32440(gp)
 400bed0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 400bed4:	d0e05217 	ldw	r3,-32440(gp)
 400bed8:	e0bfff17 	ldw	r2,-4(fp)
 400bedc:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 400bee0:	e0bfff17 	ldw	r2,-4(fp)
 400bee4:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 400bee8:	e0bffe17 	ldw	r2,-8(fp)
 400beec:	10800017 	ldw	r2,0(r2)
 400bef0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 400bef4:	00002006 	br	400bf78 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 400bef8:	d0a05217 	ldw	r2,-32440(gp)
 400befc:	10800d03 	ldbu	r2,52(r2)
 400bf00:	11003fcc 	andi	r4,r2,255
 400bf04:	d0a05217 	ldw	r2,-32440(gp)
 400bf08:	10800d03 	ldbu	r2,52(r2)
 400bf0c:	10c03fcc 	andi	r3,r2,255
 400bf10:	e0bffd17 	ldw	r2,-12(fp)
 400bf14:	1885883a 	add	r2,r3,r2
 400bf18:	10800204 	addi	r2,r2,8
 400bf1c:	10c000c3 	ldbu	r3,3(r2)
 400bf20:	d0a05217 	ldw	r2,-32440(gp)
 400bf24:	10800f03 	ldbu	r2,60(r2)
 400bf28:	1884b03a 	or	r2,r3,r2
 400bf2c:	1007883a 	mov	r3,r2
 400bf30:	e0bffd17 	ldw	r2,-12(fp)
 400bf34:	2085883a 	add	r2,r4,r2
 400bf38:	10800204 	addi	r2,r2,8
 400bf3c:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400bf40:	e0bffd17 	ldw	r2,-12(fp)
 400bf44:	10c00283 	ldbu	r3,10(r2)
 400bf48:	d0a05217 	ldw	r2,-32440(gp)
 400bf4c:	10800f43 	ldbu	r2,61(r2)
 400bf50:	1884b03a 	or	r2,r3,r2
 400bf54:	1007883a 	mov	r3,r2
 400bf58:	e0bffd17 	ldw	r2,-12(fp)
 400bf5c:	10c00285 	stb	r3,10(r2)
        pevents++;
 400bf60:	e0bffe17 	ldw	r2,-8(fp)
 400bf64:	10800104 	addi	r2,r2,4
 400bf68:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 400bf6c:	e0bffe17 	ldw	r2,-8(fp)
 400bf70:	10800017 	ldw	r2,0(r2)
 400bf74:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 400bf78:	e0bffd17 	ldw	r2,-12(fp)
 400bf7c:	1004c03a 	cmpne	r2,r2,zero
 400bf80:	103fdd1e 	bne	r2,zero,400bef8 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 400bf84:	d0a05217 	ldw	r2,-32440(gp)
 400bf88:	10800d03 	ldbu	r2,52(r2)
 400bf8c:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400bf90:	e13ffc03 	ldbu	r4,-16(fp)
 400bf94:	e0fffc03 	ldbu	r3,-16(fp)
 400bf98:	d0a04f44 	addi	r2,gp,-32451
 400bf9c:	1885883a 	add	r2,r3,r2
 400bfa0:	10800003 	ldbu	r2,0(r2)
 400bfa4:	1007883a 	mov	r3,r2
 400bfa8:	d0a05217 	ldw	r2,-32440(gp)
 400bfac:	10800f03 	ldbu	r2,60(r2)
 400bfb0:	0084303a 	nor	r2,zero,r2
 400bfb4:	1884703a 	and	r2,r3,r2
 400bfb8:	1007883a 	mov	r3,r2
 400bfbc:	d0a04f44 	addi	r2,gp,-32451
 400bfc0:	2085883a 	add	r2,r4,r2
 400bfc4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 400bfc8:	e0fffc03 	ldbu	r3,-16(fp)
 400bfcc:	d0a04f44 	addi	r2,gp,-32451
 400bfd0:	1885883a 	add	r2,r3,r2
 400bfd4:	10800003 	ldbu	r2,0(r2)
 400bfd8:	10803fcc 	andi	r2,r2,255
 400bfdc:	1004c03a 	cmpne	r2,r2,zero
 400bfe0:	1000071e 	bne	r2,zero,400c000 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 400bfe4:	d0a05217 	ldw	r2,-32440(gp)
 400bfe8:	10800f43 	ldbu	r2,61(r2)
 400bfec:	0084303a 	nor	r2,zero,r2
 400bff0:	1007883a 	mov	r3,r2
 400bff4:	d0a04f03 	ldbu	r2,-32452(gp)
 400bff8:	1884703a 	and	r2,r3,r2
 400bffc:	d0a04f05 	stb	r2,-32452(gp)
    }
}
 400c000:	e037883a 	mov	sp,fp
 400c004:	df000017 	ldw	fp,0(sp)
 400c008:	dec00104 	addi	sp,sp,4
 400c00c:	f800283a 	ret

0400c010 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 400c010:	defffc04 	addi	sp,sp,-16
 400c014:	df000315 	stw	fp,12(sp)
 400c018:	df000304 	addi	fp,sp,12
 400c01c:	e13ffe15 	stw	r4,-8(fp)
 400c020:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 400c024:	e0bffe17 	ldw	r2,-8(fp)
 400c028:	10800d03 	ldbu	r2,52(r2)
 400c02c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 400c030:	e13ffd03 	ldbu	r4,-12(fp)
 400c034:	e0fffd03 	ldbu	r3,-12(fp)
 400c038:	e0bfff17 	ldw	r2,-4(fp)
 400c03c:	1885883a 	add	r2,r3,r2
 400c040:	10800204 	addi	r2,r2,8
 400c044:	108000c3 	ldbu	r2,3(r2)
 400c048:	1007883a 	mov	r3,r2
 400c04c:	e0bffe17 	ldw	r2,-8(fp)
 400c050:	10800f03 	ldbu	r2,60(r2)
 400c054:	0084303a 	nor	r2,zero,r2
 400c058:	1884703a 	and	r2,r3,r2
 400c05c:	1007883a 	mov	r3,r2
 400c060:	e0bfff17 	ldw	r2,-4(fp)
 400c064:	2085883a 	add	r2,r4,r2
 400c068:	10800204 	addi	r2,r2,8
 400c06c:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 400c070:	e0fffd03 	ldbu	r3,-12(fp)
 400c074:	e0bfff17 	ldw	r2,-4(fp)
 400c078:	1885883a 	add	r2,r3,r2
 400c07c:	10800204 	addi	r2,r2,8
 400c080:	108000c3 	ldbu	r2,3(r2)
 400c084:	10803fcc 	andi	r2,r2,255
 400c088:	1004c03a 	cmpne	r2,r2,zero
 400c08c:	10000a1e 	bne	r2,zero,400c0b8 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 400c090:	e0bfff17 	ldw	r2,-4(fp)
 400c094:	10800283 	ldbu	r2,10(r2)
 400c098:	1007883a 	mov	r3,r2
 400c09c:	e0bffe17 	ldw	r2,-8(fp)
 400c0a0:	10800f43 	ldbu	r2,61(r2)
 400c0a4:	0084303a 	nor	r2,zero,r2
 400c0a8:	1884703a 	and	r2,r3,r2
 400c0ac:	1007883a 	mov	r3,r2
 400c0b0:	e0bfff17 	ldw	r2,-4(fp)
 400c0b4:	10c00285 	stb	r3,10(r2)
    }
}
 400c0b8:	e037883a 	mov	sp,fp
 400c0bc:	df000017 	ldw	fp,0(sp)
 400c0c0:	dec00104 	addi	sp,sp,4
 400c0c4:	f800283a 	ret

0400c0c8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 400c0c8:	defffa04 	addi	sp,sp,-24
 400c0cc:	df000515 	stw	fp,20(sp)
 400c0d0:	df000504 	addi	fp,sp,20
 400c0d4:	e13ffe15 	stw	r4,-8(fp)
 400c0d8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 400c0dc:	e0bffe17 	ldw	r2,-8(fp)
 400c0e0:	10800d03 	ldbu	r2,52(r2)
 400c0e4:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 400c0e8:	e0bffe17 	ldw	r2,-8(fp)
 400c0ec:	10800f43 	ldbu	r2,61(r2)
 400c0f0:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 400c0f4:	e0bffe17 	ldw	r2,-8(fp)
 400c0f8:	10800f03 	ldbu	r2,60(r2)
 400c0fc:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 400c100:	e0bfff17 	ldw	r2,-4(fp)
 400c104:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 400c108:	e0bffd17 	ldw	r2,-12(fp)
 400c10c:	10800017 	ldw	r2,0(r2)
 400c110:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 400c114:	00002606 	br	400c1b0 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 400c118:	e13ffb83 	ldbu	r4,-18(fp)
 400c11c:	e0fffb83 	ldbu	r3,-18(fp)
 400c120:	e0bffc17 	ldw	r2,-16(fp)
 400c124:	1885883a 	add	r2,r3,r2
 400c128:	10800204 	addi	r2,r2,8
 400c12c:	108000c3 	ldbu	r2,3(r2)
 400c130:	1007883a 	mov	r3,r2
 400c134:	e0bffb03 	ldbu	r2,-20(fp)
 400c138:	0084303a 	nor	r2,zero,r2
 400c13c:	1884703a 	and	r2,r3,r2
 400c140:	1007883a 	mov	r3,r2
 400c144:	e0bffc17 	ldw	r2,-16(fp)
 400c148:	2085883a 	add	r2,r4,r2
 400c14c:	10800204 	addi	r2,r2,8
 400c150:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 400c154:	e0fffb83 	ldbu	r3,-18(fp)
 400c158:	e0bffc17 	ldw	r2,-16(fp)
 400c15c:	1885883a 	add	r2,r3,r2
 400c160:	10800204 	addi	r2,r2,8
 400c164:	108000c3 	ldbu	r2,3(r2)
 400c168:	10803fcc 	andi	r2,r2,255
 400c16c:	1004c03a 	cmpne	r2,r2,zero
 400c170:	1000091e 	bne	r2,zero,400c198 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 400c174:	e0bffc17 	ldw	r2,-16(fp)
 400c178:	10800283 	ldbu	r2,10(r2)
 400c17c:	1007883a 	mov	r3,r2
 400c180:	e0bffb43 	ldbu	r2,-19(fp)
 400c184:	0084303a 	nor	r2,zero,r2
 400c188:	1884703a 	and	r2,r3,r2
 400c18c:	1007883a 	mov	r3,r2
 400c190:	e0bffc17 	ldw	r2,-16(fp)
 400c194:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 400c198:	e0bffd17 	ldw	r2,-12(fp)
 400c19c:	10800104 	addi	r2,r2,4
 400c1a0:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 400c1a4:	e0bffd17 	ldw	r2,-12(fp)
 400c1a8:	10800017 	ldw	r2,0(r2)
 400c1ac:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 400c1b0:	e0bffc17 	ldw	r2,-16(fp)
 400c1b4:	1004c03a 	cmpne	r2,r2,zero
 400c1b8:	103fd71e 	bne	r2,zero,400c118 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 400c1bc:	e037883a 	mov	sp,fp
 400c1c0:	df000017 	ldw	fp,0(sp)
 400c1c4:	dec00104 	addi	sp,sp,4
 400c1c8:	f800283a 	ret

0400c1cc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 400c1cc:	defffc04 	addi	sp,sp,-16
 400c1d0:	df000315 	stw	fp,12(sp)
 400c1d4:	df000304 	addi	fp,sp,12
 400c1d8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 400c1dc:	e0bfff17 	ldw	r2,-4(fp)
 400c1e0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 400c1e4:	e0bfff17 	ldw	r2,-4(fp)
 400c1e8:	108002c4 	addi	r2,r2,11
 400c1ec:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 400c1f0:	e03ffd05 	stb	zero,-12(fp)
 400c1f4:	00000806 	br	400c218 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 400c1f8:	e0bffe17 	ldw	r2,-8(fp)
 400c1fc:	10000005 	stb	zero,0(r2)
 400c200:	e0bffe17 	ldw	r2,-8(fp)
 400c204:	10800044 	addi	r2,r2,1
 400c208:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 400c20c:	e0bffd03 	ldbu	r2,-12(fp)
 400c210:	10800044 	addi	r2,r2,1
 400c214:	e0bffd05 	stb	r2,-12(fp)
 400c218:	e0bffd03 	ldbu	r2,-12(fp)
 400c21c:	108000f0 	cmpltui	r2,r2,3
 400c220:	103ff51e 	bne	r2,zero,400c1f8 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 400c224:	e037883a 	mov	sp,fp
 400c228:	df000017 	ldw	fp,0(sp)
 400c22c:	dec00104 	addi	sp,sp,4
 400c230:	f800283a 	ret

0400c234 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 400c234:	defffb04 	addi	sp,sp,-20
 400c238:	dfc00415 	stw	ra,16(sp)
 400c23c:	df000315 	stw	fp,12(sp)
 400c240:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 400c244:	010100b4 	movhi	r4,1026
 400c248:	210faf04 	addi	r4,r4,16060
 400c24c:	0142d004 	movi	r5,2880
 400c250:	400c5980 	call	400c598 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 400c254:	008100b4 	movhi	r2,1026
 400c258:	108faf04 	addi	r2,r2,16060
 400c25c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 400c260:	008100b4 	movhi	r2,1026
 400c264:	108fbb04 	addi	r2,r2,16108
 400c268:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 400c26c:	e03fff0d 	sth	zero,-4(fp)
 400c270:	00001306 	br	400c2c0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 400c274:	e0bffe17 	ldw	r2,-8(fp)
 400c278:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 400c27c:	e0fffe17 	ldw	r3,-8(fp)
 400c280:	e0bffd17 	ldw	r2,-12(fp)
 400c284:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 400c288:	e0fffe17 	ldw	r3,-8(fp)
 400c28c:	00800fc4 	movi	r2,63
 400c290:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 400c294:	e0bffe17 	ldw	r2,-8(fp)
 400c298:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 400c29c:	e0bffe17 	ldw	r2,-8(fp)
 400c2a0:	10800c04 	addi	r2,r2,48
 400c2a4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 400c2a8:	e0bffd17 	ldw	r2,-12(fp)
 400c2ac:	10800c04 	addi	r2,r2,48
 400c2b0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 400c2b4:	e0bfff0b 	ldhu	r2,-4(fp)
 400c2b8:	10800044 	addi	r2,r2,1
 400c2bc:	e0bfff0d 	sth	r2,-4(fp)
 400c2c0:	e0bfff0b 	ldhu	r2,-4(fp)
 400c2c4:	10800ef0 	cmpltui	r2,r2,59
 400c2c8:	103fea1e 	bne	r2,zero,400c274 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 400c2cc:	e0bffe17 	ldw	r2,-8(fp)
 400c2d0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 400c2d4:	e0bffe17 	ldw	r2,-8(fp)
 400c2d8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 400c2dc:	e0fffe17 	ldw	r3,-8(fp)
 400c2e0:	00800fc4 	movi	r2,63
 400c2e4:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 400c2e8:	e0bffe17 	ldw	r2,-8(fp)
 400c2ec:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 400c2f0:	008100b4 	movhi	r2,1026
 400c2f4:	108faf04 	addi	r2,r2,16060
 400c2f8:	d0a05015 	stw	r2,-32448(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 400c2fc:	e037883a 	mov	sp,fp
 400c300:	dfc00117 	ldw	ra,4(sp)
 400c304:	df000017 	ldw	fp,0(sp)
 400c308:	dec00204 	addi	sp,sp,8
 400c30c:	f800283a 	ret

0400c310 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 400c310:	deffff04 	addi	sp,sp,-4
 400c314:	df000015 	stw	fp,0(sp)
 400c318:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 400c31c:	d0205315 	stw	zero,-32436(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 400c320:	d0205105 	stb	zero,-32444(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 400c324:	d0204305 	stb	zero,-32500(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 400c328:	d0204b45 	stb	zero,-32467(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 400c32c:	d0204345 	stb	zero,-32499(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 400c330:	d0204815 	stw	zero,-32480(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 400c334:	d0204415 	stw	zero,-32496(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 400c338:	d0205615 	stw	zero,-32424(gp)
    OSIdleCtrMax  = 0L;
 400c33c:	d0204915 	stw	zero,-32476(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 400c340:	d0205505 	stb	zero,-32428(gp)
#endif
}
 400c344:	e037883a 	mov	sp,fp
 400c348:	df000017 	ldw	fp,0(sp)
 400c34c:	dec00104 	addi	sp,sp,4
 400c350:	f800283a 	ret

0400c354 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 400c354:	defffd04 	addi	sp,sp,-12
 400c358:	df000215 	stw	fp,8(sp)
 400c35c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 400c360:	d0204f05 	stb	zero,-32452(gp)
    prdytbl       = &OSRdyTbl[0];
 400c364:	d0a04f44 	addi	r2,gp,-32451
 400c368:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 400c36c:	e03fff05 	stb	zero,-4(fp)
 400c370:	00000806 	br	400c394 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 400c374:	e0bffe17 	ldw	r2,-8(fp)
 400c378:	10000005 	stb	zero,0(r2)
 400c37c:	e0bffe17 	ldw	r2,-8(fp)
 400c380:	10800044 	addi	r2,r2,1
 400c384:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 400c388:	e0bfff03 	ldbu	r2,-4(fp)
 400c38c:	10800044 	addi	r2,r2,1
 400c390:	e0bfff05 	stb	r2,-4(fp)
 400c394:	e0bfff03 	ldbu	r2,-4(fp)
 400c398:	108000f0 	cmpltui	r2,r2,3
 400c39c:	103ff51e 	bne	r2,zero,400c374 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 400c3a0:	d0204545 	stb	zero,-32491(gp)
    OSPrioHighRdy = 0;
 400c3a4:	d0204505 	stb	zero,-32492(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 400c3a8:	d0204d15 	stw	zero,-32460(gp)
    OSTCBCur      = (OS_TCB *)0;
 400c3ac:	d0205215 	stw	zero,-32440(gp)
}
 400c3b0:	e037883a 	mov	sp,fp
 400c3b4:	df000017 	ldw	fp,0(sp)
 400c3b8:	dec00104 	addi	sp,sp,4
 400c3bc:	f800283a 	ret

0400c3c0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 400c3c0:	defff804 	addi	sp,sp,-32
 400c3c4:	dfc00715 	stw	ra,28(sp)
 400c3c8:	df000615 	stw	fp,24(sp)
 400c3cc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 400c3d0:	018100b4 	movhi	r6,1026
 400c3d4:	318fae04 	addi	r6,r6,16056
 400c3d8:	00bfffd4 	movui	r2,65535
 400c3dc:	d8800015 	stw	r2,0(sp)
 400c3e0:	008100b4 	movhi	r2,1026
 400c3e4:	108daf04 	addi	r2,r2,14012
 400c3e8:	d8800115 	stw	r2,4(sp)
 400c3ec:	00808004 	movi	r2,512
 400c3f0:	d8800215 	stw	r2,8(sp)
 400c3f4:	d8000315 	stw	zero,12(sp)
 400c3f8:	008000c4 	movi	r2,3
 400c3fc:	d8800415 	stw	r2,16(sp)
 400c400:	01010074 	movhi	r4,1025
 400c404:	21322704 	addi	r4,r4,-14180
 400c408:	000b883a 	mov	r5,zero
 400c40c:	01c00504 	movi	r7,20
 400c410:	40116600 	call	4011660 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 400c414:	01410074 	movhi	r5,1025
 400c418:	295aca04 	addi	r5,r5,27432
 400c41c:	01000504 	movi	r4,20
 400c420:	e1bfff04 	addi	r6,fp,-4
 400c424:	4011f780 	call	4011f78 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 400c428:	e037883a 	mov	sp,fp
 400c42c:	dfc00117 	ldw	ra,4(sp)
 400c430:	df000017 	ldw	fp,0(sp)
 400c434:	dec00204 	addi	sp,sp,8
 400c438:	f800283a 	ret

0400c43c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 400c43c:	defff804 	addi	sp,sp,-32
 400c440:	dfc00715 	stw	ra,28(sp)
 400c444:	df000615 	stw	fp,24(sp)
 400c448:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 400c44c:	018100b4 	movhi	r6,1026
 400c450:	318d3604 	addi	r6,r6,13528
 400c454:	00bfff94 	movui	r2,65534
 400c458:	d8800015 	stw	r2,0(sp)
 400c45c:	008100b4 	movhi	r2,1026
 400c460:	108b3704 	addi	r2,r2,11484
 400c464:	d8800115 	stw	r2,4(sp)
 400c468:	00808004 	movi	r2,512
 400c46c:	d8800215 	stw	r2,8(sp)
 400c470:	d8000315 	stw	zero,12(sp)
 400c474:	008000c4 	movi	r2,3
 400c478:	d8800415 	stw	r2,16(sp)
 400c47c:	01010074 	movhi	r4,1025
 400c480:	21323e04 	addi	r4,r4,-14088
 400c484:	000b883a 	mov	r5,zero
 400c488:	01c004c4 	movi	r7,19
 400c48c:	40116600 	call	4011660 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 400c490:	01410074 	movhi	r5,1025
 400c494:	295ace04 	addi	r5,r5,27448
 400c498:	010004c4 	movi	r4,19
 400c49c:	e1bfff04 	addi	r6,fp,-4
 400c4a0:	4011f780 	call	4011f78 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 400c4a4:	e037883a 	mov	sp,fp
 400c4a8:	dfc00117 	ldw	ra,4(sp)
 400c4ac:	df000017 	ldw	fp,0(sp)
 400c4b0:	dec00204 	addi	sp,sp,8
 400c4b4:	f800283a 	ret

0400c4b8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 400c4b8:	defffb04 	addi	sp,sp,-20
 400c4bc:	dfc00415 	stw	ra,16(sp)
 400c4c0:	df000315 	stw	fp,12(sp)
 400c4c4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 400c4c8:	010100b4 	movhi	r4,1026
 400c4cc:	21127f04 	addi	r4,r4,18940
 400c4d0:	01415c04 	movi	r5,1392
 400c4d4:	400c5980 	call	400c598 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 400c4d8:	010100b4 	movhi	r4,1026
 400c4dc:	2113db04 	addi	r4,r4,20332
 400c4e0:	01401504 	movi	r5,84
 400c4e4:	400c5980 	call	400c598 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 400c4e8:	008100b4 	movhi	r2,1026
 400c4ec:	10927f04 	addi	r2,r2,18940
 400c4f0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 400c4f4:	008100b4 	movhi	r2,1026
 400c4f8:	10929c04 	addi	r2,r2,19056
 400c4fc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 400c500:	e03fff05 	stb	zero,-4(fp)
 400c504:	00001106 	br	400c54c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 400c508:	e0fffe17 	ldw	r3,-8(fp)
 400c50c:	e0bffd17 	ldw	r2,-12(fp)
 400c510:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 400c514:	e0fffe17 	ldw	r3,-8(fp)
 400c518:	00800fc4 	movi	r2,63
 400c51c:	18801505 	stb	r2,84(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 400c520:	e0bffe17 	ldw	r2,-8(fp)
 400c524:	10001545 	stb	zero,85(r2)
#endif
        ptcb1++;
 400c528:	e0bffe17 	ldw	r2,-8(fp)
 400c52c:	10801d04 	addi	r2,r2,116
 400c530:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 400c534:	e0bffd17 	ldw	r2,-12(fp)
 400c538:	10801d04 	addi	r2,r2,116
 400c53c:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 400c540:	e0bfff03 	ldbu	r2,-4(fp)
 400c544:	10800044 	addi	r2,r2,1
 400c548:	e0bfff05 	stb	r2,-4(fp)
 400c54c:	e0bfff03 	ldbu	r2,-4(fp)
 400c550:	108002f0 	cmpltui	r2,r2,11
 400c554:	103fec1e 	bne	r2,zero,400c508 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 400c558:	e0bffe17 	ldw	r2,-8(fp)
 400c55c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 400c560:	e0fffe17 	ldw	r3,-8(fp)
 400c564:	00800fc4 	movi	r2,63
 400c568:	18801505 	stb	r2,84(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 400c56c:	e0bffe17 	ldw	r2,-8(fp)
 400c570:	10001545 	stb	zero,85(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 400c574:	d0204615 	stw	zero,-32488(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 400c578:	008100b4 	movhi	r2,1026
 400c57c:	10927f04 	addi	r2,r2,18940
 400c580:	d0a04a15 	stw	r2,-32472(gp)
}
 400c584:	e037883a 	mov	sp,fp
 400c588:	dfc00117 	ldw	ra,4(sp)
 400c58c:	df000017 	ldw	fp,0(sp)
 400c590:	dec00204 	addi	sp,sp,8
 400c594:	f800283a 	ret

0400c598 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 400c598:	defffd04 	addi	sp,sp,-12
 400c59c:	df000215 	stw	fp,8(sp)
 400c5a0:	df000204 	addi	fp,sp,8
 400c5a4:	e13ffe15 	stw	r4,-8(fp)
 400c5a8:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 400c5ac:	00000806 	br	400c5d0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 400c5b0:	e0bffe17 	ldw	r2,-8(fp)
 400c5b4:	10000005 	stb	zero,0(r2)
 400c5b8:	e0bffe17 	ldw	r2,-8(fp)
 400c5bc:	10800044 	addi	r2,r2,1
 400c5c0:	e0bffe15 	stw	r2,-8(fp)
        size--;
 400c5c4:	e0bfff0b 	ldhu	r2,-4(fp)
 400c5c8:	10bfffc4 	addi	r2,r2,-1
 400c5cc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 400c5d0:	e0bfff0b 	ldhu	r2,-4(fp)
 400c5d4:	1004c03a 	cmpne	r2,r2,zero
 400c5d8:	103ff51e 	bne	r2,zero,400c5b0 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 400c5dc:	e037883a 	mov	sp,fp
 400c5e0:	df000017 	ldw	fp,0(sp)
 400c5e4:	dec00104 	addi	sp,sp,4
 400c5e8:	f800283a 	ret

0400c5ec <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 400c5ec:	defffc04 	addi	sp,sp,-16
 400c5f0:	df000315 	stw	fp,12(sp)
 400c5f4:	df000304 	addi	fp,sp,12
 400c5f8:	e13ffd15 	stw	r4,-12(fp)
 400c5fc:	e17ffe15 	stw	r5,-8(fp)
 400c600:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 400c604:	00000d06 	br	400c63c <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 400c608:	e0bffe17 	ldw	r2,-8(fp)
 400c60c:	10c00003 	ldbu	r3,0(r2)
 400c610:	e0bffd17 	ldw	r2,-12(fp)
 400c614:	10c00005 	stb	r3,0(r2)
 400c618:	e0bffd17 	ldw	r2,-12(fp)
 400c61c:	10800044 	addi	r2,r2,1
 400c620:	e0bffd15 	stw	r2,-12(fp)
 400c624:	e0bffe17 	ldw	r2,-8(fp)
 400c628:	10800044 	addi	r2,r2,1
 400c62c:	e0bffe15 	stw	r2,-8(fp)
        size--;
 400c630:	e0bfff0b 	ldhu	r2,-4(fp)
 400c634:	10bfffc4 	addi	r2,r2,-1
 400c638:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 400c63c:	e0bfff0b 	ldhu	r2,-4(fp)
 400c640:	1004c03a 	cmpne	r2,r2,zero
 400c644:	103ff01e 	bne	r2,zero,400c608 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 400c648:	e037883a 	mov	sp,fp
 400c64c:	df000017 	ldw	fp,0(sp)
 400c650:	dec00104 	addi	sp,sp,4
 400c654:	f800283a 	ret

0400c658 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 400c658:	defffb04 	addi	sp,sp,-20
 400c65c:	dfc00415 	stw	ra,16(sp)
 400c660:	df000315 	stw	fp,12(sp)
 400c664:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400c668:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c66c:	0005303a 	rdctl	r2,status
 400c670:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c674:	e0fffe17 	ldw	r3,-8(fp)
 400c678:	00bfff84 	movi	r2,-2
 400c67c:	1884703a 	and	r2,r3,r2
 400c680:	1001703a 	wrctl	status,r2
  
  return context;
 400c684:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 400c688:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 400c68c:	d0a05103 	ldbu	r2,-32444(gp)
 400c690:	10803fcc 	andi	r2,r2,255
 400c694:	1004c03a 	cmpne	r2,r2,zero
 400c698:	1000251e 	bne	r2,zero,400c730 <OS_Sched+0xd8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 400c69c:	d0a04303 	ldbu	r2,-32500(gp)
 400c6a0:	10803fcc 	andi	r2,r2,255
 400c6a4:	1004c03a 	cmpne	r2,r2,zero
 400c6a8:	1000211e 	bne	r2,zero,400c730 <OS_Sched+0xd8>
            //OS_SchedNew();
            OSPrioHighRdy = getPrioHightRdy();
 400c6ac:	400b4b40 	call	400b4b4 <getPrioHightRdy>
 400c6b0:	d0a04505 	stb	r2,-32492(gp)
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 400c6b4:	d0a04503 	ldbu	r2,-32492(gp)
 400c6b8:	d0e04543 	ldbu	r3,-32491(gp)
 400c6bc:	11003fcc 	andi	r4,r2,255
 400c6c0:	18803fcc 	andi	r2,r3,255
 400c6c4:	20801a26 	beq	r4,r2,400c730 <OS_Sched+0xd8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 400c6c8:	d0a04503 	ldbu	r2,-32492(gp)
 400c6cc:	10803fcc 	andi	r2,r2,255
 400c6d0:	00c100b4 	movhi	r3,1026
 400c6d4:	18d3db04 	addi	r3,r3,20332
 400c6d8:	1085883a 	add	r2,r2,r2
 400c6dc:	1085883a 	add	r2,r2,r2
 400c6e0:	10c5883a 	add	r2,r2,r3
 400c6e4:	10800017 	ldw	r2,0(r2)
 400c6e8:	d0a04d15 	stw	r2,-32460(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 400c6ec:	d0e04d17 	ldw	r3,-32460(gp)
 400c6f0:	18801017 	ldw	r2,64(r3)
 400c6f4:	10800044 	addi	r2,r2,1
 400c6f8:	18801015 	stw	r2,64(r3)
#endif



                printf("%5d complete %d   %d\n",(int)OSTime,(int)OSPrioCur,(int)OSPrioHighRdy);
 400c6fc:	d0a05317 	ldw	r2,-32436(gp)
 400c700:	100b883a 	mov	r5,r2
 400c704:	d0a04543 	ldbu	r2,-32491(gp)
 400c708:	11803fcc 	andi	r6,r2,255
 400c70c:	d0a04503 	ldbu	r2,-32492(gp)
 400c710:	11c03fcc 	andi	r7,r2,255
 400c714:	01010074 	movhi	r4,1025
 400c718:	211ad204 	addi	r4,r4,27464
 400c71c:	40006880 	call	4000688 <printf>

                //sprintf(&CtxSwMessage[CtxSwMessageTop++],"%5d complete %d   %d\n",(int)OSTime,(int)OSPrioCur,(int)OSPrioHighRdy);

                OSCtxSwCtr++;                          /* Increment context switch counter             */
 400c720:	d0a04817 	ldw	r2,-32480(gp)
 400c724:	10800044 	addi	r2,r2,1
 400c728:	d0a04815 	stw	r2,-32480(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 400c72c:	40158240 	call	4015824 <OSCtxSw>
 400c730:	e0bfff17 	ldw	r2,-4(fp)
 400c734:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c738:	e0bffd17 	ldw	r2,-12(fp)
 400c73c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 400c740:	e037883a 	mov	sp,fp
 400c744:	dfc00117 	ldw	ra,4(sp)
 400c748:	df000017 	ldw	fp,0(sp)
 400c74c:	dec00204 	addi	sp,sp,8
 400c750:	f800283a 	ret

0400c754 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 400c754:	defffe04 	addi	sp,sp,-8
 400c758:	df000115 	stw	fp,4(sp)
 400c75c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 400c760:	d0a04f03 	ldbu	r2,-32452(gp)
 400c764:	10c03fcc 	andi	r3,r2,255
 400c768:	00810074 	movhi	r2,1025
 400c76c:	109a8404 	addi	r2,r2,27152
 400c770:	10c5883a 	add	r2,r2,r3
 400c774:	10800003 	ldbu	r2,0(r2)
 400c778:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 400c77c:	e0bfff03 	ldbu	r2,-4(fp)
 400c780:	100490fa 	slli	r2,r2,3
 400c784:	1009883a 	mov	r4,r2
 400c788:	e0ffff03 	ldbu	r3,-4(fp)
 400c78c:	d0a04f44 	addi	r2,gp,-32451
 400c790:	1885883a 	add	r2,r3,r2
 400c794:	10800003 	ldbu	r2,0(r2)
 400c798:	10c03fcc 	andi	r3,r2,255
 400c79c:	00810074 	movhi	r2,1025
 400c7a0:	109a8404 	addi	r2,r2,27152
 400c7a4:	10c5883a 	add	r2,r2,r3
 400c7a8:	10800003 	ldbu	r2,0(r2)
 400c7ac:	2085883a 	add	r2,r4,r2
 400c7b0:	d0a04505 	stb	r2,-32492(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 400c7b4:	e037883a 	mov	sp,fp
 400c7b8:	df000017 	ldw	fp,0(sp)
 400c7bc:	dec00104 	addi	sp,sp,4
 400c7c0:	f800283a 	ret

0400c7c4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 400c7c4:	defffc04 	addi	sp,sp,-16
 400c7c8:	df000315 	stw	fp,12(sp)
 400c7cc:	df000304 	addi	fp,sp,12
 400c7d0:	e13ffe15 	stw	r4,-8(fp)
 400c7d4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 400c7d8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 400c7dc:	00000d06 	br	400c814 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 400c7e0:	e0bfff17 	ldw	r2,-4(fp)
 400c7e4:	10c00003 	ldbu	r3,0(r2)
 400c7e8:	e0bffe17 	ldw	r2,-8(fp)
 400c7ec:	10c00005 	stb	r3,0(r2)
 400c7f0:	e0bffe17 	ldw	r2,-8(fp)
 400c7f4:	10800044 	addi	r2,r2,1
 400c7f8:	e0bffe15 	stw	r2,-8(fp)
 400c7fc:	e0bfff17 	ldw	r2,-4(fp)
 400c800:	10800044 	addi	r2,r2,1
 400c804:	e0bfff15 	stw	r2,-4(fp)
        len++;
 400c808:	e0bffd03 	ldbu	r2,-12(fp)
 400c80c:	10800044 	addi	r2,r2,1
 400c810:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400c814:	e0bfff17 	ldw	r2,-4(fp)
 400c818:	10800003 	ldbu	r2,0(r2)
 400c81c:	10803fcc 	andi	r2,r2,255
 400c820:	1004c03a 	cmpne	r2,r2,zero
 400c824:	103fee1e 	bne	r2,zero,400c7e0 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 400c828:	e0bffe17 	ldw	r2,-8(fp)
 400c82c:	10000005 	stb	zero,0(r2)
    return (len);
 400c830:	e0bffd03 	ldbu	r2,-12(fp)
}
 400c834:	e037883a 	mov	sp,fp
 400c838:	df000017 	ldw	fp,0(sp)
 400c83c:	dec00104 	addi	sp,sp,4
 400c840:	f800283a 	ret

0400c844 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 400c844:	defffd04 	addi	sp,sp,-12
 400c848:	df000215 	stw	fp,8(sp)
 400c84c:	df000204 	addi	fp,sp,8
 400c850:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 400c854:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 400c858:	00000606 	br	400c874 <OS_StrLen+0x30>
        psrc++;
 400c85c:	e0bfff17 	ldw	r2,-4(fp)
 400c860:	10800044 	addi	r2,r2,1
 400c864:	e0bfff15 	stw	r2,-4(fp)
        len++;
 400c868:	e0bffe03 	ldbu	r2,-8(fp)
 400c86c:	10800044 	addi	r2,r2,1
 400c870:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400c874:	e0bfff17 	ldw	r2,-4(fp)
 400c878:	10800003 	ldbu	r2,0(r2)
 400c87c:	10803fcc 	andi	r2,r2,255
 400c880:	1004c03a 	cmpne	r2,r2,zero
 400c884:	103ff51e 	bne	r2,zero,400c85c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 400c888:	e0bffe03 	ldbu	r2,-8(fp)
}
 400c88c:	e037883a 	mov	sp,fp
 400c890:	df000017 	ldw	fp,0(sp)
 400c894:	dec00104 	addi	sp,sp,4
 400c898:	f800283a 	ret

0400c89c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 400c89c:	defffa04 	addi	sp,sp,-24
 400c8a0:	dfc00515 	stw	ra,20(sp)
 400c8a4:	df000415 	stw	fp,16(sp)
 400c8a8:	df000404 	addi	fp,sp,16
 400c8ac:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400c8b0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c8b4:	0005303a 	rdctl	r2,status
 400c8b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c8bc:	e0fffd17 	ldw	r3,-12(fp)
 400c8c0:	00bfff84 	movi	r2,-2
 400c8c4:	1884703a 	and	r2,r3,r2
 400c8c8:	1001703a 	wrctl	status,r2
  
  return context;
 400c8cc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 400c8d0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 400c8d4:	d0a04417 	ldw	r2,-32496(gp)
 400c8d8:	10800044 	addi	r2,r2,1
 400c8dc:	d0a04415 	stw	r2,-32496(gp)
 400c8e0:	e0bffe17 	ldw	r2,-8(fp)
 400c8e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c8e8:	e0bffc17 	ldw	r2,-16(fp)
 400c8ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 400c8f0:	4015cd00 	call	4015cd0 <OSTaskIdleHook>
    }
 400c8f4:	003fef06 	br	400c8b4 <OS_TaskIdle+0x18>

0400c8f8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 400c8f8:	defffa04 	addi	sp,sp,-24
 400c8fc:	dfc00515 	stw	ra,20(sp)
 400c900:	df000415 	stw	fp,16(sp)
 400c904:	df000404 	addi	fp,sp,16
 400c908:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400c90c:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400c910:	00000206 	br	400c91c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 400c914:	0009883a 	mov	r4,zero
 400c918:	401293c0 	call	401293c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400c91c:	d0a05503 	ldbu	r2,-32428(gp)
 400c920:	10803fcc 	andi	r2,r2,255
 400c924:	1005003a 	cmpeq	r2,r2,zero
 400c928:	103ffa1e 	bne	r2,zero,400c914 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 400c92c:	d1204917 	ldw	r4,-32476(gp)
 400c930:	01401904 	movi	r5,100
 400c934:	40097900 	call	4009790 <__udivsi3>
 400c938:	d0a04915 	stw	r2,-32476(gp)
    if (OSIdleCtrMax == 0L) {
 400c93c:	d0a04917 	ldw	r2,-32476(gp)
 400c940:	1004c03a 	cmpne	r2,r2,zero
 400c944:	1000031e 	bne	r2,zero,400c954 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 400c948:	d0204b05 	stb	zero,-32468(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 400c94c:	01003fc4 	movi	r4,255
 400c950:	40125500 	call	4012550 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c954:	0005303a 	rdctl	r2,status
 400c958:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c95c:	e0fffd17 	ldw	r3,-12(fp)
 400c960:	00bfff84 	movi	r2,-2
 400c964:	1884703a 	and	r2,r3,r2
 400c968:	1001703a 	wrctl	status,r2
  
  return context;
 400c96c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 400c970:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 400c974:	d0a04417 	ldw	r2,-32496(gp)
 400c978:	d0a05615 	stw	r2,-32424(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 400c97c:	d0204415 	stw	zero,-32496(gp)
 400c980:	e0bffe17 	ldw	r2,-8(fp)
 400c984:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c988:	e0bffc17 	ldw	r2,-16(fp)
 400c98c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 400c990:	d1205617 	ldw	r4,-32424(gp)
 400c994:	d1604917 	ldw	r5,-32476(gp)
 400c998:	40097900 	call	4009790 <__udivsi3>
 400c99c:	1007883a 	mov	r3,r2
 400c9a0:	00801904 	movi	r2,100
 400c9a4:	10c5c83a 	sub	r2,r2,r3
 400c9a8:	d0a04b05 	stb	r2,-32468(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 400c9ac:	4015c600 	call	4015c60 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 400c9b0:	400c9c00 	call	400c9c0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 400c9b4:	0009883a 	mov	r4,zero
 400c9b8:	401293c0 	call	401293c <OSTimeDly>
    }
 400c9bc:	003fe506 	br	400c954 <OS_TaskStat+0x5c>

0400c9c0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 400c9c0:	defffa04 	addi	sp,sp,-24
 400c9c4:	dfc00515 	stw	ra,20(sp)
 400c9c8:	df000415 	stw	fp,16(sp)
 400c9cc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 400c9d0:	e03ffc05 	stb	zero,-16(fp)
 400c9d4:	00002406 	br	400ca68 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 400c9d8:	e13ffc03 	ldbu	r4,-16(fp)
 400c9dc:	e17ffe04 	addi	r5,fp,-8
 400c9e0:	40123540 	call	4012354 <OSTaskStkChk>
 400c9e4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 400c9e8:	e0bffc43 	ldbu	r2,-15(fp)
 400c9ec:	1004c03a 	cmpne	r2,r2,zero
 400c9f0:	10001a1e 	bne	r2,zero,400ca5c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 400c9f4:	e0bffc03 	ldbu	r2,-16(fp)
 400c9f8:	00c100b4 	movhi	r3,1026
 400c9fc:	18d3db04 	addi	r3,r3,20332
 400ca00:	1085883a 	add	r2,r2,r2
 400ca04:	1085883a 	add	r2,r2,r2
 400ca08:	10c5883a 	add	r2,r2,r3
 400ca0c:	10800017 	ldw	r2,0(r2)
 400ca10:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 400ca14:	e0bffd17 	ldw	r2,-12(fp)
 400ca18:	1005003a 	cmpeq	r2,r2,zero
 400ca1c:	10000f1e 	bne	r2,zero,400ca5c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 400ca20:	e0bffd17 	ldw	r2,-12(fp)
 400ca24:	10800060 	cmpeqi	r2,r2,1
 400ca28:	10000c1e 	bne	r2,zero,400ca5c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 400ca2c:	e0bffd17 	ldw	r2,-12(fp)
 400ca30:	10c00217 	ldw	r3,8(r2)
 400ca34:	e0bffd17 	ldw	r2,-12(fp)
 400ca38:	10800317 	ldw	r2,12(r2)
 400ca3c:	1085883a 	add	r2,r2,r2
 400ca40:	1085883a 	add	r2,r2,r2
 400ca44:	1887883a 	add	r3,r3,r2
 400ca48:	e0bffd17 	ldw	r2,-12(fp)
 400ca4c:	10c01315 	stw	r3,76(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 400ca50:	e0ffff17 	ldw	r3,-4(fp)
 400ca54:	e0bffd17 	ldw	r2,-12(fp)
 400ca58:	10c01415 	stw	r3,80(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 400ca5c:	e0bffc03 	ldbu	r2,-16(fp)
 400ca60:	10800044 	addi	r2,r2,1
 400ca64:	e0bffc05 	stb	r2,-16(fp)
 400ca68:	e0bffc03 	ldbu	r2,-16(fp)
 400ca6c:	10800570 	cmpltui	r2,r2,21
 400ca70:	103fd91e 	bne	r2,zero,400c9d8 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 400ca74:	e037883a 	mov	sp,fp
 400ca78:	dfc00117 	ldw	ra,4(sp)
 400ca7c:	df000017 	ldw	fp,0(sp)
 400ca80:	dec00204 	addi	sp,sp,8
 400ca84:	f800283a 	ret

0400ca88 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 400ca88:	defff104 	addi	sp,sp,-60
 400ca8c:	dfc00e15 	stw	ra,56(sp)
 400ca90:	df000d15 	stw	fp,52(sp)
 400ca94:	df000d04 	addi	fp,sp,52
 400ca98:	e17ffb15 	stw	r5,-20(fp)
 400ca9c:	e1bffc15 	stw	r6,-16(fp)
 400caa0:	e0800417 	ldw	r2,16(fp)
 400caa4:	e13ffa05 	stb	r4,-24(fp)
 400caa8:	e1fffd0d 	sth	r7,-12(fp)
 400caac:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400cab0:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cab4:	0005303a 	rdctl	r2,status
 400cab8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cabc:	e0fff717 	ldw	r3,-36(fp)
 400cac0:	00bfff84 	movi	r2,-2
 400cac4:	1884703a 	and	r2,r3,r2
 400cac8:	1001703a 	wrctl	status,r2
  
  return context;
 400cacc:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 400cad0:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 400cad4:	d0a04a17 	ldw	r2,-32472(gp)
 400cad8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 400cadc:	e0bff917 	ldw	r2,-28(fp)
 400cae0:	1005003a 	cmpeq	r2,r2,zero
 400cae4:	1000941e 	bne	r2,zero,400cd38 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 400cae8:	e0bff917 	ldw	r2,-28(fp)
 400caec:	10800517 	ldw	r2,20(r2)
 400caf0:	d0a04a15 	stw	r2,-32472(gp)
 400caf4:	e0bff817 	ldw	r2,-32(fp)
 400caf8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400cafc:	e0bff617 	ldw	r2,-40(fp)
 400cb00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 400cb04:	e0fff917 	ldw	r3,-28(fp)
 400cb08:	e0bffb17 	ldw	r2,-20(fp)
 400cb0c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 400cb10:	e0fff917 	ldw	r3,-28(fp)
 400cb14:	e0bffa03 	ldbu	r2,-24(fp)
 400cb18:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 400cb1c:	e0bff917 	ldw	r2,-28(fp)
 400cb20:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 400cb24:	e0bff917 	ldw	r2,-28(fp)
 400cb28:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 400cb2c:	e0bff917 	ldw	r2,-28(fp)
 400cb30:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 400cb34:	e0fff917 	ldw	r3,-28(fp)
 400cb38:	e0800317 	ldw	r2,12(fp)
 400cb3c:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 400cb40:	e0fff917 	ldw	r3,-28(fp)
 400cb44:	e0800217 	ldw	r2,8(fp)
 400cb48:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 400cb4c:	e0fff917 	ldw	r3,-28(fp)
 400cb50:	e0bffc17 	ldw	r2,-16(fp)
 400cb54:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 400cb58:	e0fff917 	ldw	r3,-28(fp)
 400cb5c:	e0bffe0b 	ldhu	r2,-8(fp)
 400cb60:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 400cb64:	e0fff917 	ldw	r3,-28(fp)
 400cb68:	e0bffd0b 	ldhu	r2,-12(fp)
 400cb6c:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 400cb70:	e0bff917 	ldw	r2,-28(fp)
 400cb74:	10000f85 	stb	zero,62(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 400cb78:	e0bffa03 	ldbu	r2,-24(fp)
 400cb7c:	1004d0fa 	srli	r2,r2,3
 400cb80:	1007883a 	mov	r3,r2
 400cb84:	e0bff917 	ldw	r2,-28(fp)
 400cb88:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 400cb8c:	e0bffa03 	ldbu	r2,-24(fp)
 400cb90:	108001cc 	andi	r2,r2,7
 400cb94:	1007883a 	mov	r3,r2
 400cb98:	e0bff917 	ldw	r2,-28(fp)
 400cb9c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 400cba0:	e0bff917 	ldw	r2,-28(fp)
 400cba4:	10800d03 	ldbu	r2,52(r2)
 400cba8:	10c03fcc 	andi	r3,r2,255
 400cbac:	00800044 	movi	r2,1
 400cbb0:	10c4983a 	sll	r2,r2,r3
 400cbb4:	1007883a 	mov	r3,r2
 400cbb8:	e0bff917 	ldw	r2,-28(fp)
 400cbbc:	10c00f45 	stb	r3,61(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 400cbc0:	e0bff917 	ldw	r2,-28(fp)
 400cbc4:	10800cc3 	ldbu	r2,51(r2)
 400cbc8:	10c03fcc 	andi	r3,r2,255
 400cbcc:	00800044 	movi	r2,1
 400cbd0:	10c4983a 	sll	r2,r2,r3
 400cbd4:	1007883a 	mov	r3,r2
 400cbd8:	e0bff917 	ldw	r2,-28(fp)
 400cbdc:	10c00f05 	stb	r3,60(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 400cbe0:	e0bff917 	ldw	r2,-28(fp)
 400cbe4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 400cbe8:	e0bff917 	ldw	r2,-28(fp)
 400cbec:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 400cbf0:	e0bff917 	ldw	r2,-28(fp)
 400cbf4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 400cbf8:	e0bff917 	ldw	r2,-28(fp)
 400cbfc:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 400cc00:	e0bff917 	ldw	r2,-28(fp)
 400cc04:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesStart = 0L;
 400cc08:	e0bff917 	ldw	r2,-28(fp)
 400cc0c:	10001215 	stw	zero,72(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 400cc10:	e0bff917 	ldw	r2,-28(fp)
 400cc14:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 400cc18:	e0bff917 	ldw	r2,-28(fp)
 400cc1c:	10001315 	stw	zero,76(r2)
        ptcb->OSTCBStkUsed     = 0L;
 400cc20:	e0bff917 	ldw	r2,-28(fp)
 400cc24:	10001415 	stw	zero,80(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 400cc28:	e0fff917 	ldw	r3,-28(fp)
 400cc2c:	00800fc4 	movi	r2,63
 400cc30:	18801505 	stb	r2,84(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 400cc34:	e0bff917 	ldw	r2,-28(fp)
 400cc38:	10001545 	stb	zero,85(r2)
#endif

        OSTCBInitHook(ptcb);
 400cc3c:	e13ff917 	ldw	r4,-28(fp)
 400cc40:	4015cec0 	call	4015cec <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 400cc44:	e13ff917 	ldw	r4,-28(fp)
 400cc48:	4015c040 	call	4015c04 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cc4c:	0005303a 	rdctl	r2,status
 400cc50:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cc54:	e0fff517 	ldw	r3,-44(fp)
 400cc58:	00bfff84 	movi	r2,-2
 400cc5c:	1884703a 	and	r2,r3,r2
 400cc60:	1001703a 	wrctl	status,r2
  
  return context;
 400cc64:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 400cc68:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 400cc6c:	e0bffa03 	ldbu	r2,-24(fp)
 400cc70:	00c100b4 	movhi	r3,1026
 400cc74:	18d3db04 	addi	r3,r3,20332
 400cc78:	1085883a 	add	r2,r2,r2
 400cc7c:	1085883a 	add	r2,r2,r2
 400cc80:	10c7883a 	add	r3,r2,r3
 400cc84:	e0bff917 	ldw	r2,-28(fp)
 400cc88:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 400cc8c:	d0e04617 	ldw	r3,-32488(gp)
 400cc90:	e0bff917 	ldw	r2,-28(fp)
 400cc94:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 400cc98:	e0bff917 	ldw	r2,-28(fp)
 400cc9c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 400cca0:	d0a04617 	ldw	r2,-32488(gp)
 400cca4:	1005003a 	cmpeq	r2,r2,zero
 400cca8:	1000031e 	bne	r2,zero,400ccb8 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 400ccac:	d0e04617 	ldw	r3,-32488(gp)
 400ccb0:	e0bff917 	ldw	r2,-28(fp)
 400ccb4:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 400ccb8:	e0bff917 	ldw	r2,-28(fp)
 400ccbc:	d0a04615 	stw	r2,-32488(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 400ccc0:	e0bff917 	ldw	r2,-28(fp)
 400ccc4:	10c00f43 	ldbu	r3,61(r2)
 400ccc8:	d0a04f03 	ldbu	r2,-32452(gp)
 400cccc:	1884b03a 	or	r2,r3,r2
 400ccd0:	d0a04f05 	stb	r2,-32452(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400ccd4:	e0bff917 	ldw	r2,-28(fp)
 400ccd8:	10800d03 	ldbu	r2,52(r2)
 400ccdc:	11003fcc 	andi	r4,r2,255
 400cce0:	e0bff917 	ldw	r2,-28(fp)
 400cce4:	10800d03 	ldbu	r2,52(r2)
 400cce8:	10c03fcc 	andi	r3,r2,255
 400ccec:	d0a04f44 	addi	r2,gp,-32451
 400ccf0:	1885883a 	add	r2,r3,r2
 400ccf4:	10c00003 	ldbu	r3,0(r2)
 400ccf8:	e0bff917 	ldw	r2,-28(fp)
 400ccfc:	10800f03 	ldbu	r2,60(r2)
 400cd00:	1884b03a 	or	r2,r3,r2
 400cd04:	1007883a 	mov	r3,r2
 400cd08:	d0a04f44 	addi	r2,gp,-32451
 400cd0c:	2085883a 	add	r2,r4,r2
 400cd10:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 400cd14:	d0a04b43 	ldbu	r2,-32467(gp)
 400cd18:	10800044 	addi	r2,r2,1
 400cd1c:	d0a04b45 	stb	r2,-32467(gp)
 400cd20:	e0bff817 	ldw	r2,-32(fp)
 400cd24:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400cd28:	e0bff417 	ldw	r2,-48(fp)
 400cd2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 400cd30:	e03fff15 	stw	zero,-4(fp)
 400cd34:	00000606 	br	400cd50 <OS_TCBInit+0x2c8>
 400cd38:	e0bff817 	ldw	r2,-32(fp)
 400cd3c:	e0bff315 	stw	r2,-52(fp)
 400cd40:	e0bff317 	ldw	r2,-52(fp)
 400cd44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 400cd48:	00801084 	movi	r2,66
 400cd4c:	e0bfff15 	stw	r2,-4(fp)
 400cd50:	e0bfff17 	ldw	r2,-4(fp)
}
 400cd54:	e037883a 	mov	sp,fp
 400cd58:	dfc00117 	ldw	ra,4(sp)
 400cd5c:	df000017 	ldw	fp,0(sp)
 400cd60:	dec00204 	addi	sp,sp,8
 400cd64:	f800283a 	ret

0400cd68 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 400cd68:	defffe04 	addi	sp,sp,-8
 400cd6c:	df000115 	stw	fp,4(sp)
 400cd70:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 400cd74:	d0a00f04 	addi	r2,gp,-32708
 400cd78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 400cd7c:	d0a01004 	addi	r2,gp,-32704
 400cd80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 400cd84:	d0a01184 	addi	r2,gp,-32698
 400cd88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 400cd8c:	d0a01204 	addi	r2,gp,-32696
 400cd90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 400cd94:	d0a01104 	addi	r2,gp,-32700
 400cd98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 400cd9c:	d0a01284 	addi	r2,gp,-32694
 400cda0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 400cda4:	d0a01304 	addi	r2,gp,-32692
 400cda8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 400cdac:	d0a01384 	addi	r2,gp,-32690
 400cdb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 400cdb4:	d0a01404 	addi	r2,gp,-32688
 400cdb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 400cdbc:	d0a01484 	addi	r2,gp,-32686
 400cdc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 400cdc4:	d0a01504 	addi	r2,gp,-32684
 400cdc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 400cdcc:	d0a01584 	addi	r2,gp,-32682
 400cdd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 400cdd4:	d0a01604 	addi	r2,gp,-32680
 400cdd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 400cddc:	d0a01684 	addi	r2,gp,-32678
 400cde0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 400cde4:	d0a01704 	addi	r2,gp,-32676
 400cde8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 400cdec:	d0a01784 	addi	r2,gp,-32674
 400cdf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 400cdf4:	d0a01804 	addi	r2,gp,-32672
 400cdf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 400cdfc:	d0a01884 	addi	r2,gp,-32670
 400ce00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 400ce04:	d0a01904 	addi	r2,gp,-32668
 400ce08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 400ce0c:	d0a01984 	addi	r2,gp,-32666
 400ce10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 400ce14:	d0a01a04 	addi	r2,gp,-32664
 400ce18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 400ce1c:	d0a01a84 	addi	r2,gp,-32662
 400ce20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 400ce24:	d0a01b04 	addi	r2,gp,-32660
 400ce28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 400ce2c:	d0a01b84 	addi	r2,gp,-32658
 400ce30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 400ce34:	d0a01c04 	addi	r2,gp,-32656
 400ce38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 400ce3c:	d0a01c84 	addi	r2,gp,-32654
 400ce40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 400ce44:	d0a01d04 	addi	r2,gp,-32652
 400ce48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 400ce4c:	d0a01d84 	addi	r2,gp,-32650
 400ce50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 400ce54:	d0a01e04 	addi	r2,gp,-32648
 400ce58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 400ce5c:	d0a01e84 	addi	r2,gp,-32646
 400ce60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 400ce64:	d0a01f04 	addi	r2,gp,-32644
 400ce68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 400ce6c:	d0a01f84 	addi	r2,gp,-32642
 400ce70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 400ce74:	d0a02004 	addi	r2,gp,-32640
 400ce78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 400ce7c:	d0a02084 	addi	r2,gp,-32638
 400ce80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 400ce84:	d0a02104 	addi	r2,gp,-32636
 400ce88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 400ce8c:	d0a02184 	addi	r2,gp,-32634
 400ce90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 400ce94:	d0a02204 	addi	r2,gp,-32632
 400ce98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 400ce9c:	d0a02284 	addi	r2,gp,-32630
 400cea0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 400cea4:	d0a02304 	addi	r2,gp,-32628
 400cea8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 400ceac:	d0a02384 	addi	r2,gp,-32626
 400ceb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 400ceb4:	d0a02404 	addi	r2,gp,-32624
 400ceb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 400cebc:	d0a02484 	addi	r2,gp,-32622
 400cec0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 400cec4:	d0a02504 	addi	r2,gp,-32620
 400cec8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 400cecc:	d0a02584 	addi	r2,gp,-32618
 400ced0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 400ced4:	d0a02604 	addi	r2,gp,-32616
 400ced8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 400cedc:	d0a02b04 	addi	r2,gp,-32596
 400cee0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 400cee4:	e037883a 	mov	sp,fp
 400cee8:	df000017 	ldw	fp,0(sp)
 400ceec:	dec00104 	addi	sp,sp,4
 400cef0:	f800283a 	ret

0400cef4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 400cef4:	defff104 	addi	sp,sp,-60
 400cef8:	df000e15 	stw	fp,56(sp)
 400cefc:	df000e04 	addi	fp,sp,56
 400cf00:	e13ffa15 	stw	r4,-24(fp)
 400cf04:	e1fffd15 	stw	r7,-12(fp)
 400cf08:	e17ffb0d 	sth	r5,-20(fp)
 400cf0c:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400cf10:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400cf14:	e0bffd17 	ldw	r2,-12(fp)
 400cf18:	1004c03a 	cmpne	r2,r2,zero
 400cf1c:	1000021e 	bne	r2,zero,400cf28 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 400cf20:	e03fff15 	stw	zero,-4(fp)
 400cf24:	0000bb06 	br	400d214 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400cf28:	e0bffa17 	ldw	r2,-24(fp)
 400cf2c:	1004c03a 	cmpne	r2,r2,zero
 400cf30:	1000051e 	bne	r2,zero,400cf48 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400cf34:	e0fffd17 	ldw	r3,-12(fp)
 400cf38:	00801b84 	movi	r2,110
 400cf3c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400cf40:	e03fff15 	stw	zero,-4(fp)
 400cf44:	0000b306 	br	400d214 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 400cf48:	e0bffa17 	ldw	r2,-24(fp)
 400cf4c:	10800003 	ldbu	r2,0(r2)
 400cf50:	10803fcc 	andi	r2,r2,255
 400cf54:	10800160 	cmpeqi	r2,r2,5
 400cf58:	1000051e 	bne	r2,zero,400cf70 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 400cf5c:	e0fffd17 	ldw	r3,-12(fp)
 400cf60:	00800044 	movi	r2,1
 400cf64:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400cf68:	e03fff15 	stw	zero,-4(fp)
 400cf6c:	0000a906 	br	400d214 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 400cf70:	e0fffc03 	ldbu	r3,-16(fp)
 400cf74:	00bfe004 	movi	r2,-128
 400cf78:	1884703a 	and	r2,r3,r2
 400cf7c:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 400cf80:	e0bff943 	ldbu	r2,-27(fp)
 400cf84:	1005003a 	cmpeq	r2,r2,zero
 400cf88:	1000061e 	bne	r2,zero,400cfa4 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 400cf8c:	e0bffc03 	ldbu	r2,-16(fp)
 400cf90:	10801fcc 	andi	r2,r2,127
 400cf94:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 400cf98:	00800044 	movi	r2,1
 400cf9c:	e0bff905 	stb	r2,-28(fp)
 400cfa0:	00000106 	br	400cfa8 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 400cfa4:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 400cfa8:	e0bffd17 	ldw	r2,-12(fp)
 400cfac:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cfb0:	0005303a 	rdctl	r2,status
 400cfb4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cfb8:	e0fff717 	ldw	r3,-36(fp)
 400cfbc:	00bfff84 	movi	r2,-2
 400cfc0:	1884703a 	and	r2,r3,r2
 400cfc4:	1001703a 	wrctl	status,r2
  
  return context;
 400cfc8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 400cfcc:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 400cfd0:	e0bffc03 	ldbu	r2,-16(fp)
 400cfd4:	e0bffe15 	stw	r2,-8(fp)
 400cfd8:	e0fffe17 	ldw	r3,-8(fp)
 400cfdc:	18800060 	cmpeqi	r2,r3,1
 400cfe0:	1000651e 	bne	r2,zero,400d178 <OSFlagAccept+0x284>
 400cfe4:	e0fffe17 	ldw	r3,-8(fp)
 400cfe8:	18800088 	cmpgei	r2,r3,2
 400cfec:	1000041e 	bne	r2,zero,400d000 <OSFlagAccept+0x10c>
 400cff0:	e0fffe17 	ldw	r3,-8(fp)
 400cff4:	1805003a 	cmpeq	r2,r3,zero
 400cff8:	1000421e 	bne	r2,zero,400d104 <OSFlagAccept+0x210>
 400cffc:	00007b06 	br	400d1ec <OSFlagAccept+0x2f8>
 400d000:	e0fffe17 	ldw	r3,-8(fp)
 400d004:	188000a0 	cmpeqi	r2,r3,2
 400d008:	1000041e 	bne	r2,zero,400d01c <OSFlagAccept+0x128>
 400d00c:	e0fffe17 	ldw	r3,-8(fp)
 400d010:	188000e0 	cmpeqi	r2,r3,3
 400d014:	10001e1e 	bne	r2,zero,400d090 <OSFlagAccept+0x19c>
 400d018:	00007406 	br	400d1ec <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 400d01c:	e0bffa17 	ldw	r2,-24(fp)
 400d020:	10c0020b 	ldhu	r3,8(r2)
 400d024:	e0bffb0b 	ldhu	r2,-20(fp)
 400d028:	1884703a 	and	r2,r3,r2
 400d02c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400d030:	e0fff98b 	ldhu	r3,-26(fp)
 400d034:	e0bffb0b 	ldhu	r2,-20(fp)
 400d038:	18800d1e 	bne	r3,r2,400d070 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400d03c:	e0bff903 	ldbu	r2,-28(fp)
 400d040:	10800058 	cmpnei	r2,r2,1
 400d044:	10000d1e 	bne	r2,zero,400d07c <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 400d048:	e0bffa17 	ldw	r2,-24(fp)
 400d04c:	1080020b 	ldhu	r2,8(r2)
 400d050:	1007883a 	mov	r3,r2
 400d054:	e0bff98b 	ldhu	r2,-26(fp)
 400d058:	0084303a 	nor	r2,zero,r2
 400d05c:	1884703a 	and	r2,r3,r2
 400d060:	1007883a 	mov	r3,r2
 400d064:	e0bffa17 	ldw	r2,-24(fp)
 400d068:	10c0020d 	sth	r3,8(r2)
 400d06c:	00000306 	br	400d07c <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400d070:	e0fffd17 	ldw	r3,-12(fp)
 400d074:	00801c04 	movi	r2,112
 400d078:	18800005 	stb	r2,0(r3)
 400d07c:	e0bff817 	ldw	r2,-32(fp)
 400d080:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d084:	e0bff617 	ldw	r2,-40(fp)
 400d088:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400d08c:	00005f06 	br	400d20c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 400d090:	e0bffa17 	ldw	r2,-24(fp)
 400d094:	10c0020b 	ldhu	r3,8(r2)
 400d098:	e0bffb0b 	ldhu	r2,-20(fp)
 400d09c:	1884703a 	and	r2,r3,r2
 400d0a0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 400d0a4:	e0bff98b 	ldhu	r2,-26(fp)
 400d0a8:	1005003a 	cmpeq	r2,r2,zero
 400d0ac:	10000d1e 	bne	r2,zero,400d0e4 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400d0b0:	e0bff903 	ldbu	r2,-28(fp)
 400d0b4:	10800058 	cmpnei	r2,r2,1
 400d0b8:	10000d1e 	bne	r2,zero,400d0f0 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 400d0bc:	e0bffa17 	ldw	r2,-24(fp)
 400d0c0:	1080020b 	ldhu	r2,8(r2)
 400d0c4:	1007883a 	mov	r3,r2
 400d0c8:	e0bff98b 	ldhu	r2,-26(fp)
 400d0cc:	0084303a 	nor	r2,zero,r2
 400d0d0:	1884703a 	and	r2,r3,r2
 400d0d4:	1007883a 	mov	r3,r2
 400d0d8:	e0bffa17 	ldw	r2,-24(fp)
 400d0dc:	10c0020d 	sth	r3,8(r2)
 400d0e0:	00000306 	br	400d0f0 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400d0e4:	e0fffd17 	ldw	r3,-12(fp)
 400d0e8:	00801c04 	movi	r2,112
 400d0ec:	18800005 	stb	r2,0(r3)
 400d0f0:	e0bff817 	ldw	r2,-32(fp)
 400d0f4:	e0bff515 	stw	r2,-44(fp)
 400d0f8:	e0bff517 	ldw	r2,-44(fp)
 400d0fc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400d100:	00004206 	br	400d20c <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 400d104:	e0bffa17 	ldw	r2,-24(fp)
 400d108:	1080020b 	ldhu	r2,8(r2)
 400d10c:	0084303a 	nor	r2,zero,r2
 400d110:	1007883a 	mov	r3,r2
 400d114:	e0bffb0b 	ldhu	r2,-20(fp)
 400d118:	1884703a 	and	r2,r3,r2
 400d11c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400d120:	e0fff98b 	ldhu	r3,-26(fp)
 400d124:	e0bffb0b 	ldhu	r2,-20(fp)
 400d128:	18800b1e 	bne	r3,r2,400d158 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400d12c:	e0bff903 	ldbu	r2,-28(fp)
 400d130:	10800058 	cmpnei	r2,r2,1
 400d134:	10000b1e 	bne	r2,zero,400d164 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 400d138:	e0bffa17 	ldw	r2,-24(fp)
 400d13c:	10c0020b 	ldhu	r3,8(r2)
 400d140:	e0bff98b 	ldhu	r2,-26(fp)
 400d144:	1884b03a 	or	r2,r3,r2
 400d148:	1007883a 	mov	r3,r2
 400d14c:	e0bffa17 	ldw	r2,-24(fp)
 400d150:	10c0020d 	sth	r3,8(r2)
 400d154:	00000306 	br	400d164 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400d158:	e0fffd17 	ldw	r3,-12(fp)
 400d15c:	00801c04 	movi	r2,112
 400d160:	18800005 	stb	r2,0(r3)
 400d164:	e0bff817 	ldw	r2,-32(fp)
 400d168:	e0bff415 	stw	r2,-48(fp)
 400d16c:	e0bff417 	ldw	r2,-48(fp)
 400d170:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400d174:	00002506 	br	400d20c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 400d178:	e0bffa17 	ldw	r2,-24(fp)
 400d17c:	1080020b 	ldhu	r2,8(r2)
 400d180:	0084303a 	nor	r2,zero,r2
 400d184:	1007883a 	mov	r3,r2
 400d188:	e0bffb0b 	ldhu	r2,-20(fp)
 400d18c:	1884703a 	and	r2,r3,r2
 400d190:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 400d194:	e0bff98b 	ldhu	r2,-26(fp)
 400d198:	1005003a 	cmpeq	r2,r2,zero
 400d19c:	10000b1e 	bne	r2,zero,400d1cc <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400d1a0:	e0bff903 	ldbu	r2,-28(fp)
 400d1a4:	10800058 	cmpnei	r2,r2,1
 400d1a8:	10000b1e 	bne	r2,zero,400d1d8 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 400d1ac:	e0bffa17 	ldw	r2,-24(fp)
 400d1b0:	10c0020b 	ldhu	r3,8(r2)
 400d1b4:	e0bff98b 	ldhu	r2,-26(fp)
 400d1b8:	1884b03a 	or	r2,r3,r2
 400d1bc:	1007883a 	mov	r3,r2
 400d1c0:	e0bffa17 	ldw	r2,-24(fp)
 400d1c4:	10c0020d 	sth	r3,8(r2)
 400d1c8:	00000306 	br	400d1d8 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400d1cc:	e0fffd17 	ldw	r3,-12(fp)
 400d1d0:	00801c04 	movi	r2,112
 400d1d4:	18800005 	stb	r2,0(r3)
 400d1d8:	e0bff817 	ldw	r2,-32(fp)
 400d1dc:	e0bff315 	stw	r2,-52(fp)
 400d1e0:	e0bff317 	ldw	r2,-52(fp)
 400d1e4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400d1e8:	00000806 	br	400d20c <OSFlagAccept+0x318>
 400d1ec:	e0bff817 	ldw	r2,-32(fp)
 400d1f0:	e0bff215 	stw	r2,-56(fp)
 400d1f4:	e0bff217 	ldw	r2,-56(fp)
 400d1f8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 400d1fc:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 400d200:	e0fffd17 	ldw	r3,-12(fp)
 400d204:	00801bc4 	movi	r2,111
 400d208:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 400d20c:	e0bff98b 	ldhu	r2,-26(fp)
 400d210:	e0bfff15 	stw	r2,-4(fp)
 400d214:	e0bfff17 	ldw	r2,-4(fp)
}
 400d218:	e037883a 	mov	sp,fp
 400d21c:	df000017 	ldw	fp,0(sp)
 400d220:	dec00104 	addi	sp,sp,4
 400d224:	f800283a 	ret

0400d228 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 400d228:	defff704 	addi	sp,sp,-36
 400d22c:	df000815 	stw	fp,32(sp)
 400d230:	df000804 	addi	fp,sp,32
 400d234:	e17ffe15 	stw	r5,-8(fp)
 400d238:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 400d23c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 400d240:	e0bffe17 	ldw	r2,-8(fp)
 400d244:	1004c03a 	cmpne	r2,r2,zero
 400d248:	1000021e 	bne	r2,zero,400d254 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 400d24c:	e03fff15 	stw	zero,-4(fp)
 400d250:	00003f06 	br	400d350 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 400d254:	008100b4 	movhi	r2,1026
 400d258:	10a1ec04 	addi	r2,r2,-30800
 400d25c:	10800003 	ldbu	r2,0(r2)
 400d260:	10803fcc 	andi	r2,r2,255
 400d264:	1005003a 	cmpeq	r2,r2,zero
 400d268:	1000051e 	bne	r2,zero,400d280 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 400d26c:	e0fffe17 	ldw	r3,-8(fp)
 400d270:	00800404 	movi	r2,16
 400d274:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 400d278:	e03fff15 	stw	zero,-4(fp)
 400d27c:	00003406 	br	400d350 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d280:	0005303a 	rdctl	r2,status
 400d284:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d288:	e0fffa17 	ldw	r3,-24(fp)
 400d28c:	00bfff84 	movi	r2,-2
 400d290:	1884703a 	and	r2,r3,r2
 400d294:	1001703a 	wrctl	status,r2
  
  return context;
 400d298:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400d29c:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 400d2a0:	008100b4 	movhi	r2,1026
 400d2a4:	10a1ef04 	addi	r2,r2,-30788
 400d2a8:	10800017 	ldw	r2,0(r2)
 400d2ac:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 400d2b0:	e0bffc17 	ldw	r2,-16(fp)
 400d2b4:	1005003a 	cmpeq	r2,r2,zero
 400d2b8:	10001c1e 	bne	r2,zero,400d32c <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 400d2bc:	008100b4 	movhi	r2,1026
 400d2c0:	10a1ef04 	addi	r2,r2,-30788
 400d2c4:	10800017 	ldw	r2,0(r2)
 400d2c8:	10800117 	ldw	r2,4(r2)
 400d2cc:	1007883a 	mov	r3,r2
 400d2d0:	008100b4 	movhi	r2,1026
 400d2d4:	10a1ef04 	addi	r2,r2,-30788
 400d2d8:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 400d2dc:	e0fffc17 	ldw	r3,-16(fp)
 400d2e0:	00800144 	movi	r2,5
 400d2e4:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 400d2e8:	e0fffc17 	ldw	r3,-16(fp)
 400d2ec:	e0bffd0b 	ldhu	r2,-12(fp)
 400d2f0:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 400d2f4:	e0bffc17 	ldw	r2,-16(fp)
 400d2f8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 400d2fc:	e0fffc17 	ldw	r3,-16(fp)
 400d300:	00800fc4 	movi	r2,63
 400d304:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 400d308:	e0bffc17 	ldw	r2,-16(fp)
 400d30c:	100002c5 	stb	zero,11(r2)
 400d310:	e0bffb17 	ldw	r2,-20(fp)
 400d314:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d318:	e0bff917 	ldw	r2,-28(fp)
 400d31c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 400d320:	e0bffe17 	ldw	r2,-8(fp)
 400d324:	10000005 	stb	zero,0(r2)
 400d328:	00000706 	br	400d348 <OSFlagCreate+0x120>
 400d32c:	e0bffb17 	ldw	r2,-20(fp)
 400d330:	e0bff815 	stw	r2,-32(fp)
 400d334:	e0bff817 	ldw	r2,-32(fp)
 400d338:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 400d33c:	e0fffe17 	ldw	r3,-8(fp)
 400d340:	00801c84 	movi	r2,114
 400d344:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 400d348:	e0bffc17 	ldw	r2,-16(fp)
 400d34c:	e0bfff15 	stw	r2,-4(fp)
 400d350:	e0bfff17 	ldw	r2,-4(fp)
}
 400d354:	e037883a 	mov	sp,fp
 400d358:	df000017 	ldw	fp,0(sp)
 400d35c:	dec00104 	addi	sp,sp,4
 400d360:	f800283a 	ret

0400d364 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 400d364:	defff004 	addi	sp,sp,-64
 400d368:	dfc00f15 	stw	ra,60(sp)
 400d36c:	df000e15 	stw	fp,56(sp)
 400d370:	df000e04 	addi	fp,sp,56
 400d374:	e13ffb15 	stw	r4,-20(fp)
 400d378:	e1bffd15 	stw	r6,-12(fp)
 400d37c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400d380:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400d384:	e0bffd17 	ldw	r2,-12(fp)
 400d388:	1004c03a 	cmpne	r2,r2,zero
 400d38c:	1000031e 	bne	r2,zero,400d39c <OSFlagDel+0x38>
        return (pgrp);
 400d390:	e0bffb17 	ldw	r2,-20(fp)
 400d394:	e0bfff15 	stw	r2,-4(fp)
 400d398:	00009606 	br	400d5f4 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400d39c:	e0bffb17 	ldw	r2,-20(fp)
 400d3a0:	1004c03a 	cmpne	r2,r2,zero
 400d3a4:	1000061e 	bne	r2,zero,400d3c0 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400d3a8:	e0fffd17 	ldw	r3,-12(fp)
 400d3ac:	00801b84 	movi	r2,110
 400d3b0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 400d3b4:	e0fffb17 	ldw	r3,-20(fp)
 400d3b8:	e0ffff15 	stw	r3,-4(fp)
 400d3bc:	00008d06 	br	400d5f4 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 400d3c0:	008100b4 	movhi	r2,1026
 400d3c4:	10a1ec04 	addi	r2,r2,-30800
 400d3c8:	10800003 	ldbu	r2,0(r2)
 400d3cc:	10803fcc 	andi	r2,r2,255
 400d3d0:	1005003a 	cmpeq	r2,r2,zero
 400d3d4:	1000061e 	bne	r2,zero,400d3f0 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 400d3d8:	e0fffd17 	ldw	r3,-12(fp)
 400d3dc:	008003c4 	movi	r2,15
 400d3e0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 400d3e4:	e0bffb17 	ldw	r2,-20(fp)
 400d3e8:	e0bfff15 	stw	r2,-4(fp)
 400d3ec:	00008106 	br	400d5f4 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 400d3f0:	e0bffb17 	ldw	r2,-20(fp)
 400d3f4:	10800003 	ldbu	r2,0(r2)
 400d3f8:	10803fcc 	andi	r2,r2,255
 400d3fc:	10800160 	cmpeqi	r2,r2,5
 400d400:	1000061e 	bne	r2,zero,400d41c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 400d404:	e0fffd17 	ldw	r3,-12(fp)
 400d408:	00800044 	movi	r2,1
 400d40c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 400d410:	e0fffb17 	ldw	r3,-20(fp)
 400d414:	e0ffff15 	stw	r3,-4(fp)
 400d418:	00007606 	br	400d5f4 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d41c:	0005303a 	rdctl	r2,status
 400d420:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d424:	e0fff617 	ldw	r3,-40(fp)
 400d428:	00bfff84 	movi	r2,-2
 400d42c:	1884703a 	and	r2,r3,r2
 400d430:	1001703a 	wrctl	status,r2
  
  return context;
 400d434:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 400d438:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 400d43c:	e0bffb17 	ldw	r2,-20(fp)
 400d440:	10800117 	ldw	r2,4(r2)
 400d444:	1005003a 	cmpeq	r2,r2,zero
 400d448:	1000031e 	bne	r2,zero,400d458 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 400d44c:	00800044 	movi	r2,1
 400d450:	e0bffa05 	stb	r2,-24(fp)
 400d454:	00000106 	br	400d45c <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 400d458:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 400d45c:	e0bffc03 	ldbu	r2,-16(fp)
 400d460:	e0bffe15 	stw	r2,-8(fp)
 400d464:	e0fffe17 	ldw	r3,-8(fp)
 400d468:	1805003a 	cmpeq	r2,r3,zero
 400d46c:	1000041e 	bne	r2,zero,400d480 <OSFlagDel+0x11c>
 400d470:	e0fffe17 	ldw	r3,-8(fp)
 400d474:	18800060 	cmpeqi	r2,r3,1
 400d478:	1000281e 	bne	r2,zero,400d51c <OSFlagDel+0x1b8>
 400d47c:	00005206 	br	400d5c8 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 400d480:	e0bffa03 	ldbu	r2,-24(fp)
 400d484:	1004c03a 	cmpne	r2,r2,zero
 400d488:	10001a1e 	bne	r2,zero,400d4f4 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 400d48c:	e0fffb17 	ldw	r3,-20(fp)
 400d490:	00800fc4 	movi	r2,63
 400d494:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 400d498:	e0bffb17 	ldw	r2,-20(fp)
 400d49c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400d4a0:	e0bffb17 	ldw	r2,-20(fp)
 400d4a4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 400d4a8:	008100b4 	movhi	r2,1026
 400d4ac:	10a1ef04 	addi	r2,r2,-30788
 400d4b0:	10c00017 	ldw	r3,0(r2)
 400d4b4:	e0bffb17 	ldw	r2,-20(fp)
 400d4b8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 400d4bc:	e0bffb17 	ldw	r2,-20(fp)
 400d4c0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 400d4c4:	00c100b4 	movhi	r3,1026
 400d4c8:	18e1ef04 	addi	r3,r3,-30788
 400d4cc:	e0bffb17 	ldw	r2,-20(fp)
 400d4d0:	18800015 	stw	r2,0(r3)
 400d4d4:	e0bff717 	ldw	r2,-36(fp)
 400d4d8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d4dc:	e0bff517 	ldw	r2,-44(fp)
 400d4e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 400d4e4:	e0bffd17 	ldw	r2,-12(fp)
 400d4e8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 400d4ec:	e03ff815 	stw	zero,-32(fp)
 400d4f0:	00003e06 	br	400d5ec <OSFlagDel+0x288>
 400d4f4:	e0bff717 	ldw	r2,-36(fp)
 400d4f8:	e0bff415 	stw	r2,-48(fp)
 400d4fc:	e0bff417 	ldw	r2,-48(fp)
 400d500:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 400d504:	e0fffd17 	ldw	r3,-12(fp)
 400d508:	00801244 	movi	r2,73
 400d50c:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 400d510:	e0bffb17 	ldw	r2,-20(fp)
 400d514:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 400d518:	00003406 	br	400d5ec <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 400d51c:	e0bffb17 	ldw	r2,-20(fp)
 400d520:	10800117 	ldw	r2,4(r2)
 400d524:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 400d528:	00000606 	br	400d544 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 400d52c:	e13ff917 	ldw	r4,-28(fp)
 400d530:	000b883a 	mov	r5,zero
 400d534:	400e6740 	call	400e674 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 400d538:	e0bff917 	ldw	r2,-28(fp)
 400d53c:	10800017 	ldw	r2,0(r2)
 400d540:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 400d544:	e0bff917 	ldw	r2,-28(fp)
 400d548:	1004c03a 	cmpne	r2,r2,zero
 400d54c:	103ff71e 	bne	r2,zero,400d52c <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 400d550:	e0fffb17 	ldw	r3,-20(fp)
 400d554:	00800fc4 	movi	r2,63
 400d558:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 400d55c:	e0bffb17 	ldw	r2,-20(fp)
 400d560:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400d564:	e0bffb17 	ldw	r2,-20(fp)
 400d568:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 400d56c:	008100b4 	movhi	r2,1026
 400d570:	10a1ef04 	addi	r2,r2,-30788
 400d574:	10c00017 	ldw	r3,0(r2)
 400d578:	e0bffb17 	ldw	r2,-20(fp)
 400d57c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 400d580:	e0bffb17 	ldw	r2,-20(fp)
 400d584:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 400d588:	00c100b4 	movhi	r3,1026
 400d58c:	18e1ef04 	addi	r3,r3,-30788
 400d590:	e0bffb17 	ldw	r2,-20(fp)
 400d594:	18800015 	stw	r2,0(r3)
 400d598:	e0bff717 	ldw	r2,-36(fp)
 400d59c:	e0bff315 	stw	r2,-52(fp)
 400d5a0:	e0bff317 	ldw	r2,-52(fp)
 400d5a4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 400d5a8:	e0bffa03 	ldbu	r2,-24(fp)
 400d5ac:	10800058 	cmpnei	r2,r2,1
 400d5b0:	1000011e 	bne	r2,zero,400d5b8 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 400d5b4:	400c6580 	call	400c658 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 400d5b8:	e0bffd17 	ldw	r2,-12(fp)
 400d5bc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 400d5c0:	e03ff815 	stw	zero,-32(fp)
             break;
 400d5c4:	00000906 	br	400d5ec <OSFlagDel+0x288>
 400d5c8:	e0bff717 	ldw	r2,-36(fp)
 400d5cc:	e0bff215 	stw	r2,-56(fp)
 400d5d0:	e0bff217 	ldw	r2,-56(fp)
 400d5d4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 400d5d8:	e0fffd17 	ldw	r3,-12(fp)
 400d5dc:	008001c4 	movi	r2,7
 400d5e0:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 400d5e4:	e0bffb17 	ldw	r2,-20(fp)
 400d5e8:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 400d5ec:	e0bff817 	ldw	r2,-32(fp)
 400d5f0:	e0bfff15 	stw	r2,-4(fp)
 400d5f4:	e0bfff17 	ldw	r2,-4(fp)
}
 400d5f8:	e037883a 	mov	sp,fp
 400d5fc:	dfc00117 	ldw	ra,4(sp)
 400d600:	df000017 	ldw	fp,0(sp)
 400d604:	dec00204 	addi	sp,sp,8
 400d608:	f800283a 	ret

0400d60c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 400d60c:	defff504 	addi	sp,sp,-44
 400d610:	dfc00a15 	stw	ra,40(sp)
 400d614:	df000915 	stw	fp,36(sp)
 400d618:	df000904 	addi	fp,sp,36
 400d61c:	e13ffc15 	stw	r4,-16(fp)
 400d620:	e17ffd15 	stw	r5,-12(fp)
 400d624:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400d628:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400d62c:	e0bffe17 	ldw	r2,-8(fp)
 400d630:	1004c03a 	cmpne	r2,r2,zero
 400d634:	1000021e 	bne	r2,zero,400d640 <OSFlagNameGet+0x34>
        return (0);
 400d638:	e03fff15 	stw	zero,-4(fp)
 400d63c:	00003e06 	br	400d738 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 400d640:	e0bffc17 	ldw	r2,-16(fp)
 400d644:	1004c03a 	cmpne	r2,r2,zero
 400d648:	1000051e 	bne	r2,zero,400d660 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400d64c:	e0fffe17 	ldw	r3,-8(fp)
 400d650:	00801b84 	movi	r2,110
 400d654:	18800005 	stb	r2,0(r3)
        return (0);
 400d658:	e03fff15 	stw	zero,-4(fp)
 400d65c:	00003606 	br	400d738 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400d660:	e0bffd17 	ldw	r2,-12(fp)
 400d664:	1004c03a 	cmpne	r2,r2,zero
 400d668:	1000051e 	bne	r2,zero,400d680 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 400d66c:	e0fffe17 	ldw	r3,-8(fp)
 400d670:	00800304 	movi	r2,12
 400d674:	18800005 	stb	r2,0(r3)
        return (0);
 400d678:	e03fff15 	stw	zero,-4(fp)
 400d67c:	00002e06 	br	400d738 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400d680:	008100b4 	movhi	r2,1026
 400d684:	10a1ec04 	addi	r2,r2,-30800
 400d688:	10800003 	ldbu	r2,0(r2)
 400d68c:	10803fcc 	andi	r2,r2,255
 400d690:	1005003a 	cmpeq	r2,r2,zero
 400d694:	1000051e 	bne	r2,zero,400d6ac <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 400d698:	e0fffe17 	ldw	r3,-8(fp)
 400d69c:	00800444 	movi	r2,17
 400d6a0:	18800005 	stb	r2,0(r3)
        return (0);
 400d6a4:	e03fff15 	stw	zero,-4(fp)
 400d6a8:	00002306 	br	400d738 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d6ac:	0005303a 	rdctl	r2,status
 400d6b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d6b4:	e0fff917 	ldw	r3,-28(fp)
 400d6b8:	00bfff84 	movi	r2,-2
 400d6bc:	1884703a 	and	r2,r3,r2
 400d6c0:	1001703a 	wrctl	status,r2
  
  return context;
 400d6c4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400d6c8:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 400d6cc:	e0bffc17 	ldw	r2,-16(fp)
 400d6d0:	10800003 	ldbu	r2,0(r2)
 400d6d4:	10803fcc 	andi	r2,r2,255
 400d6d8:	10800160 	cmpeqi	r2,r2,5
 400d6dc:	1000091e 	bne	r2,zero,400d704 <OSFlagNameGet+0xf8>
 400d6e0:	e0bffa17 	ldw	r2,-24(fp)
 400d6e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d6e8:	e0bff817 	ldw	r2,-32(fp)
 400d6ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 400d6f0:	e0fffe17 	ldw	r3,-8(fp)
 400d6f4:	00800044 	movi	r2,1
 400d6f8:	18800005 	stb	r2,0(r3)
        return (0);
 400d6fc:	e03fff15 	stw	zero,-4(fp)
 400d700:	00000d06 	br	400d738 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 400d704:	e0bffc17 	ldw	r2,-16(fp)
 400d708:	11400284 	addi	r5,r2,10
 400d70c:	e13ffd17 	ldw	r4,-12(fp)
 400d710:	400c7c40 	call	400c7c4 <OS_StrCopy>
 400d714:	e0bffb05 	stb	r2,-20(fp)
 400d718:	e0bffa17 	ldw	r2,-24(fp)
 400d71c:	e0bff715 	stw	r2,-36(fp)
 400d720:	e0bff717 	ldw	r2,-36(fp)
 400d724:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400d728:	e0bffe17 	ldw	r2,-8(fp)
 400d72c:	10000005 	stb	zero,0(r2)
    return (len);
 400d730:	e0bffb03 	ldbu	r2,-20(fp)
 400d734:	e0bfff15 	stw	r2,-4(fp)
 400d738:	e0bfff17 	ldw	r2,-4(fp)
}
 400d73c:	e037883a 	mov	sp,fp
 400d740:	dfc00117 	ldw	ra,4(sp)
 400d744:	df000017 	ldw	fp,0(sp)
 400d748:	dec00204 	addi	sp,sp,8
 400d74c:	f800283a 	ret

0400d750 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 400d750:	defff504 	addi	sp,sp,-44
 400d754:	dfc00a15 	stw	ra,40(sp)
 400d758:	df000915 	stw	fp,36(sp)
 400d75c:	df000904 	addi	fp,sp,36
 400d760:	e13ffd15 	stw	r4,-12(fp)
 400d764:	e17ffe15 	stw	r5,-8(fp)
 400d768:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400d76c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400d770:	e0bfff17 	ldw	r2,-4(fp)
 400d774:	1005003a 	cmpeq	r2,r2,zero
 400d778:	1000451e 	bne	r2,zero,400d890 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 400d77c:	e0bffd17 	ldw	r2,-12(fp)
 400d780:	1004c03a 	cmpne	r2,r2,zero
 400d784:	1000041e 	bne	r2,zero,400d798 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400d788:	e0ffff17 	ldw	r3,-4(fp)
 400d78c:	00801b84 	movi	r2,110
 400d790:	18800005 	stb	r2,0(r3)
        return;
 400d794:	00003e06 	br	400d890 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400d798:	e0bffe17 	ldw	r2,-8(fp)
 400d79c:	1004c03a 	cmpne	r2,r2,zero
 400d7a0:	1000041e 	bne	r2,zero,400d7b4 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 400d7a4:	e0ffff17 	ldw	r3,-4(fp)
 400d7a8:	00800304 	movi	r2,12
 400d7ac:	18800005 	stb	r2,0(r3)
        return;
 400d7b0:	00003706 	br	400d890 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400d7b4:	008100b4 	movhi	r2,1026
 400d7b8:	10a1ec04 	addi	r2,r2,-30800
 400d7bc:	10800003 	ldbu	r2,0(r2)
 400d7c0:	10803fcc 	andi	r2,r2,255
 400d7c4:	1005003a 	cmpeq	r2,r2,zero
 400d7c8:	1000041e 	bne	r2,zero,400d7dc <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 400d7cc:	e0ffff17 	ldw	r3,-4(fp)
 400d7d0:	00800484 	movi	r2,18
 400d7d4:	18800005 	stb	r2,0(r3)
        return;
 400d7d8:	00002d06 	br	400d890 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d7dc:	0005303a 	rdctl	r2,status
 400d7e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d7e4:	e0fffa17 	ldw	r3,-24(fp)
 400d7e8:	00bfff84 	movi	r2,-2
 400d7ec:	1884703a 	and	r2,r3,r2
 400d7f0:	1001703a 	wrctl	status,r2
  
  return context;
 400d7f4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400d7f8:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 400d7fc:	e0bffd17 	ldw	r2,-12(fp)
 400d800:	10800003 	ldbu	r2,0(r2)
 400d804:	10803fcc 	andi	r2,r2,255
 400d808:	10800160 	cmpeqi	r2,r2,5
 400d80c:	1000081e 	bne	r2,zero,400d830 <OSFlagNameSet+0xe0>
 400d810:	e0bffb17 	ldw	r2,-20(fp)
 400d814:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d818:	e0bff917 	ldw	r2,-28(fp)
 400d81c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 400d820:	e0ffff17 	ldw	r3,-4(fp)
 400d824:	00800044 	movi	r2,1
 400d828:	18800005 	stb	r2,0(r3)
        return;
 400d82c:	00001806 	br	400d890 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 400d830:	e13ffe17 	ldw	r4,-8(fp)
 400d834:	400c8440 	call	400c844 <OS_StrLen>
 400d838:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 400d83c:	e0bffc03 	ldbu	r2,-16(fp)
 400d840:	10800830 	cmpltui	r2,r2,32
 400d844:	1000081e 	bne	r2,zero,400d868 <OSFlagNameSet+0x118>
 400d848:	e0bffb17 	ldw	r2,-20(fp)
 400d84c:	e0bff815 	stw	r2,-32(fp)
 400d850:	e0bff817 	ldw	r2,-32(fp)
 400d854:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 400d858:	e0ffff17 	ldw	r3,-4(fp)
 400d85c:	00801cc4 	movi	r2,115
 400d860:	18800005 	stb	r2,0(r3)
        return;
 400d864:	00000a06 	br	400d890 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 400d868:	e0bffd17 	ldw	r2,-12(fp)
 400d86c:	11000284 	addi	r4,r2,10
 400d870:	e17ffe17 	ldw	r5,-8(fp)
 400d874:	400c7c40 	call	400c7c4 <OS_StrCopy>
 400d878:	e0bffb17 	ldw	r2,-20(fp)
 400d87c:	e0bff715 	stw	r2,-36(fp)
 400d880:	e0bff717 	ldw	r2,-36(fp)
 400d884:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400d888:	e0bfff17 	ldw	r2,-4(fp)
 400d88c:	10000005 	stb	zero,0(r2)
    return;
}
 400d890:	e037883a 	mov	sp,fp
 400d894:	dfc00117 	ldw	ra,4(sp)
 400d898:	df000017 	ldw	fp,0(sp)
 400d89c:	dec00204 	addi	sp,sp,8
 400d8a0:	f800283a 	ret

0400d8a4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 400d8a4:	deffe004 	addi	sp,sp,-128
 400d8a8:	dfc01f15 	stw	ra,124(sp)
 400d8ac:	df001e15 	stw	fp,120(sp)
 400d8b0:	df001e04 	addi	fp,sp,120
 400d8b4:	e13ff915 	stw	r4,-28(fp)
 400d8b8:	e17ffa0d 	sth	r5,-24(fp)
 400d8bc:	e1bffb05 	stb	r6,-20(fp)
 400d8c0:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400d8c4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400d8c8:	e0800217 	ldw	r2,8(fp)
 400d8cc:	1004c03a 	cmpne	r2,r2,zero
 400d8d0:	1000021e 	bne	r2,zero,400d8dc <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 400d8d4:	e03fff15 	stw	zero,-4(fp)
 400d8d8:	00017d06 	br	400ded0 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400d8dc:	e0bff917 	ldw	r2,-28(fp)
 400d8e0:	1004c03a 	cmpne	r2,r2,zero
 400d8e4:	1000051e 	bne	r2,zero,400d8fc <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400d8e8:	e0c00217 	ldw	r3,8(fp)
 400d8ec:	00801b84 	movi	r2,110
 400d8f0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400d8f4:	e03fff15 	stw	zero,-4(fp)
 400d8f8:	00017506 	br	400ded0 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 400d8fc:	008100b4 	movhi	r2,1026
 400d900:	10a1ec04 	addi	r2,r2,-30800
 400d904:	10800003 	ldbu	r2,0(r2)
 400d908:	10803fcc 	andi	r2,r2,255
 400d90c:	1005003a 	cmpeq	r2,r2,zero
 400d910:	1000051e 	bne	r2,zero,400d928 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 400d914:	e0c00217 	ldw	r3,8(fp)
 400d918:	00800084 	movi	r2,2
 400d91c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400d920:	e03fff15 	stw	zero,-4(fp)
 400d924:	00016a06 	br	400ded0 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 400d928:	008100b4 	movhi	r2,1026
 400d92c:	10a1de04 	addi	r2,r2,-30856
 400d930:	10800003 	ldbu	r2,0(r2)
 400d934:	10803fcc 	andi	r2,r2,255
 400d938:	1005003a 	cmpeq	r2,r2,zero
 400d93c:	1000051e 	bne	r2,zero,400d954 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 400d940:	e0c00217 	ldw	r3,8(fp)
 400d944:	00800344 	movi	r2,13
 400d948:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400d94c:	e03fff15 	stw	zero,-4(fp)
 400d950:	00015f06 	br	400ded0 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 400d954:	e0bff917 	ldw	r2,-28(fp)
 400d958:	10800003 	ldbu	r2,0(r2)
 400d95c:	10803fcc 	andi	r2,r2,255
 400d960:	10800160 	cmpeqi	r2,r2,5
 400d964:	1000051e 	bne	r2,zero,400d97c <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 400d968:	e0c00217 	ldw	r3,8(fp)
 400d96c:	00800044 	movi	r2,1
 400d970:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400d974:	e03fff15 	stw	zero,-4(fp)
 400d978:	00015506 	br	400ded0 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 400d97c:	e0fffb03 	ldbu	r3,-20(fp)
 400d980:	00bfe004 	movi	r2,-128
 400d984:	1884703a 	and	r2,r3,r2
 400d988:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 400d98c:	e0bff283 	ldbu	r2,-54(fp)
 400d990:	1005003a 	cmpeq	r2,r2,zero
 400d994:	1000071e 	bne	r2,zero,400d9b4 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 400d998:	00c01fc4 	movi	r3,127
 400d99c:	e0bffb03 	ldbu	r2,-20(fp)
 400d9a0:	10c4703a 	and	r2,r2,r3
 400d9a4:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 400d9a8:	00800044 	movi	r2,1
 400d9ac:	e0bff205 	stb	r2,-56(fp)
 400d9b0:	00000106 	br	400d9b8 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 400d9b4:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d9b8:	0005303a 	rdctl	r2,status
 400d9bc:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d9c0:	e0fff017 	ldw	r3,-64(fp)
 400d9c4:	00bfff84 	movi	r2,-2
 400d9c8:	1884703a 	and	r2,r3,r2
 400d9cc:	1001703a 	wrctl	status,r2
  
  return context;
 400d9d0:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 400d9d4:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 400d9d8:	e0bffb03 	ldbu	r2,-20(fp)
 400d9dc:	e0bffe15 	stw	r2,-8(fp)
 400d9e0:	e0fffe17 	ldw	r3,-8(fp)
 400d9e4:	18800060 	cmpeqi	r2,r3,1
 400d9e8:	1000981e 	bne	r2,zero,400dc4c <OSFlagPend+0x3a8>
 400d9ec:	e0fffe17 	ldw	r3,-8(fp)
 400d9f0:	18800088 	cmpgei	r2,r3,2
 400d9f4:	1000041e 	bne	r2,zero,400da08 <OSFlagPend+0x164>
 400d9f8:	e0fffe17 	ldw	r3,-8(fp)
 400d9fc:	1805003a 	cmpeq	r2,r3,zero
 400da00:	1000641e 	bne	r2,zero,400db94 <OSFlagPend+0x2f0>
 400da04:	0000bf06 	br	400dd04 <OSFlagPend+0x460>
 400da08:	e0fffe17 	ldw	r3,-8(fp)
 400da0c:	188000a0 	cmpeqi	r2,r3,2
 400da10:	1000041e 	bne	r2,zero,400da24 <OSFlagPend+0x180>
 400da14:	e0fffe17 	ldw	r3,-8(fp)
 400da18:	188000e0 	cmpeqi	r2,r3,3
 400da1c:	10002f1e 	bne	r2,zero,400dadc <OSFlagPend+0x238>
 400da20:	0000b806 	br	400dd04 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 400da24:	e0bff917 	ldw	r2,-28(fp)
 400da28:	10c0020b 	ldhu	r3,8(r2)
 400da2c:	e0bffa0b 	ldhu	r2,-24(fp)
 400da30:	1884703a 	and	r2,r3,r2
 400da34:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400da38:	e0fff30b 	ldhu	r3,-52(fp)
 400da3c:	e0bffa0b 	ldhu	r2,-24(fp)
 400da40:	18801a1e 	bne	r3,r2,400daac <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400da44:	e0bff203 	ldbu	r2,-56(fp)
 400da48:	10800058 	cmpnei	r2,r2,1
 400da4c:	1000091e 	bne	r2,zero,400da74 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 400da50:	e0bff917 	ldw	r2,-28(fp)
 400da54:	1080020b 	ldhu	r2,8(r2)
 400da58:	1007883a 	mov	r3,r2
 400da5c:	e0bff30b 	ldhu	r2,-52(fp)
 400da60:	0084303a 	nor	r2,zero,r2
 400da64:	1884703a 	and	r2,r3,r2
 400da68:	1007883a 	mov	r3,r2
 400da6c:	e0bff917 	ldw	r2,-28(fp)
 400da70:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400da74:	008100b4 	movhi	r2,1026
 400da78:	10a1ed04 	addi	r2,r2,-30796
 400da7c:	10c00017 	ldw	r3,0(r2)
 400da80:	e0bff30b 	ldhu	r2,-52(fp)
 400da84:	18800b0d 	sth	r2,44(r3)
 400da88:	e0bff117 	ldw	r2,-60(fp)
 400da8c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400da90:	e0bfef17 	ldw	r2,-68(fp)
 400da94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400da98:	e0800217 	ldw	r2,8(fp)
 400da9c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400daa0:	e0bff30b 	ldhu	r2,-52(fp)
 400daa4:	e0bfff15 	stw	r2,-4(fp)
 400daa8:	00010906 	br	400ded0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400daac:	e1bffa0b 	ldhu	r6,-24(fp)
 400dab0:	e1fffb03 	ldbu	r7,-20(fp)
 400dab4:	e0bffc0b 	ldhu	r2,-16(fp)
 400dab8:	e17ff404 	addi	r5,fp,-48
 400dabc:	d8800015 	stw	r2,0(sp)
 400dac0:	e13ff917 	ldw	r4,-28(fp)
 400dac4:	400e3cc0 	call	400e3cc <OS_FlagBlock>
 400dac8:	e0bff117 	ldw	r2,-60(fp)
 400dacc:	e0bfee15 	stw	r2,-72(fp)
 400dad0:	e0bfee17 	ldw	r2,-72(fp)
 400dad4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400dad8:	00009506 	br	400dd30 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 400dadc:	e0bff917 	ldw	r2,-28(fp)
 400dae0:	10c0020b 	ldhu	r3,8(r2)
 400dae4:	e0bffa0b 	ldhu	r2,-24(fp)
 400dae8:	1884703a 	and	r2,r3,r2
 400daec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 400daf0:	e0bff30b 	ldhu	r2,-52(fp)
 400daf4:	1005003a 	cmpeq	r2,r2,zero
 400daf8:	10001a1e 	bne	r2,zero,400db64 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400dafc:	e0bff203 	ldbu	r2,-56(fp)
 400db00:	10800058 	cmpnei	r2,r2,1
 400db04:	1000091e 	bne	r2,zero,400db2c <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 400db08:	e0bff917 	ldw	r2,-28(fp)
 400db0c:	1080020b 	ldhu	r2,8(r2)
 400db10:	1007883a 	mov	r3,r2
 400db14:	e0bff30b 	ldhu	r2,-52(fp)
 400db18:	0084303a 	nor	r2,zero,r2
 400db1c:	1884703a 	and	r2,r3,r2
 400db20:	1007883a 	mov	r3,r2
 400db24:	e0bff917 	ldw	r2,-28(fp)
 400db28:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400db2c:	008100b4 	movhi	r2,1026
 400db30:	10a1ed04 	addi	r2,r2,-30796
 400db34:	10c00017 	ldw	r3,0(r2)
 400db38:	e0bff30b 	ldhu	r2,-52(fp)
 400db3c:	18800b0d 	sth	r2,44(r3)
 400db40:	e0bff117 	ldw	r2,-60(fp)
 400db44:	e0bfed15 	stw	r2,-76(fp)
 400db48:	e0bfed17 	ldw	r2,-76(fp)
 400db4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400db50:	e0800217 	ldw	r2,8(fp)
 400db54:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400db58:	e0fff30b 	ldhu	r3,-52(fp)
 400db5c:	e0ffff15 	stw	r3,-4(fp)
 400db60:	0000db06 	br	400ded0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400db64:	e1bffa0b 	ldhu	r6,-24(fp)
 400db68:	e1fffb03 	ldbu	r7,-20(fp)
 400db6c:	e0bffc0b 	ldhu	r2,-16(fp)
 400db70:	e17ff404 	addi	r5,fp,-48
 400db74:	d8800015 	stw	r2,0(sp)
 400db78:	e13ff917 	ldw	r4,-28(fp)
 400db7c:	400e3cc0 	call	400e3cc <OS_FlagBlock>
 400db80:	e0bff117 	ldw	r2,-60(fp)
 400db84:	e0bfec15 	stw	r2,-80(fp)
 400db88:	e0bfec17 	ldw	r2,-80(fp)
 400db8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400db90:	00006706 	br	400dd30 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 400db94:	e0bff917 	ldw	r2,-28(fp)
 400db98:	1080020b 	ldhu	r2,8(r2)
 400db9c:	0084303a 	nor	r2,zero,r2
 400dba0:	1007883a 	mov	r3,r2
 400dba4:	e0bffa0b 	ldhu	r2,-24(fp)
 400dba8:	1884703a 	and	r2,r3,r2
 400dbac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400dbb0:	e0fff30b 	ldhu	r3,-52(fp)
 400dbb4:	e0bffa0b 	ldhu	r2,-24(fp)
 400dbb8:	1880181e 	bne	r3,r2,400dc1c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400dbbc:	e0bff203 	ldbu	r2,-56(fp)
 400dbc0:	10800058 	cmpnei	r2,r2,1
 400dbc4:	1000071e 	bne	r2,zero,400dbe4 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 400dbc8:	e0bff917 	ldw	r2,-28(fp)
 400dbcc:	10c0020b 	ldhu	r3,8(r2)
 400dbd0:	e0bff30b 	ldhu	r2,-52(fp)
 400dbd4:	1884b03a 	or	r2,r3,r2
 400dbd8:	1007883a 	mov	r3,r2
 400dbdc:	e0bff917 	ldw	r2,-28(fp)
 400dbe0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400dbe4:	008100b4 	movhi	r2,1026
 400dbe8:	10a1ed04 	addi	r2,r2,-30796
 400dbec:	10c00017 	ldw	r3,0(r2)
 400dbf0:	e0bff30b 	ldhu	r2,-52(fp)
 400dbf4:	18800b0d 	sth	r2,44(r3)
 400dbf8:	e0bff117 	ldw	r2,-60(fp)
 400dbfc:	e0bfeb15 	stw	r2,-84(fp)
 400dc00:	e0bfeb17 	ldw	r2,-84(fp)
 400dc04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400dc08:	e0800217 	ldw	r2,8(fp)
 400dc0c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400dc10:	e0bff30b 	ldhu	r2,-52(fp)
 400dc14:	e0bfff15 	stw	r2,-4(fp)
 400dc18:	0000ad06 	br	400ded0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400dc1c:	e1bffa0b 	ldhu	r6,-24(fp)
 400dc20:	e1fffb03 	ldbu	r7,-20(fp)
 400dc24:	e0bffc0b 	ldhu	r2,-16(fp)
 400dc28:	e17ff404 	addi	r5,fp,-48
 400dc2c:	d8800015 	stw	r2,0(sp)
 400dc30:	e13ff917 	ldw	r4,-28(fp)
 400dc34:	400e3cc0 	call	400e3cc <OS_FlagBlock>
 400dc38:	e0bff117 	ldw	r2,-60(fp)
 400dc3c:	e0bfea15 	stw	r2,-88(fp)
 400dc40:	e0bfea17 	ldw	r2,-88(fp)
 400dc44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400dc48:	00003906 	br	400dd30 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 400dc4c:	e0bff917 	ldw	r2,-28(fp)
 400dc50:	1080020b 	ldhu	r2,8(r2)
 400dc54:	0084303a 	nor	r2,zero,r2
 400dc58:	1007883a 	mov	r3,r2
 400dc5c:	e0bffa0b 	ldhu	r2,-24(fp)
 400dc60:	1884703a 	and	r2,r3,r2
 400dc64:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 400dc68:	e0bff30b 	ldhu	r2,-52(fp)
 400dc6c:	1005003a 	cmpeq	r2,r2,zero
 400dc70:	1000181e 	bne	r2,zero,400dcd4 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400dc74:	e0bff203 	ldbu	r2,-56(fp)
 400dc78:	10800058 	cmpnei	r2,r2,1
 400dc7c:	1000071e 	bne	r2,zero,400dc9c <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 400dc80:	e0bff917 	ldw	r2,-28(fp)
 400dc84:	10c0020b 	ldhu	r3,8(r2)
 400dc88:	e0bff30b 	ldhu	r2,-52(fp)
 400dc8c:	1884b03a 	or	r2,r3,r2
 400dc90:	1007883a 	mov	r3,r2
 400dc94:	e0bff917 	ldw	r2,-28(fp)
 400dc98:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400dc9c:	008100b4 	movhi	r2,1026
 400dca0:	10a1ed04 	addi	r2,r2,-30796
 400dca4:	10c00017 	ldw	r3,0(r2)
 400dca8:	e0bff30b 	ldhu	r2,-52(fp)
 400dcac:	18800b0d 	sth	r2,44(r3)
 400dcb0:	e0bff117 	ldw	r2,-60(fp)
 400dcb4:	e0bfe915 	stw	r2,-92(fp)
 400dcb8:	e0bfe917 	ldw	r2,-92(fp)
 400dcbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400dcc0:	e0800217 	ldw	r2,8(fp)
 400dcc4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400dcc8:	e0fff30b 	ldhu	r3,-52(fp)
 400dccc:	e0ffff15 	stw	r3,-4(fp)
 400dcd0:	00007f06 	br	400ded0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400dcd4:	e1bffa0b 	ldhu	r6,-24(fp)
 400dcd8:	e1fffb03 	ldbu	r7,-20(fp)
 400dcdc:	e0bffc0b 	ldhu	r2,-16(fp)
 400dce0:	e17ff404 	addi	r5,fp,-48
 400dce4:	d8800015 	stw	r2,0(sp)
 400dce8:	e13ff917 	ldw	r4,-28(fp)
 400dcec:	400e3cc0 	call	400e3cc <OS_FlagBlock>
 400dcf0:	e0bff117 	ldw	r2,-60(fp)
 400dcf4:	e0bfe815 	stw	r2,-96(fp)
 400dcf8:	e0bfe817 	ldw	r2,-96(fp)
 400dcfc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400dd00:	00000b06 	br	400dd30 <OSFlagPend+0x48c>
 400dd04:	e0bff117 	ldw	r2,-60(fp)
 400dd08:	e0bfe715 	stw	r2,-100(fp)
 400dd0c:	e0bfe717 	ldw	r2,-100(fp)
 400dd10:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 400dd14:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 400dd18:	e0c00217 	ldw	r3,8(fp)
 400dd1c:	00801bc4 	movi	r2,111
 400dd20:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 400dd24:	e0bff30b 	ldhu	r2,-52(fp)
 400dd28:	e0bfff15 	stw	r2,-4(fp)
 400dd2c:	00006806 	br	400ded0 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 400dd30:	400c6580 	call	400c658 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400dd34:	0005303a 	rdctl	r2,status
 400dd38:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400dd3c:	e0ffe617 	ldw	r3,-104(fp)
 400dd40:	00bfff84 	movi	r2,-2
 400dd44:	1884703a 	and	r2,r3,r2
 400dd48:	1001703a 	wrctl	status,r2
  
  return context;
 400dd4c:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 400dd50:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 400dd54:	008100b4 	movhi	r2,1026
 400dd58:	10a1ed04 	addi	r2,r2,-30796
 400dd5c:	10800017 	ldw	r2,0(r2)
 400dd60:	10800c43 	ldbu	r2,49(r2)
 400dd64:	10803fcc 	andi	r2,r2,255
 400dd68:	1005003a 	cmpeq	r2,r2,zero
 400dd6c:	1000221e 	bne	r2,zero,400ddf8 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 400dd70:	008100b4 	movhi	r2,1026
 400dd74:	10a1ed04 	addi	r2,r2,-30796
 400dd78:	10800017 	ldw	r2,0(r2)
 400dd7c:	10800c43 	ldbu	r2,49(r2)
 400dd80:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 400dd84:	008100b4 	movhi	r2,1026
 400dd88:	10a1ed04 	addi	r2,r2,-30796
 400dd8c:	10800017 	ldw	r2,0(r2)
 400dd90:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 400dd94:	e13ff404 	addi	r4,fp,-48
 400dd98:	400e7840 	call	400e784 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 400dd9c:	008100b4 	movhi	r2,1026
 400dda0:	10a1ed04 	addi	r2,r2,-30796
 400dda4:	10800017 	ldw	r2,0(r2)
 400dda8:	10000c05 	stb	zero,48(r2)
 400ddac:	e0bff117 	ldw	r2,-60(fp)
 400ddb0:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ddb4:	e0bfe517 	ldw	r2,-108(fp)
 400ddb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 400ddbc:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 400ddc0:	e0bff243 	ldbu	r2,-55(fp)
 400ddc4:	108000a0 	cmpeqi	r2,r2,2
 400ddc8:	1000011e 	bne	r2,zero,400ddd0 <OSFlagPend+0x52c>
 400ddcc:	00000406 	br	400dde0 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 400ddd0:	e0c00217 	ldw	r3,8(fp)
 400ddd4:	00800384 	movi	r2,14
 400ddd8:	18800005 	stb	r2,0(r3)
                 break;
 400dddc:	00000306 	br	400ddec <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 400dde0:	e0c00217 	ldw	r3,8(fp)
 400dde4:	00800284 	movi	r2,10
 400dde8:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 400ddec:	e0fff30b 	ldhu	r3,-52(fp)
 400ddf0:	e0ffff15 	stw	r3,-4(fp)
 400ddf4:	00003606 	br	400ded0 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 400ddf8:	008100b4 	movhi	r2,1026
 400ddfc:	10a1ed04 	addi	r2,r2,-30796
 400de00:	10800017 	ldw	r2,0(r2)
 400de04:	10800b0b 	ldhu	r2,44(r2)
 400de08:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 400de0c:	e0bff203 	ldbu	r2,-56(fp)
 400de10:	10800058 	cmpnei	r2,r2,1
 400de14:	1000261e 	bne	r2,zero,400deb0 <OSFlagPend+0x60c>
        switch (wait_type) {
 400de18:	e0bffb03 	ldbu	r2,-20(fp)
 400de1c:	e0bffd15 	stw	r2,-12(fp)
 400de20:	e0fffd17 	ldw	r3,-12(fp)
 400de24:	1804803a 	cmplt	r2,r3,zero
 400de28:	1000181e 	bne	r2,zero,400de8c <OSFlagPend+0x5e8>
 400de2c:	e0fffd17 	ldw	r3,-12(fp)
 400de30:	18800090 	cmplti	r2,r3,2
 400de34:	10000d1e 	bne	r2,zero,400de6c <OSFlagPend+0x5c8>
 400de38:	e0fffd17 	ldw	r3,-12(fp)
 400de3c:	18800108 	cmpgei	r2,r3,4
 400de40:	1000121e 	bne	r2,zero,400de8c <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 400de44:	e0bff917 	ldw	r2,-28(fp)
 400de48:	1080020b 	ldhu	r2,8(r2)
 400de4c:	1007883a 	mov	r3,r2
 400de50:	e0bff30b 	ldhu	r2,-52(fp)
 400de54:	0084303a 	nor	r2,zero,r2
 400de58:	1884703a 	and	r2,r3,r2
 400de5c:	1007883a 	mov	r3,r2
 400de60:	e0bff917 	ldw	r2,-28(fp)
 400de64:	10c0020d 	sth	r3,8(r2)
                 break;
 400de68:	00001106 	br	400deb0 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 400de6c:	e0bff917 	ldw	r2,-28(fp)
 400de70:	10c0020b 	ldhu	r3,8(r2)
 400de74:	e0bff30b 	ldhu	r2,-52(fp)
 400de78:	1884b03a 	or	r2,r3,r2
 400de7c:	1007883a 	mov	r3,r2
 400de80:	e0bff917 	ldw	r2,-28(fp)
 400de84:	10c0020d 	sth	r3,8(r2)
                 break;
 400de88:	00000906 	br	400deb0 <OSFlagPend+0x60c>
 400de8c:	e0bff117 	ldw	r2,-60(fp)
 400de90:	e0bfe415 	stw	r2,-112(fp)
 400de94:	e0bfe417 	ldw	r2,-112(fp)
 400de98:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 400de9c:	e0c00217 	ldw	r3,8(fp)
 400dea0:	00801bc4 	movi	r2,111
 400dea4:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 400dea8:	e03fff15 	stw	zero,-4(fp)
 400deac:	00000806 	br	400ded0 <OSFlagPend+0x62c>
 400deb0:	e0bff117 	ldw	r2,-60(fp)
 400deb4:	e0bfe315 	stw	r2,-116(fp)
 400deb8:	e0bfe317 	ldw	r2,-116(fp)
 400debc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 400dec0:	e0800217 	ldw	r2,8(fp)
 400dec4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 400dec8:	e0bff30b 	ldhu	r2,-52(fp)
 400decc:	e0bfff15 	stw	r2,-4(fp)
 400ded0:	e0bfff17 	ldw	r2,-4(fp)
}
 400ded4:	e037883a 	mov	sp,fp
 400ded8:	dfc00117 	ldw	ra,4(sp)
 400dedc:	df000017 	ldw	fp,0(sp)
 400dee0:	dec00204 	addi	sp,sp,8
 400dee4:	f800283a 	ret

0400dee8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 400dee8:	defffb04 	addi	sp,sp,-20
 400deec:	df000415 	stw	fp,16(sp)
 400def0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400def4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400def8:	0005303a 	rdctl	r2,status
 400defc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400df00:	e0fffd17 	ldw	r3,-12(fp)
 400df04:	00bfff84 	movi	r2,-2
 400df08:	1884703a 	and	r2,r3,r2
 400df0c:	1001703a 	wrctl	status,r2
  
  return context;
 400df10:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 400df14:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 400df18:	008100b4 	movhi	r2,1026
 400df1c:	10a1ed04 	addi	r2,r2,-30796
 400df20:	10800017 	ldw	r2,0(r2)
 400df24:	10800b0b 	ldhu	r2,44(r2)
 400df28:	e0bfff0d 	sth	r2,-4(fp)
 400df2c:	e0bffe17 	ldw	r2,-8(fp)
 400df30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400df34:	e0bffc17 	ldw	r2,-16(fp)
 400df38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 400df3c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 400df40:	e037883a 	mov	sp,fp
 400df44:	df000017 	ldw	fp,0(sp)
 400df48:	dec00104 	addi	sp,sp,4
 400df4c:	f800283a 	ret

0400df50 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 400df50:	deffed04 	addi	sp,sp,-76
 400df54:	dfc01215 	stw	ra,72(sp)
 400df58:	df001115 	stw	fp,68(sp)
 400df5c:	df001104 	addi	fp,sp,68
 400df60:	e13ff915 	stw	r4,-28(fp)
 400df64:	e1fffc15 	stw	r7,-16(fp)
 400df68:	e17ffa0d 	sth	r5,-24(fp)
 400df6c:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 400df70:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 400df74:	e0bffc17 	ldw	r2,-16(fp)
 400df78:	1004c03a 	cmpne	r2,r2,zero
 400df7c:	1000021e 	bne	r2,zero,400df88 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 400df80:	e03fff15 	stw	zero,-4(fp)
 400df84:	0000d606 	br	400e2e0 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 400df88:	e0bff917 	ldw	r2,-28(fp)
 400df8c:	1004c03a 	cmpne	r2,r2,zero
 400df90:	1000051e 	bne	r2,zero,400dfa8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400df94:	e0fffc17 	ldw	r3,-16(fp)
 400df98:	00801b84 	movi	r2,110
 400df9c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400dfa0:	e03fff15 	stw	zero,-4(fp)
 400dfa4:	0000ce06 	br	400e2e0 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 400dfa8:	e0bff917 	ldw	r2,-28(fp)
 400dfac:	10800003 	ldbu	r2,0(r2)
 400dfb0:	10803fcc 	andi	r2,r2,255
 400dfb4:	10800160 	cmpeqi	r2,r2,5
 400dfb8:	1000051e 	bne	r2,zero,400dfd0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 400dfbc:	e0fffc17 	ldw	r3,-16(fp)
 400dfc0:	00800044 	movi	r2,1
 400dfc4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400dfc8:	e03fff15 	stw	zero,-4(fp)
 400dfcc:	0000c406 	br	400e2e0 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400dfd0:	0005303a 	rdctl	r2,status
 400dfd4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400dfd8:	e0fff417 	ldw	r3,-48(fp)
 400dfdc:	00bfff84 	movi	r2,-2
 400dfe0:	1884703a 	and	r2,r3,r2
 400dfe4:	1001703a 	wrctl	status,r2
  
  return context;
 400dfe8:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 400dfec:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 400dff0:	e0bffb03 	ldbu	r2,-20(fp)
 400dff4:	e0bffe15 	stw	r2,-8(fp)
 400dff8:	e0fffe17 	ldw	r3,-8(fp)
 400dffc:	1805003a 	cmpeq	r2,r3,zero
 400e000:	1000041e 	bne	r2,zero,400e014 <OSFlagPost+0xc4>
 400e004:	e0fffe17 	ldw	r3,-8(fp)
 400e008:	18800060 	cmpeqi	r2,r3,1
 400e00c:	10000b1e 	bne	r2,zero,400e03c <OSFlagPost+0xec>
 400e010:	00001206 	br	400e05c <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 400e014:	e0bff917 	ldw	r2,-28(fp)
 400e018:	1080020b 	ldhu	r2,8(r2)
 400e01c:	1007883a 	mov	r3,r2
 400e020:	e0bffa0b 	ldhu	r2,-24(fp)
 400e024:	0084303a 	nor	r2,zero,r2
 400e028:	1884703a 	and	r2,r3,r2
 400e02c:	1007883a 	mov	r3,r2
 400e030:	e0bff917 	ldw	r2,-28(fp)
 400e034:	10c0020d 	sth	r3,8(r2)
             break;
 400e038:	00001106 	br	400e080 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 400e03c:	e0bff917 	ldw	r2,-28(fp)
 400e040:	10c0020b 	ldhu	r3,8(r2)
 400e044:	e0bffa0b 	ldhu	r2,-24(fp)
 400e048:	1884b03a 	or	r2,r3,r2
 400e04c:	1007883a 	mov	r3,r2
 400e050:	e0bff917 	ldw	r2,-28(fp)
 400e054:	10c0020d 	sth	r3,8(r2)
             break;
 400e058:	00000906 	br	400e080 <OSFlagPost+0x130>
 400e05c:	e0bff517 	ldw	r2,-44(fp)
 400e060:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e064:	e0bff317 	ldw	r2,-52(fp)
 400e068:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 400e06c:	e0fffc17 	ldw	r3,-16(fp)
 400e070:	00801c44 	movi	r2,113
 400e074:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 400e078:	e03fff15 	stw	zero,-4(fp)
 400e07c:	00009806 	br	400e2e0 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 400e080:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 400e084:	e0bff917 	ldw	r2,-28(fp)
 400e088:	10800117 	ldw	r2,4(r2)
 400e08c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 400e090:	00007506 	br	400e268 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 400e094:	e0bff817 	ldw	r2,-32(fp)
 400e098:	10800483 	ldbu	r2,18(r2)
 400e09c:	10803fcc 	andi	r2,r2,255
 400e0a0:	e0bffd15 	stw	r2,-12(fp)
 400e0a4:	e0fffd17 	ldw	r3,-12(fp)
 400e0a8:	18800060 	cmpeqi	r2,r3,1
 400e0ac:	10004d1e 	bne	r2,zero,400e1e4 <OSFlagPost+0x294>
 400e0b0:	e0fffd17 	ldw	r3,-12(fp)
 400e0b4:	18800088 	cmpgei	r2,r3,2
 400e0b8:	1000041e 	bne	r2,zero,400e0cc <OSFlagPost+0x17c>
 400e0bc:	e0fffd17 	ldw	r3,-12(fp)
 400e0c0:	1805003a 	cmpeq	r2,r3,zero
 400e0c4:	1000301e 	bne	r2,zero,400e188 <OSFlagPost+0x238>
 400e0c8:	00005b06 	br	400e238 <OSFlagPost+0x2e8>
 400e0cc:	e0fffd17 	ldw	r3,-12(fp)
 400e0d0:	188000a0 	cmpeqi	r2,r3,2
 400e0d4:	1000041e 	bne	r2,zero,400e0e8 <OSFlagPost+0x198>
 400e0d8:	e0fffd17 	ldw	r3,-12(fp)
 400e0dc:	188000e0 	cmpeqi	r2,r3,3
 400e0e0:	1000161e 	bne	r2,zero,400e13c <OSFlagPost+0x1ec>
 400e0e4:	00005406 	br	400e238 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 400e0e8:	e0bff917 	ldw	r2,-28(fp)
 400e0ec:	10c0020b 	ldhu	r3,8(r2)
 400e0f0:	e0bff817 	ldw	r2,-32(fp)
 400e0f4:	1080040b 	ldhu	r2,16(r2)
 400e0f8:	1884703a 	and	r2,r3,r2
 400e0fc:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 400e100:	e0bff817 	ldw	r2,-32(fp)
 400e104:	1080040b 	ldhu	r2,16(r2)
 400e108:	10ffffcc 	andi	r3,r2,65535
 400e10c:	e0bff68b 	ldhu	r2,-38(fp)
 400e110:	1880521e 	bne	r3,r2,400e25c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 400e114:	e17ff68b 	ldhu	r5,-38(fp)
 400e118:	e13ff817 	ldw	r4,-32(fp)
 400e11c:	400e6740 	call	400e674 <OS_FlagTaskRdy>
 400e120:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 400e124:	e0bff603 	ldbu	r2,-40(fp)
 400e128:	10800058 	cmpnei	r2,r2,1
 400e12c:	10004b1e 	bne	r2,zero,400e25c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 400e130:	00800044 	movi	r2,1
 400e134:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 400e138:	00004806 	br	400e25c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 400e13c:	e0bff917 	ldw	r2,-28(fp)
 400e140:	10c0020b 	ldhu	r3,8(r2)
 400e144:	e0bff817 	ldw	r2,-32(fp)
 400e148:	1080040b 	ldhu	r2,16(r2)
 400e14c:	1884703a 	and	r2,r3,r2
 400e150:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 400e154:	e0bff68b 	ldhu	r2,-38(fp)
 400e158:	1005003a 	cmpeq	r2,r2,zero
 400e15c:	10003f1e 	bne	r2,zero,400e25c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 400e160:	e17ff68b 	ldhu	r5,-38(fp)
 400e164:	e13ff817 	ldw	r4,-32(fp)
 400e168:	400e6740 	call	400e674 <OS_FlagTaskRdy>
 400e16c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 400e170:	e0bff603 	ldbu	r2,-40(fp)
 400e174:	10800058 	cmpnei	r2,r2,1
 400e178:	1000381e 	bne	r2,zero,400e25c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 400e17c:	00800044 	movi	r2,1
 400e180:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 400e184:	00003506 	br	400e25c <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 400e188:	e0bff917 	ldw	r2,-28(fp)
 400e18c:	1080020b 	ldhu	r2,8(r2)
 400e190:	0084303a 	nor	r2,zero,r2
 400e194:	1007883a 	mov	r3,r2
 400e198:	e0bff817 	ldw	r2,-32(fp)
 400e19c:	1080040b 	ldhu	r2,16(r2)
 400e1a0:	1884703a 	and	r2,r3,r2
 400e1a4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 400e1a8:	e0bff817 	ldw	r2,-32(fp)
 400e1ac:	1080040b 	ldhu	r2,16(r2)
 400e1b0:	10ffffcc 	andi	r3,r2,65535
 400e1b4:	e0bff68b 	ldhu	r2,-38(fp)
 400e1b8:	1880281e 	bne	r3,r2,400e25c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 400e1bc:	e17ff68b 	ldhu	r5,-38(fp)
 400e1c0:	e13ff817 	ldw	r4,-32(fp)
 400e1c4:	400e6740 	call	400e674 <OS_FlagTaskRdy>
 400e1c8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 400e1cc:	e0bff603 	ldbu	r2,-40(fp)
 400e1d0:	10800058 	cmpnei	r2,r2,1
 400e1d4:	1000211e 	bne	r2,zero,400e25c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 400e1d8:	00800044 	movi	r2,1
 400e1dc:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 400e1e0:	00001e06 	br	400e25c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 400e1e4:	e0bff917 	ldw	r2,-28(fp)
 400e1e8:	1080020b 	ldhu	r2,8(r2)
 400e1ec:	0084303a 	nor	r2,zero,r2
 400e1f0:	1007883a 	mov	r3,r2
 400e1f4:	e0bff817 	ldw	r2,-32(fp)
 400e1f8:	1080040b 	ldhu	r2,16(r2)
 400e1fc:	1884703a 	and	r2,r3,r2
 400e200:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 400e204:	e0bff68b 	ldhu	r2,-38(fp)
 400e208:	1005003a 	cmpeq	r2,r2,zero
 400e20c:	1000131e 	bne	r2,zero,400e25c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 400e210:	e17ff68b 	ldhu	r5,-38(fp)
 400e214:	e13ff817 	ldw	r4,-32(fp)
 400e218:	400e6740 	call	400e674 <OS_FlagTaskRdy>
 400e21c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 400e220:	e0bff603 	ldbu	r2,-40(fp)
 400e224:	10800058 	cmpnei	r2,r2,1
 400e228:	10000c1e 	bne	r2,zero,400e25c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 400e22c:	00800044 	movi	r2,1
 400e230:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 400e234:	00000906 	br	400e25c <OSFlagPost+0x30c>
 400e238:	e0bff517 	ldw	r2,-44(fp)
 400e23c:	e0bff215 	stw	r2,-56(fp)
 400e240:	e0bff217 	ldw	r2,-56(fp)
 400e244:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 400e248:	e0fffc17 	ldw	r3,-16(fp)
 400e24c:	00801bc4 	movi	r2,111
 400e250:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 400e254:	e03fff15 	stw	zero,-4(fp)
 400e258:	00002106 	br	400e2e0 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 400e25c:	e0bff817 	ldw	r2,-32(fp)
 400e260:	10800017 	ldw	r2,0(r2)
 400e264:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 400e268:	e0bff817 	ldw	r2,-32(fp)
 400e26c:	1004c03a 	cmpne	r2,r2,zero
 400e270:	103f881e 	bne	r2,zero,400e094 <OSFlagPost+0x144>
 400e274:	e0bff517 	ldw	r2,-44(fp)
 400e278:	e0bff115 	stw	r2,-60(fp)
 400e27c:	e0bff117 	ldw	r2,-60(fp)
 400e280:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 400e284:	e0bff783 	ldbu	r2,-34(fp)
 400e288:	10800058 	cmpnei	r2,r2,1
 400e28c:	1000011e 	bne	r2,zero,400e294 <OSFlagPost+0x344>
        OS_Sched();
 400e290:	400c6580 	call	400c658 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e294:	0005303a 	rdctl	r2,status
 400e298:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e29c:	e0fff017 	ldw	r3,-64(fp)
 400e2a0:	00bfff84 	movi	r2,-2
 400e2a4:	1884703a 	and	r2,r3,r2
 400e2a8:	1001703a 	wrctl	status,r2
  
  return context;
 400e2ac:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 400e2b0:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 400e2b4:	e0bff917 	ldw	r2,-28(fp)
 400e2b8:	1080020b 	ldhu	r2,8(r2)
 400e2bc:	e0bff70d 	sth	r2,-36(fp)
 400e2c0:	e0bff517 	ldw	r2,-44(fp)
 400e2c4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e2c8:	e0bfef17 	ldw	r2,-68(fp)
 400e2cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 400e2d0:	e0bffc17 	ldw	r2,-16(fp)
 400e2d4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 400e2d8:	e0bff70b 	ldhu	r2,-36(fp)
 400e2dc:	e0bfff15 	stw	r2,-4(fp)
 400e2e0:	e0bfff17 	ldw	r2,-4(fp)
}
 400e2e4:	e037883a 	mov	sp,fp
 400e2e8:	dfc00117 	ldw	ra,4(sp)
 400e2ec:	df000017 	ldw	fp,0(sp)
 400e2f0:	dec00204 	addi	sp,sp,8
 400e2f4:	f800283a 	ret

0400e2f8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 400e2f8:	defff804 	addi	sp,sp,-32
 400e2fc:	df000715 	stw	fp,28(sp)
 400e300:	df000704 	addi	fp,sp,28
 400e304:	e13ffd15 	stw	r4,-12(fp)
 400e308:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 400e30c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 400e310:	e0bffe17 	ldw	r2,-8(fp)
 400e314:	1004c03a 	cmpne	r2,r2,zero
 400e318:	1000021e 	bne	r2,zero,400e324 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 400e31c:	e03fff15 	stw	zero,-4(fp)
 400e320:	00002506 	br	400e3b8 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 400e324:	e0bffd17 	ldw	r2,-12(fp)
 400e328:	1004c03a 	cmpne	r2,r2,zero
 400e32c:	1000051e 	bne	r2,zero,400e344 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400e330:	e0fffe17 	ldw	r3,-8(fp)
 400e334:	00801b84 	movi	r2,110
 400e338:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400e33c:	e03fff15 	stw	zero,-4(fp)
 400e340:	00001d06 	br	400e3b8 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 400e344:	e0bffd17 	ldw	r2,-12(fp)
 400e348:	10800003 	ldbu	r2,0(r2)
 400e34c:	10803fcc 	andi	r2,r2,255
 400e350:	10800160 	cmpeqi	r2,r2,5
 400e354:	1000051e 	bne	r2,zero,400e36c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 400e358:	e0fffe17 	ldw	r3,-8(fp)
 400e35c:	00800044 	movi	r2,1
 400e360:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400e364:	e03fff15 	stw	zero,-4(fp)
 400e368:	00001306 	br	400e3b8 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e36c:	0005303a 	rdctl	r2,status
 400e370:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e374:	e0fffa17 	ldw	r3,-24(fp)
 400e378:	00bfff84 	movi	r2,-2
 400e37c:	1884703a 	and	r2,r3,r2
 400e380:	1001703a 	wrctl	status,r2
  
  return context;
 400e384:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400e388:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 400e38c:	e0bffd17 	ldw	r2,-12(fp)
 400e390:	1080020b 	ldhu	r2,8(r2)
 400e394:	e0bffc0d 	sth	r2,-16(fp)
 400e398:	e0bffb17 	ldw	r2,-20(fp)
 400e39c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e3a0:	e0bff917 	ldw	r2,-28(fp)
 400e3a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400e3a8:	e0bffe17 	ldw	r2,-8(fp)
 400e3ac:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 400e3b0:	e0bffc0b 	ldhu	r2,-16(fp)
 400e3b4:	e0bfff15 	stw	r2,-4(fp)
 400e3b8:	e0bfff17 	ldw	r2,-4(fp)
}
 400e3bc:	e037883a 	mov	sp,fp
 400e3c0:	df000017 	ldw	fp,0(sp)
 400e3c4:	dec00104 	addi	sp,sp,4
 400e3c8:	f800283a 	ret

0400e3cc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 400e3cc:	defff804 	addi	sp,sp,-32
 400e3d0:	df000715 	stw	fp,28(sp)
 400e3d4:	df000704 	addi	fp,sp,28
 400e3d8:	e13ffb15 	stw	r4,-20(fp)
 400e3dc:	e17ffc15 	stw	r5,-16(fp)
 400e3e0:	e0800117 	ldw	r2,4(fp)
 400e3e4:	e1bffd0d 	sth	r6,-12(fp)
 400e3e8:	e1fffe05 	stb	r7,-8(fp)
 400e3ec:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 400e3f0:	008100b4 	movhi	r2,1026
 400e3f4:	10a1ed04 	addi	r2,r2,-30796
 400e3f8:	10c00017 	ldw	r3,0(r2)
 400e3fc:	008100b4 	movhi	r2,1026
 400e400:	10a1ed04 	addi	r2,r2,-30796
 400e404:	10800017 	ldw	r2,0(r2)
 400e408:	10800c03 	ldbu	r2,48(r2)
 400e40c:	10800814 	ori	r2,r2,32
 400e410:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 400e414:	008100b4 	movhi	r2,1026
 400e418:	10a1ed04 	addi	r2,r2,-30796
 400e41c:	10800017 	ldw	r2,0(r2)
 400e420:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 400e424:	008100b4 	movhi	r2,1026
 400e428:	10a1ed04 	addi	r2,r2,-30796
 400e42c:	10c00017 	ldw	r3,0(r2)
 400e430:	e0bfff0b 	ldhu	r2,-4(fp)
 400e434:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 400e438:	008100b4 	movhi	r2,1026
 400e43c:	10a1ed04 	addi	r2,r2,-30796
 400e440:	10c00017 	ldw	r3,0(r2)
 400e444:	e0bffc17 	ldw	r2,-16(fp)
 400e448:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 400e44c:	e0fffc17 	ldw	r3,-16(fp)
 400e450:	e0bffd0b 	ldhu	r2,-12(fp)
 400e454:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 400e458:	e0fffc17 	ldw	r3,-16(fp)
 400e45c:	e0bffe03 	ldbu	r2,-8(fp)
 400e460:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 400e464:	008100b4 	movhi	r2,1026
 400e468:	10a1ed04 	addi	r2,r2,-30796
 400e46c:	10c00017 	ldw	r3,0(r2)
 400e470:	e0bffc17 	ldw	r2,-16(fp)
 400e474:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 400e478:	e0bffb17 	ldw	r2,-20(fp)
 400e47c:	10c00117 	ldw	r3,4(r2)
 400e480:	e0bffc17 	ldw	r2,-16(fp)
 400e484:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 400e488:	e0bffc17 	ldw	r2,-16(fp)
 400e48c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 400e490:	e0fffc17 	ldw	r3,-16(fp)
 400e494:	e0bffb17 	ldw	r2,-20(fp)
 400e498:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 400e49c:	e0bffb17 	ldw	r2,-20(fp)
 400e4a0:	10800117 	ldw	r2,4(r2)
 400e4a4:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 400e4a8:	e0bffa17 	ldw	r2,-24(fp)
 400e4ac:	1005003a 	cmpeq	r2,r2,zero
 400e4b0:	1000031e 	bne	r2,zero,400e4c0 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 400e4b4:	e0fffa17 	ldw	r3,-24(fp)
 400e4b8:	e0bffc17 	ldw	r2,-16(fp)
 400e4bc:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 400e4c0:	e0fffb17 	ldw	r3,-20(fp)
 400e4c4:	e0bffc17 	ldw	r2,-16(fp)
 400e4c8:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 400e4cc:	008100b4 	movhi	r2,1026
 400e4d0:	10a1ed04 	addi	r2,r2,-30796
 400e4d4:	10800017 	ldw	r2,0(r2)
 400e4d8:	10800d03 	ldbu	r2,52(r2)
 400e4dc:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 400e4e0:	e13ff903 	ldbu	r4,-28(fp)
 400e4e4:	e0fff903 	ldbu	r3,-28(fp)
 400e4e8:	008100b4 	movhi	r2,1026
 400e4ec:	10a1ea44 	addi	r2,r2,-30807
 400e4f0:	10c5883a 	add	r2,r2,r3
 400e4f4:	10800003 	ldbu	r2,0(r2)
 400e4f8:	1007883a 	mov	r3,r2
 400e4fc:	008100b4 	movhi	r2,1026
 400e500:	10a1ed04 	addi	r2,r2,-30796
 400e504:	10800017 	ldw	r2,0(r2)
 400e508:	10800f03 	ldbu	r2,60(r2)
 400e50c:	0084303a 	nor	r2,zero,r2
 400e510:	1884703a 	and	r2,r3,r2
 400e514:	1007883a 	mov	r3,r2
 400e518:	008100b4 	movhi	r2,1026
 400e51c:	10a1ea44 	addi	r2,r2,-30807
 400e520:	1105883a 	add	r2,r2,r4
 400e524:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 400e528:	e0fff903 	ldbu	r3,-28(fp)
 400e52c:	008100b4 	movhi	r2,1026
 400e530:	10a1ea44 	addi	r2,r2,-30807
 400e534:	10c5883a 	add	r2,r2,r3
 400e538:	10800003 	ldbu	r2,0(r2)
 400e53c:	10803fcc 	andi	r2,r2,255
 400e540:	1004c03a 	cmpne	r2,r2,zero
 400e544:	10000e1e 	bne	r2,zero,400e580 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 400e548:	008100b4 	movhi	r2,1026
 400e54c:	10a1ed04 	addi	r2,r2,-30796
 400e550:	10800017 	ldw	r2,0(r2)
 400e554:	10800f43 	ldbu	r2,61(r2)
 400e558:	0084303a 	nor	r2,zero,r2
 400e55c:	1007883a 	mov	r3,r2
 400e560:	008100b4 	movhi	r2,1026
 400e564:	10a1ea04 	addi	r2,r2,-30808
 400e568:	10800003 	ldbu	r2,0(r2)
 400e56c:	1884703a 	and	r2,r3,r2
 400e570:	1007883a 	mov	r3,r2
 400e574:	008100b4 	movhi	r2,1026
 400e578:	10a1ea04 	addi	r2,r2,-30808
 400e57c:	10c00005 	stb	r3,0(r2)
    }
}
 400e580:	e037883a 	mov	sp,fp
 400e584:	df000017 	ldw	fp,0(sp)
 400e588:	dec00104 	addi	sp,sp,4
 400e58c:	f800283a 	ret

0400e590 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 400e590:	defffb04 	addi	sp,sp,-20
 400e594:	dfc00415 	stw	ra,16(sp)
 400e598:	df000315 	stw	fp,12(sp)
 400e59c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 400e5a0:	010100b4 	movhi	r4,1026
 400e5a4:	21074f04 	addi	r4,r4,7484
 400e5a8:	0140dc04 	movi	r5,880
 400e5ac:	400c5980 	call	400c598 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 400e5b0:	008100b4 	movhi	r2,1026
 400e5b4:	10874f04 	addi	r2,r2,7484
 400e5b8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 400e5bc:	008100b4 	movhi	r2,1026
 400e5c0:	10875a04 	addi	r2,r2,7528
 400e5c4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 400e5c8:	e03fff0d 	sth	zero,-4(fp)
 400e5cc:	00001306 	br	400e61c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400e5d0:	e0bffe17 	ldw	r2,-8(fp)
 400e5d4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 400e5d8:	e0fffe17 	ldw	r3,-8(fp)
 400e5dc:	e0bffd17 	ldw	r2,-12(fp)
 400e5e0:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 400e5e4:	e0fffe17 	ldw	r3,-8(fp)
 400e5e8:	00800fc4 	movi	r2,63
 400e5ec:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 400e5f0:	e0bffe17 	ldw	r2,-8(fp)
 400e5f4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 400e5f8:	e0bffe17 	ldw	r2,-8(fp)
 400e5fc:	10800b04 	addi	r2,r2,44
 400e600:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 400e604:	e0bffd17 	ldw	r2,-12(fp)
 400e608:	10800b04 	addi	r2,r2,44
 400e60c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 400e610:	e0bfff0b 	ldhu	r2,-4(fp)
 400e614:	10800044 	addi	r2,r2,1
 400e618:	e0bfff0d 	sth	r2,-4(fp)
 400e61c:	e0bfff0b 	ldhu	r2,-4(fp)
 400e620:	108004f0 	cmpltui	r2,r2,19
 400e624:	103fea1e 	bne	r2,zero,400e5d0 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400e628:	e0bffe17 	ldw	r2,-8(fp)
 400e62c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 400e630:	e0bffe17 	ldw	r2,-8(fp)
 400e634:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 400e638:	e0fffe17 	ldw	r3,-8(fp)
 400e63c:	00800fc4 	movi	r2,63
 400e640:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 400e644:	e0bffe17 	ldw	r2,-8(fp)
 400e648:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 400e64c:	00c100b4 	movhi	r3,1026
 400e650:	18e1ef04 	addi	r3,r3,-30788
 400e654:	008100b4 	movhi	r2,1026
 400e658:	10874f04 	addi	r2,r2,7484
 400e65c:	18800015 	stw	r2,0(r3)
#endif
}
 400e660:	e037883a 	mov	sp,fp
 400e664:	dfc00117 	ldw	ra,4(sp)
 400e668:	df000017 	ldw	fp,0(sp)
 400e66c:	dec00204 	addi	sp,sp,8
 400e670:	f800283a 	ret

0400e674 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 400e674:	defffa04 	addi	sp,sp,-24
 400e678:	dfc00515 	stw	ra,20(sp)
 400e67c:	df000415 	stw	fp,16(sp)
 400e680:	df000404 	addi	fp,sp,16
 400e684:	e13ffe15 	stw	r4,-8(fp)
 400e688:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 400e68c:	e0bffe17 	ldw	r2,-8(fp)
 400e690:	10800217 	ldw	r2,8(r2)
 400e694:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 400e698:	e0bffd17 	ldw	r2,-12(fp)
 400e69c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 400e6a0:	e0fffd17 	ldw	r3,-12(fp)
 400e6a4:	e0bfff0b 	ldhu	r2,-4(fp)
 400e6a8:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 400e6ac:	e0bffd17 	ldw	r2,-12(fp)
 400e6b0:	10c00c03 	ldbu	r3,48(r2)
 400e6b4:	00bff7c4 	movi	r2,-33
 400e6b8:	1884703a 	and	r2,r3,r2
 400e6bc:	1007883a 	mov	r3,r2
 400e6c0:	e0bffd17 	ldw	r2,-12(fp)
 400e6c4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 400e6c8:	e0bffd17 	ldw	r2,-12(fp)
 400e6cc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 400e6d0:	e0bffd17 	ldw	r2,-12(fp)
 400e6d4:	10800c03 	ldbu	r2,48(r2)
 400e6d8:	10803fcc 	andi	r2,r2,255
 400e6dc:	1004c03a 	cmpne	r2,r2,zero
 400e6e0:	10001f1e 	bne	r2,zero,400e760 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 400e6e4:	e0bffd17 	ldw	r2,-12(fp)
 400e6e8:	10c00f43 	ldbu	r3,61(r2)
 400e6ec:	008100b4 	movhi	r2,1026
 400e6f0:	10a1ea04 	addi	r2,r2,-30808
 400e6f4:	10800003 	ldbu	r2,0(r2)
 400e6f8:	1884b03a 	or	r2,r3,r2
 400e6fc:	1007883a 	mov	r3,r2
 400e700:	008100b4 	movhi	r2,1026
 400e704:	10a1ea04 	addi	r2,r2,-30808
 400e708:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400e70c:	e0bffd17 	ldw	r2,-12(fp)
 400e710:	10800d03 	ldbu	r2,52(r2)
 400e714:	11003fcc 	andi	r4,r2,255
 400e718:	e0bffd17 	ldw	r2,-12(fp)
 400e71c:	10800d03 	ldbu	r2,52(r2)
 400e720:	10c03fcc 	andi	r3,r2,255
 400e724:	008100b4 	movhi	r2,1026
 400e728:	10a1ea44 	addi	r2,r2,-30807
 400e72c:	10c5883a 	add	r2,r2,r3
 400e730:	10c00003 	ldbu	r3,0(r2)
 400e734:	e0bffd17 	ldw	r2,-12(fp)
 400e738:	10800f03 	ldbu	r2,60(r2)
 400e73c:	1884b03a 	or	r2,r3,r2
 400e740:	1007883a 	mov	r3,r2
 400e744:	008100b4 	movhi	r2,1026
 400e748:	10a1ea44 	addi	r2,r2,-30807
 400e74c:	1105883a 	add	r2,r2,r4
 400e750:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 400e754:	00800044 	movi	r2,1
 400e758:	e0bffc05 	stb	r2,-16(fp)
 400e75c:	00000106 	br	400e764 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 400e760:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 400e764:	e13ffe17 	ldw	r4,-8(fp)
 400e768:	400e7840 	call	400e784 <OS_FlagUnlink>
    return (sched);
 400e76c:	e0bffc03 	ldbu	r2,-16(fp)
}
 400e770:	e037883a 	mov	sp,fp
 400e774:	dfc00117 	ldw	ra,4(sp)
 400e778:	df000017 	ldw	fp,0(sp)
 400e77c:	dec00204 	addi	sp,sp,8
 400e780:	f800283a 	ret

0400e784 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 400e784:	defffa04 	addi	sp,sp,-24
 400e788:	df000515 	stw	fp,20(sp)
 400e78c:	df000504 	addi	fp,sp,20
 400e790:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 400e794:	e0bfff17 	ldw	r2,-4(fp)
 400e798:	10800117 	ldw	r2,4(r2)
 400e79c:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 400e7a0:	e0bfff17 	ldw	r2,-4(fp)
 400e7a4:	10800017 	ldw	r2,0(r2)
 400e7a8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 400e7ac:	e0bffc17 	ldw	r2,-16(fp)
 400e7b0:	1004c03a 	cmpne	r2,r2,zero
 400e7b4:	10000c1e 	bne	r2,zero,400e7e8 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 400e7b8:	e0bfff17 	ldw	r2,-4(fp)
 400e7bc:	10800317 	ldw	r2,12(r2)
 400e7c0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 400e7c4:	e0fffd17 	ldw	r3,-12(fp)
 400e7c8:	e0bffb17 	ldw	r2,-20(fp)
 400e7cc:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 400e7d0:	e0bffb17 	ldw	r2,-20(fp)
 400e7d4:	1005003a 	cmpeq	r2,r2,zero
 400e7d8:	10000c1e 	bne	r2,zero,400e80c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 400e7dc:	e0bffb17 	ldw	r2,-20(fp)
 400e7e0:	10000115 	stw	zero,4(r2)
 400e7e4:	00000906 	br	400e80c <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 400e7e8:	e0fffc17 	ldw	r3,-16(fp)
 400e7ec:	e0bffb17 	ldw	r2,-20(fp)
 400e7f0:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 400e7f4:	e0bffb17 	ldw	r2,-20(fp)
 400e7f8:	1005003a 	cmpeq	r2,r2,zero
 400e7fc:	1000031e 	bne	r2,zero,400e80c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 400e800:	e0fffb17 	ldw	r3,-20(fp)
 400e804:	e0bffc17 	ldw	r2,-16(fp)
 400e808:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 400e80c:	e0bfff17 	ldw	r2,-4(fp)
 400e810:	10800217 	ldw	r2,8(r2)
 400e814:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 400e818:	e0bffe17 	ldw	r2,-8(fp)
 400e81c:	10000a15 	stw	zero,40(r2)
#endif
}
 400e820:	e037883a 	mov	sp,fp
 400e824:	df000017 	ldw	fp,0(sp)
 400e828:	dec00104 	addi	sp,sp,4
 400e82c:	f800283a 	ret

0400e830 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 400e830:	defff304 	addi	sp,sp,-52
 400e834:	df000c15 	stw	fp,48(sp)
 400e838:	df000c04 	addi	fp,sp,48
 400e83c:	e13ffb15 	stw	r4,-20(fp)
 400e840:	e17ffc15 	stw	r5,-16(fp)
 400e844:	e1bffd15 	stw	r6,-12(fp)
 400e848:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400e84c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 400e850:	e0bffe17 	ldw	r2,-8(fp)
 400e854:	1004c03a 	cmpne	r2,r2,zero
 400e858:	1000021e 	bne	r2,zero,400e864 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 400e85c:	e03fff15 	stw	zero,-4(fp)
 400e860:	00007506 	br	400ea38 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 400e864:	e0bffb17 	ldw	r2,-20(fp)
 400e868:	1004c03a 	cmpne	r2,r2,zero
 400e86c:	1000051e 	bne	r2,zero,400e884 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 400e870:	e0fffe17 	ldw	r3,-8(fp)
 400e874:	00801884 	movi	r2,98
 400e878:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 400e87c:	e03fff15 	stw	zero,-4(fp)
 400e880:	00006d06 	br	400ea38 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 400e884:	e0bffb17 	ldw	r2,-20(fp)
 400e888:	108000cc 	andi	r2,r2,3
 400e88c:	1005003a 	cmpeq	r2,r2,zero
 400e890:	1000051e 	bne	r2,zero,400e8a8 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 400e894:	e0fffe17 	ldw	r3,-8(fp)
 400e898:	00801884 	movi	r2,98
 400e89c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 400e8a0:	e03fff15 	stw	zero,-4(fp)
 400e8a4:	00006406 	br	400ea38 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 400e8a8:	e0bffc17 	ldw	r2,-16(fp)
 400e8ac:	108000a8 	cmpgeui	r2,r2,2
 400e8b0:	1000051e 	bne	r2,zero,400e8c8 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 400e8b4:	e0fffe17 	ldw	r3,-8(fp)
 400e8b8:	008016c4 	movi	r2,91
 400e8bc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 400e8c0:	e03fff15 	stw	zero,-4(fp)
 400e8c4:	00005c06 	br	400ea38 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 400e8c8:	e0bffd17 	ldw	r2,-12(fp)
 400e8cc:	10800128 	cmpgeui	r2,r2,4
 400e8d0:	1000051e 	bne	r2,zero,400e8e8 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 400e8d4:	e0fffe17 	ldw	r3,-8(fp)
 400e8d8:	00801704 	movi	r2,92
 400e8dc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 400e8e0:	e03fff15 	stw	zero,-4(fp)
 400e8e4:	00005406 	br	400ea38 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e8e8:	0005303a 	rdctl	r2,status
 400e8ec:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e8f0:	e0fff517 	ldw	r3,-44(fp)
 400e8f4:	00bfff84 	movi	r2,-2
 400e8f8:	1884703a 	and	r2,r3,r2
 400e8fc:	1001703a 	wrctl	status,r2
  
  return context;
 400e900:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400e904:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 400e908:	008100b4 	movhi	r2,1026
 400e90c:	10a1e704 	addi	r2,r2,-30820
 400e910:	10800017 	ldw	r2,0(r2)
 400e914:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 400e918:	008100b4 	movhi	r2,1026
 400e91c:	10a1e704 	addi	r2,r2,-30820
 400e920:	10800017 	ldw	r2,0(r2)
 400e924:	1005003a 	cmpeq	r2,r2,zero
 400e928:	1000081e 	bne	r2,zero,400e94c <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 400e92c:	008100b4 	movhi	r2,1026
 400e930:	10a1e704 	addi	r2,r2,-30820
 400e934:	10800017 	ldw	r2,0(r2)
 400e938:	10800117 	ldw	r2,4(r2)
 400e93c:	1007883a 	mov	r3,r2
 400e940:	008100b4 	movhi	r2,1026
 400e944:	10a1e704 	addi	r2,r2,-30820
 400e948:	10c00015 	stw	r3,0(r2)
 400e94c:	e0bff617 	ldw	r2,-40(fp)
 400e950:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e954:	e0bff417 	ldw	r2,-48(fp)
 400e958:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 400e95c:	e0bffa17 	ldw	r2,-24(fp)
 400e960:	1004c03a 	cmpne	r2,r2,zero
 400e964:	1000051e 	bne	r2,zero,400e97c <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 400e968:	e0fffe17 	ldw	r3,-8(fp)
 400e96c:	00801684 	movi	r2,90
 400e970:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 400e974:	e03fff15 	stw	zero,-4(fp)
 400e978:	00002f06 	br	400ea38 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 400e97c:	e0bffb17 	ldw	r2,-20(fp)
 400e980:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 400e984:	e0bffb17 	ldw	r2,-20(fp)
 400e988:	1007883a 	mov	r3,r2
 400e98c:	e0bffd17 	ldw	r2,-12(fp)
 400e990:	1885883a 	add	r2,r3,r2
 400e994:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 400e998:	e03ff715 	stw	zero,-36(fp)
 400e99c:	00000d06 	br	400e9d4 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 400e9a0:	e0fff817 	ldw	r3,-32(fp)
 400e9a4:	e0bff917 	ldw	r2,-28(fp)
 400e9a8:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 400e9ac:	e0bff917 	ldw	r2,-28(fp)
 400e9b0:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 400e9b4:	e0bff917 	ldw	r2,-28(fp)
 400e9b8:	1007883a 	mov	r3,r2
 400e9bc:	e0bffd17 	ldw	r2,-12(fp)
 400e9c0:	1885883a 	add	r2,r3,r2
 400e9c4:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 400e9c8:	e0bff717 	ldw	r2,-36(fp)
 400e9cc:	10800044 	addi	r2,r2,1
 400e9d0:	e0bff715 	stw	r2,-36(fp)
 400e9d4:	e0bffc17 	ldw	r2,-16(fp)
 400e9d8:	10ffffc4 	addi	r3,r2,-1
 400e9dc:	e0bff717 	ldw	r2,-36(fp)
 400e9e0:	10ffef36 	bltu	r2,r3,400e9a0 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 400e9e4:	e0bff817 	ldw	r2,-32(fp)
 400e9e8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 400e9ec:	e0fffa17 	ldw	r3,-24(fp)
 400e9f0:	e0bffb17 	ldw	r2,-20(fp)
 400e9f4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 400e9f8:	e0fffa17 	ldw	r3,-24(fp)
 400e9fc:	e0bffb17 	ldw	r2,-20(fp)
 400ea00:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 400ea04:	e0fffa17 	ldw	r3,-24(fp)
 400ea08:	e0bffc17 	ldw	r2,-16(fp)
 400ea0c:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 400ea10:	e0fffa17 	ldw	r3,-24(fp)
 400ea14:	e0bffc17 	ldw	r2,-16(fp)
 400ea18:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 400ea1c:	e0fffa17 	ldw	r3,-24(fp)
 400ea20:	e0bffd17 	ldw	r2,-12(fp)
 400ea24:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 400ea28:	e0bffe17 	ldw	r2,-8(fp)
 400ea2c:	10000005 	stb	zero,0(r2)
    return (pmem);
 400ea30:	e0bffa17 	ldw	r2,-24(fp)
 400ea34:	e0bfff15 	stw	r2,-4(fp)
 400ea38:	e0bfff17 	ldw	r2,-4(fp)
}
 400ea3c:	e037883a 	mov	sp,fp
 400ea40:	df000017 	ldw	fp,0(sp)
 400ea44:	dec00104 	addi	sp,sp,4
 400ea48:	f800283a 	ret

0400ea4c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 400ea4c:	defff704 	addi	sp,sp,-36
 400ea50:	df000815 	stw	fp,32(sp)
 400ea54:	df000804 	addi	fp,sp,32
 400ea58:	e13ffd15 	stw	r4,-12(fp)
 400ea5c:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400ea60:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 400ea64:	e0bffe17 	ldw	r2,-8(fp)
 400ea68:	1004c03a 	cmpne	r2,r2,zero
 400ea6c:	1000021e 	bne	r2,zero,400ea78 <OSMemGet+0x2c>
        return ((void *)0);
 400ea70:	e03fff15 	stw	zero,-4(fp)
 400ea74:	00003106 	br	400eb3c <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 400ea78:	e0bffd17 	ldw	r2,-12(fp)
 400ea7c:	1004c03a 	cmpne	r2,r2,zero
 400ea80:	1000051e 	bne	r2,zero,400ea98 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 400ea84:	e0fffe17 	ldw	r3,-8(fp)
 400ea88:	00801804 	movi	r2,96
 400ea8c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400ea90:	e03fff15 	stw	zero,-4(fp)
 400ea94:	00002906 	br	400eb3c <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ea98:	0005303a 	rdctl	r2,status
 400ea9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eaa0:	e0fffa17 	ldw	r3,-24(fp)
 400eaa4:	00bfff84 	movi	r2,-2
 400eaa8:	1884703a 	and	r2,r3,r2
 400eaac:	1001703a 	wrctl	status,r2
  
  return context;
 400eab0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400eab4:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 400eab8:	e0bffd17 	ldw	r2,-12(fp)
 400eabc:	10800417 	ldw	r2,16(r2)
 400eac0:	1005003a 	cmpeq	r2,r2,zero
 400eac4:	1000151e 	bne	r2,zero,400eb1c <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 400eac8:	e0bffd17 	ldw	r2,-12(fp)
 400eacc:	10800117 	ldw	r2,4(r2)
 400ead0:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 400ead4:	e0bffc17 	ldw	r2,-16(fp)
 400ead8:	10c00017 	ldw	r3,0(r2)
 400eadc:	e0bffd17 	ldw	r2,-12(fp)
 400eae0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 400eae4:	e0bffd17 	ldw	r2,-12(fp)
 400eae8:	10800417 	ldw	r2,16(r2)
 400eaec:	10ffffc4 	addi	r3,r2,-1
 400eaf0:	e0bffd17 	ldw	r2,-12(fp)
 400eaf4:	10c00415 	stw	r3,16(r2)
 400eaf8:	e0bffb17 	ldw	r2,-20(fp)
 400eafc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400eb00:	e0bff917 	ldw	r2,-28(fp)
 400eb04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 400eb08:	e0bffe17 	ldw	r2,-8(fp)
 400eb0c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 400eb10:	e0bffc17 	ldw	r2,-16(fp)
 400eb14:	e0bfff15 	stw	r2,-4(fp)
 400eb18:	00000806 	br	400eb3c <OSMemGet+0xf0>
 400eb1c:	e0bffb17 	ldw	r2,-20(fp)
 400eb20:	e0bff815 	stw	r2,-32(fp)
 400eb24:	e0bff817 	ldw	r2,-32(fp)
 400eb28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 400eb2c:	e0fffe17 	ldw	r3,-8(fp)
 400eb30:	00801744 	movi	r2,93
 400eb34:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 400eb38:	e03fff15 	stw	zero,-4(fp)
 400eb3c:	e0bfff17 	ldw	r2,-4(fp)
}
 400eb40:	e037883a 	mov	sp,fp
 400eb44:	df000017 	ldw	fp,0(sp)
 400eb48:	dec00104 	addi	sp,sp,4
 400eb4c:	f800283a 	ret

0400eb50 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 400eb50:	defff604 	addi	sp,sp,-40
 400eb54:	dfc00915 	stw	ra,36(sp)
 400eb58:	df000815 	stw	fp,32(sp)
 400eb5c:	df000804 	addi	fp,sp,32
 400eb60:	e13ffc15 	stw	r4,-16(fp)
 400eb64:	e17ffd15 	stw	r5,-12(fp)
 400eb68:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400eb6c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400eb70:	e0bffe17 	ldw	r2,-8(fp)
 400eb74:	1004c03a 	cmpne	r2,r2,zero
 400eb78:	1000021e 	bne	r2,zero,400eb84 <OSMemNameGet+0x34>
        return (0);
 400eb7c:	e03fff15 	stw	zero,-4(fp)
 400eb80:	00003006 	br	400ec44 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 400eb84:	e0bffc17 	ldw	r2,-16(fp)
 400eb88:	1004c03a 	cmpne	r2,r2,zero
 400eb8c:	1000051e 	bne	r2,zero,400eba4 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 400eb90:	e0fffe17 	ldw	r3,-8(fp)
 400eb94:	00801804 	movi	r2,96
 400eb98:	18800005 	stb	r2,0(r3)
        return (0);
 400eb9c:	e03fff15 	stw	zero,-4(fp)
 400eba0:	00002806 	br	400ec44 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400eba4:	e0bffd17 	ldw	r2,-12(fp)
 400eba8:	1004c03a 	cmpne	r2,r2,zero
 400ebac:	1000051e 	bne	r2,zero,400ebc4 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 400ebb0:	e0fffe17 	ldw	r3,-8(fp)
 400ebb4:	00800304 	movi	r2,12
 400ebb8:	18800005 	stb	r2,0(r3)
        return (0);
 400ebbc:	e03fff15 	stw	zero,-4(fp)
 400ebc0:	00002006 	br	400ec44 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400ebc4:	008100b4 	movhi	r2,1026
 400ebc8:	10a1ec04 	addi	r2,r2,-30800
 400ebcc:	10800003 	ldbu	r2,0(r2)
 400ebd0:	10803fcc 	andi	r2,r2,255
 400ebd4:	1005003a 	cmpeq	r2,r2,zero
 400ebd8:	1000051e 	bne	r2,zero,400ebf0 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 400ebdc:	e0fffe17 	ldw	r3,-8(fp)
 400ebe0:	00800444 	movi	r2,17
 400ebe4:	18800005 	stb	r2,0(r3)
        return (0);
 400ebe8:	e03fff15 	stw	zero,-4(fp)
 400ebec:	00001506 	br	400ec44 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ebf0:	0005303a 	rdctl	r2,status
 400ebf4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ebf8:	e0fff917 	ldw	r3,-28(fp)
 400ebfc:	00bfff84 	movi	r2,-2
 400ec00:	1884703a 	and	r2,r3,r2
 400ec04:	1001703a 	wrctl	status,r2
  
  return context;
 400ec08:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400ec0c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 400ec10:	e0bffc17 	ldw	r2,-16(fp)
 400ec14:	11400504 	addi	r5,r2,20
 400ec18:	e13ffd17 	ldw	r4,-12(fp)
 400ec1c:	400c7c40 	call	400c7c4 <OS_StrCopy>
 400ec20:	e0bffb05 	stb	r2,-20(fp)
 400ec24:	e0bffa17 	ldw	r2,-24(fp)
 400ec28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ec2c:	e0bff817 	ldw	r2,-32(fp)
 400ec30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400ec34:	e0bffe17 	ldw	r2,-8(fp)
 400ec38:	10000005 	stb	zero,0(r2)
    return (len);
 400ec3c:	e0bffb03 	ldbu	r2,-20(fp)
 400ec40:	e0bfff15 	stw	r2,-4(fp)
 400ec44:	e0bfff17 	ldw	r2,-4(fp)
}
 400ec48:	e037883a 	mov	sp,fp
 400ec4c:	dfc00117 	ldw	ra,4(sp)
 400ec50:	df000017 	ldw	fp,0(sp)
 400ec54:	dec00204 	addi	sp,sp,8
 400ec58:	f800283a 	ret

0400ec5c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 400ec5c:	defff604 	addi	sp,sp,-40
 400ec60:	dfc00915 	stw	ra,36(sp)
 400ec64:	df000815 	stw	fp,32(sp)
 400ec68:	df000804 	addi	fp,sp,32
 400ec6c:	e13ffd15 	stw	r4,-12(fp)
 400ec70:	e17ffe15 	stw	r5,-8(fp)
 400ec74:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ec78:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400ec7c:	e0bfff17 	ldw	r2,-4(fp)
 400ec80:	1005003a 	cmpeq	r2,r2,zero
 400ec84:	1000381e 	bne	r2,zero,400ed68 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 400ec88:	e0bffd17 	ldw	r2,-12(fp)
 400ec8c:	1004c03a 	cmpne	r2,r2,zero
 400ec90:	1000041e 	bne	r2,zero,400eca4 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 400ec94:	e0ffff17 	ldw	r3,-4(fp)
 400ec98:	00801804 	movi	r2,96
 400ec9c:	18800005 	stb	r2,0(r3)
        return;
 400eca0:	00003106 	br	400ed68 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400eca4:	e0bffe17 	ldw	r2,-8(fp)
 400eca8:	1004c03a 	cmpne	r2,r2,zero
 400ecac:	1000041e 	bne	r2,zero,400ecc0 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 400ecb0:	e0ffff17 	ldw	r3,-4(fp)
 400ecb4:	00800304 	movi	r2,12
 400ecb8:	18800005 	stb	r2,0(r3)
        return;
 400ecbc:	00002a06 	br	400ed68 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400ecc0:	008100b4 	movhi	r2,1026
 400ecc4:	10a1ec04 	addi	r2,r2,-30800
 400ecc8:	10800003 	ldbu	r2,0(r2)
 400eccc:	10803fcc 	andi	r2,r2,255
 400ecd0:	1005003a 	cmpeq	r2,r2,zero
 400ecd4:	1000041e 	bne	r2,zero,400ece8 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 400ecd8:	e0ffff17 	ldw	r3,-4(fp)
 400ecdc:	00800484 	movi	r2,18
 400ece0:	18800005 	stb	r2,0(r3)
        return;
 400ece4:	00002006 	br	400ed68 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ece8:	0005303a 	rdctl	r2,status
 400ecec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ecf0:	e0fffa17 	ldw	r3,-24(fp)
 400ecf4:	00bfff84 	movi	r2,-2
 400ecf8:	1884703a 	and	r2,r3,r2
 400ecfc:	1001703a 	wrctl	status,r2
  
  return context;
 400ed00:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400ed04:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 400ed08:	e13ffe17 	ldw	r4,-8(fp)
 400ed0c:	400c8440 	call	400c844 <OS_StrLen>
 400ed10:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 400ed14:	e0bffc03 	ldbu	r2,-16(fp)
 400ed18:	10800830 	cmpltui	r2,r2,32
 400ed1c:	1000081e 	bne	r2,zero,400ed40 <OSMemNameSet+0xe4>
 400ed20:	e0bffb17 	ldw	r2,-20(fp)
 400ed24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ed28:	e0bff917 	ldw	r2,-28(fp)
 400ed2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 400ed30:	e0ffff17 	ldw	r3,-4(fp)
 400ed34:	008018c4 	movi	r2,99
 400ed38:	18800005 	stb	r2,0(r3)
        return;
 400ed3c:	00000a06 	br	400ed68 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 400ed40:	e0bffd17 	ldw	r2,-12(fp)
 400ed44:	11000504 	addi	r4,r2,20
 400ed48:	e17ffe17 	ldw	r5,-8(fp)
 400ed4c:	400c7c40 	call	400c7c4 <OS_StrCopy>
 400ed50:	e0bffb17 	ldw	r2,-20(fp)
 400ed54:	e0bff815 	stw	r2,-32(fp)
 400ed58:	e0bff817 	ldw	r2,-32(fp)
 400ed5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400ed60:	e0bfff17 	ldw	r2,-4(fp)
 400ed64:	10000005 	stb	zero,0(r2)
}
 400ed68:	e037883a 	mov	sp,fp
 400ed6c:	dfc00117 	ldw	ra,4(sp)
 400ed70:	df000017 	ldw	fp,0(sp)
 400ed74:	dec00204 	addi	sp,sp,8
 400ed78:	f800283a 	ret

0400ed7c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 400ed7c:	defff804 	addi	sp,sp,-32
 400ed80:	df000715 	stw	fp,28(sp)
 400ed84:	df000704 	addi	fp,sp,28
 400ed88:	e13ffd15 	stw	r4,-12(fp)
 400ed8c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ed90:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 400ed94:	e0bffd17 	ldw	r2,-12(fp)
 400ed98:	1004c03a 	cmpne	r2,r2,zero
 400ed9c:	1000031e 	bne	r2,zero,400edac <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 400eda0:	00801804 	movi	r2,96
 400eda4:	e0bfff15 	stw	r2,-4(fp)
 400eda8:	00002b06 	br	400ee58 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 400edac:	e0bffe17 	ldw	r2,-8(fp)
 400edb0:	1004c03a 	cmpne	r2,r2,zero
 400edb4:	1000031e 	bne	r2,zero,400edc4 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 400edb8:	008017c4 	movi	r2,95
 400edbc:	e0bfff15 	stw	r2,-4(fp)
 400edc0:	00002506 	br	400ee58 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400edc4:	0005303a 	rdctl	r2,status
 400edc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400edcc:	e0fffb17 	ldw	r3,-20(fp)
 400edd0:	00bfff84 	movi	r2,-2
 400edd4:	1884703a 	and	r2,r3,r2
 400edd8:	1001703a 	wrctl	status,r2
  
  return context;
 400eddc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400ede0:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 400ede4:	e0bffd17 	ldw	r2,-12(fp)
 400ede8:	10c00417 	ldw	r3,16(r2)
 400edec:	e0bffd17 	ldw	r2,-12(fp)
 400edf0:	10800317 	ldw	r2,12(r2)
 400edf4:	18800736 	bltu	r3,r2,400ee14 <OSMemPut+0x98>
 400edf8:	e0bffc17 	ldw	r2,-16(fp)
 400edfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ee00:	e0bffa17 	ldw	r2,-24(fp)
 400ee04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 400ee08:	00801784 	movi	r2,94
 400ee0c:	e0bfff15 	stw	r2,-4(fp)
 400ee10:	00001106 	br	400ee58 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 400ee14:	e0fffe17 	ldw	r3,-8(fp)
 400ee18:	e0bffd17 	ldw	r2,-12(fp)
 400ee1c:	10800117 	ldw	r2,4(r2)
 400ee20:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 400ee24:	e0fffd17 	ldw	r3,-12(fp)
 400ee28:	e0bffe17 	ldw	r2,-8(fp)
 400ee2c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 400ee30:	e0bffd17 	ldw	r2,-12(fp)
 400ee34:	10800417 	ldw	r2,16(r2)
 400ee38:	10c00044 	addi	r3,r2,1
 400ee3c:	e0bffd17 	ldw	r2,-12(fp)
 400ee40:	10c00415 	stw	r3,16(r2)
 400ee44:	e0bffc17 	ldw	r2,-16(fp)
 400ee48:	e0bff915 	stw	r2,-28(fp)
 400ee4c:	e0bff917 	ldw	r2,-28(fp)
 400ee50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 400ee54:	e03fff15 	stw	zero,-4(fp)
 400ee58:	e0bfff17 	ldw	r2,-4(fp)
}
 400ee5c:	e037883a 	mov	sp,fp
 400ee60:	df000017 	ldw	fp,0(sp)
 400ee64:	dec00104 	addi	sp,sp,4
 400ee68:	f800283a 	ret

0400ee6c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 400ee6c:	defff904 	addi	sp,sp,-28
 400ee70:	df000615 	stw	fp,24(sp)
 400ee74:	df000604 	addi	fp,sp,24
 400ee78:	e13ffd15 	stw	r4,-12(fp)
 400ee7c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ee80:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 400ee84:	e0bffd17 	ldw	r2,-12(fp)
 400ee88:	1004c03a 	cmpne	r2,r2,zero
 400ee8c:	1000031e 	bne	r2,zero,400ee9c <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 400ee90:	00801804 	movi	r2,96
 400ee94:	e0bfff15 	stw	r2,-4(fp)
 400ee98:	00002e06 	br	400ef54 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 400ee9c:	e0bffe17 	ldw	r2,-8(fp)
 400eea0:	1004c03a 	cmpne	r2,r2,zero
 400eea4:	1000031e 	bne	r2,zero,400eeb4 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 400eea8:	00801844 	movi	r2,97
 400eeac:	e0bfff15 	stw	r2,-4(fp)
 400eeb0:	00002806 	br	400ef54 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eeb4:	0005303a 	rdctl	r2,status
 400eeb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eebc:	e0fffb17 	ldw	r3,-20(fp)
 400eec0:	00bfff84 	movi	r2,-2
 400eec4:	1884703a 	and	r2,r3,r2
 400eec8:	1001703a 	wrctl	status,r2
  
  return context;
 400eecc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400eed0:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 400eed4:	e0bffd17 	ldw	r2,-12(fp)
 400eed8:	10c00017 	ldw	r3,0(r2)
 400eedc:	e0bffe17 	ldw	r2,-8(fp)
 400eee0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 400eee4:	e0bffd17 	ldw	r2,-12(fp)
 400eee8:	10c00117 	ldw	r3,4(r2)
 400eeec:	e0bffe17 	ldw	r2,-8(fp)
 400eef0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 400eef4:	e0bffd17 	ldw	r2,-12(fp)
 400eef8:	10c00217 	ldw	r3,8(r2)
 400eefc:	e0bffe17 	ldw	r2,-8(fp)
 400ef00:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 400ef04:	e0bffd17 	ldw	r2,-12(fp)
 400ef08:	10c00317 	ldw	r3,12(r2)
 400ef0c:	e0bffe17 	ldw	r2,-8(fp)
 400ef10:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 400ef14:	e0bffd17 	ldw	r2,-12(fp)
 400ef18:	10c00417 	ldw	r3,16(r2)
 400ef1c:	e0bffe17 	ldw	r2,-8(fp)
 400ef20:	10c00415 	stw	r3,16(r2)
 400ef24:	e0bffc17 	ldw	r2,-16(fp)
 400ef28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ef2c:	e0bffa17 	ldw	r2,-24(fp)
 400ef30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 400ef34:	e0bffe17 	ldw	r2,-8(fp)
 400ef38:	10c00317 	ldw	r3,12(r2)
 400ef3c:	e0bffe17 	ldw	r2,-8(fp)
 400ef40:	10800417 	ldw	r2,16(r2)
 400ef44:	1887c83a 	sub	r3,r3,r2
 400ef48:	e0bffe17 	ldw	r2,-8(fp)
 400ef4c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 400ef50:	e03fff15 	stw	zero,-4(fp)
 400ef54:	e0bfff17 	ldw	r2,-4(fp)
}
 400ef58:	e037883a 	mov	sp,fp
 400ef5c:	df000017 	ldw	fp,0(sp)
 400ef60:	dec00104 	addi	sp,sp,4
 400ef64:	f800283a 	ret

0400ef68 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 400ef68:	defffc04 	addi	sp,sp,-16
 400ef6c:	dfc00315 	stw	ra,12(sp)
 400ef70:	df000215 	stw	fp,8(sp)
 400ef74:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 400ef78:	010100b4 	movhi	r4,1026
 400ef7c:	21082b04 	addi	r4,r4,8364
 400ef80:	01430c04 	movi	r5,3120
 400ef84:	400c5980 	call	400c598 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 400ef88:	008100b4 	movhi	r2,1026
 400ef8c:	10882b04 	addi	r2,r2,8364
 400ef90:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 400ef94:	e03ffe0d 	sth	zero,-8(fp)
 400ef98:	00001306 	br	400efe8 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 400ef9c:	e0bffe0b 	ldhu	r2,-8(fp)
 400efa0:	10800d24 	muli	r2,r2,52
 400efa4:	1007883a 	mov	r3,r2
 400efa8:	008100b4 	movhi	r2,1026
 400efac:	10883804 	addi	r2,r2,8416
 400efb0:	1887883a 	add	r3,r3,r2
 400efb4:	e0bfff17 	ldw	r2,-4(fp)
 400efb8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 400efbc:	e0ffff17 	ldw	r3,-4(fp)
 400efc0:	00800fc4 	movi	r2,63
 400efc4:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 400efc8:	e0bfff17 	ldw	r2,-4(fp)
 400efcc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 400efd0:	e0bfff17 	ldw	r2,-4(fp)
 400efd4:	10800d04 	addi	r2,r2,52
 400efd8:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 400efdc:	e0bffe0b 	ldhu	r2,-8(fp)
 400efe0:	10800044 	addi	r2,r2,1
 400efe4:	e0bffe0d 	sth	r2,-8(fp)
 400efe8:	e0bffe0b 	ldhu	r2,-8(fp)
 400efec:	10800ef0 	cmpltui	r2,r2,59
 400eff0:	103fea1e 	bne	r2,zero,400ef9c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 400eff4:	e0bfff17 	ldw	r2,-4(fp)
 400eff8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 400effc:	e0ffff17 	ldw	r3,-4(fp)
 400f000:	00800fc4 	movi	r2,63
 400f004:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 400f008:	e0bfff17 	ldw	r2,-4(fp)
 400f00c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 400f010:	00c100b4 	movhi	r3,1026
 400f014:	18e1e704 	addi	r3,r3,-30820
 400f018:	008100b4 	movhi	r2,1026
 400f01c:	10882b04 	addi	r2,r2,8364
 400f020:	18800015 	stw	r2,0(r3)
#endif
}
 400f024:	e037883a 	mov	sp,fp
 400f028:	dfc00117 	ldw	ra,4(sp)
 400f02c:	df000017 	ldw	fp,0(sp)
 400f030:	dec00204 	addi	sp,sp,8
 400f034:	f800283a 	ret

0400f038 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 400f038:	defff704 	addi	sp,sp,-36
 400f03c:	df000815 	stw	fp,32(sp)
 400f040:	df000804 	addi	fp,sp,32
 400f044:	e13ffd15 	stw	r4,-12(fp)
 400f048:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400f04c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400f050:	e0bffe17 	ldw	r2,-8(fp)
 400f054:	1004c03a 	cmpne	r2,r2,zero
 400f058:	1000021e 	bne	r2,zero,400f064 <OSQAccept+0x2c>
        return ((void *)0);
 400f05c:	e03fff15 	stw	zero,-4(fp)
 400f060:	00004506 	br	400f178 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 400f064:	e0bffd17 	ldw	r2,-12(fp)
 400f068:	1004c03a 	cmpne	r2,r2,zero
 400f06c:	1000051e 	bne	r2,zero,400f084 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 400f070:	e0fffe17 	ldw	r3,-8(fp)
 400f074:	00800104 	movi	r2,4
 400f078:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400f07c:	e03fff15 	stw	zero,-4(fp)
 400f080:	00003d06 	br	400f178 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 400f084:	e0bffd17 	ldw	r2,-12(fp)
 400f088:	10800003 	ldbu	r2,0(r2)
 400f08c:	10803fcc 	andi	r2,r2,255
 400f090:	108000a0 	cmpeqi	r2,r2,2
 400f094:	1000051e 	bne	r2,zero,400f0ac <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 400f098:	e0fffe17 	ldw	r3,-8(fp)
 400f09c:	00800044 	movi	r2,1
 400f0a0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400f0a4:	e03fff15 	stw	zero,-4(fp)
 400f0a8:	00003306 	br	400f178 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f0ac:	0005303a 	rdctl	r2,status
 400f0b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f0b4:	e0fff917 	ldw	r3,-28(fp)
 400f0b8:	00bfff84 	movi	r2,-2
 400f0bc:	1884703a 	and	r2,r3,r2
 400f0c0:	1001703a 	wrctl	status,r2
  
  return context;
 400f0c4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400f0c8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 400f0cc:	e0bffd17 	ldw	r2,-12(fp)
 400f0d0:	10800117 	ldw	r2,4(r2)
 400f0d4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 400f0d8:	e0bffb17 	ldw	r2,-20(fp)
 400f0dc:	1080058b 	ldhu	r2,22(r2)
 400f0e0:	10bfffcc 	andi	r2,r2,65535
 400f0e4:	1005003a 	cmpeq	r2,r2,zero
 400f0e8:	1000191e 	bne	r2,zero,400f150 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 400f0ec:	e0bffb17 	ldw	r2,-20(fp)
 400f0f0:	10c00417 	ldw	r3,16(r2)
 400f0f4:	18800017 	ldw	r2,0(r3)
 400f0f8:	e0bffc15 	stw	r2,-16(fp)
 400f0fc:	18c00104 	addi	r3,r3,4
 400f100:	e0bffb17 	ldw	r2,-20(fp)
 400f104:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 400f108:	e0bffb17 	ldw	r2,-20(fp)
 400f10c:	1080058b 	ldhu	r2,22(r2)
 400f110:	10bfffc4 	addi	r2,r2,-1
 400f114:	1007883a 	mov	r3,r2
 400f118:	e0bffb17 	ldw	r2,-20(fp)
 400f11c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 400f120:	e0bffb17 	ldw	r2,-20(fp)
 400f124:	10c00417 	ldw	r3,16(r2)
 400f128:	e0bffb17 	ldw	r2,-20(fp)
 400f12c:	10800217 	ldw	r2,8(r2)
 400f130:	1880041e 	bne	r3,r2,400f144 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 400f134:	e0bffb17 	ldw	r2,-20(fp)
 400f138:	10c00117 	ldw	r3,4(r2)
 400f13c:	e0bffb17 	ldw	r2,-20(fp)
 400f140:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 400f144:	e0bffe17 	ldw	r2,-8(fp)
 400f148:	10000005 	stb	zero,0(r2)
 400f14c:	00000406 	br	400f160 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 400f150:	e0fffe17 	ldw	r3,-8(fp)
 400f154:	008007c4 	movi	r2,31
 400f158:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 400f15c:	e03ffc15 	stw	zero,-16(fp)
 400f160:	e0bffa17 	ldw	r2,-24(fp)
 400f164:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f168:	e0bff817 	ldw	r2,-32(fp)
 400f16c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 400f170:	e0bffc17 	ldw	r2,-16(fp)
 400f174:	e0bfff15 	stw	r2,-4(fp)
 400f178:	e0bfff17 	ldw	r2,-4(fp)
}
 400f17c:	e037883a 	mov	sp,fp
 400f180:	df000017 	ldw	fp,0(sp)
 400f184:	dec00104 	addi	sp,sp,4
 400f188:	f800283a 	ret

0400f18c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 400f18c:	defff304 	addi	sp,sp,-52
 400f190:	dfc00c15 	stw	ra,48(sp)
 400f194:	df000b15 	stw	fp,44(sp)
 400f198:	df000b04 	addi	fp,sp,44
 400f19c:	e13ffd15 	stw	r4,-12(fp)
 400f1a0:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400f1a4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 400f1a8:	008100b4 	movhi	r2,1026
 400f1ac:	10a1ec04 	addi	r2,r2,-30800
 400f1b0:	10800003 	ldbu	r2,0(r2)
 400f1b4:	10803fcc 	andi	r2,r2,255
 400f1b8:	1005003a 	cmpeq	r2,r2,zero
 400f1bc:	1000021e 	bne	r2,zero,400f1c8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 400f1c0:	e03fff15 	stw	zero,-4(fp)
 400f1c4:	00007006 	br	400f388 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f1c8:	0005303a 	rdctl	r2,status
 400f1cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f1d0:	e0fff917 	ldw	r3,-28(fp)
 400f1d4:	00bfff84 	movi	r2,-2
 400f1d8:	1884703a 	and	r2,r3,r2
 400f1dc:	1001703a 	wrctl	status,r2
  
  return context;
 400f1e0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400f1e4:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 400f1e8:	008100b4 	movhi	r2,1026
 400f1ec:	10a1eb04 	addi	r2,r2,-30804
 400f1f0:	10800017 	ldw	r2,0(r2)
 400f1f4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 400f1f8:	008100b4 	movhi	r2,1026
 400f1fc:	10a1eb04 	addi	r2,r2,-30804
 400f200:	10800017 	ldw	r2,0(r2)
 400f204:	1005003a 	cmpeq	r2,r2,zero
 400f208:	1000081e 	bne	r2,zero,400f22c <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 400f20c:	008100b4 	movhi	r2,1026
 400f210:	10a1eb04 	addi	r2,r2,-30804
 400f214:	10800017 	ldw	r2,0(r2)
 400f218:	10800117 	ldw	r2,4(r2)
 400f21c:	1007883a 	mov	r3,r2
 400f220:	008100b4 	movhi	r2,1026
 400f224:	10a1eb04 	addi	r2,r2,-30804
 400f228:	10c00015 	stw	r3,0(r2)
 400f22c:	e0bffa17 	ldw	r2,-24(fp)
 400f230:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f234:	e0bff817 	ldw	r2,-32(fp)
 400f238:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 400f23c:	e0bffc17 	ldw	r2,-16(fp)
 400f240:	1005003a 	cmpeq	r2,r2,zero
 400f244:	10004e1e 	bne	r2,zero,400f380 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f248:	0005303a 	rdctl	r2,status
 400f24c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f250:	e0fff717 	ldw	r3,-36(fp)
 400f254:	00bfff84 	movi	r2,-2
 400f258:	1884703a 	and	r2,r3,r2
 400f25c:	1001703a 	wrctl	status,r2
  
  return context;
 400f260:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 400f264:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 400f268:	008100b4 	movhi	r2,1026
 400f26c:	10a1e904 	addi	r2,r2,-30812
 400f270:	10800017 	ldw	r2,0(r2)
 400f274:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 400f278:	e0bffb17 	ldw	r2,-20(fp)
 400f27c:	1005003a 	cmpeq	r2,r2,zero
 400f280:	1000311e 	bne	r2,zero,400f348 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 400f284:	008100b4 	movhi	r2,1026
 400f288:	10a1e904 	addi	r2,r2,-30812
 400f28c:	10800017 	ldw	r2,0(r2)
 400f290:	10c00017 	ldw	r3,0(r2)
 400f294:	008100b4 	movhi	r2,1026
 400f298:	10a1e904 	addi	r2,r2,-30812
 400f29c:	10c00015 	stw	r3,0(r2)
 400f2a0:	e0bffa17 	ldw	r2,-24(fp)
 400f2a4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f2a8:	e0bff617 	ldw	r2,-40(fp)
 400f2ac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 400f2b0:	e0fffb17 	ldw	r3,-20(fp)
 400f2b4:	e0bffd17 	ldw	r2,-12(fp)
 400f2b8:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 400f2bc:	e0bffe0b 	ldhu	r2,-8(fp)
 400f2c0:	1085883a 	add	r2,r2,r2
 400f2c4:	1085883a 	add	r2,r2,r2
 400f2c8:	1007883a 	mov	r3,r2
 400f2cc:	e0bffd17 	ldw	r2,-12(fp)
 400f2d0:	1887883a 	add	r3,r3,r2
 400f2d4:	e0bffb17 	ldw	r2,-20(fp)
 400f2d8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 400f2dc:	e0fffb17 	ldw	r3,-20(fp)
 400f2e0:	e0bffd17 	ldw	r2,-12(fp)
 400f2e4:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 400f2e8:	e0fffb17 	ldw	r3,-20(fp)
 400f2ec:	e0bffd17 	ldw	r2,-12(fp)
 400f2f0:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 400f2f4:	e0fffb17 	ldw	r3,-20(fp)
 400f2f8:	e0bffe0b 	ldhu	r2,-8(fp)
 400f2fc:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 400f300:	e0bffb17 	ldw	r2,-20(fp)
 400f304:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 400f308:	e0fffc17 	ldw	r3,-16(fp)
 400f30c:	00800084 	movi	r2,2
 400f310:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 400f314:	e0bffc17 	ldw	r2,-16(fp)
 400f318:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 400f31c:	e0fffc17 	ldw	r3,-16(fp)
 400f320:	e0bffb17 	ldw	r2,-20(fp)
 400f324:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 400f328:	e0fffc17 	ldw	r3,-16(fp)
 400f32c:	00800fc4 	movi	r2,63
 400f330:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 400f334:	e0bffc17 	ldw	r2,-16(fp)
 400f338:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 400f33c:	e13ffc17 	ldw	r4,-16(fp)
 400f340:	400c1cc0 	call	400c1cc <OS_EventWaitListInit>
 400f344:	00000e06 	br	400f380 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 400f348:	008100b4 	movhi	r2,1026
 400f34c:	10a1eb04 	addi	r2,r2,-30804
 400f350:	10c00017 	ldw	r3,0(r2)
 400f354:	e0bffc17 	ldw	r2,-16(fp)
 400f358:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 400f35c:	00c100b4 	movhi	r3,1026
 400f360:	18e1eb04 	addi	r3,r3,-30804
 400f364:	e0bffc17 	ldw	r2,-16(fp)
 400f368:	18800015 	stw	r2,0(r3)
 400f36c:	e0bffa17 	ldw	r2,-24(fp)
 400f370:	e0bff515 	stw	r2,-44(fp)
 400f374:	e0bff517 	ldw	r2,-44(fp)
 400f378:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 400f37c:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 400f380:	e0bffc17 	ldw	r2,-16(fp)
 400f384:	e0bfff15 	stw	r2,-4(fp)
 400f388:	e0bfff17 	ldw	r2,-4(fp)
}
 400f38c:	e037883a 	mov	sp,fp
 400f390:	dfc00117 	ldw	ra,4(sp)
 400f394:	df000017 	ldw	fp,0(sp)
 400f398:	dec00204 	addi	sp,sp,8
 400f39c:	f800283a 	ret

0400f3a0 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 400f3a0:	defff004 	addi	sp,sp,-64
 400f3a4:	dfc00f15 	stw	ra,60(sp)
 400f3a8:	df000e15 	stw	fp,56(sp)
 400f3ac:	df000e04 	addi	fp,sp,56
 400f3b0:	e13ffb15 	stw	r4,-20(fp)
 400f3b4:	e1bffd15 	stw	r6,-12(fp)
 400f3b8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400f3bc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400f3c0:	e0bffd17 	ldw	r2,-12(fp)
 400f3c4:	1004c03a 	cmpne	r2,r2,zero
 400f3c8:	1000031e 	bne	r2,zero,400f3d8 <OSQDel+0x38>
        return (pevent);
 400f3cc:	e0bffb17 	ldw	r2,-20(fp)
 400f3d0:	e0bfff15 	stw	r2,-4(fp)
 400f3d4:	0000ac06 	br	400f688 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 400f3d8:	e0bffb17 	ldw	r2,-20(fp)
 400f3dc:	1004c03a 	cmpne	r2,r2,zero
 400f3e0:	1000061e 	bne	r2,zero,400f3fc <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 400f3e4:	e0fffd17 	ldw	r3,-12(fp)
 400f3e8:	00800104 	movi	r2,4
 400f3ec:	18800005 	stb	r2,0(r3)
        return (pevent);
 400f3f0:	e0fffb17 	ldw	r3,-20(fp)
 400f3f4:	e0ffff15 	stw	r3,-4(fp)
 400f3f8:	0000a306 	br	400f688 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 400f3fc:	e0bffb17 	ldw	r2,-20(fp)
 400f400:	10800003 	ldbu	r2,0(r2)
 400f404:	10803fcc 	andi	r2,r2,255
 400f408:	108000a0 	cmpeqi	r2,r2,2
 400f40c:	1000061e 	bne	r2,zero,400f428 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 400f410:	e0fffd17 	ldw	r3,-12(fp)
 400f414:	00800044 	movi	r2,1
 400f418:	18800005 	stb	r2,0(r3)
        return (pevent);
 400f41c:	e0bffb17 	ldw	r2,-20(fp)
 400f420:	e0bfff15 	stw	r2,-4(fp)
 400f424:	00009806 	br	400f688 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 400f428:	008100b4 	movhi	r2,1026
 400f42c:	10a1ec04 	addi	r2,r2,-30800
 400f430:	10800003 	ldbu	r2,0(r2)
 400f434:	10803fcc 	andi	r2,r2,255
 400f438:	1005003a 	cmpeq	r2,r2,zero
 400f43c:	1000061e 	bne	r2,zero,400f458 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 400f440:	e0fffd17 	ldw	r3,-12(fp)
 400f444:	008003c4 	movi	r2,15
 400f448:	18800005 	stb	r2,0(r3)
        return (pevent);
 400f44c:	e0fffb17 	ldw	r3,-20(fp)
 400f450:	e0ffff15 	stw	r3,-4(fp)
 400f454:	00008c06 	br	400f688 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f458:	0005303a 	rdctl	r2,status
 400f45c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f460:	e0fff617 	ldw	r3,-40(fp)
 400f464:	00bfff84 	movi	r2,-2
 400f468:	1884703a 	and	r2,r3,r2
 400f46c:	1001703a 	wrctl	status,r2
  
  return context;
 400f470:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 400f474:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 400f478:	e0bffb17 	ldw	r2,-20(fp)
 400f47c:	10800283 	ldbu	r2,10(r2)
 400f480:	10803fcc 	andi	r2,r2,255
 400f484:	1005003a 	cmpeq	r2,r2,zero
 400f488:	1000031e 	bne	r2,zero,400f498 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 400f48c:	00800044 	movi	r2,1
 400f490:	e0bffa05 	stb	r2,-24(fp)
 400f494:	00000106 	br	400f49c <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 400f498:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 400f49c:	e0bffc03 	ldbu	r2,-16(fp)
 400f4a0:	e0bffe15 	stw	r2,-8(fp)
 400f4a4:	e0fffe17 	ldw	r3,-8(fp)
 400f4a8:	1805003a 	cmpeq	r2,r3,zero
 400f4ac:	1000041e 	bne	r2,zero,400f4c0 <OSQDel+0x120>
 400f4b0:	e0fffe17 	ldw	r3,-8(fp)
 400f4b4:	18800060 	cmpeqi	r2,r3,1
 400f4b8:	1000391e 	bne	r2,zero,400f5a0 <OSQDel+0x200>
 400f4bc:	00006706 	br	400f65c <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 400f4c0:	e0bffa03 	ldbu	r2,-24(fp)
 400f4c4:	1004c03a 	cmpne	r2,r2,zero
 400f4c8:	1000261e 	bne	r2,zero,400f564 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 400f4cc:	e0fffb17 	ldw	r3,-20(fp)
 400f4d0:	00800fc4 	movi	r2,63
 400f4d4:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 400f4d8:	e0bffb17 	ldw	r2,-20(fp)
 400f4dc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 400f4e0:	e0bffb17 	ldw	r2,-20(fp)
 400f4e4:	10800117 	ldw	r2,4(r2)
 400f4e8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 400f4ec:	008100b4 	movhi	r2,1026
 400f4f0:	10a1e904 	addi	r2,r2,-30812
 400f4f4:	10c00017 	ldw	r3,0(r2)
 400f4f8:	e0bff817 	ldw	r2,-32(fp)
 400f4fc:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 400f500:	00c100b4 	movhi	r3,1026
 400f504:	18e1e904 	addi	r3,r3,-30812
 400f508:	e0bff817 	ldw	r2,-32(fp)
 400f50c:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 400f510:	e0bffb17 	ldw	r2,-20(fp)
 400f514:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 400f518:	008100b4 	movhi	r2,1026
 400f51c:	10a1eb04 	addi	r2,r2,-30804
 400f520:	10c00017 	ldw	r3,0(r2)
 400f524:	e0bffb17 	ldw	r2,-20(fp)
 400f528:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 400f52c:	e0bffb17 	ldw	r2,-20(fp)
 400f530:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 400f534:	00c100b4 	movhi	r3,1026
 400f538:	18e1eb04 	addi	r3,r3,-30804
 400f53c:	e0bffb17 	ldw	r2,-20(fp)
 400f540:	18800015 	stw	r2,0(r3)
 400f544:	e0bff717 	ldw	r2,-36(fp)
 400f548:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f54c:	e0bff517 	ldw	r2,-44(fp)
 400f550:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 400f554:	e0bffd17 	ldw	r2,-12(fp)
 400f558:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 400f55c:	e03ff915 	stw	zero,-28(fp)
 400f560:	00004706 	br	400f680 <OSQDel+0x2e0>
 400f564:	e0bff717 	ldw	r2,-36(fp)
 400f568:	e0bff415 	stw	r2,-48(fp)
 400f56c:	e0bff417 	ldw	r2,-48(fp)
 400f570:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 400f574:	e0fffd17 	ldw	r3,-12(fp)
 400f578:	00801244 	movi	r2,73
 400f57c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 400f580:	e0bffb17 	ldw	r2,-20(fp)
 400f584:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 400f588:	00003d06 	br	400f680 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 400f58c:	e13ffb17 	ldw	r4,-20(fp)
 400f590:	000b883a 	mov	r5,zero
 400f594:	01800104 	movi	r6,4
 400f598:	000f883a 	mov	r7,zero
 400f59c:	400bc180 	call	400bc18 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 400f5a0:	e0bffb17 	ldw	r2,-20(fp)
 400f5a4:	10800283 	ldbu	r2,10(r2)
 400f5a8:	10803fcc 	andi	r2,r2,255
 400f5ac:	1004c03a 	cmpne	r2,r2,zero
 400f5b0:	103ff61e 	bne	r2,zero,400f58c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 400f5b4:	e0fffb17 	ldw	r3,-20(fp)
 400f5b8:	00800fc4 	movi	r2,63
 400f5bc:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 400f5c0:	e0bffb17 	ldw	r2,-20(fp)
 400f5c4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 400f5c8:	e0bffb17 	ldw	r2,-20(fp)
 400f5cc:	10800117 	ldw	r2,4(r2)
 400f5d0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 400f5d4:	008100b4 	movhi	r2,1026
 400f5d8:	10a1e904 	addi	r2,r2,-30812
 400f5dc:	10c00017 	ldw	r3,0(r2)
 400f5e0:	e0bff817 	ldw	r2,-32(fp)
 400f5e4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 400f5e8:	00c100b4 	movhi	r3,1026
 400f5ec:	18e1e904 	addi	r3,r3,-30812
 400f5f0:	e0bff817 	ldw	r2,-32(fp)
 400f5f4:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 400f5f8:	e0bffb17 	ldw	r2,-20(fp)
 400f5fc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 400f600:	008100b4 	movhi	r2,1026
 400f604:	10a1eb04 	addi	r2,r2,-30804
 400f608:	10c00017 	ldw	r3,0(r2)
 400f60c:	e0bffb17 	ldw	r2,-20(fp)
 400f610:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 400f614:	e0bffb17 	ldw	r2,-20(fp)
 400f618:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 400f61c:	00c100b4 	movhi	r3,1026
 400f620:	18e1eb04 	addi	r3,r3,-30804
 400f624:	e0bffb17 	ldw	r2,-20(fp)
 400f628:	18800015 	stw	r2,0(r3)
 400f62c:	e0bff717 	ldw	r2,-36(fp)
 400f630:	e0bff315 	stw	r2,-52(fp)
 400f634:	e0bff317 	ldw	r2,-52(fp)
 400f638:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 400f63c:	e0bffa03 	ldbu	r2,-24(fp)
 400f640:	10800058 	cmpnei	r2,r2,1
 400f644:	1000011e 	bne	r2,zero,400f64c <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 400f648:	400c6580 	call	400c658 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 400f64c:	e0bffd17 	ldw	r2,-12(fp)
 400f650:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 400f654:	e03ff915 	stw	zero,-28(fp)
             break;
 400f658:	00000906 	br	400f680 <OSQDel+0x2e0>
 400f65c:	e0bff717 	ldw	r2,-36(fp)
 400f660:	e0bff215 	stw	r2,-56(fp)
 400f664:	e0bff217 	ldw	r2,-56(fp)
 400f668:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 400f66c:	e0fffd17 	ldw	r3,-12(fp)
 400f670:	008001c4 	movi	r2,7
 400f674:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 400f678:	e0bffb17 	ldw	r2,-20(fp)
 400f67c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 400f680:	e0bff917 	ldw	r2,-28(fp)
 400f684:	e0bfff15 	stw	r2,-4(fp)
 400f688:	e0bfff17 	ldw	r2,-4(fp)
}
 400f68c:	e037883a 	mov	sp,fp
 400f690:	dfc00117 	ldw	ra,4(sp)
 400f694:	df000017 	ldw	fp,0(sp)
 400f698:	dec00204 	addi	sp,sp,8
 400f69c:	f800283a 	ret

0400f6a0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 400f6a0:	defff904 	addi	sp,sp,-28
 400f6a4:	df000615 	stw	fp,24(sp)
 400f6a8:	df000604 	addi	fp,sp,24
 400f6ac:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400f6b0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 400f6b4:	e0bffe17 	ldw	r2,-8(fp)
 400f6b8:	1004c03a 	cmpne	r2,r2,zero
 400f6bc:	1000031e 	bne	r2,zero,400f6cc <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 400f6c0:	00800104 	movi	r2,4
 400f6c4:	e0bfff15 	stw	r2,-4(fp)
 400f6c8:	00002206 	br	400f754 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 400f6cc:	e0bffe17 	ldw	r2,-8(fp)
 400f6d0:	10800003 	ldbu	r2,0(r2)
 400f6d4:	10803fcc 	andi	r2,r2,255
 400f6d8:	108000a0 	cmpeqi	r2,r2,2
 400f6dc:	1000031e 	bne	r2,zero,400f6ec <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 400f6e0:	00800044 	movi	r2,1
 400f6e4:	e0bfff15 	stw	r2,-4(fp)
 400f6e8:	00001a06 	br	400f754 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f6ec:	0005303a 	rdctl	r2,status
 400f6f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f6f4:	e0fffb17 	ldw	r3,-20(fp)
 400f6f8:	00bfff84 	movi	r2,-2
 400f6fc:	1884703a 	and	r2,r3,r2
 400f700:	1001703a 	wrctl	status,r2
  
  return context;
 400f704:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400f708:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 400f70c:	e0bffe17 	ldw	r2,-8(fp)
 400f710:	10800117 	ldw	r2,4(r2)
 400f714:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 400f718:	e0bffd17 	ldw	r2,-12(fp)
 400f71c:	10c00117 	ldw	r3,4(r2)
 400f720:	e0bffd17 	ldw	r2,-12(fp)
 400f724:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 400f728:	e0bffd17 	ldw	r2,-12(fp)
 400f72c:	10c00117 	ldw	r3,4(r2)
 400f730:	e0bffd17 	ldw	r2,-12(fp)
 400f734:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 400f738:	e0bffd17 	ldw	r2,-12(fp)
 400f73c:	1000058d 	sth	zero,22(r2)
 400f740:	e0bffc17 	ldw	r2,-16(fp)
 400f744:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f748:	e0bffa17 	ldw	r2,-24(fp)
 400f74c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 400f750:	e03fff15 	stw	zero,-4(fp)
 400f754:	e0bfff17 	ldw	r2,-4(fp)
}
 400f758:	e037883a 	mov	sp,fp
 400f75c:	df000017 	ldw	fp,0(sp)
 400f760:	dec00104 	addi	sp,sp,4
 400f764:	f800283a 	ret

0400f768 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 400f768:	defff104 	addi	sp,sp,-60
 400f76c:	dfc00e15 	stw	ra,56(sp)
 400f770:	df000d15 	stw	fp,52(sp)
 400f774:	df000d04 	addi	fp,sp,52
 400f778:	e13ffb15 	stw	r4,-20(fp)
 400f77c:	e1bffd15 	stw	r6,-12(fp)
 400f780:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400f784:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400f788:	e0bffd17 	ldw	r2,-12(fp)
 400f78c:	1004c03a 	cmpne	r2,r2,zero
 400f790:	1000021e 	bne	r2,zero,400f79c <OSQPend+0x34>
        return ((void *)0);
 400f794:	e03fff15 	stw	zero,-4(fp)
 400f798:	0000b506 	br	400fa70 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 400f79c:	e0bffb17 	ldw	r2,-20(fp)
 400f7a0:	1004c03a 	cmpne	r2,r2,zero
 400f7a4:	1000051e 	bne	r2,zero,400f7bc <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 400f7a8:	e0fffd17 	ldw	r3,-12(fp)
 400f7ac:	00800104 	movi	r2,4
 400f7b0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400f7b4:	e03fff15 	stw	zero,-4(fp)
 400f7b8:	0000ad06 	br	400fa70 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 400f7bc:	e0bffb17 	ldw	r2,-20(fp)
 400f7c0:	10800003 	ldbu	r2,0(r2)
 400f7c4:	10803fcc 	andi	r2,r2,255
 400f7c8:	108000a0 	cmpeqi	r2,r2,2
 400f7cc:	1000051e 	bne	r2,zero,400f7e4 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 400f7d0:	e0fffd17 	ldw	r3,-12(fp)
 400f7d4:	00800044 	movi	r2,1
 400f7d8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400f7dc:	e03fff15 	stw	zero,-4(fp)
 400f7e0:	0000a306 	br	400fa70 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 400f7e4:	008100b4 	movhi	r2,1026
 400f7e8:	10a1ec04 	addi	r2,r2,-30800
 400f7ec:	10800003 	ldbu	r2,0(r2)
 400f7f0:	10803fcc 	andi	r2,r2,255
 400f7f4:	1005003a 	cmpeq	r2,r2,zero
 400f7f8:	1000051e 	bne	r2,zero,400f810 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 400f7fc:	e0fffd17 	ldw	r3,-12(fp)
 400f800:	00800084 	movi	r2,2
 400f804:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400f808:	e03fff15 	stw	zero,-4(fp)
 400f80c:	00009806 	br	400fa70 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 400f810:	008100b4 	movhi	r2,1026
 400f814:	10a1de04 	addi	r2,r2,-30856
 400f818:	10800003 	ldbu	r2,0(r2)
 400f81c:	10803fcc 	andi	r2,r2,255
 400f820:	1005003a 	cmpeq	r2,r2,zero
 400f824:	1000051e 	bne	r2,zero,400f83c <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 400f828:	e0fffd17 	ldw	r3,-12(fp)
 400f82c:	00800344 	movi	r2,13
 400f830:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400f834:	e03fff15 	stw	zero,-4(fp)
 400f838:	00008d06 	br	400fa70 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f83c:	0005303a 	rdctl	r2,status
 400f840:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f844:	e0fff717 	ldw	r3,-36(fp)
 400f848:	00bfff84 	movi	r2,-2
 400f84c:	1884703a 	and	r2,r3,r2
 400f850:	1001703a 	wrctl	status,r2
  
  return context;
 400f854:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 400f858:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 400f85c:	e0bffb17 	ldw	r2,-20(fp)
 400f860:	10800117 	ldw	r2,4(r2)
 400f864:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 400f868:	e0bff917 	ldw	r2,-28(fp)
 400f86c:	1080058b 	ldhu	r2,22(r2)
 400f870:	10bfffcc 	andi	r2,r2,65535
 400f874:	1005003a 	cmpeq	r2,r2,zero
 400f878:	10001f1e 	bne	r2,zero,400f8f8 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 400f87c:	e0bff917 	ldw	r2,-28(fp)
 400f880:	10c00417 	ldw	r3,16(r2)
 400f884:	18800017 	ldw	r2,0(r3)
 400f888:	e0bffa15 	stw	r2,-24(fp)
 400f88c:	18c00104 	addi	r3,r3,4
 400f890:	e0bff917 	ldw	r2,-28(fp)
 400f894:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 400f898:	e0bff917 	ldw	r2,-28(fp)
 400f89c:	1080058b 	ldhu	r2,22(r2)
 400f8a0:	10bfffc4 	addi	r2,r2,-1
 400f8a4:	1007883a 	mov	r3,r2
 400f8a8:	e0bff917 	ldw	r2,-28(fp)
 400f8ac:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 400f8b0:	e0bff917 	ldw	r2,-28(fp)
 400f8b4:	10c00417 	ldw	r3,16(r2)
 400f8b8:	e0bff917 	ldw	r2,-28(fp)
 400f8bc:	10800217 	ldw	r2,8(r2)
 400f8c0:	1880041e 	bne	r3,r2,400f8d4 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 400f8c4:	e0bff917 	ldw	r2,-28(fp)
 400f8c8:	10c00117 	ldw	r3,4(r2)
 400f8cc:	e0bff917 	ldw	r2,-28(fp)
 400f8d0:	10c00415 	stw	r3,16(r2)
 400f8d4:	e0bff817 	ldw	r2,-32(fp)
 400f8d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f8dc:	e0bff617 	ldw	r2,-40(fp)
 400f8e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 400f8e4:	e0bffd17 	ldw	r2,-12(fp)
 400f8e8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 400f8ec:	e0bffa17 	ldw	r2,-24(fp)
 400f8f0:	e0bfff15 	stw	r2,-4(fp)
 400f8f4:	00005e06 	br	400fa70 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 400f8f8:	008100b4 	movhi	r2,1026
 400f8fc:	10a1ed04 	addi	r2,r2,-30796
 400f900:	10c00017 	ldw	r3,0(r2)
 400f904:	008100b4 	movhi	r2,1026
 400f908:	10a1ed04 	addi	r2,r2,-30796
 400f90c:	10800017 	ldw	r2,0(r2)
 400f910:	10800c03 	ldbu	r2,48(r2)
 400f914:	10800114 	ori	r2,r2,4
 400f918:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 400f91c:	008100b4 	movhi	r2,1026
 400f920:	10a1ed04 	addi	r2,r2,-30796
 400f924:	10800017 	ldw	r2,0(r2)
 400f928:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 400f92c:	008100b4 	movhi	r2,1026
 400f930:	10a1ed04 	addi	r2,r2,-30796
 400f934:	10c00017 	ldw	r3,0(r2)
 400f938:	e0bffc0b 	ldhu	r2,-16(fp)
 400f93c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 400f940:	e13ffb17 	ldw	r4,-20(fp)
 400f944:	400bdac0 	call	400bdac <OS_EventTaskWait>
 400f948:	e0bff817 	ldw	r2,-32(fp)
 400f94c:	e0bff515 	stw	r2,-44(fp)
 400f950:	e0bff517 	ldw	r2,-44(fp)
 400f954:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 400f958:	400c6580 	call	400c658 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f95c:	0005303a 	rdctl	r2,status
 400f960:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f964:	e0fff417 	ldw	r3,-48(fp)
 400f968:	00bfff84 	movi	r2,-2
 400f96c:	1884703a 	and	r2,r3,r2
 400f970:	1001703a 	wrctl	status,r2
  
  return context;
 400f974:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 400f978:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 400f97c:	008100b4 	movhi	r2,1026
 400f980:	10a1ed04 	addi	r2,r2,-30796
 400f984:	10800017 	ldw	r2,0(r2)
 400f988:	10800c43 	ldbu	r2,49(r2)
 400f98c:	10803fcc 	andi	r2,r2,255
 400f990:	e0bffe15 	stw	r2,-8(fp)
 400f994:	e0fffe17 	ldw	r3,-8(fp)
 400f998:	1805003a 	cmpeq	r2,r3,zero
 400f99c:	1000041e 	bne	r2,zero,400f9b0 <OSQPend+0x248>
 400f9a0:	e0fffe17 	ldw	r3,-8(fp)
 400f9a4:	188000a0 	cmpeqi	r2,r3,2
 400f9a8:	1000091e 	bne	r2,zero,400f9d0 <OSQPend+0x268>
 400f9ac:	00000d06 	br	400f9e4 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 400f9b0:	008100b4 	movhi	r2,1026
 400f9b4:	10a1ed04 	addi	r2,r2,-30796
 400f9b8:	10800017 	ldw	r2,0(r2)
 400f9bc:	10800917 	ldw	r2,36(r2)
 400f9c0:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 400f9c4:	e0bffd17 	ldw	r2,-12(fp)
 400f9c8:	10000005 	stb	zero,0(r2)
             break;
 400f9cc:	00000e06 	br	400fa08 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 400f9d0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 400f9d4:	e0fffd17 	ldw	r3,-12(fp)
 400f9d8:	00800384 	movi	r2,14
 400f9dc:	18800005 	stb	r2,0(r3)
             break;
 400f9e0:	00000906 	br	400fa08 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 400f9e4:	008100b4 	movhi	r2,1026
 400f9e8:	10a1ed04 	addi	r2,r2,-30796
 400f9ec:	11000017 	ldw	r4,0(r2)
 400f9f0:	e17ffb17 	ldw	r5,-20(fp)
 400f9f4:	400c0100 	call	400c010 <OS_EventTaskRemove>
             pmsg = (void *)0;
 400f9f8:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 400f9fc:	e0fffd17 	ldw	r3,-12(fp)
 400fa00:	00800284 	movi	r2,10
 400fa04:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 400fa08:	008100b4 	movhi	r2,1026
 400fa0c:	10a1ed04 	addi	r2,r2,-30796
 400fa10:	10800017 	ldw	r2,0(r2)
 400fa14:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 400fa18:	008100b4 	movhi	r2,1026
 400fa1c:	10a1ed04 	addi	r2,r2,-30796
 400fa20:	10800017 	ldw	r2,0(r2)
 400fa24:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 400fa28:	008100b4 	movhi	r2,1026
 400fa2c:	10a1ed04 	addi	r2,r2,-30796
 400fa30:	10800017 	ldw	r2,0(r2)
 400fa34:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 400fa38:	008100b4 	movhi	r2,1026
 400fa3c:	10a1ed04 	addi	r2,r2,-30796
 400fa40:	10800017 	ldw	r2,0(r2)
 400fa44:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 400fa48:	008100b4 	movhi	r2,1026
 400fa4c:	10a1ed04 	addi	r2,r2,-30796
 400fa50:	10800017 	ldw	r2,0(r2)
 400fa54:	10000915 	stw	zero,36(r2)
 400fa58:	e0bff817 	ldw	r2,-32(fp)
 400fa5c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fa60:	e0bff317 	ldw	r2,-52(fp)
 400fa64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 400fa68:	e0bffa17 	ldw	r2,-24(fp)
 400fa6c:	e0bfff15 	stw	r2,-4(fp)
 400fa70:	e0bfff17 	ldw	r2,-4(fp)
}
 400fa74:	e037883a 	mov	sp,fp
 400fa78:	dfc00117 	ldw	ra,4(sp)
 400fa7c:	df000017 	ldw	fp,0(sp)
 400fa80:	dec00204 	addi	sp,sp,8
 400fa84:	f800283a 	ret

0400fa88 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 400fa88:	defff504 	addi	sp,sp,-44
 400fa8c:	dfc00a15 	stw	ra,40(sp)
 400fa90:	df000915 	stw	fp,36(sp)
 400fa94:	df000904 	addi	fp,sp,36
 400fa98:	e13ffc15 	stw	r4,-16(fp)
 400fa9c:	e1bffe15 	stw	r6,-8(fp)
 400faa0:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400faa4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400faa8:	e0bffe17 	ldw	r2,-8(fp)
 400faac:	1004c03a 	cmpne	r2,r2,zero
 400fab0:	1000021e 	bne	r2,zero,400fabc <OSQPendAbort+0x34>
        return (0);
 400fab4:	e03fff15 	stw	zero,-4(fp)
 400fab8:	00004c06 	br	400fbec <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 400fabc:	e0bffc17 	ldw	r2,-16(fp)
 400fac0:	1004c03a 	cmpne	r2,r2,zero
 400fac4:	1000051e 	bne	r2,zero,400fadc <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 400fac8:	e0fffe17 	ldw	r3,-8(fp)
 400facc:	00800104 	movi	r2,4
 400fad0:	18800005 	stb	r2,0(r3)
        return (0);
 400fad4:	e03fff15 	stw	zero,-4(fp)
 400fad8:	00004406 	br	400fbec <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 400fadc:	e0bffc17 	ldw	r2,-16(fp)
 400fae0:	10800003 	ldbu	r2,0(r2)
 400fae4:	10803fcc 	andi	r2,r2,255
 400fae8:	108000a0 	cmpeqi	r2,r2,2
 400faec:	1000051e 	bne	r2,zero,400fb04 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 400faf0:	e0fffe17 	ldw	r3,-8(fp)
 400faf4:	00800044 	movi	r2,1
 400faf8:	18800005 	stb	r2,0(r3)
        return (0);
 400fafc:	e03fff15 	stw	zero,-4(fp)
 400fb00:	00003a06 	br	400fbec <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fb04:	0005303a 	rdctl	r2,status
 400fb08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fb0c:	e0fff917 	ldw	r3,-28(fp)
 400fb10:	00bfff84 	movi	r2,-2
 400fb14:	1884703a 	and	r2,r3,r2
 400fb18:	1001703a 	wrctl	status,r2
  
  return context;
 400fb1c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400fb20:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 400fb24:	e0bffc17 	ldw	r2,-16(fp)
 400fb28:	10800283 	ldbu	r2,10(r2)
 400fb2c:	10803fcc 	andi	r2,r2,255
 400fb30:	1005003a 	cmpeq	r2,r2,zero
 400fb34:	1000261e 	bne	r2,zero,400fbd0 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 400fb38:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 400fb3c:	e0bffd03 	ldbu	r2,-12(fp)
 400fb40:	10800060 	cmpeqi	r2,r2,1
 400fb44:	1000091e 	bne	r2,zero,400fb6c <OSQPendAbort+0xe4>
 400fb48:	00000e06 	br	400fb84 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 400fb4c:	e13ffc17 	ldw	r4,-16(fp)
 400fb50:	000b883a 	mov	r5,zero
 400fb54:	01800104 	movi	r6,4
 400fb58:	01c00084 	movi	r7,2
 400fb5c:	400bc180 	call	400bc18 <OS_EventTaskRdy>
                     nbr_tasks++;
 400fb60:	e0bffb03 	ldbu	r2,-20(fp)
 400fb64:	10800044 	addi	r2,r2,1
 400fb68:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 400fb6c:	e0bffc17 	ldw	r2,-16(fp)
 400fb70:	10800283 	ldbu	r2,10(r2)
 400fb74:	10803fcc 	andi	r2,r2,255
 400fb78:	1004c03a 	cmpne	r2,r2,zero
 400fb7c:	103ff31e 	bne	r2,zero,400fb4c <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 400fb80:	00000806 	br	400fba4 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 400fb84:	e13ffc17 	ldw	r4,-16(fp)
 400fb88:	000b883a 	mov	r5,zero
 400fb8c:	01800104 	movi	r6,4
 400fb90:	01c00084 	movi	r7,2
 400fb94:	400bc180 	call	400bc18 <OS_EventTaskRdy>
                 nbr_tasks++;
 400fb98:	e0bffb03 	ldbu	r2,-20(fp)
 400fb9c:	10800044 	addi	r2,r2,1
 400fba0:	e0bffb05 	stb	r2,-20(fp)
 400fba4:	e0bffa17 	ldw	r2,-24(fp)
 400fba8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fbac:	e0bff817 	ldw	r2,-32(fp)
 400fbb0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 400fbb4:	400c6580 	call	400c658 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 400fbb8:	e0fffe17 	ldw	r3,-8(fp)
 400fbbc:	00800384 	movi	r2,14
 400fbc0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 400fbc4:	e0bffb03 	ldbu	r2,-20(fp)
 400fbc8:	e0bfff15 	stw	r2,-4(fp)
 400fbcc:	00000706 	br	400fbec <OSQPendAbort+0x164>
 400fbd0:	e0bffa17 	ldw	r2,-24(fp)
 400fbd4:	e0bff715 	stw	r2,-36(fp)
 400fbd8:	e0bff717 	ldw	r2,-36(fp)
 400fbdc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400fbe0:	e0bffe17 	ldw	r2,-8(fp)
 400fbe4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 400fbe8:	e03fff15 	stw	zero,-4(fp)
 400fbec:	e0bfff17 	ldw	r2,-4(fp)
}
 400fbf0:	e037883a 	mov	sp,fp
 400fbf4:	dfc00117 	ldw	ra,4(sp)
 400fbf8:	df000017 	ldw	fp,0(sp)
 400fbfc:	dec00204 	addi	sp,sp,8
 400fc00:	f800283a 	ret

0400fc04 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 400fc04:	defff504 	addi	sp,sp,-44
 400fc08:	dfc00a15 	stw	ra,40(sp)
 400fc0c:	df000915 	stw	fp,36(sp)
 400fc10:	df000904 	addi	fp,sp,36
 400fc14:	e13ffd15 	stw	r4,-12(fp)
 400fc18:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400fc1c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 400fc20:	e0bffd17 	ldw	r2,-12(fp)
 400fc24:	1004c03a 	cmpne	r2,r2,zero
 400fc28:	1000031e 	bne	r2,zero,400fc38 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 400fc2c:	00800104 	movi	r2,4
 400fc30:	e0bfff15 	stw	r2,-4(fp)
 400fc34:	00004d06 	br	400fd6c <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 400fc38:	e0bffd17 	ldw	r2,-12(fp)
 400fc3c:	10800003 	ldbu	r2,0(r2)
 400fc40:	10803fcc 	andi	r2,r2,255
 400fc44:	108000a0 	cmpeqi	r2,r2,2
 400fc48:	1000031e 	bne	r2,zero,400fc58 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 400fc4c:	00800044 	movi	r2,1
 400fc50:	e0bfff15 	stw	r2,-4(fp)
 400fc54:	00004506 	br	400fd6c <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fc58:	0005303a 	rdctl	r2,status
 400fc5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fc60:	e0fffa17 	ldw	r3,-24(fp)
 400fc64:	00bfff84 	movi	r2,-2
 400fc68:	1884703a 	and	r2,r3,r2
 400fc6c:	1001703a 	wrctl	status,r2
  
  return context;
 400fc70:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400fc74:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 400fc78:	e0bffd17 	ldw	r2,-12(fp)
 400fc7c:	10800283 	ldbu	r2,10(r2)
 400fc80:	10803fcc 	andi	r2,r2,255
 400fc84:	1005003a 	cmpeq	r2,r2,zero
 400fc88:	10000c1e 	bne	r2,zero,400fcbc <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 400fc8c:	e13ffd17 	ldw	r4,-12(fp)
 400fc90:	e17ffe17 	ldw	r5,-8(fp)
 400fc94:	01800104 	movi	r6,4
 400fc98:	000f883a 	mov	r7,zero
 400fc9c:	400bc180 	call	400bc18 <OS_EventTaskRdy>
 400fca0:	e0bffb17 	ldw	r2,-20(fp)
 400fca4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fca8:	e0bff917 	ldw	r2,-28(fp)
 400fcac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 400fcb0:	400c6580 	call	400c658 <OS_Sched>
        return (OS_ERR_NONE);
 400fcb4:	e03fff15 	stw	zero,-4(fp)
 400fcb8:	00002c06 	br	400fd6c <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 400fcbc:	e0bffd17 	ldw	r2,-12(fp)
 400fcc0:	10800117 	ldw	r2,4(r2)
 400fcc4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 400fcc8:	e0bffc17 	ldw	r2,-16(fp)
 400fccc:	10c0058b 	ldhu	r3,22(r2)
 400fcd0:	e0bffc17 	ldw	r2,-16(fp)
 400fcd4:	1080050b 	ldhu	r2,20(r2)
 400fcd8:	18ffffcc 	andi	r3,r3,65535
 400fcdc:	10bfffcc 	andi	r2,r2,65535
 400fce0:	18800736 	bltu	r3,r2,400fd00 <OSQPost+0xfc>
 400fce4:	e0bffb17 	ldw	r2,-20(fp)
 400fce8:	e0bff815 	stw	r2,-32(fp)
 400fcec:	e0bff817 	ldw	r2,-32(fp)
 400fcf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 400fcf4:	00800784 	movi	r2,30
 400fcf8:	e0bfff15 	stw	r2,-4(fp)
 400fcfc:	00001b06 	br	400fd6c <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 400fd00:	e0bffc17 	ldw	r2,-16(fp)
 400fd04:	10c00317 	ldw	r3,12(r2)
 400fd08:	e0bffe17 	ldw	r2,-8(fp)
 400fd0c:	18800015 	stw	r2,0(r3)
 400fd10:	18c00104 	addi	r3,r3,4
 400fd14:	e0bffc17 	ldw	r2,-16(fp)
 400fd18:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 400fd1c:	e0bffc17 	ldw	r2,-16(fp)
 400fd20:	1080058b 	ldhu	r2,22(r2)
 400fd24:	10800044 	addi	r2,r2,1
 400fd28:	1007883a 	mov	r3,r2
 400fd2c:	e0bffc17 	ldw	r2,-16(fp)
 400fd30:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 400fd34:	e0bffc17 	ldw	r2,-16(fp)
 400fd38:	10c00317 	ldw	r3,12(r2)
 400fd3c:	e0bffc17 	ldw	r2,-16(fp)
 400fd40:	10800217 	ldw	r2,8(r2)
 400fd44:	1880041e 	bne	r3,r2,400fd58 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 400fd48:	e0bffc17 	ldw	r2,-16(fp)
 400fd4c:	10c00117 	ldw	r3,4(r2)
 400fd50:	e0bffc17 	ldw	r2,-16(fp)
 400fd54:	10c00315 	stw	r3,12(r2)
 400fd58:	e0bffb17 	ldw	r2,-20(fp)
 400fd5c:	e0bff715 	stw	r2,-36(fp)
 400fd60:	e0bff717 	ldw	r2,-36(fp)
 400fd64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 400fd68:	e03fff15 	stw	zero,-4(fp)
 400fd6c:	e0bfff17 	ldw	r2,-4(fp)
}
 400fd70:	e037883a 	mov	sp,fp
 400fd74:	dfc00117 	ldw	ra,4(sp)
 400fd78:	df000017 	ldw	fp,0(sp)
 400fd7c:	dec00204 	addi	sp,sp,8
 400fd80:	f800283a 	ret

0400fd84 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 400fd84:	defff504 	addi	sp,sp,-44
 400fd88:	dfc00a15 	stw	ra,40(sp)
 400fd8c:	df000915 	stw	fp,36(sp)
 400fd90:	df000904 	addi	fp,sp,36
 400fd94:	e13ffd15 	stw	r4,-12(fp)
 400fd98:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400fd9c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 400fda0:	e0bffd17 	ldw	r2,-12(fp)
 400fda4:	1004c03a 	cmpne	r2,r2,zero
 400fda8:	1000031e 	bne	r2,zero,400fdb8 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 400fdac:	00800104 	movi	r2,4
 400fdb0:	e0bfff15 	stw	r2,-4(fp)
 400fdb4:	00004f06 	br	400fef4 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 400fdb8:	e0bffd17 	ldw	r2,-12(fp)
 400fdbc:	10800003 	ldbu	r2,0(r2)
 400fdc0:	10803fcc 	andi	r2,r2,255
 400fdc4:	108000a0 	cmpeqi	r2,r2,2
 400fdc8:	1000031e 	bne	r2,zero,400fdd8 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 400fdcc:	00800044 	movi	r2,1
 400fdd0:	e0bfff15 	stw	r2,-4(fp)
 400fdd4:	00004706 	br	400fef4 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fdd8:	0005303a 	rdctl	r2,status
 400fddc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fde0:	e0fffa17 	ldw	r3,-24(fp)
 400fde4:	00bfff84 	movi	r2,-2
 400fde8:	1884703a 	and	r2,r3,r2
 400fdec:	1001703a 	wrctl	status,r2
  
  return context;
 400fdf0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400fdf4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 400fdf8:	e0bffd17 	ldw	r2,-12(fp)
 400fdfc:	10800283 	ldbu	r2,10(r2)
 400fe00:	10803fcc 	andi	r2,r2,255
 400fe04:	1005003a 	cmpeq	r2,r2,zero
 400fe08:	10000c1e 	bne	r2,zero,400fe3c <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 400fe0c:	e13ffd17 	ldw	r4,-12(fp)
 400fe10:	e17ffe17 	ldw	r5,-8(fp)
 400fe14:	01800104 	movi	r6,4
 400fe18:	000f883a 	mov	r7,zero
 400fe1c:	400bc180 	call	400bc18 <OS_EventTaskRdy>
 400fe20:	e0bffb17 	ldw	r2,-20(fp)
 400fe24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fe28:	e0bff917 	ldw	r2,-28(fp)
 400fe2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 400fe30:	400c6580 	call	400c658 <OS_Sched>
        return (OS_ERR_NONE);
 400fe34:	e03fff15 	stw	zero,-4(fp)
 400fe38:	00002e06 	br	400fef4 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 400fe3c:	e0bffd17 	ldw	r2,-12(fp)
 400fe40:	10800117 	ldw	r2,4(r2)
 400fe44:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 400fe48:	e0bffc17 	ldw	r2,-16(fp)
 400fe4c:	10c0058b 	ldhu	r3,22(r2)
 400fe50:	e0bffc17 	ldw	r2,-16(fp)
 400fe54:	1080050b 	ldhu	r2,20(r2)
 400fe58:	18ffffcc 	andi	r3,r3,65535
 400fe5c:	10bfffcc 	andi	r2,r2,65535
 400fe60:	18800736 	bltu	r3,r2,400fe80 <OSQPostFront+0xfc>
 400fe64:	e0bffb17 	ldw	r2,-20(fp)
 400fe68:	e0bff815 	stw	r2,-32(fp)
 400fe6c:	e0bff817 	ldw	r2,-32(fp)
 400fe70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 400fe74:	00800784 	movi	r2,30
 400fe78:	e0bfff15 	stw	r2,-4(fp)
 400fe7c:	00001d06 	br	400fef4 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 400fe80:	e0bffc17 	ldw	r2,-16(fp)
 400fe84:	10c00417 	ldw	r3,16(r2)
 400fe88:	e0bffc17 	ldw	r2,-16(fp)
 400fe8c:	10800117 	ldw	r2,4(r2)
 400fe90:	1880041e 	bne	r3,r2,400fea4 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 400fe94:	e0bffc17 	ldw	r2,-16(fp)
 400fe98:	10c00217 	ldw	r3,8(r2)
 400fe9c:	e0bffc17 	ldw	r2,-16(fp)
 400fea0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 400fea4:	e0bffc17 	ldw	r2,-16(fp)
 400fea8:	10800417 	ldw	r2,16(r2)
 400feac:	10ffff04 	addi	r3,r2,-4
 400feb0:	e0bffc17 	ldw	r2,-16(fp)
 400feb4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 400feb8:	e0bffc17 	ldw	r2,-16(fp)
 400febc:	10c00417 	ldw	r3,16(r2)
 400fec0:	e0bffe17 	ldw	r2,-8(fp)
 400fec4:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 400fec8:	e0bffc17 	ldw	r2,-16(fp)
 400fecc:	1080058b 	ldhu	r2,22(r2)
 400fed0:	10800044 	addi	r2,r2,1
 400fed4:	1007883a 	mov	r3,r2
 400fed8:	e0bffc17 	ldw	r2,-16(fp)
 400fedc:	10c0058d 	sth	r3,22(r2)
 400fee0:	e0bffb17 	ldw	r2,-20(fp)
 400fee4:	e0bff715 	stw	r2,-36(fp)
 400fee8:	e0bff717 	ldw	r2,-36(fp)
 400feec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 400fef0:	e03fff15 	stw	zero,-4(fp)
 400fef4:	e0bfff17 	ldw	r2,-4(fp)
}
 400fef8:	e037883a 	mov	sp,fp
 400fefc:	dfc00117 	ldw	ra,4(sp)
 400ff00:	df000017 	ldw	fp,0(sp)
 400ff04:	dec00204 	addi	sp,sp,8
 400ff08:	f800283a 	ret

0400ff0c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 400ff0c:	defff404 	addi	sp,sp,-48
 400ff10:	dfc00b15 	stw	ra,44(sp)
 400ff14:	df000a15 	stw	fp,40(sp)
 400ff18:	df000a04 	addi	fp,sp,40
 400ff1c:	e13ffc15 	stw	r4,-16(fp)
 400ff20:	e17ffd15 	stw	r5,-12(fp)
 400ff24:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400ff28:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 400ff2c:	e0bffc17 	ldw	r2,-16(fp)
 400ff30:	1004c03a 	cmpne	r2,r2,zero
 400ff34:	1000031e 	bne	r2,zero,400ff44 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 400ff38:	00800104 	movi	r2,4
 400ff3c:	e0bfff15 	stw	r2,-4(fp)
 400ff40:	00007906 	br	4010128 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 400ff44:	e0bffc17 	ldw	r2,-16(fp)
 400ff48:	10800003 	ldbu	r2,0(r2)
 400ff4c:	10803fcc 	andi	r2,r2,255
 400ff50:	108000a0 	cmpeqi	r2,r2,2
 400ff54:	1000031e 	bne	r2,zero,400ff64 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 400ff58:	00800044 	movi	r2,1
 400ff5c:	e0bfff15 	stw	r2,-4(fp)
 400ff60:	00007106 	br	4010128 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ff64:	0005303a 	rdctl	r2,status
 400ff68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ff6c:	e0fff917 	ldw	r3,-28(fp)
 400ff70:	00bfff84 	movi	r2,-2
 400ff74:	1884703a 	and	r2,r3,r2
 400ff78:	1001703a 	wrctl	status,r2
  
  return context;
 400ff7c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400ff80:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 400ff84:	e0bffc17 	ldw	r2,-16(fp)
 400ff88:	10800283 	ldbu	r2,10(r2)
 400ff8c:	10803fcc 	andi	r2,r2,255
 400ff90:	1005003a 	cmpeq	r2,r2,zero
 400ff94:	1000211e 	bne	r2,zero,401001c <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 400ff98:	e0bffe03 	ldbu	r2,-8(fp)
 400ff9c:	1080004c 	andi	r2,r2,1
 400ffa0:	10803fcc 	andi	r2,r2,255
 400ffa4:	1005003a 	cmpeq	r2,r2,zero
 400ffa8:	10000c1e 	bne	r2,zero,400ffdc <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 400ffac:	00000506 	br	400ffc4 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 400ffb0:	e13ffc17 	ldw	r4,-16(fp)
 400ffb4:	e17ffd17 	ldw	r5,-12(fp)
 400ffb8:	01800104 	movi	r6,4
 400ffbc:	000f883a 	mov	r7,zero
 400ffc0:	400bc180 	call	400bc18 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 400ffc4:	e0bffc17 	ldw	r2,-16(fp)
 400ffc8:	10800283 	ldbu	r2,10(r2)
 400ffcc:	10803fcc 	andi	r2,r2,255
 400ffd0:	1004c03a 	cmpne	r2,r2,zero
 400ffd4:	103ff61e 	bne	r2,zero,400ffb0 <OSQPostOpt+0xa4>
 400ffd8:	00000506 	br	400fff0 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 400ffdc:	e13ffc17 	ldw	r4,-16(fp)
 400ffe0:	e17ffd17 	ldw	r5,-12(fp)
 400ffe4:	01800104 	movi	r6,4
 400ffe8:	000f883a 	mov	r7,zero
 400ffec:	400bc180 	call	400bc18 <OS_EventTaskRdy>
 400fff0:	e0bffa17 	ldw	r2,-24(fp)
 400fff4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fff8:	e0bff817 	ldw	r2,-32(fp)
 400fffc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 4010000:	e0bffe03 	ldbu	r2,-8(fp)
 4010004:	1080010c 	andi	r2,r2,4
 4010008:	1004c03a 	cmpne	r2,r2,zero
 401000c:	1000011e 	bne	r2,zero,4010014 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 4010010:	400c6580 	call	400c658 <OS_Sched>
        }
        return (OS_ERR_NONE);
 4010014:	e03fff15 	stw	zero,-4(fp)
 4010018:	00004306 	br	4010128 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 401001c:	e0bffc17 	ldw	r2,-16(fp)
 4010020:	10800117 	ldw	r2,4(r2)
 4010024:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4010028:	e0bffb17 	ldw	r2,-20(fp)
 401002c:	10c0058b 	ldhu	r3,22(r2)
 4010030:	e0bffb17 	ldw	r2,-20(fp)
 4010034:	1080050b 	ldhu	r2,20(r2)
 4010038:	18ffffcc 	andi	r3,r3,65535
 401003c:	10bfffcc 	andi	r2,r2,65535
 4010040:	18800736 	bltu	r3,r2,4010060 <OSQPostOpt+0x154>
 4010044:	e0bffa17 	ldw	r2,-24(fp)
 4010048:	e0bff715 	stw	r2,-36(fp)
 401004c:	e0bff717 	ldw	r2,-36(fp)
 4010050:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4010054:	00800784 	movi	r2,30
 4010058:	e0bfff15 	stw	r2,-4(fp)
 401005c:	00003206 	br	4010128 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 4010060:	e0bffe03 	ldbu	r2,-8(fp)
 4010064:	1080008c 	andi	r2,r2,2
 4010068:	1005003a 	cmpeq	r2,r2,zero
 401006c:	1000131e 	bne	r2,zero,40100bc <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 4010070:	e0bffb17 	ldw	r2,-20(fp)
 4010074:	10c00417 	ldw	r3,16(r2)
 4010078:	e0bffb17 	ldw	r2,-20(fp)
 401007c:	10800117 	ldw	r2,4(r2)
 4010080:	1880041e 	bne	r3,r2,4010094 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 4010084:	e0bffb17 	ldw	r2,-20(fp)
 4010088:	10c00217 	ldw	r3,8(r2)
 401008c:	e0bffb17 	ldw	r2,-20(fp)
 4010090:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 4010094:	e0bffb17 	ldw	r2,-20(fp)
 4010098:	10800417 	ldw	r2,16(r2)
 401009c:	10ffff04 	addi	r3,r2,-4
 40100a0:	e0bffb17 	ldw	r2,-20(fp)
 40100a4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 40100a8:	e0bffb17 	ldw	r2,-20(fp)
 40100ac:	10c00417 	ldw	r3,16(r2)
 40100b0:	e0bffd17 	ldw	r2,-12(fp)
 40100b4:	18800015 	stw	r2,0(r3)
 40100b8:	00001006 	br	40100fc <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 40100bc:	e0bffb17 	ldw	r2,-20(fp)
 40100c0:	10c00317 	ldw	r3,12(r2)
 40100c4:	e0bffd17 	ldw	r2,-12(fp)
 40100c8:	18800015 	stw	r2,0(r3)
 40100cc:	18c00104 	addi	r3,r3,4
 40100d0:	e0bffb17 	ldw	r2,-20(fp)
 40100d4:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 40100d8:	e0bffb17 	ldw	r2,-20(fp)
 40100dc:	10c00317 	ldw	r3,12(r2)
 40100e0:	e0bffb17 	ldw	r2,-20(fp)
 40100e4:	10800217 	ldw	r2,8(r2)
 40100e8:	1880041e 	bne	r3,r2,40100fc <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 40100ec:	e0bffb17 	ldw	r2,-20(fp)
 40100f0:	10c00117 	ldw	r3,4(r2)
 40100f4:	e0bffb17 	ldw	r2,-20(fp)
 40100f8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 40100fc:	e0bffb17 	ldw	r2,-20(fp)
 4010100:	1080058b 	ldhu	r2,22(r2)
 4010104:	10800044 	addi	r2,r2,1
 4010108:	1007883a 	mov	r3,r2
 401010c:	e0bffb17 	ldw	r2,-20(fp)
 4010110:	10c0058d 	sth	r3,22(r2)
 4010114:	e0bffa17 	ldw	r2,-24(fp)
 4010118:	e0bff615 	stw	r2,-40(fp)
 401011c:	e0bff617 	ldw	r2,-40(fp)
 4010120:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4010124:	e03fff15 	stw	zero,-4(fp)
 4010128:	e0bfff17 	ldw	r2,-4(fp)
}
 401012c:	e037883a 	mov	sp,fp
 4010130:	dfc00117 	ldw	ra,4(sp)
 4010134:	df000017 	ldw	fp,0(sp)
 4010138:	dec00204 	addi	sp,sp,8
 401013c:	f800283a 	ret

04010140 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 4010140:	defff504 	addi	sp,sp,-44
 4010144:	df000a15 	stw	fp,40(sp)
 4010148:	df000a04 	addi	fp,sp,40
 401014c:	e13ffd15 	stw	r4,-12(fp)
 4010150:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4010154:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4010158:	e0bffd17 	ldw	r2,-12(fp)
 401015c:	1004c03a 	cmpne	r2,r2,zero
 4010160:	1000031e 	bne	r2,zero,4010170 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 4010164:	00800104 	movi	r2,4
 4010168:	e0bfff15 	stw	r2,-4(fp)
 401016c:	00004f06 	br	40102ac <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4010170:	e0bffe17 	ldw	r2,-8(fp)
 4010174:	1004c03a 	cmpne	r2,r2,zero
 4010178:	1000031e 	bne	r2,zero,4010188 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 401017c:	00800244 	movi	r2,9
 4010180:	e0bfff15 	stw	r2,-4(fp)
 4010184:	00004906 	br	40102ac <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4010188:	e0bffd17 	ldw	r2,-12(fp)
 401018c:	10800003 	ldbu	r2,0(r2)
 4010190:	10803fcc 	andi	r2,r2,255
 4010194:	108000a0 	cmpeqi	r2,r2,2
 4010198:	1000031e 	bne	r2,zero,40101a8 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 401019c:	00800044 	movi	r2,1
 40101a0:	e0bfff15 	stw	r2,-4(fp)
 40101a4:	00004106 	br	40102ac <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40101a8:	0005303a 	rdctl	r2,status
 40101ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40101b0:	e0fff717 	ldw	r3,-36(fp)
 40101b4:	00bfff84 	movi	r2,-2
 40101b8:	1884703a 	and	r2,r3,r2
 40101bc:	1001703a 	wrctl	status,r2
  
  return context;
 40101c0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 40101c4:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 40101c8:	e0bffd17 	ldw	r2,-12(fp)
 40101cc:	10c00283 	ldbu	r3,10(r2)
 40101d0:	e0bffe17 	ldw	r2,-8(fp)
 40101d4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 40101d8:	e0bffd17 	ldw	r2,-12(fp)
 40101dc:	108002c4 	addi	r2,r2,11
 40101e0:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 40101e4:	e0bffe17 	ldw	r2,-8(fp)
 40101e8:	10800204 	addi	r2,r2,8
 40101ec:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40101f0:	e03ffb05 	stb	zero,-20(fp)
 40101f4:	00000d06 	br	401022c <OSQQuery+0xec>
        *pdest++ = *psrc++;
 40101f8:	e0bffa17 	ldw	r2,-24(fp)
 40101fc:	10c00003 	ldbu	r3,0(r2)
 4010200:	e0bff917 	ldw	r2,-28(fp)
 4010204:	10c00005 	stb	r3,0(r2)
 4010208:	e0bff917 	ldw	r2,-28(fp)
 401020c:	10800044 	addi	r2,r2,1
 4010210:	e0bff915 	stw	r2,-28(fp)
 4010214:	e0bffa17 	ldw	r2,-24(fp)
 4010218:	10800044 	addi	r2,r2,1
 401021c:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4010220:	e0bffb03 	ldbu	r2,-20(fp)
 4010224:	10800044 	addi	r2,r2,1
 4010228:	e0bffb05 	stb	r2,-20(fp)
 401022c:	e0bffb03 	ldbu	r2,-20(fp)
 4010230:	108000f0 	cmpltui	r2,r2,3
 4010234:	103ff01e 	bne	r2,zero,40101f8 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 4010238:	e0bffd17 	ldw	r2,-12(fp)
 401023c:	10800117 	ldw	r2,4(r2)
 4010240:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 4010244:	e0bffc17 	ldw	r2,-16(fp)
 4010248:	1080058b 	ldhu	r2,22(r2)
 401024c:	10bfffcc 	andi	r2,r2,65535
 4010250:	1005003a 	cmpeq	r2,r2,zero
 4010254:	1000061e 	bne	r2,zero,4010270 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 4010258:	e0bffc17 	ldw	r2,-16(fp)
 401025c:	10800417 	ldw	r2,16(r2)
 4010260:	10c00017 	ldw	r3,0(r2)
 4010264:	e0bffe17 	ldw	r2,-8(fp)
 4010268:	10c00015 	stw	r3,0(r2)
 401026c:	00000206 	br	4010278 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 4010270:	e0bffe17 	ldw	r2,-8(fp)
 4010274:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4010278:	e0bffc17 	ldw	r2,-16(fp)
 401027c:	10c0058b 	ldhu	r3,22(r2)
 4010280:	e0bffe17 	ldw	r2,-8(fp)
 4010284:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 4010288:	e0bffc17 	ldw	r2,-16(fp)
 401028c:	10c0050b 	ldhu	r3,20(r2)
 4010290:	e0bffe17 	ldw	r2,-8(fp)
 4010294:	10c0018d 	sth	r3,6(r2)
 4010298:	e0bff817 	ldw	r2,-32(fp)
 401029c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40102a0:	e0bff617 	ldw	r2,-40(fp)
 40102a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40102a8:	e03fff15 	stw	zero,-4(fp)
 40102ac:	e0bfff17 	ldw	r2,-4(fp)
}
 40102b0:	e037883a 	mov	sp,fp
 40102b4:	df000017 	ldw	fp,0(sp)
 40102b8:	dec00104 	addi	sp,sp,4
 40102bc:	f800283a 	ret

040102c0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 40102c0:	defffb04 	addi	sp,sp,-20
 40102c4:	dfc00415 	stw	ra,16(sp)
 40102c8:	df000315 	stw	fp,12(sp)
 40102cc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 40102d0:	010100b4 	movhi	r4,1026
 40102d4:	210d3704 	addi	r4,r4,13532
 40102d8:	01407804 	movi	r5,480
 40102dc:	400c5980 	call	400c598 <OS_MemClr>
    pq1 = &OSQTbl[0];
 40102e0:	008100b4 	movhi	r2,1026
 40102e4:	108d3704 	addi	r2,r2,13532
 40102e8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 40102ec:	008100b4 	movhi	r2,1026
 40102f0:	108d3d04 	addi	r2,r2,13556
 40102f4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 40102f8:	e03fff0d 	sth	zero,-4(fp)
 40102fc:	00000c06 	br	4010330 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 4010300:	e0fffe17 	ldw	r3,-8(fp)
 4010304:	e0bffd17 	ldw	r2,-12(fp)
 4010308:	18800015 	stw	r2,0(r3)
        pq1++;
 401030c:	e0bffe17 	ldw	r2,-8(fp)
 4010310:	10800604 	addi	r2,r2,24
 4010314:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 4010318:	e0bffd17 	ldw	r2,-12(fp)
 401031c:	10800604 	addi	r2,r2,24
 4010320:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4010324:	e0bfff0b 	ldhu	r2,-4(fp)
 4010328:	10800044 	addi	r2,r2,1
 401032c:	e0bfff0d 	sth	r2,-4(fp)
 4010330:	e0bfff0b 	ldhu	r2,-4(fp)
 4010334:	108004f0 	cmpltui	r2,r2,19
 4010338:	103ff11e 	bne	r2,zero,4010300 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 401033c:	e0bffe17 	ldw	r2,-8(fp)
 4010340:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 4010344:	00c100b4 	movhi	r3,1026
 4010348:	18e1e904 	addi	r3,r3,-30812
 401034c:	008100b4 	movhi	r2,1026
 4010350:	108d3704 	addi	r2,r2,13532
 4010354:	18800015 	stw	r2,0(r3)
#endif
}
 4010358:	e037883a 	mov	sp,fp
 401035c:	dfc00117 	ldw	ra,4(sp)
 4010360:	df000017 	ldw	fp,0(sp)
 4010364:	dec00204 	addi	sp,sp,8
 4010368:	f800283a 	ret

0401036c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 401036c:	defff904 	addi	sp,sp,-28
 4010370:	df000615 	stw	fp,24(sp)
 4010374:	df000604 	addi	fp,sp,24
 4010378:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401037c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4010380:	e0bffe17 	ldw	r2,-8(fp)
 4010384:	1004c03a 	cmpne	r2,r2,zero
 4010388:	1000021e 	bne	r2,zero,4010394 <OSSemAccept+0x28>
        return (0);
 401038c:	e03fff15 	stw	zero,-4(fp)
 4010390:	00002106 	br	4010418 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4010394:	e0bffe17 	ldw	r2,-8(fp)
 4010398:	10800003 	ldbu	r2,0(r2)
 401039c:	10803fcc 	andi	r2,r2,255
 40103a0:	108000e0 	cmpeqi	r2,r2,3
 40103a4:	1000021e 	bne	r2,zero,40103b0 <OSSemAccept+0x44>
        return (0);
 40103a8:	e03fff15 	stw	zero,-4(fp)
 40103ac:	00001a06 	br	4010418 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40103b0:	0005303a 	rdctl	r2,status
 40103b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40103b8:	e0fffb17 	ldw	r3,-20(fp)
 40103bc:	00bfff84 	movi	r2,-2
 40103c0:	1884703a 	and	r2,r3,r2
 40103c4:	1001703a 	wrctl	status,r2
  
  return context;
 40103c8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 40103cc:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 40103d0:	e0bffe17 	ldw	r2,-8(fp)
 40103d4:	1080020b 	ldhu	r2,8(r2)
 40103d8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 40103dc:	e0bffd0b 	ldhu	r2,-12(fp)
 40103e0:	1005003a 	cmpeq	r2,r2,zero
 40103e4:	1000061e 	bne	r2,zero,4010400 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 40103e8:	e0bffe17 	ldw	r2,-8(fp)
 40103ec:	1080020b 	ldhu	r2,8(r2)
 40103f0:	10bfffc4 	addi	r2,r2,-1
 40103f4:	1007883a 	mov	r3,r2
 40103f8:	e0bffe17 	ldw	r2,-8(fp)
 40103fc:	10c0020d 	sth	r3,8(r2)
 4010400:	e0bffc17 	ldw	r2,-16(fp)
 4010404:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010408:	e0bffa17 	ldw	r2,-24(fp)
 401040c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 4010410:	e0bffd0b 	ldhu	r2,-12(fp)
 4010414:	e0bfff15 	stw	r2,-4(fp)
 4010418:	e0bfff17 	ldw	r2,-4(fp)
}
 401041c:	e037883a 	mov	sp,fp
 4010420:	df000017 	ldw	fp,0(sp)
 4010424:	dec00104 	addi	sp,sp,4
 4010428:	f800283a 	ret

0401042c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 401042c:	defff804 	addi	sp,sp,-32
 4010430:	dfc00715 	stw	ra,28(sp)
 4010434:	df000615 	stw	fp,24(sp)
 4010438:	df000604 	addi	fp,sp,24
 401043c:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4010440:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4010444:	008100b4 	movhi	r2,1026
 4010448:	10a1ec04 	addi	r2,r2,-30800
 401044c:	10800003 	ldbu	r2,0(r2)
 4010450:	10803fcc 	andi	r2,r2,255
 4010454:	1005003a 	cmpeq	r2,r2,zero
 4010458:	1000021e 	bne	r2,zero,4010464 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 401045c:	e03fff15 	stw	zero,-4(fp)
 4010460:	00003106 	br	4010528 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010464:	0005303a 	rdctl	r2,status
 4010468:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401046c:	e0fffb17 	ldw	r3,-20(fp)
 4010470:	00bfff84 	movi	r2,-2
 4010474:	1884703a 	and	r2,r3,r2
 4010478:	1001703a 	wrctl	status,r2
  
  return context;
 401047c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4010480:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 4010484:	008100b4 	movhi	r2,1026
 4010488:	10a1eb04 	addi	r2,r2,-30804
 401048c:	10800017 	ldw	r2,0(r2)
 4010490:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 4010494:	008100b4 	movhi	r2,1026
 4010498:	10a1eb04 	addi	r2,r2,-30804
 401049c:	10800017 	ldw	r2,0(r2)
 40104a0:	1005003a 	cmpeq	r2,r2,zero
 40104a4:	1000081e 	bne	r2,zero,40104c8 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 40104a8:	008100b4 	movhi	r2,1026
 40104ac:	10a1eb04 	addi	r2,r2,-30804
 40104b0:	10800017 	ldw	r2,0(r2)
 40104b4:	10800117 	ldw	r2,4(r2)
 40104b8:	1007883a 	mov	r3,r2
 40104bc:	008100b4 	movhi	r2,1026
 40104c0:	10a1eb04 	addi	r2,r2,-30804
 40104c4:	10c00015 	stw	r3,0(r2)
 40104c8:	e0bffc17 	ldw	r2,-16(fp)
 40104cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40104d0:	e0bffa17 	ldw	r2,-24(fp)
 40104d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 40104d8:	e0bffd17 	ldw	r2,-12(fp)
 40104dc:	1005003a 	cmpeq	r2,r2,zero
 40104e0:	10000f1e 	bne	r2,zero,4010520 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 40104e4:	e0fffd17 	ldw	r3,-12(fp)
 40104e8:	008000c4 	movi	r2,3
 40104ec:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 40104f0:	e0fffd17 	ldw	r3,-12(fp)
 40104f4:	e0bffe0b 	ldhu	r2,-8(fp)
 40104f8:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 40104fc:	e0bffd17 	ldw	r2,-12(fp)
 4010500:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 4010504:	e0fffd17 	ldw	r3,-12(fp)
 4010508:	00800fc4 	movi	r2,63
 401050c:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 4010510:	e0bffd17 	ldw	r2,-12(fp)
 4010514:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 4010518:	e13ffd17 	ldw	r4,-12(fp)
 401051c:	400c1cc0 	call	400c1cc <OS_EventWaitListInit>
    }
    return (pevent);
 4010520:	e0bffd17 	ldw	r2,-12(fp)
 4010524:	e0bfff15 	stw	r2,-4(fp)
 4010528:	e0bfff17 	ldw	r2,-4(fp)
}
 401052c:	e037883a 	mov	sp,fp
 4010530:	dfc00117 	ldw	ra,4(sp)
 4010534:	df000017 	ldw	fp,0(sp)
 4010538:	dec00204 	addi	sp,sp,8
 401053c:	f800283a 	ret

04010540 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4010540:	defff104 	addi	sp,sp,-60
 4010544:	dfc00e15 	stw	ra,56(sp)
 4010548:	df000d15 	stw	fp,52(sp)
 401054c:	df000d04 	addi	fp,sp,52
 4010550:	e13ffb15 	stw	r4,-20(fp)
 4010554:	e1bffd15 	stw	r6,-12(fp)
 4010558:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 401055c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4010560:	e0bffd17 	ldw	r2,-12(fp)
 4010564:	1004c03a 	cmpne	r2,r2,zero
 4010568:	1000031e 	bne	r2,zero,4010578 <OSSemDel+0x38>
        return (pevent);
 401056c:	e0bffb17 	ldw	r2,-20(fp)
 4010570:	e0bfff15 	stw	r2,-4(fp)
 4010574:	00009406 	br	40107c8 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4010578:	e0bffb17 	ldw	r2,-20(fp)
 401057c:	1004c03a 	cmpne	r2,r2,zero
 4010580:	1000061e 	bne	r2,zero,401059c <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 4010584:	e0fffd17 	ldw	r3,-12(fp)
 4010588:	00800104 	movi	r2,4
 401058c:	18800005 	stb	r2,0(r3)
        return (pevent);
 4010590:	e0fffb17 	ldw	r3,-20(fp)
 4010594:	e0ffff15 	stw	r3,-4(fp)
 4010598:	00008b06 	br	40107c8 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 401059c:	e0bffb17 	ldw	r2,-20(fp)
 40105a0:	10800003 	ldbu	r2,0(r2)
 40105a4:	10803fcc 	andi	r2,r2,255
 40105a8:	108000e0 	cmpeqi	r2,r2,3
 40105ac:	1000061e 	bne	r2,zero,40105c8 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 40105b0:	e0fffd17 	ldw	r3,-12(fp)
 40105b4:	00800044 	movi	r2,1
 40105b8:	18800005 	stb	r2,0(r3)
        return (pevent);
 40105bc:	e0bffb17 	ldw	r2,-20(fp)
 40105c0:	e0bfff15 	stw	r2,-4(fp)
 40105c4:	00008006 	br	40107c8 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40105c8:	008100b4 	movhi	r2,1026
 40105cc:	10a1ec04 	addi	r2,r2,-30800
 40105d0:	10800003 	ldbu	r2,0(r2)
 40105d4:	10803fcc 	andi	r2,r2,255
 40105d8:	1005003a 	cmpeq	r2,r2,zero
 40105dc:	1000061e 	bne	r2,zero,40105f8 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 40105e0:	e0fffd17 	ldw	r3,-12(fp)
 40105e4:	008003c4 	movi	r2,15
 40105e8:	18800005 	stb	r2,0(r3)
        return (pevent);
 40105ec:	e0fffb17 	ldw	r3,-20(fp)
 40105f0:	e0ffff15 	stw	r3,-4(fp)
 40105f4:	00007406 	br	40107c8 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40105f8:	0005303a 	rdctl	r2,status
 40105fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010600:	e0fff717 	ldw	r3,-36(fp)
 4010604:	00bfff84 	movi	r2,-2
 4010608:	1884703a 	and	r2,r3,r2
 401060c:	1001703a 	wrctl	status,r2
  
  return context;
 4010610:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 4010614:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 4010618:	e0bffb17 	ldw	r2,-20(fp)
 401061c:	10800283 	ldbu	r2,10(r2)
 4010620:	10803fcc 	andi	r2,r2,255
 4010624:	1005003a 	cmpeq	r2,r2,zero
 4010628:	1000031e 	bne	r2,zero,4010638 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 401062c:	00800044 	movi	r2,1
 4010630:	e0bffa05 	stb	r2,-24(fp)
 4010634:	00000106 	br	401063c <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4010638:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 401063c:	e0bffc03 	ldbu	r2,-16(fp)
 4010640:	e0bffe15 	stw	r2,-8(fp)
 4010644:	e0fffe17 	ldw	r3,-8(fp)
 4010648:	1805003a 	cmpeq	r2,r3,zero
 401064c:	1000041e 	bne	r2,zero,4010660 <OSSemDel+0x120>
 4010650:	e0fffe17 	ldw	r3,-8(fp)
 4010654:	18800060 	cmpeqi	r2,r3,1
 4010658:	10002d1e 	bne	r2,zero,4010710 <OSSemDel+0x1d0>
 401065c:	00004f06 	br	401079c <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 4010660:	e0bffa03 	ldbu	r2,-24(fp)
 4010664:	1004c03a 	cmpne	r2,r2,zero
 4010668:	10001a1e 	bne	r2,zero,40106d4 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 401066c:	e0fffb17 	ldw	r3,-20(fp)
 4010670:	00800fc4 	movi	r2,63
 4010674:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4010678:	e0bffb17 	ldw	r2,-20(fp)
 401067c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4010680:	e0bffb17 	ldw	r2,-20(fp)
 4010684:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4010688:	008100b4 	movhi	r2,1026
 401068c:	10a1eb04 	addi	r2,r2,-30804
 4010690:	10c00017 	ldw	r3,0(r2)
 4010694:	e0bffb17 	ldw	r2,-20(fp)
 4010698:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 401069c:	e0bffb17 	ldw	r2,-20(fp)
 40106a0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 40106a4:	00c100b4 	movhi	r3,1026
 40106a8:	18e1eb04 	addi	r3,r3,-30804
 40106ac:	e0bffb17 	ldw	r2,-20(fp)
 40106b0:	18800015 	stw	r2,0(r3)
 40106b4:	e0bff817 	ldw	r2,-32(fp)
 40106b8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40106bc:	e0bff617 	ldw	r2,-40(fp)
 40106c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 40106c4:	e0bffd17 	ldw	r2,-12(fp)
 40106c8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 40106cc:	e03ff915 	stw	zero,-28(fp)
 40106d0:	00003b06 	br	40107c0 <OSSemDel+0x280>
 40106d4:	e0bff817 	ldw	r2,-32(fp)
 40106d8:	e0bff515 	stw	r2,-44(fp)
 40106dc:	e0bff517 	ldw	r2,-44(fp)
 40106e0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 40106e4:	e0fffd17 	ldw	r3,-12(fp)
 40106e8:	00801244 	movi	r2,73
 40106ec:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 40106f0:	e0bffb17 	ldw	r2,-20(fp)
 40106f4:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 40106f8:	00003106 	br	40107c0 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 40106fc:	e13ffb17 	ldw	r4,-20(fp)
 4010700:	000b883a 	mov	r5,zero
 4010704:	01800044 	movi	r6,1
 4010708:	000f883a 	mov	r7,zero
 401070c:	400bc180 	call	400bc18 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 4010710:	e0bffb17 	ldw	r2,-20(fp)
 4010714:	10800283 	ldbu	r2,10(r2)
 4010718:	10803fcc 	andi	r2,r2,255
 401071c:	1004c03a 	cmpne	r2,r2,zero
 4010720:	103ff61e 	bne	r2,zero,40106fc <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4010724:	e0fffb17 	ldw	r3,-20(fp)
 4010728:	00800fc4 	movi	r2,63
 401072c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4010730:	e0bffb17 	ldw	r2,-20(fp)
 4010734:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4010738:	e0bffb17 	ldw	r2,-20(fp)
 401073c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4010740:	008100b4 	movhi	r2,1026
 4010744:	10a1eb04 	addi	r2,r2,-30804
 4010748:	10c00017 	ldw	r3,0(r2)
 401074c:	e0bffb17 	ldw	r2,-20(fp)
 4010750:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4010754:	e0bffb17 	ldw	r2,-20(fp)
 4010758:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 401075c:	00c100b4 	movhi	r3,1026
 4010760:	18e1eb04 	addi	r3,r3,-30804
 4010764:	e0bffb17 	ldw	r2,-20(fp)
 4010768:	18800015 	stw	r2,0(r3)
 401076c:	e0bff817 	ldw	r2,-32(fp)
 4010770:	e0bff415 	stw	r2,-48(fp)
 4010774:	e0bff417 	ldw	r2,-48(fp)
 4010778:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 401077c:	e0bffa03 	ldbu	r2,-24(fp)
 4010780:	10800058 	cmpnei	r2,r2,1
 4010784:	1000011e 	bne	r2,zero,401078c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4010788:	400c6580 	call	400c658 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 401078c:	e0bffd17 	ldw	r2,-12(fp)
 4010790:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 4010794:	e03ff915 	stw	zero,-28(fp)
             break;
 4010798:	00000906 	br	40107c0 <OSSemDel+0x280>
 401079c:	e0bff817 	ldw	r2,-32(fp)
 40107a0:	e0bff315 	stw	r2,-52(fp)
 40107a4:	e0bff317 	ldw	r2,-52(fp)
 40107a8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 40107ac:	e0fffd17 	ldw	r3,-12(fp)
 40107b0:	008001c4 	movi	r2,7
 40107b4:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 40107b8:	e0bffb17 	ldw	r2,-20(fp)
 40107bc:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 40107c0:	e0bff917 	ldw	r2,-28(fp)
 40107c4:	e0bfff15 	stw	r2,-4(fp)
 40107c8:	e0bfff17 	ldw	r2,-4(fp)
}
 40107cc:	e037883a 	mov	sp,fp
 40107d0:	dfc00117 	ldw	ra,4(sp)
 40107d4:	df000017 	ldw	fp,0(sp)
 40107d8:	dec00204 	addi	sp,sp,8
 40107dc:	f800283a 	ret

040107e0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 40107e0:	defff404 	addi	sp,sp,-48
 40107e4:	dfc00b15 	stw	ra,44(sp)
 40107e8:	df000a15 	stw	fp,40(sp)
 40107ec:	df000a04 	addi	fp,sp,40
 40107f0:	e13ffc15 	stw	r4,-16(fp)
 40107f4:	e1bffe15 	stw	r6,-8(fp)
 40107f8:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40107fc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4010800:	e0bffe17 	ldw	r2,-8(fp)
 4010804:	1005003a 	cmpeq	r2,r2,zero
 4010808:	10008f1e 	bne	r2,zero,4010a48 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401080c:	e0bffc17 	ldw	r2,-16(fp)
 4010810:	1004c03a 	cmpne	r2,r2,zero
 4010814:	1000041e 	bne	r2,zero,4010828 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 4010818:	e0fffe17 	ldw	r3,-8(fp)
 401081c:	00800104 	movi	r2,4
 4010820:	18800005 	stb	r2,0(r3)
        return;
 4010824:	00008806 	br	4010a48 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4010828:	e0bffc17 	ldw	r2,-16(fp)
 401082c:	10800003 	ldbu	r2,0(r2)
 4010830:	10803fcc 	andi	r2,r2,255
 4010834:	108000e0 	cmpeqi	r2,r2,3
 4010838:	1000041e 	bne	r2,zero,401084c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 401083c:	e0fffe17 	ldw	r3,-8(fp)
 4010840:	00800044 	movi	r2,1
 4010844:	18800005 	stb	r2,0(r3)
        return;
 4010848:	00007f06 	br	4010a48 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 401084c:	008100b4 	movhi	r2,1026
 4010850:	10a1ec04 	addi	r2,r2,-30800
 4010854:	10800003 	ldbu	r2,0(r2)
 4010858:	10803fcc 	andi	r2,r2,255
 401085c:	1005003a 	cmpeq	r2,r2,zero
 4010860:	1000041e 	bne	r2,zero,4010874 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 4010864:	e0fffe17 	ldw	r3,-8(fp)
 4010868:	00800084 	movi	r2,2
 401086c:	18800005 	stb	r2,0(r3)
        return;
 4010870:	00007506 	br	4010a48 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 4010874:	008100b4 	movhi	r2,1026
 4010878:	10a1de04 	addi	r2,r2,-30856
 401087c:	10800003 	ldbu	r2,0(r2)
 4010880:	10803fcc 	andi	r2,r2,255
 4010884:	1005003a 	cmpeq	r2,r2,zero
 4010888:	1000041e 	bne	r2,zero,401089c <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 401088c:	e0fffe17 	ldw	r3,-8(fp)
 4010890:	00800344 	movi	r2,13
 4010894:	18800005 	stb	r2,0(r3)
        return;
 4010898:	00006b06 	br	4010a48 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401089c:	0005303a 	rdctl	r2,status
 40108a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40108a4:	e0fffa17 	ldw	r3,-24(fp)
 40108a8:	00bfff84 	movi	r2,-2
 40108ac:	1884703a 	and	r2,r3,r2
 40108b0:	1001703a 	wrctl	status,r2
  
  return context;
 40108b4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 40108b8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 40108bc:	e0bffc17 	ldw	r2,-16(fp)
 40108c0:	1080020b 	ldhu	r2,8(r2)
 40108c4:	10bfffcc 	andi	r2,r2,65535
 40108c8:	1005003a 	cmpeq	r2,r2,zero
 40108cc:	10000d1e 	bne	r2,zero,4010904 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 40108d0:	e0bffc17 	ldw	r2,-16(fp)
 40108d4:	1080020b 	ldhu	r2,8(r2)
 40108d8:	10bfffc4 	addi	r2,r2,-1
 40108dc:	1007883a 	mov	r3,r2
 40108e0:	e0bffc17 	ldw	r2,-16(fp)
 40108e4:	10c0020d 	sth	r3,8(r2)
 40108e8:	e0bffb17 	ldw	r2,-20(fp)
 40108ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40108f0:	e0bff917 	ldw	r2,-28(fp)
 40108f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 40108f8:	e0bffe17 	ldw	r2,-8(fp)
 40108fc:	10000005 	stb	zero,0(r2)
        return;
 4010900:	00005106 	br	4010a48 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 4010904:	008100b4 	movhi	r2,1026
 4010908:	10a1ed04 	addi	r2,r2,-30796
 401090c:	10c00017 	ldw	r3,0(r2)
 4010910:	008100b4 	movhi	r2,1026
 4010914:	10a1ed04 	addi	r2,r2,-30796
 4010918:	10800017 	ldw	r2,0(r2)
 401091c:	10800c03 	ldbu	r2,48(r2)
 4010920:	10800054 	ori	r2,r2,1
 4010924:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4010928:	008100b4 	movhi	r2,1026
 401092c:	10a1ed04 	addi	r2,r2,-30796
 4010930:	10800017 	ldw	r2,0(r2)
 4010934:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 4010938:	008100b4 	movhi	r2,1026
 401093c:	10a1ed04 	addi	r2,r2,-30796
 4010940:	10c00017 	ldw	r3,0(r2)
 4010944:	e0bffd0b 	ldhu	r2,-12(fp)
 4010948:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 401094c:	e13ffc17 	ldw	r4,-16(fp)
 4010950:	400bdac0 	call	400bdac <OS_EventTaskWait>
 4010954:	e0bffb17 	ldw	r2,-20(fp)
 4010958:	e0bff815 	stw	r2,-32(fp)
 401095c:	e0bff817 	ldw	r2,-32(fp)
 4010960:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 4010964:	400c6580 	call	400c658 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010968:	0005303a 	rdctl	r2,status
 401096c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010970:	e0fff717 	ldw	r3,-36(fp)
 4010974:	00bfff84 	movi	r2,-2
 4010978:	1884703a 	and	r2,r3,r2
 401097c:	1001703a 	wrctl	status,r2
  
  return context;
 4010980:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 4010984:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4010988:	008100b4 	movhi	r2,1026
 401098c:	10a1ed04 	addi	r2,r2,-30796
 4010990:	10800017 	ldw	r2,0(r2)
 4010994:	10800c43 	ldbu	r2,49(r2)
 4010998:	10803fcc 	andi	r2,r2,255
 401099c:	e0bfff15 	stw	r2,-4(fp)
 40109a0:	e0ffff17 	ldw	r3,-4(fp)
 40109a4:	1805003a 	cmpeq	r2,r3,zero
 40109a8:	1000041e 	bne	r2,zero,40109bc <OSSemPend+0x1dc>
 40109ac:	e0ffff17 	ldw	r3,-4(fp)
 40109b0:	188000a0 	cmpeqi	r2,r3,2
 40109b4:	1000041e 	bne	r2,zero,40109c8 <OSSemPend+0x1e8>
 40109b8:	00000706 	br	40109d8 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 40109bc:	e0bffe17 	ldw	r2,-8(fp)
 40109c0:	10000005 	stb	zero,0(r2)
             break;
 40109c4:	00000c06 	br	40109f8 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 40109c8:	e0fffe17 	ldw	r3,-8(fp)
 40109cc:	00800384 	movi	r2,14
 40109d0:	18800005 	stb	r2,0(r3)
             break;
 40109d4:	00000806 	br	40109f8 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 40109d8:	008100b4 	movhi	r2,1026
 40109dc:	10a1ed04 	addi	r2,r2,-30796
 40109e0:	11000017 	ldw	r4,0(r2)
 40109e4:	e17ffc17 	ldw	r5,-16(fp)
 40109e8:	400c0100 	call	400c010 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 40109ec:	e0fffe17 	ldw	r3,-8(fp)
 40109f0:	00800284 	movi	r2,10
 40109f4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 40109f8:	008100b4 	movhi	r2,1026
 40109fc:	10a1ed04 	addi	r2,r2,-30796
 4010a00:	10800017 	ldw	r2,0(r2)
 4010a04:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4010a08:	008100b4 	movhi	r2,1026
 4010a0c:	10a1ed04 	addi	r2,r2,-30796
 4010a10:	10800017 	ldw	r2,0(r2)
 4010a14:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4010a18:	008100b4 	movhi	r2,1026
 4010a1c:	10a1ed04 	addi	r2,r2,-30796
 4010a20:	10800017 	ldw	r2,0(r2)
 4010a24:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4010a28:	008100b4 	movhi	r2,1026
 4010a2c:	10a1ed04 	addi	r2,r2,-30796
 4010a30:	10800017 	ldw	r2,0(r2)
 4010a34:	10000815 	stw	zero,32(r2)
 4010a38:	e0bffb17 	ldw	r2,-20(fp)
 4010a3c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010a40:	e0bff617 	ldw	r2,-40(fp)
 4010a44:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 4010a48:	e037883a 	mov	sp,fp
 4010a4c:	dfc00117 	ldw	ra,4(sp)
 4010a50:	df000017 	ldw	fp,0(sp)
 4010a54:	dec00204 	addi	sp,sp,8
 4010a58:	f800283a 	ret

04010a5c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4010a5c:	defff504 	addi	sp,sp,-44
 4010a60:	dfc00a15 	stw	ra,40(sp)
 4010a64:	df000915 	stw	fp,36(sp)
 4010a68:	df000904 	addi	fp,sp,36
 4010a6c:	e13ffc15 	stw	r4,-16(fp)
 4010a70:	e1bffe15 	stw	r6,-8(fp)
 4010a74:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4010a78:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4010a7c:	e0bffe17 	ldw	r2,-8(fp)
 4010a80:	1004c03a 	cmpne	r2,r2,zero
 4010a84:	1000021e 	bne	r2,zero,4010a90 <OSSemPendAbort+0x34>
        return (0);
 4010a88:	e03fff15 	stw	zero,-4(fp)
 4010a8c:	00004c06 	br	4010bc0 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4010a90:	e0bffc17 	ldw	r2,-16(fp)
 4010a94:	1004c03a 	cmpne	r2,r2,zero
 4010a98:	1000051e 	bne	r2,zero,4010ab0 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 4010a9c:	e0fffe17 	ldw	r3,-8(fp)
 4010aa0:	00800104 	movi	r2,4
 4010aa4:	18800005 	stb	r2,0(r3)
        return (0);
 4010aa8:	e03fff15 	stw	zero,-4(fp)
 4010aac:	00004406 	br	4010bc0 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4010ab0:	e0bffc17 	ldw	r2,-16(fp)
 4010ab4:	10800003 	ldbu	r2,0(r2)
 4010ab8:	10803fcc 	andi	r2,r2,255
 4010abc:	108000e0 	cmpeqi	r2,r2,3
 4010ac0:	1000051e 	bne	r2,zero,4010ad8 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 4010ac4:	e0fffe17 	ldw	r3,-8(fp)
 4010ac8:	00800044 	movi	r2,1
 4010acc:	18800005 	stb	r2,0(r3)
        return (0);
 4010ad0:	e03fff15 	stw	zero,-4(fp)
 4010ad4:	00003a06 	br	4010bc0 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010ad8:	0005303a 	rdctl	r2,status
 4010adc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010ae0:	e0fff917 	ldw	r3,-28(fp)
 4010ae4:	00bfff84 	movi	r2,-2
 4010ae8:	1884703a 	and	r2,r3,r2
 4010aec:	1001703a 	wrctl	status,r2
  
  return context;
 4010af0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4010af4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 4010af8:	e0bffc17 	ldw	r2,-16(fp)
 4010afc:	10800283 	ldbu	r2,10(r2)
 4010b00:	10803fcc 	andi	r2,r2,255
 4010b04:	1005003a 	cmpeq	r2,r2,zero
 4010b08:	1000261e 	bne	r2,zero,4010ba4 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 4010b0c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 4010b10:	e0bffd03 	ldbu	r2,-12(fp)
 4010b14:	10800060 	cmpeqi	r2,r2,1
 4010b18:	1000091e 	bne	r2,zero,4010b40 <OSSemPendAbort+0xe4>
 4010b1c:	00000e06 	br	4010b58 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4010b20:	e13ffc17 	ldw	r4,-16(fp)
 4010b24:	000b883a 	mov	r5,zero
 4010b28:	01800044 	movi	r6,1
 4010b2c:	01c00084 	movi	r7,2
 4010b30:	400bc180 	call	400bc18 <OS_EventTaskRdy>
                     nbr_tasks++;
 4010b34:	e0bffb03 	ldbu	r2,-20(fp)
 4010b38:	10800044 	addi	r2,r2,1
 4010b3c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 4010b40:	e0bffc17 	ldw	r2,-16(fp)
 4010b44:	10800283 	ldbu	r2,10(r2)
 4010b48:	10803fcc 	andi	r2,r2,255
 4010b4c:	1004c03a 	cmpne	r2,r2,zero
 4010b50:	103ff31e 	bne	r2,zero,4010b20 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4010b54:	00000806 	br	4010b78 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4010b58:	e13ffc17 	ldw	r4,-16(fp)
 4010b5c:	000b883a 	mov	r5,zero
 4010b60:	01800044 	movi	r6,1
 4010b64:	01c00084 	movi	r7,2
 4010b68:	400bc180 	call	400bc18 <OS_EventTaskRdy>
                 nbr_tasks++;
 4010b6c:	e0bffb03 	ldbu	r2,-20(fp)
 4010b70:	10800044 	addi	r2,r2,1
 4010b74:	e0bffb05 	stb	r2,-20(fp)
 4010b78:	e0bffa17 	ldw	r2,-24(fp)
 4010b7c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010b80:	e0bff817 	ldw	r2,-32(fp)
 4010b84:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4010b88:	400c6580 	call	400c658 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4010b8c:	e0fffe17 	ldw	r3,-8(fp)
 4010b90:	00800384 	movi	r2,14
 4010b94:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 4010b98:	e0bffb03 	ldbu	r2,-20(fp)
 4010b9c:	e0bfff15 	stw	r2,-4(fp)
 4010ba0:	00000706 	br	4010bc0 <OSSemPendAbort+0x164>
 4010ba4:	e0bffa17 	ldw	r2,-24(fp)
 4010ba8:	e0bff715 	stw	r2,-36(fp)
 4010bac:	e0bff717 	ldw	r2,-36(fp)
 4010bb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4010bb4:	e0bffe17 	ldw	r2,-8(fp)
 4010bb8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 4010bbc:	e03fff15 	stw	zero,-4(fp)
 4010bc0:	e0bfff17 	ldw	r2,-4(fp)
}
 4010bc4:	e037883a 	mov	sp,fp
 4010bc8:	dfc00117 	ldw	ra,4(sp)
 4010bcc:	df000017 	ldw	fp,0(sp)
 4010bd0:	dec00204 	addi	sp,sp,8
 4010bd4:	f800283a 	ret

04010bd8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 4010bd8:	defff704 	addi	sp,sp,-36
 4010bdc:	dfc00815 	stw	ra,32(sp)
 4010be0:	df000715 	stw	fp,28(sp)
 4010be4:	df000704 	addi	fp,sp,28
 4010be8:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4010bec:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4010bf0:	e0bffe17 	ldw	r2,-8(fp)
 4010bf4:	1004c03a 	cmpne	r2,r2,zero
 4010bf8:	1000031e 	bne	r2,zero,4010c08 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 4010bfc:	00800104 	movi	r2,4
 4010c00:	e0bfff15 	stw	r2,-4(fp)
 4010c04:	00003806 	br	4010ce8 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4010c08:	e0bffe17 	ldw	r2,-8(fp)
 4010c0c:	10800003 	ldbu	r2,0(r2)
 4010c10:	10803fcc 	andi	r2,r2,255
 4010c14:	108000e0 	cmpeqi	r2,r2,3
 4010c18:	1000031e 	bne	r2,zero,4010c28 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 4010c1c:	00800044 	movi	r2,1
 4010c20:	e0bfff15 	stw	r2,-4(fp)
 4010c24:	00003006 	br	4010ce8 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010c28:	0005303a 	rdctl	r2,status
 4010c2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010c30:	e0fffc17 	ldw	r3,-16(fp)
 4010c34:	00bfff84 	movi	r2,-2
 4010c38:	1884703a 	and	r2,r3,r2
 4010c3c:	1001703a 	wrctl	status,r2
  
  return context;
 4010c40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4010c44:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 4010c48:	e0bffe17 	ldw	r2,-8(fp)
 4010c4c:	10800283 	ldbu	r2,10(r2)
 4010c50:	10803fcc 	andi	r2,r2,255
 4010c54:	1005003a 	cmpeq	r2,r2,zero
 4010c58:	10000c1e 	bne	r2,zero,4010c8c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4010c5c:	e13ffe17 	ldw	r4,-8(fp)
 4010c60:	000b883a 	mov	r5,zero
 4010c64:	01800044 	movi	r6,1
 4010c68:	000f883a 	mov	r7,zero
 4010c6c:	400bc180 	call	400bc18 <OS_EventTaskRdy>
 4010c70:	e0bffd17 	ldw	r2,-12(fp)
 4010c74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010c78:	e0bffb17 	ldw	r2,-20(fp)
 4010c7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4010c80:	400c6580 	call	400c658 <OS_Sched>
        return (OS_ERR_NONE);
 4010c84:	e03fff15 	stw	zero,-4(fp)
 4010c88:	00001706 	br	4010ce8 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 4010c8c:	e0bffe17 	ldw	r2,-8(fp)
 4010c90:	1080020b 	ldhu	r2,8(r2)
 4010c94:	10ffffcc 	andi	r3,r2,65535
 4010c98:	00bfffd4 	movui	r2,65535
 4010c9c:	18800c26 	beq	r3,r2,4010cd0 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 4010ca0:	e0bffe17 	ldw	r2,-8(fp)
 4010ca4:	1080020b 	ldhu	r2,8(r2)
 4010ca8:	10800044 	addi	r2,r2,1
 4010cac:	1007883a 	mov	r3,r2
 4010cb0:	e0bffe17 	ldw	r2,-8(fp)
 4010cb4:	10c0020d 	sth	r3,8(r2)
 4010cb8:	e0bffd17 	ldw	r2,-12(fp)
 4010cbc:	e0bffa15 	stw	r2,-24(fp)
 4010cc0:	e0bffa17 	ldw	r2,-24(fp)
 4010cc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 4010cc8:	e03fff15 	stw	zero,-4(fp)
 4010ccc:	00000606 	br	4010ce8 <OSSemPost+0x110>
 4010cd0:	e0bffd17 	ldw	r2,-12(fp)
 4010cd4:	e0bff915 	stw	r2,-28(fp)
 4010cd8:	e0bff917 	ldw	r2,-28(fp)
 4010cdc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 4010ce0:	00800c84 	movi	r2,50
 4010ce4:	e0bfff15 	stw	r2,-4(fp)
 4010ce8:	e0bfff17 	ldw	r2,-4(fp)
}
 4010cec:	e037883a 	mov	sp,fp
 4010cf0:	dfc00117 	ldw	ra,4(sp)
 4010cf4:	df000017 	ldw	fp,0(sp)
 4010cf8:	dec00204 	addi	sp,sp,8
 4010cfc:	f800283a 	ret

04010d00 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 4010d00:	defff604 	addi	sp,sp,-40
 4010d04:	df000915 	stw	fp,36(sp)
 4010d08:	df000904 	addi	fp,sp,36
 4010d0c:	e13ffd15 	stw	r4,-12(fp)
 4010d10:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4010d14:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4010d18:	e0bffd17 	ldw	r2,-12(fp)
 4010d1c:	1004c03a 	cmpne	r2,r2,zero
 4010d20:	1000031e 	bne	r2,zero,4010d30 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 4010d24:	00800104 	movi	r2,4
 4010d28:	e0bfff15 	stw	r2,-4(fp)
 4010d2c:	00003b06 	br	4010e1c <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 4010d30:	e0bffe17 	ldw	r2,-8(fp)
 4010d34:	1004c03a 	cmpne	r2,r2,zero
 4010d38:	1000031e 	bne	r2,zero,4010d48 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 4010d3c:	00800244 	movi	r2,9
 4010d40:	e0bfff15 	stw	r2,-4(fp)
 4010d44:	00003506 	br	4010e1c <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4010d48:	e0bffd17 	ldw	r2,-12(fp)
 4010d4c:	10800003 	ldbu	r2,0(r2)
 4010d50:	10803fcc 	andi	r2,r2,255
 4010d54:	108000e0 	cmpeqi	r2,r2,3
 4010d58:	1000031e 	bne	r2,zero,4010d68 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 4010d5c:	00800044 	movi	r2,1
 4010d60:	e0bfff15 	stw	r2,-4(fp)
 4010d64:	00002d06 	br	4010e1c <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010d68:	0005303a 	rdctl	r2,status
 4010d6c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010d70:	e0fff817 	ldw	r3,-32(fp)
 4010d74:	00bfff84 	movi	r2,-2
 4010d78:	1884703a 	and	r2,r3,r2
 4010d7c:	1001703a 	wrctl	status,r2
  
  return context;
 4010d80:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 4010d84:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 4010d88:	e0bffd17 	ldw	r2,-12(fp)
 4010d8c:	10c00283 	ldbu	r3,10(r2)
 4010d90:	e0bffe17 	ldw	r2,-8(fp)
 4010d94:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 4010d98:	e0bffd17 	ldw	r2,-12(fp)
 4010d9c:	108002c4 	addi	r2,r2,11
 4010da0:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 4010da4:	e0bffe17 	ldw	r2,-8(fp)
 4010da8:	10800084 	addi	r2,r2,2
 4010dac:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4010db0:	e03ffa05 	stb	zero,-24(fp)
 4010db4:	00000d06 	br	4010dec <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 4010db8:	e0bffc17 	ldw	r2,-16(fp)
 4010dbc:	10c00003 	ldbu	r3,0(r2)
 4010dc0:	e0bffb17 	ldw	r2,-20(fp)
 4010dc4:	10c00005 	stb	r3,0(r2)
 4010dc8:	e0bffb17 	ldw	r2,-20(fp)
 4010dcc:	10800044 	addi	r2,r2,1
 4010dd0:	e0bffb15 	stw	r2,-20(fp)
 4010dd4:	e0bffc17 	ldw	r2,-16(fp)
 4010dd8:	10800044 	addi	r2,r2,1
 4010ddc:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4010de0:	e0bffa03 	ldbu	r2,-24(fp)
 4010de4:	10800044 	addi	r2,r2,1
 4010de8:	e0bffa05 	stb	r2,-24(fp)
 4010dec:	e0bffa03 	ldbu	r2,-24(fp)
 4010df0:	108000f0 	cmpltui	r2,r2,3
 4010df4:	103ff01e 	bne	r2,zero,4010db8 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 4010df8:	e0bffd17 	ldw	r2,-12(fp)
 4010dfc:	10c0020b 	ldhu	r3,8(r2)
 4010e00:	e0bffe17 	ldw	r2,-8(fp)
 4010e04:	10c0000d 	sth	r3,0(r2)
 4010e08:	e0bff917 	ldw	r2,-28(fp)
 4010e0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010e10:	e0bff717 	ldw	r2,-36(fp)
 4010e14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4010e18:	e03fff15 	stw	zero,-4(fp)
 4010e1c:	e0bfff17 	ldw	r2,-4(fp)
}
 4010e20:	e037883a 	mov	sp,fp
 4010e24:	df000017 	ldw	fp,0(sp)
 4010e28:	dec00104 	addi	sp,sp,4
 4010e2c:	f800283a 	ret

04010e30 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 4010e30:	defff904 	addi	sp,sp,-28
 4010e34:	df000615 	stw	fp,24(sp)
 4010e38:	df000604 	addi	fp,sp,24
 4010e3c:	e13ffd15 	stw	r4,-12(fp)
 4010e40:	e1bfff15 	stw	r6,-4(fp)
 4010e44:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4010e48:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4010e4c:	e0bfff17 	ldw	r2,-4(fp)
 4010e50:	1005003a 	cmpeq	r2,r2,zero
 4010e54:	1000331e 	bne	r2,zero,4010f24 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4010e58:	e0bffd17 	ldw	r2,-12(fp)
 4010e5c:	1004c03a 	cmpne	r2,r2,zero
 4010e60:	1000041e 	bne	r2,zero,4010e74 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4010e64:	e0ffff17 	ldw	r3,-4(fp)
 4010e68:	00800104 	movi	r2,4
 4010e6c:	18800005 	stb	r2,0(r3)
        return;
 4010e70:	00002c06 	br	4010f24 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4010e74:	e0bffd17 	ldw	r2,-12(fp)
 4010e78:	10800003 	ldbu	r2,0(r2)
 4010e7c:	10803fcc 	andi	r2,r2,255
 4010e80:	108000e0 	cmpeqi	r2,r2,3
 4010e84:	1000041e 	bne	r2,zero,4010e98 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 4010e88:	e0ffff17 	ldw	r3,-4(fp)
 4010e8c:	00800044 	movi	r2,1
 4010e90:	18800005 	stb	r2,0(r3)
        return;
 4010e94:	00002306 	br	4010f24 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010e98:	0005303a 	rdctl	r2,status
 4010e9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010ea0:	e0fffb17 	ldw	r3,-20(fp)
 4010ea4:	00bfff84 	movi	r2,-2
 4010ea8:	1884703a 	and	r2,r3,r2
 4010eac:	1001703a 	wrctl	status,r2
  
  return context;
 4010eb0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4010eb4:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 4010eb8:	e0bfff17 	ldw	r2,-4(fp)
 4010ebc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 4010ec0:	e0bffd17 	ldw	r2,-12(fp)
 4010ec4:	1080020b 	ldhu	r2,8(r2)
 4010ec8:	10bfffcc 	andi	r2,r2,65535
 4010ecc:	1005003a 	cmpeq	r2,r2,zero
 4010ed0:	1000041e 	bne	r2,zero,4010ee4 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 4010ed4:	e0fffd17 	ldw	r3,-12(fp)
 4010ed8:	e0bffe0b 	ldhu	r2,-8(fp)
 4010edc:	1880020d 	sth	r2,8(r3)
 4010ee0:	00000c06 	br	4010f14 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 4010ee4:	e0bffd17 	ldw	r2,-12(fp)
 4010ee8:	10800283 	ldbu	r2,10(r2)
 4010eec:	10803fcc 	andi	r2,r2,255
 4010ef0:	1004c03a 	cmpne	r2,r2,zero
 4010ef4:	1000041e 	bne	r2,zero,4010f08 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 4010ef8:	e0fffd17 	ldw	r3,-12(fp)
 4010efc:	e0bffe0b 	ldhu	r2,-8(fp)
 4010f00:	1880020d 	sth	r2,8(r3)
 4010f04:	00000306 	br	4010f14 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 4010f08:	e0ffff17 	ldw	r3,-4(fp)
 4010f0c:	00801244 	movi	r2,73
 4010f10:	18800005 	stb	r2,0(r3)
 4010f14:	e0bffc17 	ldw	r2,-16(fp)
 4010f18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010f1c:	e0bffa17 	ldw	r2,-24(fp)
 4010f20:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 4010f24:	e037883a 	mov	sp,fp
 4010f28:	df000017 	ldw	fp,0(sp)
 4010f2c:	dec00104 	addi	sp,sp,4
 4010f30:	f800283a 	ret

04010f34 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 4010f34:	defff004 	addi	sp,sp,-64
 4010f38:	dfc00f15 	stw	ra,60(sp)
 4010f3c:	df000e15 	stw	fp,56(sp)
 4010f40:	df000e04 	addi	fp,sp,56
 4010f44:	e13ffd05 	stb	r4,-12(fp)
 4010f48:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 4010f4c:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 4010f50:	e0bffd03 	ldbu	r2,-12(fp)
 4010f54:	10800530 	cmpltui	r2,r2,20
 4010f58:	1000061e 	bne	r2,zero,4010f74 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 4010f5c:	e0bffd03 	ldbu	r2,-12(fp)
 4010f60:	10803fe0 	cmpeqi	r2,r2,255
 4010f64:	1000031e 	bne	r2,zero,4010f74 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 4010f68:	00800a84 	movi	r2,42
 4010f6c:	e0bfff15 	stw	r2,-4(fp)
 4010f70:	00014706 	br	4011490 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 4010f74:	e0bffe03 	ldbu	r2,-8(fp)
 4010f78:	10800530 	cmpltui	r2,r2,20
 4010f7c:	1000031e 	bne	r2,zero,4010f8c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 4010f80:	00800a84 	movi	r2,42
 4010f84:	e0bfff15 	stw	r2,-4(fp)
 4010f88:	00014106 	br	4011490 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010f8c:	0005303a 	rdctl	r2,status
 4010f90:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010f94:	e0fff617 	ldw	r3,-40(fp)
 4010f98:	00bfff84 	movi	r2,-2
 4010f9c:	1884703a 	and	r2,r3,r2
 4010fa0:	1001703a 	wrctl	status,r2
  
  return context;
 4010fa4:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4010fa8:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 4010fac:	e0bffe03 	ldbu	r2,-8(fp)
 4010fb0:	00c100b4 	movhi	r3,1026
 4010fb4:	18d3db04 	addi	r3,r3,20332
 4010fb8:	1085883a 	add	r2,r2,r2
 4010fbc:	1085883a 	add	r2,r2,r2
 4010fc0:	10c5883a 	add	r2,r2,r3
 4010fc4:	10800017 	ldw	r2,0(r2)
 4010fc8:	1005003a 	cmpeq	r2,r2,zero
 4010fcc:	1000071e 	bne	r2,zero,4010fec <OSTaskChangePrio+0xb8>
 4010fd0:	e0bff717 	ldw	r2,-36(fp)
 4010fd4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010fd8:	e0bff517 	ldw	r2,-44(fp)
 4010fdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 4010fe0:	00800a04 	movi	r2,40
 4010fe4:	e0bfff15 	stw	r2,-4(fp)
 4010fe8:	00012906 	br	4011490 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 4010fec:	e0bffd03 	ldbu	r2,-12(fp)
 4010ff0:	10803fd8 	cmpnei	r2,r2,255
 4010ff4:	1000051e 	bne	r2,zero,401100c <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 4010ff8:	008100b4 	movhi	r2,1026
 4010ffc:	10a1ed04 	addi	r2,r2,-30796
 4011000:	10800017 	ldw	r2,0(r2)
 4011004:	10800c83 	ldbu	r2,50(r2)
 4011008:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 401100c:	e0bffd03 	ldbu	r2,-12(fp)
 4011010:	00c100b4 	movhi	r3,1026
 4011014:	18d3db04 	addi	r3,r3,20332
 4011018:	1085883a 	add	r2,r2,r2
 401101c:	1085883a 	add	r2,r2,r2
 4011020:	10c5883a 	add	r2,r2,r3
 4011024:	10800017 	ldw	r2,0(r2)
 4011028:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 401102c:	e0bffa17 	ldw	r2,-24(fp)
 4011030:	1004c03a 	cmpne	r2,r2,zero
 4011034:	1000071e 	bne	r2,zero,4011054 <OSTaskChangePrio+0x120>
 4011038:	e0bff717 	ldw	r2,-36(fp)
 401103c:	e0bff415 	stw	r2,-48(fp)
 4011040:	e0bff417 	ldw	r2,-48(fp)
 4011044:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 4011048:	00800a44 	movi	r2,41
 401104c:	e0bfff15 	stw	r2,-4(fp)
 4011050:	00010f06 	br	4011490 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 4011054:	e0bffa17 	ldw	r2,-24(fp)
 4011058:	10800058 	cmpnei	r2,r2,1
 401105c:	1000071e 	bne	r2,zero,401107c <OSTaskChangePrio+0x148>
 4011060:	e0bff717 	ldw	r2,-36(fp)
 4011064:	e0bff315 	stw	r2,-52(fp)
 4011068:	e0bff317 	ldw	r2,-52(fp)
 401106c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 4011070:	008010c4 	movi	r2,67
 4011074:	e0bfff15 	stw	r2,-4(fp)
 4011078:	00010506 	br	4011490 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 401107c:	e0bffe03 	ldbu	r2,-8(fp)
 4011080:	1004d0fa 	srli	r2,r2,3
 4011084:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 4011088:	e0bffe03 	ldbu	r2,-8(fp)
 401108c:	108001cc 	andi	r2,r2,7
 4011090:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 4011094:	e0fff983 	ldbu	r3,-26(fp)
 4011098:	00800044 	movi	r2,1
 401109c:	10c4983a 	sll	r2,r2,r3
 40110a0:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 40110a4:	e0fff943 	ldbu	r3,-27(fp)
 40110a8:	00800044 	movi	r2,1
 40110ac:	10c4983a 	sll	r2,r2,r3
 40110b0:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 40110b4:	e0bffd03 	ldbu	r2,-12(fp)
 40110b8:	00c100b4 	movhi	r3,1026
 40110bc:	18d3db04 	addi	r3,r3,20332
 40110c0:	1085883a 	add	r2,r2,r2
 40110c4:	1085883a 	add	r2,r2,r2
 40110c8:	10c5883a 	add	r2,r2,r3
 40110cc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 40110d0:	e0bffe03 	ldbu	r2,-8(fp)
 40110d4:	00c100b4 	movhi	r3,1026
 40110d8:	18d3db04 	addi	r3,r3,20332
 40110dc:	1085883a 	add	r2,r2,r2
 40110e0:	1085883a 	add	r2,r2,r2
 40110e4:	10c7883a 	add	r3,r2,r3
 40110e8:	e0bffa17 	ldw	r2,-24(fp)
 40110ec:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 40110f0:	e0bffa17 	ldw	r2,-24(fp)
 40110f4:	10800d03 	ldbu	r2,52(r2)
 40110f8:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 40110fc:	e0bffa17 	ldw	r2,-24(fp)
 4011100:	10800f43 	ldbu	r2,61(r2)
 4011104:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 4011108:	e0bffa17 	ldw	r2,-24(fp)
 401110c:	10800f03 	ldbu	r2,60(r2)
 4011110:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 4011114:	e0fff903 	ldbu	r3,-28(fp)
 4011118:	008100b4 	movhi	r2,1026
 401111c:	10a1ea44 	addi	r2,r2,-30807
 4011120:	10c5883a 	add	r2,r2,r3
 4011124:	10c00003 	ldbu	r3,0(r2)
 4011128:	e0bff803 	ldbu	r2,-32(fp)
 401112c:	1884703a 	and	r2,r3,r2
 4011130:	10803fcc 	andi	r2,r2,255
 4011134:	1005003a 	cmpeq	r2,r2,zero
 4011138:	1000381e 	bne	r2,zero,401121c <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 401113c:	e13ff903 	ldbu	r4,-28(fp)
 4011140:	e0fff903 	ldbu	r3,-28(fp)
 4011144:	008100b4 	movhi	r2,1026
 4011148:	10a1ea44 	addi	r2,r2,-30807
 401114c:	10c5883a 	add	r2,r2,r3
 4011150:	10800003 	ldbu	r2,0(r2)
 4011154:	1007883a 	mov	r3,r2
 4011158:	e0bff803 	ldbu	r2,-32(fp)
 401115c:	0084303a 	nor	r2,zero,r2
 4011160:	1884703a 	and	r2,r3,r2
 4011164:	1007883a 	mov	r3,r2
 4011168:	008100b4 	movhi	r2,1026
 401116c:	10a1ea44 	addi	r2,r2,-30807
 4011170:	1105883a 	add	r2,r2,r4
 4011174:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 4011178:	e0fff903 	ldbu	r3,-28(fp)
 401117c:	008100b4 	movhi	r2,1026
 4011180:	10a1ea44 	addi	r2,r2,-30807
 4011184:	10c5883a 	add	r2,r2,r3
 4011188:	10800003 	ldbu	r2,0(r2)
 401118c:	10803fcc 	andi	r2,r2,255
 4011190:	1004c03a 	cmpne	r2,r2,zero
 4011194:	10000b1e 	bne	r2,zero,40111c4 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 4011198:	e0bff843 	ldbu	r2,-31(fp)
 401119c:	0084303a 	nor	r2,zero,r2
 40111a0:	1007883a 	mov	r3,r2
 40111a4:	008100b4 	movhi	r2,1026
 40111a8:	10a1ea04 	addi	r2,r2,-30808
 40111ac:	10800003 	ldbu	r2,0(r2)
 40111b0:	1884703a 	and	r2,r3,r2
 40111b4:	1007883a 	mov	r3,r2
 40111b8:	008100b4 	movhi	r2,1026
 40111bc:	10a1ea04 	addi	r2,r2,-30808
 40111c0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 40111c4:	008100b4 	movhi	r2,1026
 40111c8:	10a1ea04 	addi	r2,r2,-30808
 40111cc:	10c00003 	ldbu	r3,0(r2)
 40111d0:	e0bff8c3 	ldbu	r2,-29(fp)
 40111d4:	1884b03a 	or	r2,r3,r2
 40111d8:	1007883a 	mov	r3,r2
 40111dc:	008100b4 	movhi	r2,1026
 40111e0:	10a1ea04 	addi	r2,r2,-30808
 40111e4:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 40111e8:	e13ff983 	ldbu	r4,-26(fp)
 40111ec:	e0fff983 	ldbu	r3,-26(fp)
 40111f0:	008100b4 	movhi	r2,1026
 40111f4:	10a1ea44 	addi	r2,r2,-30807
 40111f8:	10c5883a 	add	r2,r2,r3
 40111fc:	10c00003 	ldbu	r3,0(r2)
 4011200:	e0bff883 	ldbu	r2,-30(fp)
 4011204:	1884b03a 	or	r2,r3,r2
 4011208:	1007883a 	mov	r3,r2
 401120c:	008100b4 	movhi	r2,1026
 4011210:	10a1ea44 	addi	r2,r2,-30807
 4011214:	1105883a 	add	r2,r2,r4
 4011218:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 401121c:	e0bffa17 	ldw	r2,-24(fp)
 4011220:	10800717 	ldw	r2,28(r2)
 4011224:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 4011228:	e0bffc17 	ldw	r2,-16(fp)
 401122c:	1005003a 	cmpeq	r2,r2,zero
 4011230:	1000341e 	bne	r2,zero,4011304 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 4011234:	e13ff903 	ldbu	r4,-28(fp)
 4011238:	e0fff903 	ldbu	r3,-28(fp)
 401123c:	e0bffc17 	ldw	r2,-16(fp)
 4011240:	1885883a 	add	r2,r3,r2
 4011244:	10800204 	addi	r2,r2,8
 4011248:	108000c3 	ldbu	r2,3(r2)
 401124c:	1007883a 	mov	r3,r2
 4011250:	e0bff803 	ldbu	r2,-32(fp)
 4011254:	0084303a 	nor	r2,zero,r2
 4011258:	1884703a 	and	r2,r3,r2
 401125c:	1007883a 	mov	r3,r2
 4011260:	e0bffc17 	ldw	r2,-16(fp)
 4011264:	2085883a 	add	r2,r4,r2
 4011268:	10800204 	addi	r2,r2,8
 401126c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 4011270:	e0fff903 	ldbu	r3,-28(fp)
 4011274:	e0bffc17 	ldw	r2,-16(fp)
 4011278:	1885883a 	add	r2,r3,r2
 401127c:	10800204 	addi	r2,r2,8
 4011280:	108000c3 	ldbu	r2,3(r2)
 4011284:	10803fcc 	andi	r2,r2,255
 4011288:	1004c03a 	cmpne	r2,r2,zero
 401128c:	1000091e 	bne	r2,zero,40112b4 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 4011290:	e0bffc17 	ldw	r2,-16(fp)
 4011294:	10800283 	ldbu	r2,10(r2)
 4011298:	1007883a 	mov	r3,r2
 401129c:	e0bff843 	ldbu	r2,-31(fp)
 40112a0:	0084303a 	nor	r2,zero,r2
 40112a4:	1884703a 	and	r2,r3,r2
 40112a8:	1007883a 	mov	r3,r2
 40112ac:	e0bffc17 	ldw	r2,-16(fp)
 40112b0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 40112b4:	e0bffc17 	ldw	r2,-16(fp)
 40112b8:	10c00283 	ldbu	r3,10(r2)
 40112bc:	e0bff8c3 	ldbu	r2,-29(fp)
 40112c0:	1884b03a 	or	r2,r3,r2
 40112c4:	1007883a 	mov	r3,r2
 40112c8:	e0bffc17 	ldw	r2,-16(fp)
 40112cc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 40112d0:	e13ff983 	ldbu	r4,-26(fp)
 40112d4:	e0fff983 	ldbu	r3,-26(fp)
 40112d8:	e0bffc17 	ldw	r2,-16(fp)
 40112dc:	1885883a 	add	r2,r3,r2
 40112e0:	10800204 	addi	r2,r2,8
 40112e4:	10c000c3 	ldbu	r3,3(r2)
 40112e8:	e0bff883 	ldbu	r2,-30(fp)
 40112ec:	1884b03a 	or	r2,r3,r2
 40112f0:	1007883a 	mov	r3,r2
 40112f4:	e0bffc17 	ldw	r2,-16(fp)
 40112f8:	2085883a 	add	r2,r4,r2
 40112fc:	10800204 	addi	r2,r2,8
 4011300:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 4011304:	e0bffa17 	ldw	r2,-24(fp)
 4011308:	10800817 	ldw	r2,32(r2)
 401130c:	1005003a 	cmpeq	r2,r2,zero
 4011310:	1000441e 	bne	r2,zero,4011424 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 4011314:	e0bffa17 	ldw	r2,-24(fp)
 4011318:	10800817 	ldw	r2,32(r2)
 401131c:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 4011320:	e0bffb17 	ldw	r2,-20(fp)
 4011324:	10800017 	ldw	r2,0(r2)
 4011328:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 401132c:	00003a06 	br	4011418 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 4011330:	e13ff903 	ldbu	r4,-28(fp)
 4011334:	e0fff903 	ldbu	r3,-28(fp)
 4011338:	e0bffc17 	ldw	r2,-16(fp)
 401133c:	1885883a 	add	r2,r3,r2
 4011340:	10800204 	addi	r2,r2,8
 4011344:	108000c3 	ldbu	r2,3(r2)
 4011348:	1007883a 	mov	r3,r2
 401134c:	e0bff803 	ldbu	r2,-32(fp)
 4011350:	0084303a 	nor	r2,zero,r2
 4011354:	1884703a 	and	r2,r3,r2
 4011358:	1007883a 	mov	r3,r2
 401135c:	e0bffc17 	ldw	r2,-16(fp)
 4011360:	2085883a 	add	r2,r4,r2
 4011364:	10800204 	addi	r2,r2,8
 4011368:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 401136c:	e0fff903 	ldbu	r3,-28(fp)
 4011370:	e0bffc17 	ldw	r2,-16(fp)
 4011374:	1885883a 	add	r2,r3,r2
 4011378:	10800204 	addi	r2,r2,8
 401137c:	108000c3 	ldbu	r2,3(r2)
 4011380:	10803fcc 	andi	r2,r2,255
 4011384:	1004c03a 	cmpne	r2,r2,zero
 4011388:	1000091e 	bne	r2,zero,40113b0 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 401138c:	e0bffc17 	ldw	r2,-16(fp)
 4011390:	10800283 	ldbu	r2,10(r2)
 4011394:	1007883a 	mov	r3,r2
 4011398:	e0bff843 	ldbu	r2,-31(fp)
 401139c:	0084303a 	nor	r2,zero,r2
 40113a0:	1884703a 	and	r2,r3,r2
 40113a4:	1007883a 	mov	r3,r2
 40113a8:	e0bffc17 	ldw	r2,-16(fp)
 40113ac:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 40113b0:	e0bffc17 	ldw	r2,-16(fp)
 40113b4:	10c00283 	ldbu	r3,10(r2)
 40113b8:	e0bff8c3 	ldbu	r2,-29(fp)
 40113bc:	1884b03a 	or	r2,r3,r2
 40113c0:	1007883a 	mov	r3,r2
 40113c4:	e0bffc17 	ldw	r2,-16(fp)
 40113c8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 40113cc:	e13ff983 	ldbu	r4,-26(fp)
 40113d0:	e0fff983 	ldbu	r3,-26(fp)
 40113d4:	e0bffc17 	ldw	r2,-16(fp)
 40113d8:	1885883a 	add	r2,r3,r2
 40113dc:	10800204 	addi	r2,r2,8
 40113e0:	10c000c3 	ldbu	r3,3(r2)
 40113e4:	e0bff883 	ldbu	r2,-30(fp)
 40113e8:	1884b03a 	or	r2,r3,r2
 40113ec:	1007883a 	mov	r3,r2
 40113f0:	e0bffc17 	ldw	r2,-16(fp)
 40113f4:	2085883a 	add	r2,r4,r2
 40113f8:	10800204 	addi	r2,r2,8
 40113fc:	10c000c5 	stb	r3,3(r2)
            pevents++;
 4011400:	e0bffb17 	ldw	r2,-20(fp)
 4011404:	10800104 	addi	r2,r2,4
 4011408:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 401140c:	e0bffb17 	ldw	r2,-20(fp)
 4011410:	10800017 	ldw	r2,0(r2)
 4011414:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 4011418:	e0bffc17 	ldw	r2,-16(fp)
 401141c:	1004c03a 	cmpne	r2,r2,zero
 4011420:	103fc31e 	bne	r2,zero,4011330 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 4011424:	e0fffa17 	ldw	r3,-24(fp)
 4011428:	e0bffe03 	ldbu	r2,-8(fp)
 401142c:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 4011430:	e0fffa17 	ldw	r3,-24(fp)
 4011434:	e0bff983 	ldbu	r2,-26(fp)
 4011438:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 401143c:	e0fffa17 	ldw	r3,-24(fp)
 4011440:	e0bff943 	ldbu	r2,-27(fp)
 4011444:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 4011448:	e0fffa17 	ldw	r3,-24(fp)
 401144c:	e0bff8c3 	ldbu	r2,-29(fp)
 4011450:	18800f45 	stb	r2,61(r3)
    ptcb->OSTCBBitX = bitx_new;
 4011454:	e0fffa17 	ldw	r3,-24(fp)
 4011458:	e0bff883 	ldbu	r2,-30(fp)
 401145c:	18800f05 	stb	r2,60(r3)
 4011460:	e0bff717 	ldw	r2,-36(fp)
 4011464:	e0bff215 	stw	r2,-56(fp)
 4011468:	e0bff217 	ldw	r2,-56(fp)
 401146c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4011470:	008100b4 	movhi	r2,1026
 4011474:	10a1de44 	addi	r2,r2,-30855
 4011478:	10800003 	ldbu	r2,0(r2)
 401147c:	10803fcc 	andi	r2,r2,255
 4011480:	10800058 	cmpnei	r2,r2,1
 4011484:	1000011e 	bne	r2,zero,401148c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 4011488:	400c6580 	call	400c658 <OS_Sched>
    }
    return (OS_ERR_NONE);
 401148c:	e03fff15 	stw	zero,-4(fp)
 4011490:	e0bfff17 	ldw	r2,-4(fp)
}
 4011494:	e037883a 	mov	sp,fp
 4011498:	dfc00117 	ldw	ra,4(sp)
 401149c:	df000017 	ldw	fp,0(sp)
 40114a0:	dec00204 	addi	sp,sp,8
 40114a4:	f800283a 	ret

040114a8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 40114a8:	deffed04 	addi	sp,sp,-76
 40114ac:	dfc01215 	stw	ra,72(sp)
 40114b0:	df001115 	stw	fp,68(sp)
 40114b4:	df001104 	addi	fp,sp,68
 40114b8:	e13ffb15 	stw	r4,-20(fp)
 40114bc:	e17ffc15 	stw	r5,-16(fp)
 40114c0:	e1bffd15 	stw	r6,-12(fp)
 40114c4:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 40114c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 40114cc:	e0bffe03 	ldbu	r2,-8(fp)
 40114d0:	10800570 	cmpltui	r2,r2,21
 40114d4:	1000031e 	bne	r2,zero,40114e4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 40114d8:	00800a84 	movi	r2,42
 40114dc:	e0bfff15 	stw	r2,-4(fp)
 40114e0:	00005906 	br	4011648 <OSTaskCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40114e4:	0005303a 	rdctl	r2,status
 40114e8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40114ec:	e0fff717 	ldw	r3,-36(fp)
 40114f0:	00bfff84 	movi	r2,-2
 40114f4:	1884703a 	and	r2,r3,r2
 40114f8:	1001703a 	wrctl	status,r2
  
  return context;
 40114fc:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4011500:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4011504:	008100b4 	movhi	r2,1026
 4011508:	10a1ec04 	addi	r2,r2,-30800
 401150c:	10800003 	ldbu	r2,0(r2)
 4011510:	10803fcc 	andi	r2,r2,255
 4011514:	1005003a 	cmpeq	r2,r2,zero
 4011518:	1000071e 	bne	r2,zero,4011538 <OSTaskCreate+0x90>
 401151c:	e0bff817 	ldw	r2,-32(fp)
 4011520:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011524:	e0bff617 	ldw	r2,-40(fp)
 4011528:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 401152c:	00800f04 	movi	r2,60
 4011530:	e0bfff15 	stw	r2,-4(fp)
 4011534:	00004406 	br	4011648 <OSTaskCreate+0x1a0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4011538:	e0bffe03 	ldbu	r2,-8(fp)
 401153c:	00c100b4 	movhi	r3,1026
 4011540:	18d3db04 	addi	r3,r3,20332
 4011544:	1085883a 	add	r2,r2,r2
 4011548:	1085883a 	add	r2,r2,r2
 401154c:	10c5883a 	add	r2,r2,r3
 4011550:	10800017 	ldw	r2,0(r2)
 4011554:	1004c03a 	cmpne	r2,r2,zero
 4011558:	1000351e 	bne	r2,zero,4011630 <OSTaskCreate+0x188>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 401155c:	e0bffe03 	ldbu	r2,-8(fp)
 4011560:	00c100b4 	movhi	r3,1026
 4011564:	18d3db04 	addi	r3,r3,20332
 4011568:	1085883a 	add	r2,r2,r2
 401156c:	1085883a 	add	r2,r2,r2
 4011570:	10c7883a 	add	r3,r2,r3
 4011574:	00800044 	movi	r2,1
 4011578:	18800015 	stw	r2,0(r3)
 401157c:	e0bff817 	ldw	r2,-32(fp)
 4011580:	e0bff515 	stw	r2,-44(fp)
 4011584:	e0bff517 	ldw	r2,-44(fp)
 4011588:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 401158c:	e13ffb17 	ldw	r4,-20(fp)
 4011590:	e17ffc17 	ldw	r5,-16(fp)
 4011594:	e1bffd17 	ldw	r6,-12(fp)
 4011598:	000f883a 	mov	r7,zero
 401159c:	40158f40 	call	40158f4 <OSTaskStkInit>
 40115a0:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 40115a4:	e13ffe03 	ldbu	r4,-8(fp)
 40115a8:	d8000015 	stw	zero,0(sp)
 40115ac:	d8000115 	stw	zero,4(sp)
 40115b0:	d8000215 	stw	zero,8(sp)
 40115b4:	e17ffa17 	ldw	r5,-24(fp)
 40115b8:	000d883a 	mov	r6,zero
 40115bc:	000f883a 	mov	r7,zero
 40115c0:	400ca880 	call	400ca88 <OS_TCBInit>
 40115c4:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 40115c8:	e0bff903 	ldbu	r2,-28(fp)
 40115cc:	1004c03a 	cmpne	r2,r2,zero
 40115d0:	1000011e 	bne	r2,zero,40115d8 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 40115d4:	00001306 	br	4011624 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40115d8:	0005303a 	rdctl	r2,status
 40115dc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40115e0:	e0fff417 	ldw	r3,-48(fp)
 40115e4:	00bfff84 	movi	r2,-2
 40115e8:	1884703a 	and	r2,r3,r2
 40115ec:	1001703a 	wrctl	status,r2
  
  return context;
 40115f0:	e0bff417 	ldw	r2,-48(fp)
                //OS_Sched();
            }
        } else {
            OS_ENTER_CRITICAL();
 40115f4:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 40115f8:	e0bffe03 	ldbu	r2,-8(fp)
 40115fc:	00c100b4 	movhi	r3,1026
 4011600:	18d3db04 	addi	r3,r3,20332
 4011604:	1085883a 	add	r2,r2,r2
 4011608:	1085883a 	add	r2,r2,r2
 401160c:	10c5883a 	add	r2,r2,r3
 4011610:	10000015 	stw	zero,0(r2)
 4011614:	e0bff817 	ldw	r2,-32(fp)
 4011618:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401161c:	e0bff317 	ldw	r2,-52(fp)
 4011620:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 4011624:	e0bff903 	ldbu	r2,-28(fp)
 4011628:	e0bfff15 	stw	r2,-4(fp)
 401162c:	00000606 	br	4011648 <OSTaskCreate+0x1a0>
 4011630:	e0bff817 	ldw	r2,-32(fp)
 4011634:	e0bff215 	stw	r2,-56(fp)
 4011638:	e0bff217 	ldw	r2,-56(fp)
 401163c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 4011640:	00800a04 	movi	r2,40
 4011644:	e0bfff15 	stw	r2,-4(fp)
 4011648:	e0bfff17 	ldw	r2,-4(fp)
}
 401164c:	e037883a 	mov	sp,fp
 4011650:	dfc00117 	ldw	ra,4(sp)
 4011654:	df000017 	ldw	fp,0(sp)
 4011658:	dec00204 	addi	sp,sp,8
 401165c:	f800283a 	ret

04011660 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 4011660:	deffeb04 	addi	sp,sp,-84
 4011664:	dfc01415 	stw	ra,80(sp)
 4011668:	df001315 	stw	fp,76(sp)
 401166c:	df001304 	addi	fp,sp,76
 4011670:	e13ff915 	stw	r4,-28(fp)
 4011674:	e17ffa15 	stw	r5,-24(fp)
 4011678:	e1bffb15 	stw	r6,-20(fp)
 401167c:	e0800217 	ldw	r2,8(fp)
 4011680:	e0c00617 	ldw	r3,24(fp)
 4011684:	e1fffc05 	stb	r7,-16(fp)
 4011688:	e0bffd0d 	sth	r2,-12(fp)
 401168c:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 4011690:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 4011694:	e0bffc03 	ldbu	r2,-16(fp)
 4011698:	10800570 	cmpltui	r2,r2,21
 401169c:	1000031e 	bne	r2,zero,40116ac <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 40116a0:	00800a84 	movi	r2,42
 40116a4:	e0bfff15 	stw	r2,-4(fp)
 40116a8:	00006006 	br	401182c <OSTaskCreateExt+0x1cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40116ac:	0005303a 	rdctl	r2,status
 40116b0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40116b4:	e0fff517 	ldw	r3,-44(fp)
 40116b8:	00bfff84 	movi	r2,-2
 40116bc:	1884703a 	and	r2,r3,r2
 40116c0:	1001703a 	wrctl	status,r2
  
  return context;
 40116c4:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40116c8:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 40116cc:	008100b4 	movhi	r2,1026
 40116d0:	10a1ec04 	addi	r2,r2,-30800
 40116d4:	10800003 	ldbu	r2,0(r2)
 40116d8:	10803fcc 	andi	r2,r2,255
 40116dc:	1005003a 	cmpeq	r2,r2,zero
 40116e0:	1000071e 	bne	r2,zero,4011700 <OSTaskCreateExt+0xa0>
 40116e4:	e0bff617 	ldw	r2,-40(fp)
 40116e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40116ec:	e0bff417 	ldw	r2,-48(fp)
 40116f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 40116f4:	00800f04 	movi	r2,60
 40116f8:	e0bfff15 	stw	r2,-4(fp)
 40116fc:	00004b06 	br	401182c <OSTaskCreateExt+0x1cc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4011700:	e0bffc03 	ldbu	r2,-16(fp)
 4011704:	00c100b4 	movhi	r3,1026
 4011708:	18d3db04 	addi	r3,r3,20332
 401170c:	1085883a 	add	r2,r2,r2
 4011710:	1085883a 	add	r2,r2,r2
 4011714:	10c5883a 	add	r2,r2,r3
 4011718:	10800017 	ldw	r2,0(r2)
 401171c:	1004c03a 	cmpne	r2,r2,zero
 4011720:	10003c1e 	bne	r2,zero,4011814 <OSTaskCreateExt+0x1b4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 4011724:	e0bffc03 	ldbu	r2,-16(fp)
 4011728:	00c100b4 	movhi	r3,1026
 401172c:	18d3db04 	addi	r3,r3,20332
 4011730:	1085883a 	add	r2,r2,r2
 4011734:	1085883a 	add	r2,r2,r2
 4011738:	10c7883a 	add	r3,r2,r3
 401173c:	00800044 	movi	r2,1
 4011740:	18800015 	stw	r2,0(r3)
 4011744:	e0bff617 	ldw	r2,-40(fp)
 4011748:	e0bff315 	stw	r2,-52(fp)
 401174c:	e0bff317 	ldw	r2,-52(fp)
 4011750:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 4011754:	e1bffe0b 	ldhu	r6,-8(fp)
 4011758:	e1000317 	ldw	r4,12(fp)
 401175c:	e1400417 	ldw	r5,16(fp)
 4011760:	40128c00 	call	40128c0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 4011764:	e1fffe0b 	ldhu	r7,-8(fp)
 4011768:	e13ff917 	ldw	r4,-28(fp)
 401176c:	e17ffa17 	ldw	r5,-24(fp)
 4011770:	e1bffb17 	ldw	r6,-20(fp)
 4011774:	40158f40 	call	40158f4 <OSTaskStkInit>
 4011778:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 401177c:	e13ffc03 	ldbu	r4,-16(fp)
 4011780:	e1fffd0b 	ldhu	r7,-12(fp)
 4011784:	e0fffe0b 	ldhu	r3,-8(fp)
 4011788:	e0800417 	ldw	r2,16(fp)
 401178c:	d8800015 	stw	r2,0(sp)
 4011790:	e0800517 	ldw	r2,20(fp)
 4011794:	d8800115 	stw	r2,4(sp)
 4011798:	d8c00215 	stw	r3,8(sp)
 401179c:	e17ff817 	ldw	r5,-32(fp)
 40117a0:	e1800317 	ldw	r6,12(fp)
 40117a4:	400ca880 	call	400ca88 <OS_TCBInit>
 40117a8:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 40117ac:	e0bff703 	ldbu	r2,-36(fp)
 40117b0:	1004c03a 	cmpne	r2,r2,zero
 40117b4:	1000011e 	bne	r2,zero,40117bc <OSTaskCreateExt+0x15c>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 40117b8:	00001306 	br	4011808 <OSTaskCreateExt+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40117bc:	0005303a 	rdctl	r2,status
 40117c0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40117c4:	e0fff217 	ldw	r3,-56(fp)
 40117c8:	00bfff84 	movi	r2,-2
 40117cc:	1884703a 	and	r2,r3,r2
 40117d0:	1001703a 	wrctl	status,r2
  
  return context;
 40117d4:	e0bff217 	ldw	r2,-56(fp)
                //OS_Sched();
            }
        } else {
            OS_ENTER_CRITICAL();
 40117d8:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 40117dc:	e0bffc03 	ldbu	r2,-16(fp)
 40117e0:	00c100b4 	movhi	r3,1026
 40117e4:	18d3db04 	addi	r3,r3,20332
 40117e8:	1085883a 	add	r2,r2,r2
 40117ec:	1085883a 	add	r2,r2,r2
 40117f0:	10c5883a 	add	r2,r2,r3
 40117f4:	10000015 	stw	zero,0(r2)
 40117f8:	e0bff617 	ldw	r2,-40(fp)
 40117fc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011800:	e0bff117 	ldw	r2,-60(fp)
 4011804:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 4011808:	e0bff703 	ldbu	r2,-36(fp)
 401180c:	e0bfff15 	stw	r2,-4(fp)
 4011810:	00000606 	br	401182c <OSTaskCreateExt+0x1cc>
 4011814:	e0bff617 	ldw	r2,-40(fp)
 4011818:	e0bff015 	stw	r2,-64(fp)
 401181c:	e0bff017 	ldw	r2,-64(fp)
 4011820:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 4011824:	00800a04 	movi	r2,40
 4011828:	e0bfff15 	stw	r2,-4(fp)
 401182c:	e0bfff17 	ldw	r2,-4(fp)
}
 4011830:	e037883a 	mov	sp,fp
 4011834:	dfc00117 	ldw	ra,4(sp)
 4011838:	df000017 	ldw	fp,0(sp)
 401183c:	dec00204 	addi	sp,sp,8
 4011840:	f800283a 	ret

04011844 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 4011844:	defff304 	addi	sp,sp,-52
 4011848:	dfc00c15 	stw	ra,48(sp)
 401184c:	df000b15 	stw	fp,44(sp)
 4011850:	df000b04 	addi	fp,sp,44
 4011854:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 4011858:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 401185c:	008100b4 	movhi	r2,1026
 4011860:	10a1ec04 	addi	r2,r2,-30800
 4011864:	10800003 	ldbu	r2,0(r2)
 4011868:	10803fcc 	andi	r2,r2,255
 401186c:	1005003a 	cmpeq	r2,r2,zero
 4011870:	1000031e 	bne	r2,zero,4011880 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 4011874:	00801004 	movi	r2,64
 4011878:	e0bfff15 	stw	r2,-4(fp)
 401187c:	0000ee06 	br	4011c38 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 4011880:	e0bffe03 	ldbu	r2,-8(fp)
 4011884:	10800518 	cmpnei	r2,r2,20
 4011888:	1000031e 	bne	r2,zero,4011898 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 401188c:	00800f84 	movi	r2,62
 4011890:	e0bfff15 	stw	r2,-4(fp)
 4011894:	0000e806 	br	4011c38 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 4011898:	e0bffe03 	ldbu	r2,-8(fp)
 401189c:	10800530 	cmpltui	r2,r2,20
 40118a0:	1000061e 	bne	r2,zero,40118bc <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 40118a4:	e0bffe03 	ldbu	r2,-8(fp)
 40118a8:	10803fe0 	cmpeqi	r2,r2,255
 40118ac:	1000031e 	bne	r2,zero,40118bc <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 40118b0:	00800a84 	movi	r2,42
 40118b4:	e0bfff15 	stw	r2,-4(fp)
 40118b8:	0000df06 	br	4011c38 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40118bc:	0005303a 	rdctl	r2,status
 40118c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40118c4:	e0fffa17 	ldw	r3,-24(fp)
 40118c8:	00bfff84 	movi	r2,-2
 40118cc:	1884703a 	and	r2,r3,r2
 40118d0:	1001703a 	wrctl	status,r2
  
  return context;
 40118d4:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 40118d8:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 40118dc:	e0bffe03 	ldbu	r2,-8(fp)
 40118e0:	10803fd8 	cmpnei	r2,r2,255
 40118e4:	1000051e 	bne	r2,zero,40118fc <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 40118e8:	008100b4 	movhi	r2,1026
 40118ec:	10a1ed04 	addi	r2,r2,-30796
 40118f0:	10800017 	ldw	r2,0(r2)
 40118f4:	10800c83 	ldbu	r2,50(r2)
 40118f8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 40118fc:	e0bffe03 	ldbu	r2,-8(fp)
 4011900:	00c100b4 	movhi	r3,1026
 4011904:	18d3db04 	addi	r3,r3,20332
 4011908:	1085883a 	add	r2,r2,r2
 401190c:	1085883a 	add	r2,r2,r2
 4011910:	10c5883a 	add	r2,r2,r3
 4011914:	10800017 	ldw	r2,0(r2)
 4011918:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 401191c:	e0bffc17 	ldw	r2,-16(fp)
 4011920:	1004c03a 	cmpne	r2,r2,zero
 4011924:	1000071e 	bne	r2,zero,4011944 <OSTaskDel+0x100>
 4011928:	e0bffb17 	ldw	r2,-20(fp)
 401192c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011930:	e0bff917 	ldw	r2,-28(fp)
 4011934:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4011938:	008010c4 	movi	r2,67
 401193c:	e0bfff15 	stw	r2,-4(fp)
 4011940:	0000bd06 	br	4011c38 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 4011944:	e0bffc17 	ldw	r2,-16(fp)
 4011948:	10800058 	cmpnei	r2,r2,1
 401194c:	1000071e 	bne	r2,zero,401196c <OSTaskDel+0x128>
 4011950:	e0bffb17 	ldw	r2,-20(fp)
 4011954:	e0bff815 	stw	r2,-32(fp)
 4011958:	e0bff817 	ldw	r2,-32(fp)
 401195c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 4011960:	00800f44 	movi	r2,61
 4011964:	e0bfff15 	stw	r2,-4(fp)
 4011968:	0000b306 	br	4011c38 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 401196c:	e0bffc17 	ldw	r2,-16(fp)
 4011970:	10800d03 	ldbu	r2,52(r2)
 4011974:	11003fcc 	andi	r4,r2,255
 4011978:	e0bffc17 	ldw	r2,-16(fp)
 401197c:	10800d03 	ldbu	r2,52(r2)
 4011980:	10c03fcc 	andi	r3,r2,255
 4011984:	008100b4 	movhi	r2,1026
 4011988:	10a1ea44 	addi	r2,r2,-30807
 401198c:	10c5883a 	add	r2,r2,r3
 4011990:	10800003 	ldbu	r2,0(r2)
 4011994:	1007883a 	mov	r3,r2
 4011998:	e0bffc17 	ldw	r2,-16(fp)
 401199c:	10800f03 	ldbu	r2,60(r2)
 40119a0:	0084303a 	nor	r2,zero,r2
 40119a4:	1884703a 	and	r2,r3,r2
 40119a8:	1007883a 	mov	r3,r2
 40119ac:	008100b4 	movhi	r2,1026
 40119b0:	10a1ea44 	addi	r2,r2,-30807
 40119b4:	1105883a 	add	r2,r2,r4
 40119b8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 40119bc:	e0bffc17 	ldw	r2,-16(fp)
 40119c0:	10800d03 	ldbu	r2,52(r2)
 40119c4:	10c03fcc 	andi	r3,r2,255
 40119c8:	008100b4 	movhi	r2,1026
 40119cc:	10a1ea44 	addi	r2,r2,-30807
 40119d0:	10c5883a 	add	r2,r2,r3
 40119d4:	10800003 	ldbu	r2,0(r2)
 40119d8:	10803fcc 	andi	r2,r2,255
 40119dc:	1004c03a 	cmpne	r2,r2,zero
 40119e0:	10000c1e 	bne	r2,zero,4011a14 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 40119e4:	e0bffc17 	ldw	r2,-16(fp)
 40119e8:	10800f43 	ldbu	r2,61(r2)
 40119ec:	0084303a 	nor	r2,zero,r2
 40119f0:	1007883a 	mov	r3,r2
 40119f4:	008100b4 	movhi	r2,1026
 40119f8:	10a1ea04 	addi	r2,r2,-30808
 40119fc:	10800003 	ldbu	r2,0(r2)
 4011a00:	1884703a 	and	r2,r3,r2
 4011a04:	1007883a 	mov	r3,r2
 4011a08:	008100b4 	movhi	r2,1026
 4011a0c:	10a1ea04 	addi	r2,r2,-30808
 4011a10:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 4011a14:	e0bffc17 	ldw	r2,-16(fp)
 4011a18:	10800717 	ldw	r2,28(r2)
 4011a1c:	1005003a 	cmpeq	r2,r2,zero
 4011a20:	1000041e 	bne	r2,zero,4011a34 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 4011a24:	e0bffc17 	ldw	r2,-16(fp)
 4011a28:	11400717 	ldw	r5,28(r2)
 4011a2c:	e13ffc17 	ldw	r4,-16(fp)
 4011a30:	400c0100 	call	400c010 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 4011a34:	e0bffc17 	ldw	r2,-16(fp)
 4011a38:	10800817 	ldw	r2,32(r2)
 4011a3c:	1005003a 	cmpeq	r2,r2,zero
 4011a40:	1000041e 	bne	r2,zero,4011a54 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 4011a44:	e0bffc17 	ldw	r2,-16(fp)
 4011a48:	11400817 	ldw	r5,32(r2)
 4011a4c:	e13ffc17 	ldw	r4,-16(fp)
 4011a50:	400c0c80 	call	400c0c8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 4011a54:	e0bffc17 	ldw	r2,-16(fp)
 4011a58:	10800a17 	ldw	r2,40(r2)
 4011a5c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 4011a60:	e0bffd17 	ldw	r2,-12(fp)
 4011a64:	1005003a 	cmpeq	r2,r2,zero
 4011a68:	1000021e 	bne	r2,zero,4011a74 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 4011a6c:	e13ffd17 	ldw	r4,-12(fp)
 4011a70:	400e7840 	call	400e784 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 4011a74:	e0bffc17 	ldw	r2,-16(fp)
 4011a78:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 4011a7c:	e0bffc17 	ldw	r2,-16(fp)
 4011a80:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 4011a84:	e0bffc17 	ldw	r2,-16(fp)
 4011a88:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 4011a8c:	008100b4 	movhi	r2,1026
 4011a90:	10a1de04 	addi	r2,r2,-30856
 4011a94:	10800003 	ldbu	r2,0(r2)
 4011a98:	10803fcc 	andi	r2,r2,255
 4011a9c:	10803fe0 	cmpeqi	r2,r2,255
 4011aa0:	1000081e 	bne	r2,zero,4011ac4 <OSTaskDel+0x280>
        OSLockNesting++;
 4011aa4:	008100b4 	movhi	r2,1026
 4011aa8:	10a1de04 	addi	r2,r2,-30856
 4011aac:	10800003 	ldbu	r2,0(r2)
 4011ab0:	10800044 	addi	r2,r2,1
 4011ab4:	1007883a 	mov	r3,r2
 4011ab8:	008100b4 	movhi	r2,1026
 4011abc:	10a1de04 	addi	r2,r2,-30856
 4011ac0:	10c00005 	stb	r3,0(r2)
 4011ac4:	e0bffb17 	ldw	r2,-20(fp)
 4011ac8:	e0bff715 	stw	r2,-36(fp)
 4011acc:	e0bff717 	ldw	r2,-36(fp)
 4011ad0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 4011ad4:	400bbfc0 	call	400bbfc <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011ad8:	0005303a 	rdctl	r2,status
 4011adc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011ae0:	e0fff617 	ldw	r3,-40(fp)
 4011ae4:	00bfff84 	movi	r2,-2
 4011ae8:	1884703a 	and	r2,r3,r2
 4011aec:	1001703a 	wrctl	status,r2
  
  return context;
 4011af0:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 4011af4:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 4011af8:	008100b4 	movhi	r2,1026
 4011afc:	10a1de04 	addi	r2,r2,-30856
 4011b00:	10800003 	ldbu	r2,0(r2)
 4011b04:	10803fcc 	andi	r2,r2,255
 4011b08:	1005003a 	cmpeq	r2,r2,zero
 4011b0c:	1000081e 	bne	r2,zero,4011b30 <OSTaskDel+0x2ec>
        OSLockNesting--;
 4011b10:	008100b4 	movhi	r2,1026
 4011b14:	10a1de04 	addi	r2,r2,-30856
 4011b18:	10800003 	ldbu	r2,0(r2)
 4011b1c:	10bfffc4 	addi	r2,r2,-1
 4011b20:	1007883a 	mov	r3,r2
 4011b24:	008100b4 	movhi	r2,1026
 4011b28:	10a1de04 	addi	r2,r2,-30856
 4011b2c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 4011b30:	e13ffc17 	ldw	r4,-16(fp)
 4011b34:	4015c240 	call	4015c24 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 4011b38:	008100b4 	movhi	r2,1026
 4011b3c:	10a1e644 	addi	r2,r2,-30823
 4011b40:	10800003 	ldbu	r2,0(r2)
 4011b44:	10bfffc4 	addi	r2,r2,-1
 4011b48:	1007883a 	mov	r3,r2
 4011b4c:	008100b4 	movhi	r2,1026
 4011b50:	10a1e644 	addi	r2,r2,-30823
 4011b54:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 4011b58:	e0bffe03 	ldbu	r2,-8(fp)
 4011b5c:	00c100b4 	movhi	r3,1026
 4011b60:	18d3db04 	addi	r3,r3,20332
 4011b64:	1085883a 	add	r2,r2,r2
 4011b68:	1085883a 	add	r2,r2,r2
 4011b6c:	10c5883a 	add	r2,r2,r3
 4011b70:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 4011b74:	e0bffc17 	ldw	r2,-16(fp)
 4011b78:	10800617 	ldw	r2,24(r2)
 4011b7c:	1004c03a 	cmpne	r2,r2,zero
 4011b80:	1000091e 	bne	r2,zero,4011ba8 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 4011b84:	e0bffc17 	ldw	r2,-16(fp)
 4011b88:	10800517 	ldw	r2,20(r2)
 4011b8c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 4011b90:	e0bffc17 	ldw	r2,-16(fp)
 4011b94:	10c00517 	ldw	r3,20(r2)
 4011b98:	008100b4 	movhi	r2,1026
 4011b9c:	10a1e104 	addi	r2,r2,-30844
 4011ba0:	10c00015 	stw	r3,0(r2)
 4011ba4:	00000a06 	br	4011bd0 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 4011ba8:	e0bffc17 	ldw	r2,-16(fp)
 4011bac:	10c00617 	ldw	r3,24(r2)
 4011bb0:	e0bffc17 	ldw	r2,-16(fp)
 4011bb4:	10800517 	ldw	r2,20(r2)
 4011bb8:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 4011bbc:	e0bffc17 	ldw	r2,-16(fp)
 4011bc0:	10c00517 	ldw	r3,20(r2)
 4011bc4:	e0bffc17 	ldw	r2,-16(fp)
 4011bc8:	10800617 	ldw	r2,24(r2)
 4011bcc:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 4011bd0:	008100b4 	movhi	r2,1026
 4011bd4:	10a1e504 	addi	r2,r2,-30828
 4011bd8:	10c00017 	ldw	r3,0(r2)
 4011bdc:	e0bffc17 	ldw	r2,-16(fp)
 4011be0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 4011be4:	00c100b4 	movhi	r3,1026
 4011be8:	18e1e504 	addi	r3,r3,-30828
 4011bec:	e0bffc17 	ldw	r2,-16(fp)
 4011bf0:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 4011bf4:	e0fffc17 	ldw	r3,-16(fp)
 4011bf8:	00800fc4 	movi	r2,63
 4011bfc:	18801505 	stb	r2,84(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4011c00:	e0bffc17 	ldw	r2,-16(fp)
 4011c04:	10001545 	stb	zero,85(r2)
 4011c08:	e0bffb17 	ldw	r2,-20(fp)
 4011c0c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011c10:	e0bff517 	ldw	r2,-44(fp)
 4011c14:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4011c18:	008100b4 	movhi	r2,1026
 4011c1c:	10a1de44 	addi	r2,r2,-30855
 4011c20:	10800003 	ldbu	r2,0(r2)
 4011c24:	10803fcc 	andi	r2,r2,255
 4011c28:	10800058 	cmpnei	r2,r2,1
 4011c2c:	1000011e 	bne	r2,zero,4011c34 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 4011c30:	400c6580 	call	400c658 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4011c34:	e03fff15 	stw	zero,-4(fp)
 4011c38:	e0bfff17 	ldw	r2,-4(fp)
}
 4011c3c:	e037883a 	mov	sp,fp
 4011c40:	dfc00117 	ldw	ra,4(sp)
 4011c44:	df000017 	ldw	fp,0(sp)
 4011c48:	dec00204 	addi	sp,sp,8
 4011c4c:	f800283a 	ret

04011c50 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 4011c50:	defff404 	addi	sp,sp,-48
 4011c54:	df000b15 	stw	fp,44(sp)
 4011c58:	df000b04 	addi	fp,sp,44
 4011c5c:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4011c60:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 4011c64:	e0bffe03 	ldbu	r2,-8(fp)
 4011c68:	10800518 	cmpnei	r2,r2,20
 4011c6c:	1000031e 	bne	r2,zero,4011c7c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 4011c70:	00800f84 	movi	r2,62
 4011c74:	e0bfff15 	stw	r2,-4(fp)
 4011c78:	00004c06 	br	4011dac <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 4011c7c:	e0bffe03 	ldbu	r2,-8(fp)
 4011c80:	10800530 	cmpltui	r2,r2,20
 4011c84:	1000061e 	bne	r2,zero,4011ca0 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 4011c88:	e0bffe03 	ldbu	r2,-8(fp)
 4011c8c:	10803fe0 	cmpeqi	r2,r2,255
 4011c90:	1000031e 	bne	r2,zero,4011ca0 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 4011c94:	00800a84 	movi	r2,42
 4011c98:	e0bfff15 	stw	r2,-4(fp)
 4011c9c:	00004306 	br	4011dac <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 4011ca0:	e0bffe03 	ldbu	r2,-8(fp)
 4011ca4:	10803fd8 	cmpnei	r2,r2,255
 4011ca8:	1000141e 	bne	r2,zero,4011cfc <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011cac:	0005303a 	rdctl	r2,status
 4011cb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011cb4:	e0fffa17 	ldw	r3,-24(fp)
 4011cb8:	00bfff84 	movi	r2,-2
 4011cbc:	1884703a 	and	r2,r3,r2
 4011cc0:	1001703a 	wrctl	status,r2
  
  return context;
 4011cc4:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 4011cc8:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 4011ccc:	008100b4 	movhi	r2,1026
 4011cd0:	10a1ed04 	addi	r2,r2,-30796
 4011cd4:	10800017 	ldw	r2,0(r2)
 4011cd8:	10800f83 	ldbu	r2,62(r2)
 4011cdc:	e0bffd05 	stb	r2,-12(fp)
 4011ce0:	e0bffb17 	ldw	r2,-20(fp)
 4011ce4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011ce8:	e0bff917 	ldw	r2,-28(fp)
 4011cec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 4011cf0:	e0bffd03 	ldbu	r2,-12(fp)
 4011cf4:	e0bfff15 	stw	r2,-4(fp)
 4011cf8:	00002c06 	br	4011dac <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011cfc:	0005303a 	rdctl	r2,status
 4011d00:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011d04:	e0fff817 	ldw	r3,-32(fp)
 4011d08:	00bfff84 	movi	r2,-2
 4011d0c:	1884703a 	and	r2,r3,r2
 4011d10:	1001703a 	wrctl	status,r2
  
  return context;
 4011d14:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 4011d18:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 4011d1c:	e0bffe03 	ldbu	r2,-8(fp)
 4011d20:	00c100b4 	movhi	r3,1026
 4011d24:	18d3db04 	addi	r3,r3,20332
 4011d28:	1085883a 	add	r2,r2,r2
 4011d2c:	1085883a 	add	r2,r2,r2
 4011d30:	10c5883a 	add	r2,r2,r3
 4011d34:	10800017 	ldw	r2,0(r2)
 4011d38:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 4011d3c:	e0bffc17 	ldw	r2,-16(fp)
 4011d40:	1004c03a 	cmpne	r2,r2,zero
 4011d44:	1000071e 	bne	r2,zero,4011d64 <OSTaskDelReq+0x114>
 4011d48:	e0bffb17 	ldw	r2,-20(fp)
 4011d4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011d50:	e0bff717 	ldw	r2,-36(fp)
 4011d54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 4011d58:	008010c4 	movi	r2,67
 4011d5c:	e0bfff15 	stw	r2,-4(fp)
 4011d60:	00001206 	br	4011dac <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 4011d64:	e0bffc17 	ldw	r2,-16(fp)
 4011d68:	10800058 	cmpnei	r2,r2,1
 4011d6c:	1000071e 	bne	r2,zero,4011d8c <OSTaskDelReq+0x13c>
 4011d70:	e0bffb17 	ldw	r2,-20(fp)
 4011d74:	e0bff615 	stw	r2,-40(fp)
 4011d78:	e0bff617 	ldw	r2,-40(fp)
 4011d7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 4011d80:	00800f44 	movi	r2,61
 4011d84:	e0bfff15 	stw	r2,-4(fp)
 4011d88:	00000806 	br	4011dac <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 4011d8c:	e0fffc17 	ldw	r3,-16(fp)
 4011d90:	00800fc4 	movi	r2,63
 4011d94:	18800f85 	stb	r2,62(r3)
 4011d98:	e0bffb17 	ldw	r2,-20(fp)
 4011d9c:	e0bff515 	stw	r2,-44(fp)
 4011da0:	e0bff517 	ldw	r2,-44(fp)
 4011da4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4011da8:	e03fff15 	stw	zero,-4(fp)
 4011dac:	e0bfff17 	ldw	r2,-4(fp)
}
 4011db0:	e037883a 	mov	sp,fp
 4011db4:	df000017 	ldw	fp,0(sp)
 4011db8:	dec00104 	addi	sp,sp,4
 4011dbc:	f800283a 	ret

04011dc0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 4011dc0:	defff304 	addi	sp,sp,-52
 4011dc4:	dfc00c15 	stw	ra,48(sp)
 4011dc8:	df000b15 	stw	fp,44(sp)
 4011dcc:	df000b04 	addi	fp,sp,44
 4011dd0:	e17ffd15 	stw	r5,-12(fp)
 4011dd4:	e1bffe15 	stw	r6,-8(fp)
 4011dd8:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 4011ddc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 4011de0:	e0bffe17 	ldw	r2,-8(fp)
 4011de4:	1004c03a 	cmpne	r2,r2,zero
 4011de8:	1000021e 	bne	r2,zero,4011df4 <OSTaskNameGet+0x34>
        return (0);
 4011dec:	e03fff15 	stw	zero,-4(fp)
 4011df0:	00005b06 	br	4011f60 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 4011df4:	e0bffc03 	ldbu	r2,-16(fp)
 4011df8:	10800570 	cmpltui	r2,r2,21
 4011dfc:	1000081e 	bne	r2,zero,4011e20 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 4011e00:	e0bffc03 	ldbu	r2,-16(fp)
 4011e04:	10803fe0 	cmpeqi	r2,r2,255
 4011e08:	1000051e 	bne	r2,zero,4011e20 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 4011e0c:	e0fffe17 	ldw	r3,-8(fp)
 4011e10:	00800a84 	movi	r2,42
 4011e14:	18800005 	stb	r2,0(r3)
            return (0);
 4011e18:	e03fff15 	stw	zero,-4(fp)
 4011e1c:	00005006 	br	4011f60 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 4011e20:	e0bffd17 	ldw	r2,-12(fp)
 4011e24:	1004c03a 	cmpne	r2,r2,zero
 4011e28:	1000051e 	bne	r2,zero,4011e40 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 4011e2c:	e0fffe17 	ldw	r3,-8(fp)
 4011e30:	00800304 	movi	r2,12
 4011e34:	18800005 	stb	r2,0(r3)
        return (0);
 4011e38:	e03fff15 	stw	zero,-4(fp)
 4011e3c:	00004806 	br	4011f60 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 4011e40:	008100b4 	movhi	r2,1026
 4011e44:	10a1ec04 	addi	r2,r2,-30800
 4011e48:	10800003 	ldbu	r2,0(r2)
 4011e4c:	10803fcc 	andi	r2,r2,255
 4011e50:	1005003a 	cmpeq	r2,r2,zero
 4011e54:	1000051e 	bne	r2,zero,4011e6c <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 4011e58:	e0fffe17 	ldw	r3,-8(fp)
 4011e5c:	00800444 	movi	r2,17
 4011e60:	18800005 	stb	r2,0(r3)
        return (0);
 4011e64:	e03fff15 	stw	zero,-4(fp)
 4011e68:	00003d06 	br	4011f60 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011e6c:	0005303a 	rdctl	r2,status
 4011e70:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011e74:	e0fff817 	ldw	r3,-32(fp)
 4011e78:	00bfff84 	movi	r2,-2
 4011e7c:	1884703a 	and	r2,r3,r2
 4011e80:	1001703a 	wrctl	status,r2
  
  return context;
 4011e84:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 4011e88:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 4011e8c:	e0bffc03 	ldbu	r2,-16(fp)
 4011e90:	10803fd8 	cmpnei	r2,r2,255
 4011e94:	1000051e 	bne	r2,zero,4011eac <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 4011e98:	008100b4 	movhi	r2,1026
 4011e9c:	10a1ed04 	addi	r2,r2,-30796
 4011ea0:	10800017 	ldw	r2,0(r2)
 4011ea4:	10800c83 	ldbu	r2,50(r2)
 4011ea8:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4011eac:	e0bffc03 	ldbu	r2,-16(fp)
 4011eb0:	00c100b4 	movhi	r3,1026
 4011eb4:	18d3db04 	addi	r3,r3,20332
 4011eb8:	1085883a 	add	r2,r2,r2
 4011ebc:	1085883a 	add	r2,r2,r2
 4011ec0:	10c5883a 	add	r2,r2,r3
 4011ec4:	10800017 	ldw	r2,0(r2)
 4011ec8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 4011ecc:	e0bffb17 	ldw	r2,-20(fp)
 4011ed0:	1004c03a 	cmpne	r2,r2,zero
 4011ed4:	1000091e 	bne	r2,zero,4011efc <OSTaskNameGet+0x13c>
 4011ed8:	e0bff917 	ldw	r2,-28(fp)
 4011edc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011ee0:	e0bff717 	ldw	r2,-36(fp)
 4011ee4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4011ee8:	e0fffe17 	ldw	r3,-8(fp)
 4011eec:	008010c4 	movi	r2,67
 4011ef0:	18800005 	stb	r2,0(r3)
        return (0);
 4011ef4:	e03fff15 	stw	zero,-4(fp)
 4011ef8:	00001906 	br	4011f60 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 4011efc:	e0bffb17 	ldw	r2,-20(fp)
 4011f00:	10800058 	cmpnei	r2,r2,1
 4011f04:	1000091e 	bne	r2,zero,4011f2c <OSTaskNameGet+0x16c>
 4011f08:	e0bff917 	ldw	r2,-28(fp)
 4011f0c:	e0bff615 	stw	r2,-40(fp)
 4011f10:	e0bff617 	ldw	r2,-40(fp)
 4011f14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4011f18:	e0fffe17 	ldw	r3,-8(fp)
 4011f1c:	008010c4 	movi	r2,67
 4011f20:	18800005 	stb	r2,0(r3)
        return (0);
 4011f24:	e03fff15 	stw	zero,-4(fp)
 4011f28:	00000d06 	br	4011f60 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 4011f2c:	e0bffb17 	ldw	r2,-20(fp)
 4011f30:	11401504 	addi	r5,r2,84
 4011f34:	e13ffd17 	ldw	r4,-12(fp)
 4011f38:	400c7c40 	call	400c7c4 <OS_StrCopy>
 4011f3c:	e0bffa05 	stb	r2,-24(fp)
 4011f40:	e0bff917 	ldw	r2,-28(fp)
 4011f44:	e0bff515 	stw	r2,-44(fp)
 4011f48:	e0bff517 	ldw	r2,-44(fp)
 4011f4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4011f50:	e0bffe17 	ldw	r2,-8(fp)
 4011f54:	10000005 	stb	zero,0(r2)
    return (len);
 4011f58:	e0bffa03 	ldbu	r2,-24(fp)
 4011f5c:	e0bfff15 	stw	r2,-4(fp)
 4011f60:	e0bfff17 	ldw	r2,-4(fp)
}
 4011f64:	e037883a 	mov	sp,fp
 4011f68:	dfc00117 	ldw	ra,4(sp)
 4011f6c:	df000017 	ldw	fp,0(sp)
 4011f70:	dec00204 	addi	sp,sp,8
 4011f74:	f800283a 	ret

04011f78 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 4011f78:	defff304 	addi	sp,sp,-52
 4011f7c:	dfc00c15 	stw	ra,48(sp)
 4011f80:	df000b15 	stw	fp,44(sp)
 4011f84:	df000b04 	addi	fp,sp,44
 4011f88:	e17ffe15 	stw	r5,-8(fp)
 4011f8c:	e1bfff15 	stw	r6,-4(fp)
 4011f90:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 4011f94:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 4011f98:	e0bfff17 	ldw	r2,-4(fp)
 4011f9c:	1005003a 	cmpeq	r2,r2,zero
 4011fa0:	1000611e 	bne	r2,zero,4012128 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 4011fa4:	e0bffd03 	ldbu	r2,-12(fp)
 4011fa8:	10800570 	cmpltui	r2,r2,21
 4011fac:	1000071e 	bne	r2,zero,4011fcc <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 4011fb0:	e0bffd03 	ldbu	r2,-12(fp)
 4011fb4:	10803fe0 	cmpeqi	r2,r2,255
 4011fb8:	1000041e 	bne	r2,zero,4011fcc <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 4011fbc:	e0ffff17 	ldw	r3,-4(fp)
 4011fc0:	00800a84 	movi	r2,42
 4011fc4:	18800005 	stb	r2,0(r3)
            return;
 4011fc8:	00005706 	br	4012128 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 4011fcc:	e0bffe17 	ldw	r2,-8(fp)
 4011fd0:	1004c03a 	cmpne	r2,r2,zero
 4011fd4:	1000041e 	bne	r2,zero,4011fe8 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 4011fd8:	e0ffff17 	ldw	r3,-4(fp)
 4011fdc:	00800304 	movi	r2,12
 4011fe0:	18800005 	stb	r2,0(r3)
        return;
 4011fe4:	00005006 	br	4012128 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 4011fe8:	008100b4 	movhi	r2,1026
 4011fec:	10a1ec04 	addi	r2,r2,-30800
 4011ff0:	10800003 	ldbu	r2,0(r2)
 4011ff4:	10803fcc 	andi	r2,r2,255
 4011ff8:	1005003a 	cmpeq	r2,r2,zero
 4011ffc:	1000041e 	bne	r2,zero,4012010 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 4012000:	e0ffff17 	ldw	r3,-4(fp)
 4012004:	00800484 	movi	r2,18
 4012008:	18800005 	stb	r2,0(r3)
        return;
 401200c:	00004606 	br	4012128 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012010:	0005303a 	rdctl	r2,status
 4012014:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012018:	e0fff917 	ldw	r3,-28(fp)
 401201c:	00bfff84 	movi	r2,-2
 4012020:	1884703a 	and	r2,r3,r2
 4012024:	1001703a 	wrctl	status,r2
  
  return context;
 4012028:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 401202c:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 4012030:	e0bffd03 	ldbu	r2,-12(fp)
 4012034:	10803fd8 	cmpnei	r2,r2,255
 4012038:	1000051e 	bne	r2,zero,4012050 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 401203c:	008100b4 	movhi	r2,1026
 4012040:	10a1ed04 	addi	r2,r2,-30796
 4012044:	10800017 	ldw	r2,0(r2)
 4012048:	10800c83 	ldbu	r2,50(r2)
 401204c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4012050:	e0bffd03 	ldbu	r2,-12(fp)
 4012054:	00c100b4 	movhi	r3,1026
 4012058:	18d3db04 	addi	r3,r3,20332
 401205c:	1085883a 	add	r2,r2,r2
 4012060:	1085883a 	add	r2,r2,r2
 4012064:	10c5883a 	add	r2,r2,r3
 4012068:	10800017 	ldw	r2,0(r2)
 401206c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 4012070:	e0bffb17 	ldw	r2,-20(fp)
 4012074:	1004c03a 	cmpne	r2,r2,zero
 4012078:	1000081e 	bne	r2,zero,401209c <OSTaskNameSet+0x124>
 401207c:	e0bffa17 	ldw	r2,-24(fp)
 4012080:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012084:	e0bff817 	ldw	r2,-32(fp)
 4012088:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 401208c:	e0ffff17 	ldw	r3,-4(fp)
 4012090:	008010c4 	movi	r2,67
 4012094:	18800005 	stb	r2,0(r3)
        return;
 4012098:	00002306 	br	4012128 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 401209c:	e0bffb17 	ldw	r2,-20(fp)
 40120a0:	10800058 	cmpnei	r2,r2,1
 40120a4:	1000081e 	bne	r2,zero,40120c8 <OSTaskNameSet+0x150>
 40120a8:	e0bffa17 	ldw	r2,-24(fp)
 40120ac:	e0bff715 	stw	r2,-36(fp)
 40120b0:	e0bff717 	ldw	r2,-36(fp)
 40120b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 40120b8:	e0ffff17 	ldw	r3,-4(fp)
 40120bc:	008010c4 	movi	r2,67
 40120c0:	18800005 	stb	r2,0(r3)
        return;
 40120c4:	00001806 	br	4012128 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 40120c8:	e13ffe17 	ldw	r4,-8(fp)
 40120cc:	400c8440 	call	400c844 <OS_StrLen>
 40120d0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 40120d4:	e0bffc03 	ldbu	r2,-16(fp)
 40120d8:	10800830 	cmpltui	r2,r2,32
 40120dc:	1000081e 	bne	r2,zero,4012100 <OSTaskNameSet+0x188>
 40120e0:	e0bffa17 	ldw	r2,-24(fp)
 40120e4:	e0bff615 	stw	r2,-40(fp)
 40120e8:	e0bff617 	ldw	r2,-40(fp)
 40120ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 40120f0:	e0ffff17 	ldw	r3,-4(fp)
 40120f4:	00801044 	movi	r2,65
 40120f8:	18800005 	stb	r2,0(r3)
        return;
 40120fc:	00000a06 	br	4012128 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 4012100:	e0bffb17 	ldw	r2,-20(fp)
 4012104:	11001504 	addi	r4,r2,84
 4012108:	e17ffe17 	ldw	r5,-8(fp)
 401210c:	400c7c40 	call	400c7c4 <OS_StrCopy>
 4012110:	e0bffa17 	ldw	r2,-24(fp)
 4012114:	e0bff515 	stw	r2,-44(fp)
 4012118:	e0bff517 	ldw	r2,-44(fp)
 401211c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4012120:	e0bfff17 	ldw	r2,-4(fp)
 4012124:	10000005 	stb	zero,0(r2)
}
 4012128:	e037883a 	mov	sp,fp
 401212c:	dfc00117 	ldw	ra,4(sp)
 4012130:	df000017 	ldw	fp,0(sp)
 4012134:	dec00204 	addi	sp,sp,8
 4012138:	f800283a 	ret

0401213c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 401213c:	defff304 	addi	sp,sp,-52
 4012140:	dfc00c15 	stw	ra,48(sp)
 4012144:	df000b15 	stw	fp,44(sp)
 4012148:	df000b04 	addi	fp,sp,44
 401214c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 4012150:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 4012154:	e0bffe03 	ldbu	r2,-8(fp)
 4012158:	10800530 	cmpltui	r2,r2,20
 401215c:	1000031e 	bne	r2,zero,401216c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 4012160:	00800a84 	movi	r2,42
 4012164:	e0bfff15 	stw	r2,-4(fp)
 4012168:	00007406 	br	401233c <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401216c:	0005303a 	rdctl	r2,status
 4012170:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012174:	e0fffb17 	ldw	r3,-20(fp)
 4012178:	00bfff84 	movi	r2,-2
 401217c:	1884703a 	and	r2,r3,r2
 4012180:	1001703a 	wrctl	status,r2
  
  return context;
 4012184:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4012188:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 401218c:	e0bffe03 	ldbu	r2,-8(fp)
 4012190:	00c100b4 	movhi	r3,1026
 4012194:	18d3db04 	addi	r3,r3,20332
 4012198:	1085883a 	add	r2,r2,r2
 401219c:	1085883a 	add	r2,r2,r2
 40121a0:	10c5883a 	add	r2,r2,r3
 40121a4:	10800017 	ldw	r2,0(r2)
 40121a8:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 40121ac:	e0bffd17 	ldw	r2,-12(fp)
 40121b0:	1004c03a 	cmpne	r2,r2,zero
 40121b4:	1000071e 	bne	r2,zero,40121d4 <OSTaskResume+0x98>
 40121b8:	e0bffc17 	ldw	r2,-16(fp)
 40121bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40121c0:	e0bffa17 	ldw	r2,-24(fp)
 40121c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 40121c8:	00801184 	movi	r2,70
 40121cc:	e0bfff15 	stw	r2,-4(fp)
 40121d0:	00005a06 	br	401233c <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 40121d4:	e0bffd17 	ldw	r2,-12(fp)
 40121d8:	10800058 	cmpnei	r2,r2,1
 40121dc:	1000071e 	bne	r2,zero,40121fc <OSTaskResume+0xc0>
 40121e0:	e0bffc17 	ldw	r2,-16(fp)
 40121e4:	e0bff915 	stw	r2,-28(fp)
 40121e8:	e0bff917 	ldw	r2,-28(fp)
 40121ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 40121f0:	008010c4 	movi	r2,67
 40121f4:	e0bfff15 	stw	r2,-4(fp)
 40121f8:	00005006 	br	401233c <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 40121fc:	e0bffd17 	ldw	r2,-12(fp)
 4012200:	10800c03 	ldbu	r2,48(r2)
 4012204:	10803fcc 	andi	r2,r2,255
 4012208:	1080020c 	andi	r2,r2,8
 401220c:	1005003a 	cmpeq	r2,r2,zero
 4012210:	1000441e 	bne	r2,zero,4012324 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 4012214:	e0bffd17 	ldw	r2,-12(fp)
 4012218:	10c00c03 	ldbu	r3,48(r2)
 401221c:	00bffdc4 	movi	r2,-9
 4012220:	1884703a 	and	r2,r3,r2
 4012224:	1007883a 	mov	r3,r2
 4012228:	e0bffd17 	ldw	r2,-12(fp)
 401222c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 4012230:	e0bffd17 	ldw	r2,-12(fp)
 4012234:	10800c03 	ldbu	r2,48(r2)
 4012238:	10803fcc 	andi	r2,r2,255
 401223c:	1004c03a 	cmpne	r2,r2,zero
 4012240:	1000321e 	bne	r2,zero,401230c <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 4012244:	e0bffd17 	ldw	r2,-12(fp)
 4012248:	10800b8b 	ldhu	r2,46(r2)
 401224c:	10bfffcc 	andi	r2,r2,65535
 4012250:	1004c03a 	cmpne	r2,r2,zero
 4012254:	1000281e 	bne	r2,zero,40122f8 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 4012258:	e0bffd17 	ldw	r2,-12(fp)
 401225c:	10c00f43 	ldbu	r3,61(r2)
 4012260:	008100b4 	movhi	r2,1026
 4012264:	10a1ea04 	addi	r2,r2,-30808
 4012268:	10800003 	ldbu	r2,0(r2)
 401226c:	1884b03a 	or	r2,r3,r2
 4012270:	1007883a 	mov	r3,r2
 4012274:	008100b4 	movhi	r2,1026
 4012278:	10a1ea04 	addi	r2,r2,-30808
 401227c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4012280:	e0bffd17 	ldw	r2,-12(fp)
 4012284:	10800d03 	ldbu	r2,52(r2)
 4012288:	11003fcc 	andi	r4,r2,255
 401228c:	e0bffd17 	ldw	r2,-12(fp)
 4012290:	10800d03 	ldbu	r2,52(r2)
 4012294:	10c03fcc 	andi	r3,r2,255
 4012298:	008100b4 	movhi	r2,1026
 401229c:	10a1ea44 	addi	r2,r2,-30807
 40122a0:	10c5883a 	add	r2,r2,r3
 40122a4:	10c00003 	ldbu	r3,0(r2)
 40122a8:	e0bffd17 	ldw	r2,-12(fp)
 40122ac:	10800f03 	ldbu	r2,60(r2)
 40122b0:	1884b03a 	or	r2,r3,r2
 40122b4:	1007883a 	mov	r3,r2
 40122b8:	008100b4 	movhi	r2,1026
 40122bc:	10a1ea44 	addi	r2,r2,-30807
 40122c0:	1105883a 	add	r2,r2,r4
 40122c4:	10c00005 	stb	r3,0(r2)
 40122c8:	e0bffc17 	ldw	r2,-16(fp)
 40122cc:	e0bff815 	stw	r2,-32(fp)
 40122d0:	e0bff817 	ldw	r2,-32(fp)
 40122d4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 40122d8:	008100b4 	movhi	r2,1026
 40122dc:	10a1de44 	addi	r2,r2,-30855
 40122e0:	10800003 	ldbu	r2,0(r2)
 40122e4:	10803fcc 	andi	r2,r2,255
 40122e8:	10800058 	cmpnei	r2,r2,1
 40122ec:	10000b1e 	bne	r2,zero,401231c <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 40122f0:	400c6580 	call	400c658 <OS_Sched>
 40122f4:	00000906 	br	401231c <OSTaskResume+0x1e0>
 40122f8:	e0bffc17 	ldw	r2,-16(fp)
 40122fc:	e0bff715 	stw	r2,-36(fp)
 4012300:	e0bff717 	ldw	r2,-36(fp)
 4012304:	1001703a 	wrctl	status,r2
 4012308:	00000406 	br	401231c <OSTaskResume+0x1e0>
 401230c:	e0bffc17 	ldw	r2,-16(fp)
 4012310:	e0bff615 	stw	r2,-40(fp)
 4012314:	e0bff617 	ldw	r2,-40(fp)
 4012318:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 401231c:	e03fff15 	stw	zero,-4(fp)
 4012320:	00000606 	br	401233c <OSTaskResume+0x200>
 4012324:	e0bffc17 	ldw	r2,-16(fp)
 4012328:	e0bff515 	stw	r2,-44(fp)
 401232c:	e0bff517 	ldw	r2,-44(fp)
 4012330:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 4012334:	00801104 	movi	r2,68
 4012338:	e0bfff15 	stw	r2,-4(fp)
 401233c:	e0bfff17 	ldw	r2,-4(fp)
}
 4012340:	e037883a 	mov	sp,fp
 4012344:	dfc00117 	ldw	ra,4(sp)
 4012348:	df000017 	ldw	fp,0(sp)
 401234c:	dec00204 	addi	sp,sp,8
 4012350:	f800283a 	ret

04012354 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 4012354:	defff204 	addi	sp,sp,-56
 4012358:	df000d15 	stw	fp,52(sp)
 401235c:	df000d04 	addi	fp,sp,52
 4012360:	e17ffe15 	stw	r5,-8(fp)
 4012364:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4012368:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 401236c:	e0bffd03 	ldbu	r2,-12(fp)
 4012370:	10800570 	cmpltui	r2,r2,21
 4012374:	1000061e 	bne	r2,zero,4012390 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 4012378:	e0bffd03 	ldbu	r2,-12(fp)
 401237c:	10803fe0 	cmpeqi	r2,r2,255
 4012380:	1000031e 	bne	r2,zero,4012390 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 4012384:	00800a84 	movi	r2,42
 4012388:	e0bfff15 	stw	r2,-4(fp)
 401238c:	00006b06 	br	401253c <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 4012390:	e0bffe17 	ldw	r2,-8(fp)
 4012394:	1004c03a 	cmpne	r2,r2,zero
 4012398:	1000031e 	bne	r2,zero,40123a8 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 401239c:	00800244 	movi	r2,9
 40123a0:	e0bfff15 	stw	r2,-4(fp)
 40123a4:	00006506 	br	401253c <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 40123a8:	e0bffe17 	ldw	r2,-8(fp)
 40123ac:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 40123b0:	e0bffe17 	ldw	r2,-8(fp)
 40123b4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40123b8:	0005303a 	rdctl	r2,status
 40123bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40123c0:	e0fff717 	ldw	r3,-36(fp)
 40123c4:	00bfff84 	movi	r2,-2
 40123c8:	1884703a 	and	r2,r3,r2
 40123cc:	1001703a 	wrctl	status,r2
  
  return context;
 40123d0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 40123d4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 40123d8:	e0bffd03 	ldbu	r2,-12(fp)
 40123dc:	10803fd8 	cmpnei	r2,r2,255
 40123e0:	1000051e 	bne	r2,zero,40123f8 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 40123e4:	008100b4 	movhi	r2,1026
 40123e8:	10a1ed04 	addi	r2,r2,-30796
 40123ec:	10800017 	ldw	r2,0(r2)
 40123f0:	10800c83 	ldbu	r2,50(r2)
 40123f4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 40123f8:	e0bffd03 	ldbu	r2,-12(fp)
 40123fc:	00c100b4 	movhi	r3,1026
 4012400:	18d3db04 	addi	r3,r3,20332
 4012404:	1085883a 	add	r2,r2,r2
 4012408:	1085883a 	add	r2,r2,r2
 401240c:	10c5883a 	add	r2,r2,r3
 4012410:	10800017 	ldw	r2,0(r2)
 4012414:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 4012418:	e0bffc17 	ldw	r2,-16(fp)
 401241c:	1004c03a 	cmpne	r2,r2,zero
 4012420:	1000071e 	bne	r2,zero,4012440 <OSTaskStkChk+0xec>
 4012424:	e0bff817 	ldw	r2,-32(fp)
 4012428:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401242c:	e0bff617 	ldw	r2,-40(fp)
 4012430:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4012434:	008010c4 	movi	r2,67
 4012438:	e0bfff15 	stw	r2,-4(fp)
 401243c:	00003f06 	br	401253c <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 4012440:	e0bffc17 	ldw	r2,-16(fp)
 4012444:	10800058 	cmpnei	r2,r2,1
 4012448:	1000071e 	bne	r2,zero,4012468 <OSTaskStkChk+0x114>
 401244c:	e0bff817 	ldw	r2,-32(fp)
 4012450:	e0bff515 	stw	r2,-44(fp)
 4012454:	e0bff517 	ldw	r2,-44(fp)
 4012458:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 401245c:	008010c4 	movi	r2,67
 4012460:	e0bfff15 	stw	r2,-4(fp)
 4012464:	00003506 	br	401253c <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 4012468:	e0bffc17 	ldw	r2,-16(fp)
 401246c:	1080040b 	ldhu	r2,16(r2)
 4012470:	10bfffcc 	andi	r2,r2,65535
 4012474:	1080004c 	andi	r2,r2,1
 4012478:	1004c03a 	cmpne	r2,r2,zero
 401247c:	1000071e 	bne	r2,zero,401249c <OSTaskStkChk+0x148>
 4012480:	e0bff817 	ldw	r2,-32(fp)
 4012484:	e0bff415 	stw	r2,-48(fp)
 4012488:	e0bff417 	ldw	r2,-48(fp)
 401248c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 4012490:	00801144 	movi	r2,69
 4012494:	e0bfff15 	stw	r2,-4(fp)
 4012498:	00002806 	br	401253c <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 401249c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 40124a0:	e0bffc17 	ldw	r2,-16(fp)
 40124a4:	10800317 	ldw	r2,12(r2)
 40124a8:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 40124ac:	e0bffc17 	ldw	r2,-16(fp)
 40124b0:	10800217 	ldw	r2,8(r2)
 40124b4:	e0bffb15 	stw	r2,-20(fp)
 40124b8:	e0bff817 	ldw	r2,-32(fp)
 40124bc:	e0bff315 	stw	r2,-52(fp)
 40124c0:	e0bff317 	ldw	r2,-52(fp)
 40124c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 40124c8:	00000306 	br	40124d8 <OSTaskStkChk+0x184>
        nfree++;
 40124cc:	e0bffa17 	ldw	r2,-24(fp)
 40124d0:	10800044 	addi	r2,r2,1
 40124d4:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 40124d8:	e0bffb17 	ldw	r2,-20(fp)
 40124dc:	10800017 	ldw	r2,0(r2)
 40124e0:	1005003a 	cmpeq	r2,r2,zero
 40124e4:	1007883a 	mov	r3,r2
 40124e8:	e0bffb17 	ldw	r2,-20(fp)
 40124ec:	10800104 	addi	r2,r2,4
 40124f0:	e0bffb15 	stw	r2,-20(fp)
 40124f4:	18803fcc 	andi	r2,r3,255
 40124f8:	1004c03a 	cmpne	r2,r2,zero
 40124fc:	103ff31e 	bne	r2,zero,40124cc <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 4012500:	e0bffa17 	ldw	r2,-24(fp)
 4012504:	1085883a 	add	r2,r2,r2
 4012508:	1085883a 	add	r2,r2,r2
 401250c:	1007883a 	mov	r3,r2
 4012510:	e0bffe17 	ldw	r2,-8(fp)
 4012514:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 4012518:	e0fff917 	ldw	r3,-28(fp)
 401251c:	e0bffa17 	ldw	r2,-24(fp)
 4012520:	1885c83a 	sub	r2,r3,r2
 4012524:	1085883a 	add	r2,r2,r2
 4012528:	1085883a 	add	r2,r2,r2
 401252c:	1007883a 	mov	r3,r2
 4012530:	e0bffe17 	ldw	r2,-8(fp)
 4012534:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 4012538:	e03fff15 	stw	zero,-4(fp)
 401253c:	e0bfff17 	ldw	r2,-4(fp)
}
 4012540:	e037883a 	mov	sp,fp
 4012544:	df000017 	ldw	fp,0(sp)
 4012548:	dec00104 	addi	sp,sp,4
 401254c:	f800283a 	ret

04012550 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 4012550:	defff404 	addi	sp,sp,-48
 4012554:	dfc00b15 	stw	ra,44(sp)
 4012558:	df000a15 	stw	fp,40(sp)
 401255c:	df000a04 	addi	fp,sp,40
 4012560:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012564:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 4012568:	e0bffe03 	ldbu	r2,-8(fp)
 401256c:	10800518 	cmpnei	r2,r2,20
 4012570:	1000031e 	bne	r2,zero,4012580 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 4012574:	008011c4 	movi	r2,71
 4012578:	e0bfff15 	stw	r2,-4(fp)
 401257c:	00007906 	br	4012764 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 4012580:	e0bffe03 	ldbu	r2,-8(fp)
 4012584:	10800530 	cmpltui	r2,r2,20
 4012588:	1000061e 	bne	r2,zero,40125a4 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 401258c:	e0bffe03 	ldbu	r2,-8(fp)
 4012590:	10803fe0 	cmpeqi	r2,r2,255
 4012594:	1000031e 	bne	r2,zero,40125a4 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 4012598:	00800a84 	movi	r2,42
 401259c:	e0bfff15 	stw	r2,-4(fp)
 40125a0:	00007006 	br	4012764 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40125a4:	0005303a 	rdctl	r2,status
 40125a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40125ac:	e0fff917 	ldw	r3,-28(fp)
 40125b0:	00bfff84 	movi	r2,-2
 40125b4:	1884703a 	and	r2,r3,r2
 40125b8:	1001703a 	wrctl	status,r2
  
  return context;
 40125bc:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 40125c0:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 40125c4:	e0bffe03 	ldbu	r2,-8(fp)
 40125c8:	10803fd8 	cmpnei	r2,r2,255
 40125cc:	1000081e 	bne	r2,zero,40125f0 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 40125d0:	008100b4 	movhi	r2,1026
 40125d4:	10a1ed04 	addi	r2,r2,-30796
 40125d8:	10800017 	ldw	r2,0(r2)
 40125dc:	10800c83 	ldbu	r2,50(r2)
 40125e0:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 40125e4:	00800044 	movi	r2,1
 40125e8:	e0bffd05 	stb	r2,-12(fp)
 40125ec:	00000b06 	br	401261c <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 40125f0:	008100b4 	movhi	r2,1026
 40125f4:	10a1ed04 	addi	r2,r2,-30796
 40125f8:	10800017 	ldw	r2,0(r2)
 40125fc:	10800c83 	ldbu	r2,50(r2)
 4012600:	10c03fcc 	andi	r3,r2,255
 4012604:	e0bffe03 	ldbu	r2,-8(fp)
 4012608:	1880031e 	bne	r3,r2,4012618 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 401260c:	00800044 	movi	r2,1
 4012610:	e0bffd05 	stb	r2,-12(fp)
 4012614:	00000106 	br	401261c <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 4012618:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 401261c:	e0bffe03 	ldbu	r2,-8(fp)
 4012620:	00c100b4 	movhi	r3,1026
 4012624:	18d3db04 	addi	r3,r3,20332
 4012628:	1085883a 	add	r2,r2,r2
 401262c:	1085883a 	add	r2,r2,r2
 4012630:	10c5883a 	add	r2,r2,r3
 4012634:	10800017 	ldw	r2,0(r2)
 4012638:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 401263c:	e0bffc17 	ldw	r2,-16(fp)
 4012640:	1004c03a 	cmpne	r2,r2,zero
 4012644:	1000071e 	bne	r2,zero,4012664 <OSTaskSuspend+0x114>
 4012648:	e0bffa17 	ldw	r2,-24(fp)
 401264c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012650:	e0bff817 	ldw	r2,-32(fp)
 4012654:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 4012658:	00801204 	movi	r2,72
 401265c:	e0bfff15 	stw	r2,-4(fp)
 4012660:	00004006 	br	4012764 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 4012664:	e0bffc17 	ldw	r2,-16(fp)
 4012668:	10800058 	cmpnei	r2,r2,1
 401266c:	1000071e 	bne	r2,zero,401268c <OSTaskSuspend+0x13c>
 4012670:	e0bffa17 	ldw	r2,-24(fp)
 4012674:	e0bff715 	stw	r2,-36(fp)
 4012678:	e0bff717 	ldw	r2,-36(fp)
 401267c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4012680:	008010c4 	movi	r2,67
 4012684:	e0bfff15 	stw	r2,-4(fp)
 4012688:	00003606 	br	4012764 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 401268c:	e0bffc17 	ldw	r2,-16(fp)
 4012690:	10800d03 	ldbu	r2,52(r2)
 4012694:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 4012698:	e13ffb03 	ldbu	r4,-20(fp)
 401269c:	e0fffb03 	ldbu	r3,-20(fp)
 40126a0:	008100b4 	movhi	r2,1026
 40126a4:	10a1ea44 	addi	r2,r2,-30807
 40126a8:	10c5883a 	add	r2,r2,r3
 40126ac:	10800003 	ldbu	r2,0(r2)
 40126b0:	1007883a 	mov	r3,r2
 40126b4:	e0bffc17 	ldw	r2,-16(fp)
 40126b8:	10800f03 	ldbu	r2,60(r2)
 40126bc:	0084303a 	nor	r2,zero,r2
 40126c0:	1884703a 	and	r2,r3,r2
 40126c4:	1007883a 	mov	r3,r2
 40126c8:	008100b4 	movhi	r2,1026
 40126cc:	10a1ea44 	addi	r2,r2,-30807
 40126d0:	1105883a 	add	r2,r2,r4
 40126d4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 40126d8:	e0fffb03 	ldbu	r3,-20(fp)
 40126dc:	008100b4 	movhi	r2,1026
 40126e0:	10a1ea44 	addi	r2,r2,-30807
 40126e4:	10c5883a 	add	r2,r2,r3
 40126e8:	10800003 	ldbu	r2,0(r2)
 40126ec:	10803fcc 	andi	r2,r2,255
 40126f0:	1004c03a 	cmpne	r2,r2,zero
 40126f4:	10000c1e 	bne	r2,zero,4012728 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 40126f8:	e0bffc17 	ldw	r2,-16(fp)
 40126fc:	10800f43 	ldbu	r2,61(r2)
 4012700:	0084303a 	nor	r2,zero,r2
 4012704:	1007883a 	mov	r3,r2
 4012708:	008100b4 	movhi	r2,1026
 401270c:	10a1ea04 	addi	r2,r2,-30808
 4012710:	10800003 	ldbu	r2,0(r2)
 4012714:	1884703a 	and	r2,r3,r2
 4012718:	1007883a 	mov	r3,r2
 401271c:	008100b4 	movhi	r2,1026
 4012720:	10a1ea04 	addi	r2,r2,-30808
 4012724:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 4012728:	e0bffc17 	ldw	r2,-16(fp)
 401272c:	10800c03 	ldbu	r2,48(r2)
 4012730:	10800214 	ori	r2,r2,8
 4012734:	1007883a 	mov	r3,r2
 4012738:	e0bffc17 	ldw	r2,-16(fp)
 401273c:	10c00c05 	stb	r3,48(r2)
 4012740:	e0bffa17 	ldw	r2,-24(fp)
 4012744:	e0bff615 	stw	r2,-40(fp)
 4012748:	e0bff617 	ldw	r2,-40(fp)
 401274c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 4012750:	e0bffd03 	ldbu	r2,-12(fp)
 4012754:	10800058 	cmpnei	r2,r2,1
 4012758:	1000011e 	bne	r2,zero,4012760 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 401275c:	400c6580 	call	400c658 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4012760:	e03fff15 	stw	zero,-4(fp)
 4012764:	e0bfff17 	ldw	r2,-4(fp)
}
 4012768:	e037883a 	mov	sp,fp
 401276c:	dfc00117 	ldw	ra,4(sp)
 4012770:	df000017 	ldw	fp,0(sp)
 4012774:	dec00204 	addi	sp,sp,8
 4012778:	f800283a 	ret

0401277c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 401277c:	defff504 	addi	sp,sp,-44
 4012780:	dfc00a15 	stw	ra,40(sp)
 4012784:	df000915 	stw	fp,36(sp)
 4012788:	df000904 	addi	fp,sp,36
 401278c:	e17ffe15 	stw	r5,-8(fp)
 4012790:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012794:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 4012798:	e0bffd03 	ldbu	r2,-12(fp)
 401279c:	10800570 	cmpltui	r2,r2,21
 40127a0:	1000061e 	bne	r2,zero,40127bc <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 40127a4:	e0bffd03 	ldbu	r2,-12(fp)
 40127a8:	10803fe0 	cmpeqi	r2,r2,255
 40127ac:	1000031e 	bne	r2,zero,40127bc <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 40127b0:	00800a84 	movi	r2,42
 40127b4:	e0bfff15 	stw	r2,-4(fp)
 40127b8:	00003b06 	br	40128a8 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 40127bc:	e0bffe17 	ldw	r2,-8(fp)
 40127c0:	1004c03a 	cmpne	r2,r2,zero
 40127c4:	1000031e 	bne	r2,zero,40127d4 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 40127c8:	00800244 	movi	r2,9
 40127cc:	e0bfff15 	stw	r2,-4(fp)
 40127d0:	00003506 	br	40128a8 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40127d4:	0005303a 	rdctl	r2,status
 40127d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40127dc:	e0fffa17 	ldw	r3,-24(fp)
 40127e0:	00bfff84 	movi	r2,-2
 40127e4:	1884703a 	and	r2,r3,r2
 40127e8:	1001703a 	wrctl	status,r2
  
  return context;
 40127ec:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40127f0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 40127f4:	e0bffd03 	ldbu	r2,-12(fp)
 40127f8:	10803fd8 	cmpnei	r2,r2,255
 40127fc:	1000051e 	bne	r2,zero,4012814 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 4012800:	008100b4 	movhi	r2,1026
 4012804:	10a1ed04 	addi	r2,r2,-30796
 4012808:	10800017 	ldw	r2,0(r2)
 401280c:	10800c83 	ldbu	r2,50(r2)
 4012810:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4012814:	e0bffd03 	ldbu	r2,-12(fp)
 4012818:	00c100b4 	movhi	r3,1026
 401281c:	18d3db04 	addi	r3,r3,20332
 4012820:	1085883a 	add	r2,r2,r2
 4012824:	1085883a 	add	r2,r2,r2
 4012828:	10c5883a 	add	r2,r2,r3
 401282c:	10800017 	ldw	r2,0(r2)
 4012830:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 4012834:	e0bffc17 	ldw	r2,-16(fp)
 4012838:	1004c03a 	cmpne	r2,r2,zero
 401283c:	1000071e 	bne	r2,zero,401285c <OSTaskQuery+0xe0>
 4012840:	e0bffb17 	ldw	r2,-20(fp)
 4012844:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012848:	e0bff917 	ldw	r2,-28(fp)
 401284c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 4012850:	00800a44 	movi	r2,41
 4012854:	e0bfff15 	stw	r2,-4(fp)
 4012858:	00001306 	br	40128a8 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 401285c:	e0bffc17 	ldw	r2,-16(fp)
 4012860:	10800058 	cmpnei	r2,r2,1
 4012864:	1000071e 	bne	r2,zero,4012884 <OSTaskQuery+0x108>
 4012868:	e0bffb17 	ldw	r2,-20(fp)
 401286c:	e0bff815 	stw	r2,-32(fp)
 4012870:	e0bff817 	ldw	r2,-32(fp)
 4012874:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4012878:	008010c4 	movi	r2,67
 401287c:	e0bfff15 	stw	r2,-4(fp)
 4012880:	00000906 	br	40128a8 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 4012884:	e13ffe17 	ldw	r4,-8(fp)
 4012888:	e17ffc17 	ldw	r5,-16(fp)
 401288c:	01801d04 	movi	r6,116
 4012890:	400c5ec0 	call	400c5ec <OS_MemCopy>
 4012894:	e0bffb17 	ldw	r2,-20(fp)
 4012898:	e0bff715 	stw	r2,-36(fp)
 401289c:	e0bff717 	ldw	r2,-36(fp)
 40128a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40128a4:	e03fff15 	stw	zero,-4(fp)
 40128a8:	e0bfff17 	ldw	r2,-4(fp)
}
 40128ac:	e037883a 	mov	sp,fp
 40128b0:	dfc00117 	ldw	ra,4(sp)
 40128b4:	df000017 	ldw	fp,0(sp)
 40128b8:	dec00204 	addi	sp,sp,8
 40128bc:	f800283a 	ret

040128c0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 40128c0:	defffc04 	addi	sp,sp,-16
 40128c4:	df000315 	stw	fp,12(sp)
 40128c8:	df000304 	addi	fp,sp,12
 40128cc:	e13ffd15 	stw	r4,-12(fp)
 40128d0:	e17ffe15 	stw	r5,-8(fp)
 40128d4:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 40128d8:	e0bfff0b 	ldhu	r2,-4(fp)
 40128dc:	1080004c 	andi	r2,r2,1
 40128e0:	10803fcc 	andi	r2,r2,255
 40128e4:	1005003a 	cmpeq	r2,r2,zero
 40128e8:	1000101e 	bne	r2,zero,401292c <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 40128ec:	e0bfff0b 	ldhu	r2,-4(fp)
 40128f0:	1080008c 	andi	r2,r2,2
 40128f4:	1005003a 	cmpeq	r2,r2,zero
 40128f8:	10000c1e 	bne	r2,zero,401292c <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 40128fc:	00000806 	br	4012920 <OS_TaskStkClr+0x60>
                size--;
 4012900:	e0bffe17 	ldw	r2,-8(fp)
 4012904:	10bfffc4 	addi	r2,r2,-1
 4012908:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 401290c:	e0bffd17 	ldw	r2,-12(fp)
 4012910:	10000015 	stw	zero,0(r2)
 4012914:	e0bffd17 	ldw	r2,-12(fp)
 4012918:	10800104 	addi	r2,r2,4
 401291c:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 4012920:	e0bffe17 	ldw	r2,-8(fp)
 4012924:	1004c03a 	cmpne	r2,r2,zero
 4012928:	103ff51e 	bne	r2,zero,4012900 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 401292c:	e037883a 	mov	sp,fp
 4012930:	df000017 	ldw	fp,0(sp)
 4012934:	dec00104 	addi	sp,sp,4
 4012938:	f800283a 	ret

0401293c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 401293c:	defff904 	addi	sp,sp,-28
 4012940:	dfc00615 	stw	ra,24(sp)
 4012944:	df000515 	stw	fp,20(sp)
 4012948:	df000504 	addi	fp,sp,20
 401294c:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012950:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4012954:	008100b4 	movhi	r2,1026
 4012958:	10a1ec04 	addi	r2,r2,-30800
 401295c:	10800003 	ldbu	r2,0(r2)
 4012960:	10803fcc 	andi	r2,r2,255
 4012964:	1004c03a 	cmpne	r2,r2,zero
 4012968:	1000421e 	bne	r2,zero,4012a74 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 401296c:	e0bfff0b 	ldhu	r2,-4(fp)
 4012970:	1005003a 	cmpeq	r2,r2,zero
 4012974:	10003f1e 	bne	r2,zero,4012a74 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012978:	0005303a 	rdctl	r2,status
 401297c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012980:	e0fffc17 	ldw	r3,-16(fp)
 4012984:	00bfff84 	movi	r2,-2
 4012988:	1884703a 	and	r2,r3,r2
 401298c:	1001703a 	wrctl	status,r2
  
  return context;
 4012990:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 4012994:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 4012998:	008100b4 	movhi	r2,1026
 401299c:	10a1ed04 	addi	r2,r2,-30796
 40129a0:	10800017 	ldw	r2,0(r2)
 40129a4:	10800d03 	ldbu	r2,52(r2)
 40129a8:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 40129ac:	e13ffe03 	ldbu	r4,-8(fp)
 40129b0:	e0fffe03 	ldbu	r3,-8(fp)
 40129b4:	008100b4 	movhi	r2,1026
 40129b8:	10a1ea44 	addi	r2,r2,-30807
 40129bc:	10c5883a 	add	r2,r2,r3
 40129c0:	10800003 	ldbu	r2,0(r2)
 40129c4:	1007883a 	mov	r3,r2
 40129c8:	008100b4 	movhi	r2,1026
 40129cc:	10a1ed04 	addi	r2,r2,-30796
 40129d0:	10800017 	ldw	r2,0(r2)
 40129d4:	10800f03 	ldbu	r2,60(r2)
 40129d8:	0084303a 	nor	r2,zero,r2
 40129dc:	1884703a 	and	r2,r3,r2
 40129e0:	1007883a 	mov	r3,r2
 40129e4:	008100b4 	movhi	r2,1026
 40129e8:	10a1ea44 	addi	r2,r2,-30807
 40129ec:	1105883a 	add	r2,r2,r4
 40129f0:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 40129f4:	e0fffe03 	ldbu	r3,-8(fp)
 40129f8:	008100b4 	movhi	r2,1026
 40129fc:	10a1ea44 	addi	r2,r2,-30807
 4012a00:	10c5883a 	add	r2,r2,r3
 4012a04:	10800003 	ldbu	r2,0(r2)
 4012a08:	10803fcc 	andi	r2,r2,255
 4012a0c:	1004c03a 	cmpne	r2,r2,zero
 4012a10:	10000e1e 	bne	r2,zero,4012a4c <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4012a14:	008100b4 	movhi	r2,1026
 4012a18:	10a1ed04 	addi	r2,r2,-30796
 4012a1c:	10800017 	ldw	r2,0(r2)
 4012a20:	10800f43 	ldbu	r2,61(r2)
 4012a24:	0084303a 	nor	r2,zero,r2
 4012a28:	1007883a 	mov	r3,r2
 4012a2c:	008100b4 	movhi	r2,1026
 4012a30:	10a1ea04 	addi	r2,r2,-30808
 4012a34:	10800003 	ldbu	r2,0(r2)
 4012a38:	1884703a 	and	r2,r3,r2
 4012a3c:	1007883a 	mov	r3,r2
 4012a40:	008100b4 	movhi	r2,1026
 4012a44:	10a1ea04 	addi	r2,r2,-30808
 4012a48:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 4012a4c:	008100b4 	movhi	r2,1026
 4012a50:	10a1ed04 	addi	r2,r2,-30796
 4012a54:	10c00017 	ldw	r3,0(r2)
 4012a58:	e0bfff0b 	ldhu	r2,-4(fp)
 4012a5c:	18800b8d 	sth	r2,46(r3)
 4012a60:	e0bffd17 	ldw	r2,-12(fp)
 4012a64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012a68:	e0bffb17 	ldw	r2,-20(fp)
 4012a6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 4012a70:	400c6580 	call	400c658 <OS_Sched>
    }
}
 4012a74:	e037883a 	mov	sp,fp
 4012a78:	dfc00117 	ldw	ra,4(sp)
 4012a7c:	df000017 	ldw	fp,0(sp)
 4012a80:	dec00204 	addi	sp,sp,8
 4012a84:	f800283a 	ret

04012a88 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 4012a88:	defff604 	addi	sp,sp,-40
 4012a8c:	dfc00915 	stw	ra,36(sp)
 4012a90:	df000815 	stw	fp,32(sp)
 4012a94:	dc000715 	stw	r16,28(sp)
 4012a98:	df000704 	addi	fp,sp,28
 4012a9c:	e13ffb05 	stb	r4,-20(fp)
 4012aa0:	e17ffc05 	stb	r5,-16(fp)
 4012aa4:	e1bffd05 	stb	r6,-12(fp)
 4012aa8:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4012aac:	008100b4 	movhi	r2,1026
 4012ab0:	10a1ec04 	addi	r2,r2,-30800
 4012ab4:	10800003 	ldbu	r2,0(r2)
 4012ab8:	10803fcc 	andi	r2,r2,255
 4012abc:	1005003a 	cmpeq	r2,r2,zero
 4012ac0:	1000031e 	bne	r2,zero,4012ad0 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 4012ac4:	00801544 	movi	r2,85
 4012ac8:	e0bfff15 	stw	r2,-4(fp)
 4012acc:	00004306 	br	4012bdc <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 4012ad0:	e0bffb03 	ldbu	r2,-20(fp)
 4012ad4:	1004c03a 	cmpne	r2,r2,zero
 4012ad8:	10000c1e 	bne	r2,zero,4012b0c <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
 4012adc:	e0bffc03 	ldbu	r2,-16(fp)
 4012ae0:	1004c03a 	cmpne	r2,r2,zero
 4012ae4:	1000091e 	bne	r2,zero,4012b0c <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
 4012ae8:	e0bffd03 	ldbu	r2,-12(fp)
 4012aec:	1004c03a 	cmpne	r2,r2,zero
 4012af0:	1000061e 	bne	r2,zero,4012b0c <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
 4012af4:	e0bffe0b 	ldhu	r2,-8(fp)
 4012af8:	1004c03a 	cmpne	r2,r2,zero
 4012afc:	1000031e 	bne	r2,zero,4012b0c <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
 4012b00:	00801504 	movi	r2,84
 4012b04:	e0bfff15 	stw	r2,-4(fp)
 4012b08:	00003406 	br	4012bdc <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
 4012b0c:	e0bffc03 	ldbu	r2,-16(fp)
 4012b10:	10800f30 	cmpltui	r2,r2,60
 4012b14:	1000031e 	bne	r2,zero,4012b24 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 4012b18:	00801444 	movi	r2,81
 4012b1c:	e0bfff15 	stw	r2,-4(fp)
 4012b20:	00002e06 	br	4012bdc <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
 4012b24:	e0bffd03 	ldbu	r2,-12(fp)
 4012b28:	10800f30 	cmpltui	r2,r2,60
 4012b2c:	1000031e 	bne	r2,zero,4012b3c <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 4012b30:	00801484 	movi	r2,82
 4012b34:	e0bfff15 	stw	r2,-4(fp)
 4012b38:	00002806 	br	4012bdc <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
 4012b3c:	e0bffe0b 	ldhu	r2,-8(fp)
 4012b40:	1080fa30 	cmpltui	r2,r2,1000
 4012b44:	1000031e 	bne	r2,zero,4012b54 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
 4012b48:	008014c4 	movi	r2,83
 4012b4c:	e0bfff15 	stw	r2,-4(fp)
 4012b50:	00002206 	br	4012bdc <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 4012b54:	e0bffb03 	ldbu	r2,-20(fp)
 4012b58:	10c38424 	muli	r3,r2,3600
 4012b5c:	e0bffc03 	ldbu	r2,-16(fp)
 4012b60:	10800f24 	muli	r2,r2,60
 4012b64:	1887883a 	add	r3,r3,r2
 4012b68:	e0bffd03 	ldbu	r2,-12(fp)
 4012b6c:	18a1883a 	add	r16,r3,r2
 4012b70:	e0bffe0b 	ldhu	r2,-8(fp)
 4012b74:	11007d04 	addi	r4,r2,500
 4012b78:	0140fa04 	movi	r5,1000
 4012b7c:	40097900 	call	4009790 <__udivsi3>
 4012b80:	8085883a 	add	r2,r16,r2
 4012b84:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 4012b88:	e0bffa17 	ldw	r2,-24(fp)
 4012b8c:	1004d43a 	srli	r2,r2,16
 4012b90:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 4012b94:	e0bffa17 	ldw	r2,-24(fp)
 4012b98:	10bfffcc 	andi	r2,r2,65535
 4012b9c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 4012ba0:	e0bffa17 	ldw	r2,-24(fp)
 4012ba4:	113fffcc 	andi	r4,r2,65535
 4012ba8:	401293c0 	call	401293c <OSTimeDly>
    while (loops > 0) {
 4012bac:	00000706 	br	4012bcc <OSTimeDlyHMSM+0x144>
        OSTimeDly((INT16U)32768u);
 4012bb0:	01200014 	movui	r4,32768
 4012bb4:	401293c0 	call	401293c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 4012bb8:	01200014 	movui	r4,32768
 4012bbc:	401293c0 	call	401293c <OSTimeDly>
        loops--;
 4012bc0:	e0bff90b 	ldhu	r2,-28(fp)
 4012bc4:	10bfffc4 	addi	r2,r2,-1
 4012bc8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 4012bcc:	e0bff90b 	ldhu	r2,-28(fp)
 4012bd0:	1004c03a 	cmpne	r2,r2,zero
 4012bd4:	103ff61e 	bne	r2,zero,4012bb0 <OSTimeDlyHMSM+0x128>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 4012bd8:	e03fff15 	stw	zero,-4(fp)
 4012bdc:	e0bfff17 	ldw	r2,-4(fp)
}
 4012be0:	e037883a 	mov	sp,fp
 4012be4:	dfc00217 	ldw	ra,8(sp)
 4012be8:	df000117 	ldw	fp,4(sp)
 4012bec:	dc000017 	ldw	r16,0(sp)
 4012bf0:	dec00304 	addi	sp,sp,12
 4012bf4:	f800283a 	ret

04012bf8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 4012bf8:	defff404 	addi	sp,sp,-48
 4012bfc:	dfc00b15 	stw	ra,44(sp)
 4012c00:	df000a15 	stw	fp,40(sp)
 4012c04:	df000a04 	addi	fp,sp,40
 4012c08:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4012c0c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 4012c10:	e0bffe03 	ldbu	r2,-8(fp)
 4012c14:	10800530 	cmpltui	r2,r2,20
 4012c18:	1000031e 	bne	r2,zero,4012c28 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 4012c1c:	00800a84 	movi	r2,42
 4012c20:	e0bfff15 	stw	r2,-4(fp)
 4012c24:	00007206 	br	4012df0 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012c28:	0005303a 	rdctl	r2,status
 4012c2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012c30:	e0fffb17 	ldw	r3,-20(fp)
 4012c34:	00bfff84 	movi	r2,-2
 4012c38:	1884703a 	and	r2,r3,r2
 4012c3c:	1001703a 	wrctl	status,r2
  
  return context;
 4012c40:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4012c44:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 4012c48:	e0bffe03 	ldbu	r2,-8(fp)
 4012c4c:	00c100b4 	movhi	r3,1026
 4012c50:	18d3db04 	addi	r3,r3,20332
 4012c54:	1085883a 	add	r2,r2,r2
 4012c58:	1085883a 	add	r2,r2,r2
 4012c5c:	10c5883a 	add	r2,r2,r3
 4012c60:	10800017 	ldw	r2,0(r2)
 4012c64:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 4012c68:	e0bffd17 	ldw	r2,-12(fp)
 4012c6c:	1004c03a 	cmpne	r2,r2,zero
 4012c70:	1000071e 	bne	r2,zero,4012c90 <OSTimeDlyResume+0x98>
 4012c74:	e0bffc17 	ldw	r2,-16(fp)
 4012c78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012c7c:	e0bffa17 	ldw	r2,-24(fp)
 4012c80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 4012c84:	008010c4 	movi	r2,67
 4012c88:	e0bfff15 	stw	r2,-4(fp)
 4012c8c:	00005806 	br	4012df0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 4012c90:	e0bffd17 	ldw	r2,-12(fp)
 4012c94:	10800058 	cmpnei	r2,r2,1
 4012c98:	1000071e 	bne	r2,zero,4012cb8 <OSTimeDlyResume+0xc0>
 4012c9c:	e0bffc17 	ldw	r2,-16(fp)
 4012ca0:	e0bff915 	stw	r2,-28(fp)
 4012ca4:	e0bff917 	ldw	r2,-28(fp)
 4012ca8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 4012cac:	008010c4 	movi	r2,67
 4012cb0:	e0bfff15 	stw	r2,-4(fp)
 4012cb4:	00004e06 	br	4012df0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 4012cb8:	e0bffd17 	ldw	r2,-12(fp)
 4012cbc:	10800b8b 	ldhu	r2,46(r2)
 4012cc0:	10bfffcc 	andi	r2,r2,65535
 4012cc4:	1004c03a 	cmpne	r2,r2,zero
 4012cc8:	1000071e 	bne	r2,zero,4012ce8 <OSTimeDlyResume+0xf0>
 4012ccc:	e0bffc17 	ldw	r2,-16(fp)
 4012cd0:	e0bff815 	stw	r2,-32(fp)
 4012cd4:	e0bff817 	ldw	r2,-32(fp)
 4012cd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 4012cdc:	00801404 	movi	r2,80
 4012ce0:	e0bfff15 	stw	r2,-4(fp)
 4012ce4:	00004206 	br	4012df0 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 4012ce8:	e0bffd17 	ldw	r2,-12(fp)
 4012cec:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 4012cf0:	e0bffd17 	ldw	r2,-12(fp)
 4012cf4:	10800c03 	ldbu	r2,48(r2)
 4012cf8:	10803fcc 	andi	r2,r2,255
 4012cfc:	10800dcc 	andi	r2,r2,55
 4012d00:	1005003a 	cmpeq	r2,r2,zero
 4012d04:	10000b1e 	bne	r2,zero,4012d34 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 4012d08:	e0bffd17 	ldw	r2,-12(fp)
 4012d0c:	10c00c03 	ldbu	r3,48(r2)
 4012d10:	00bff204 	movi	r2,-56
 4012d14:	1884703a 	and	r2,r3,r2
 4012d18:	1007883a 	mov	r3,r2
 4012d1c:	e0bffd17 	ldw	r2,-12(fp)
 4012d20:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 4012d24:	e0fffd17 	ldw	r3,-12(fp)
 4012d28:	00800044 	movi	r2,1
 4012d2c:	18800c45 	stb	r2,49(r3)
 4012d30:	00000206 	br	4012d3c <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 4012d34:	e0bffd17 	ldw	r2,-12(fp)
 4012d38:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 4012d3c:	e0bffd17 	ldw	r2,-12(fp)
 4012d40:	10800c03 	ldbu	r2,48(r2)
 4012d44:	10803fcc 	andi	r2,r2,255
 4012d48:	1080020c 	andi	r2,r2,8
 4012d4c:	1004c03a 	cmpne	r2,r2,zero
 4012d50:	1000221e 	bne	r2,zero,4012ddc <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 4012d54:	e0bffd17 	ldw	r2,-12(fp)
 4012d58:	10c00f43 	ldbu	r3,61(r2)
 4012d5c:	008100b4 	movhi	r2,1026
 4012d60:	10a1ea04 	addi	r2,r2,-30808
 4012d64:	10800003 	ldbu	r2,0(r2)
 4012d68:	1884b03a 	or	r2,r3,r2
 4012d6c:	1007883a 	mov	r3,r2
 4012d70:	008100b4 	movhi	r2,1026
 4012d74:	10a1ea04 	addi	r2,r2,-30808
 4012d78:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4012d7c:	e0bffd17 	ldw	r2,-12(fp)
 4012d80:	10800d03 	ldbu	r2,52(r2)
 4012d84:	11003fcc 	andi	r4,r2,255
 4012d88:	e0bffd17 	ldw	r2,-12(fp)
 4012d8c:	10800d03 	ldbu	r2,52(r2)
 4012d90:	10c03fcc 	andi	r3,r2,255
 4012d94:	008100b4 	movhi	r2,1026
 4012d98:	10a1ea44 	addi	r2,r2,-30807
 4012d9c:	10c5883a 	add	r2,r2,r3
 4012da0:	10c00003 	ldbu	r3,0(r2)
 4012da4:	e0bffd17 	ldw	r2,-12(fp)
 4012da8:	10800f03 	ldbu	r2,60(r2)
 4012dac:	1884b03a 	or	r2,r3,r2
 4012db0:	1007883a 	mov	r3,r2
 4012db4:	008100b4 	movhi	r2,1026
 4012db8:	10a1ea44 	addi	r2,r2,-30807
 4012dbc:	1105883a 	add	r2,r2,r4
 4012dc0:	10c00005 	stb	r3,0(r2)
 4012dc4:	e0bffc17 	ldw	r2,-16(fp)
 4012dc8:	e0bff715 	stw	r2,-36(fp)
 4012dcc:	e0bff717 	ldw	r2,-36(fp)
 4012dd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 4012dd4:	400c6580 	call	400c658 <OS_Sched>
 4012dd8:	00000406 	br	4012dec <OSTimeDlyResume+0x1f4>
 4012ddc:	e0bffc17 	ldw	r2,-16(fp)
 4012de0:	e0bff615 	stw	r2,-40(fp)
 4012de4:	e0bff617 	ldw	r2,-40(fp)
 4012de8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 4012dec:	e03fff15 	stw	zero,-4(fp)
 4012df0:	e0bfff17 	ldw	r2,-4(fp)
}
 4012df4:	e037883a 	mov	sp,fp
 4012df8:	dfc00117 	ldw	ra,4(sp)
 4012dfc:	df000017 	ldw	fp,0(sp)
 4012e00:	dec00204 	addi	sp,sp,8
 4012e04:	f800283a 	ret

04012e08 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 4012e08:	defffb04 	addi	sp,sp,-20
 4012e0c:	df000415 	stw	fp,16(sp)
 4012e10:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012e14:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012e18:	0005303a 	rdctl	r2,status
 4012e1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012e20:	e0fffd17 	ldw	r3,-12(fp)
 4012e24:	00bfff84 	movi	r2,-2
 4012e28:	1884703a 	and	r2,r3,r2
 4012e2c:	1001703a 	wrctl	status,r2
  
  return context;
 4012e30:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 4012e34:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 4012e38:	008100b4 	movhi	r2,1026
 4012e3c:	10a1ee04 	addi	r2,r2,-30792
 4012e40:	10800017 	ldw	r2,0(r2)
 4012e44:	e0bfff15 	stw	r2,-4(fp)
 4012e48:	e0bffe17 	ldw	r2,-8(fp)
 4012e4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012e50:	e0bffc17 	ldw	r2,-16(fp)
 4012e54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 4012e58:	e0bfff17 	ldw	r2,-4(fp)
}
 4012e5c:	e037883a 	mov	sp,fp
 4012e60:	df000017 	ldw	fp,0(sp)
 4012e64:	dec00104 	addi	sp,sp,4
 4012e68:	f800283a 	ret

04012e6c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 4012e6c:	defffb04 	addi	sp,sp,-20
 4012e70:	df000415 	stw	fp,16(sp)
 4012e74:	df000404 	addi	fp,sp,16
 4012e78:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012e7c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012e80:	0005303a 	rdctl	r2,status
 4012e84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012e88:	e0fffd17 	ldw	r3,-12(fp)
 4012e8c:	00bfff84 	movi	r2,-2
 4012e90:	1884703a 	and	r2,r3,r2
 4012e94:	1001703a 	wrctl	status,r2
  
  return context;
 4012e98:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 4012e9c:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 4012ea0:	00c100b4 	movhi	r3,1026
 4012ea4:	18e1ee04 	addi	r3,r3,-30792
 4012ea8:	e0bfff17 	ldw	r2,-4(fp)
 4012eac:	18800015 	stw	r2,0(r3)
 4012eb0:	e0bffe17 	ldw	r2,-8(fp)
 4012eb4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012eb8:	e0bffc17 	ldw	r2,-16(fp)
 4012ebc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4012ec0:	e037883a 	mov	sp,fp
 4012ec4:	df000017 	ldw	fp,0(sp)
 4012ec8:	dec00104 	addi	sp,sp,4
 4012ecc:	f800283a 	ret

04012ed0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4012ed0:	defffd04 	addi	sp,sp,-12
 4012ed4:	dfc00215 	stw	ra,8(sp)
 4012ed8:	df000115 	stw	fp,4(sp)
 4012edc:	df000104 	addi	fp,sp,4
 4012ee0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
 4012ee4:	40158040 	call	4015804 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4012ee8:	00800044 	movi	r2,1
 4012eec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4012ef0:	e037883a 	mov	sp,fp
 4012ef4:	dfc00117 	ldw	ra,4(sp)
 4012ef8:	df000017 	ldw	fp,0(sp)
 4012efc:	dec00204 	addi	sp,sp,8
 4012f00:	f800283a 	ret

04012f04 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4012f04:	defffe04 	addi	sp,sp,-8
 4012f08:	dfc00115 	stw	ra,4(sp)
 4012f0c:	df000015 	stw	fp,0(sp)
 4012f10:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( UCOSII_TIMER, ucosii_timer);
 4012f14:	01060004 	movi	r4,6144
 4012f18:	000b883a 	mov	r5,zero
 4012f1c:	01800084 	movi	r6,2
 4012f20:	01c01904 	movi	r7,100
 4012f24:	40146a00 	call	40146a0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 4012f28:	01010074 	movhi	r4,1025
 4012f2c:	211d4f04 	addi	r4,r4,30012
 4012f30:	4012fa00 	call	4012fa0 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4012f34:	01010074 	movhi	r4,1025
 4012f38:	211d8a04 	addi	r4,r4,30248
 4012f3c:	000b883a 	mov	r5,zero
 4012f40:	01800044 	movi	r6,1
 4012f44:	4013a1c0 	call	4013a1c <altera_avalon_jtag_uart_init>
 4012f48:	01010074 	movhi	r4,1025
 4012f4c:	211d8004 	addi	r4,r4,30208
 4012f50:	4012f680 	call	4012f68 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
 4012f54:	e037883a 	mov	sp,fp
 4012f58:	dfc00117 	ldw	ra,4(sp)
 4012f5c:	df000017 	ldw	fp,0(sp)
 4012f60:	dec00204 	addi	sp,sp,8
 4012f64:	f800283a 	ret

04012f68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4012f68:	defffd04 	addi	sp,sp,-12
 4012f6c:	dfc00215 	stw	ra,8(sp)
 4012f70:	df000115 	stw	fp,4(sp)
 4012f74:	df000104 	addi	fp,sp,4
 4012f78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4012f7c:	e13fff17 	ldw	r4,-4(fp)
 4012f80:	014100b4 	movhi	r5,1026
 4012f84:	2961a304 	addi	r5,r5,-31092
 4012f88:	4014ce40 	call	4014ce4 <alt_dev_llist_insert>
}
 4012f8c:	e037883a 	mov	sp,fp
 4012f90:	dfc00117 	ldw	ra,4(sp)
 4012f94:	df000017 	ldw	fp,0(sp)
 4012f98:	dec00204 	addi	sp,sp,8
 4012f9c:	f800283a 	ret

04012fa0 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 4012fa0:	defffc04 	addi	sp,sp,-16
 4012fa4:	dfc00315 	stw	ra,12(sp)
 4012fa8:	df000215 	stw	fp,8(sp)
 4012fac:	df000204 	addi	fp,sp,8
 4012fb0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 4012fb4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 4012fb8:	e13fff17 	ldw	r4,-4(fp)
 4012fbc:	401302c0 	call	401302c <alt_epcs_flash_query>
 4012fc0:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 4012fc4:	e0bffe17 	ldw	r2,-8(fp)
 4012fc8:	1004c03a 	cmpne	r2,r2,zero
 4012fcc:	1000031e 	bne	r2,zero,4012fdc <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 4012fd0:	e13fff17 	ldw	r4,-4(fp)
 4012fd4:	4012ff40 	call	4012ff4 <alt_flash_device_register>
 4012fd8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 4012fdc:	e0bffe17 	ldw	r2,-8(fp)
}
 4012fe0:	e037883a 	mov	sp,fp
 4012fe4:	dfc00117 	ldw	ra,4(sp)
 4012fe8:	df000017 	ldw	fp,0(sp)
 4012fec:	dec00204 	addi	sp,sp,8
 4012ff0:	f800283a 	ret

04012ff4 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 4012ff4:	defffd04 	addi	sp,sp,-12
 4012ff8:	dfc00215 	stw	ra,8(sp)
 4012ffc:	df000115 	stw	fp,4(sp)
 4013000:	df000104 	addi	fp,sp,4
 4013004:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 4013008:	e13fff17 	ldw	r4,-4(fp)
 401300c:	014100b4 	movhi	r5,1026
 4013010:	2961c704 	addi	r5,r5,-30948
 4013014:	4014ce40 	call	4014ce4 <alt_dev_llist_insert>
}
 4013018:	e037883a 	mov	sp,fp
 401301c:	dfc00117 	ldw	ra,4(sp)
 4013020:	df000017 	ldw	fp,0(sp)
 4013024:	dec00204 	addi	sp,sp,8
 4013028:	f800283a 	ret

0401302c <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 401302c:	defffc04 	addi	sp,sp,-16
 4013030:	dfc00315 	stw	ra,12(sp)
 4013034:	df000215 	stw	fp,8(sp)
 4013038:	df000204 	addi	fp,sp,8
 401303c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 4013040:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */

  /* Send the RES command sequence */
  flash->silicon_id =
 4013044:	e0bfff17 	ldw	r2,-4(fp)
 4013048:	11002d17 	ldw	r4,180(r2)
 401304c:	4014abc0 	call	4014abc <epcs_read_electronic_signature>
 4013050:	10c03fcc 	andi	r3,r2,255
 4013054:	e0bfff17 	ldw	r2,-4(fp)
 4013058:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 401305c:	e0bfff17 	ldw	r2,-4(fp)
 4013060:	10802f17 	ldw	r2,188(r2)
 4013064:	10800598 	cmpnei	r2,r2,22
 4013068:	10000a1e 	bne	r2,zero,4013094 <alt_epcs_flash_query+0x68>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 401306c:	e0ffff17 	ldw	r3,-4(fp)
 4013070:	00802034 	movhi	r2,128
 4013074:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 4013078:	e0ffff17 	ldw	r3,-4(fp)
 401307c:	00802004 	movi	r2,128
 4013080:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 4013084:	e0ffff17 	ldw	r3,-4(fp)
 4013088:	00800074 	movhi	r2,1
 401308c:	18801015 	stw	r2,64(r3)
 4013090:	00004e06 	br	40131cc <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 4013094:	e0bfff17 	ldw	r2,-4(fp)
 4013098:	10802f17 	ldw	r2,188(r2)
 401309c:	10800518 	cmpnei	r2,r2,20
 40130a0:	10000a1e 	bne	r2,zero,40130cc <alt_epcs_flash_query+0xa0>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 40130a4:	e0ffff17 	ldw	r3,-4(fp)
 40130a8:	00800834 	movhi	r2,32
 40130ac:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 40130b0:	e0ffff17 	ldw	r3,-4(fp)
 40130b4:	00800804 	movi	r2,32
 40130b8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 40130bc:	e0ffff17 	ldw	r3,-4(fp)
 40130c0:	00800074 	movhi	r2,1
 40130c4:	18801015 	stw	r2,64(r3)
 40130c8:	00004006 	br	40131cc <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 40130cc:	e0bfff17 	ldw	r2,-4(fp)
 40130d0:	10802f17 	ldw	r2,188(r2)
 40130d4:	108004d8 	cmpnei	r2,r2,19
 40130d8:	10000a1e 	bne	r2,zero,4013104 <alt_epcs_flash_query+0xd8>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 40130dc:	e0ffff17 	ldw	r3,-4(fp)
 40130e0:	00800434 	movhi	r2,16
 40130e4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 40130e8:	e0ffff17 	ldw	r3,-4(fp)
 40130ec:	00800404 	movi	r2,16
 40130f0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 40130f4:	e0ffff17 	ldw	r3,-4(fp)
 40130f8:	00800074 	movhi	r2,1
 40130fc:	18801015 	stw	r2,64(r3)
 4013100:	00003206 	br	40131cc <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 4013104:	e0bfff17 	ldw	r2,-4(fp)
 4013108:	10802f17 	ldw	r2,188(r2)
 401310c:	10800498 	cmpnei	r2,r2,18
 4013110:	10000a1e 	bne	r2,zero,401313c <alt_epcs_flash_query+0x110>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 4013114:	e0ffff17 	ldw	r3,-4(fp)
 4013118:	00800234 	movhi	r2,8
 401311c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 4013120:	e0ffff17 	ldw	r3,-4(fp)
 4013124:	00800204 	movi	r2,8
 4013128:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 401312c:	e0ffff17 	ldw	r3,-4(fp)
 4013130:	00800074 	movhi	r2,1
 4013134:	18801015 	stw	r2,64(r3)
 4013138:	00002406 	br	40131cc <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 401313c:	e0bfff17 	ldw	r2,-4(fp)
 4013140:	10802f17 	ldw	r2,188(r2)
 4013144:	10800418 	cmpnei	r2,r2,16
 4013148:	10000a1e 	bne	r2,zero,4013174 <alt_epcs_flash_query+0x148>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 401314c:	e0ffff17 	ldw	r3,-4(fp)
 4013150:	008000b4 	movhi	r2,2
 4013154:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 4013158:	e0ffff17 	ldw	r3,-4(fp)
 401315c:	00800104 	movi	r2,4
 4013160:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 4013164:	e0ffff17 	ldw	r3,-4(fp)
 4013168:	00a00014 	movui	r2,32768
 401316c:	18801015 	stw	r2,64(r3)
 4013170:	00001606 	br	40131cc <alt_epcs_flash_query+0x1a0>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 4013174:	e0bfff17 	ldw	r2,-4(fp)
 4013178:	11002d17 	ldw	r4,180(r2)
 401317c:	4014b280 	call	4014b28 <epcs_read_device_id>
 4013180:	10c03fcc 	andi	r3,r2,255
 4013184:	e0bfff17 	ldw	r2,-4(fp)
 4013188:	10c02f15 	stw	r3,188(r2)
    
    if(flash->silicon_id == 0x18) /* EPCS128 */
 401318c:	e0bfff17 	ldw	r2,-4(fp)
 4013190:	10802f17 	ldw	r2,188(r2)
 4013194:	10800618 	cmpnei	r2,r2,24
 4013198:	10000a1e 	bne	r2,zero,40131c4 <alt_epcs_flash_query+0x198>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 401319c:	e0ffff17 	ldw	r3,-4(fp)
 40131a0:	00804034 	movhi	r2,256
 40131a4:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 40131a8:	e0ffff17 	ldw	r3,-4(fp)
 40131ac:	00801004 	movi	r2,64
 40131b0:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;     
 40131b4:	e0ffff17 	ldw	r3,-4(fp)
 40131b8:	00800134 	movhi	r2,4
 40131bc:	18801015 	stw	r2,64(r3)
 40131c0:	00000206 	br	40131cc <alt_epcs_flash_query+0x1a0>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 40131c4:	00bffb44 	movi	r2,-19
 40131c8:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 40131cc:	e0bfff17 	ldw	r2,-4(fp)
 40131d0:	10800e17 	ldw	r2,56(r2)
 40131d4:	1007883a 	mov	r3,r2
 40131d8:	e0bfff17 	ldw	r2,-4(fp)
 40131dc:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 40131e0:	e0ffff17 	ldw	r3,-4(fp)
 40131e4:	00800044 	movi	r2,1
 40131e8:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 40131ec:	e0bfff17 	ldw	r2,-4(fp)
 40131f0:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 40131f4:	e0ffff17 	ldw	r3,-4(fp)
 40131f8:	00804004 	movi	r2,256
 40131fc:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 4013200:	e0bffe17 	ldw	r2,-8(fp)
}
 4013204:	e037883a 	mov	sp,fp
 4013208:	dfc00117 	ldw	ra,4(sp)
 401320c:	df000017 	ldw	fp,0(sp)
 4013210:	dec00204 	addi	sp,sp,8
 4013214:	f800283a 	ret

04013218 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 4013218:	deffeb04 	addi	sp,sp,-84
 401321c:	dfc01415 	stw	ra,80(sp)
 4013220:	df001315 	stw	fp,76(sp)
 4013224:	df001304 	addi	fp,sp,76
 4013228:	e13ff915 	stw	r4,-28(fp)
 401322c:	e17ffa15 	stw	r5,-24(fp)
 4013230:	e1bffb15 	stw	r6,-20(fp)
 4013234:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 4013238:	00800804 	movi	r2,32
 401323c:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 4013240:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 4013244:	00002c06 	br	40132f8 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 4013248:	e0bff017 	ldw	r2,-64(fp)
 401324c:	e0bfff15 	stw	r2,-4(fp)
 4013250:	e0fffc17 	ldw	r3,-16(fp)
 4013254:	e0fffe15 	stw	r3,-8(fp)
 4013258:	e0bfff17 	ldw	r2,-4(fp)
 401325c:	e0fffe17 	ldw	r3,-8(fp)
 4013260:	10c0022e 	bgeu	r2,r3,401326c <alt_epcs_flash_memcmp+0x54>
 4013264:	e0bfff17 	ldw	r2,-4(fp)
 4013268:	e0bffe15 	stw	r2,-8(fp)
 401326c:	e0fffe17 	ldw	r3,-8(fp)
 4013270:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 4013274:	e0fffb17 	ldw	r3,-20(fp)
 4013278:	e0bfef17 	ldw	r2,-68(fp)
 401327c:	188b883a 	add	r5,r3,r2
 4013280:	e1bff104 	addi	r6,fp,-60
 4013284:	e13ff917 	ldw	r4,-28(fp)
 4013288:	e1ffee17 	ldw	r7,-72(fp)
 401328c:	40138480 	call	4013848 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 4013290:	1004403a 	cmpge	r2,r2,zero
 4013294:	1000031e 	bne	r2,zero,40132a4 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 4013298:	00bfffc4 	movi	r2,-1
 401329c:	e0bffd15 	stw	r2,-12(fp)
 40132a0:	00001906 	br	4013308 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 40132a4:	e0fffa17 	ldw	r3,-24(fp)
 40132a8:	e0bfef17 	ldw	r2,-68(fp)
 40132ac:	1889883a 	add	r4,r3,r2
 40132b0:	e1bfee17 	ldw	r6,-72(fp)
 40132b4:	e17ff104 	addi	r5,fp,-60
 40132b8:	40162380 	call	4016238 <memcmp>
 40132bc:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 40132c0:	e0bfed17 	ldw	r2,-76(fp)
 40132c4:	1005003a 	cmpeq	r2,r2,zero
 40132c8:	1000031e 	bne	r2,zero,40132d8 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 40132cc:	e0ffed17 	ldw	r3,-76(fp)
 40132d0:	e0fffd15 	stw	r3,-12(fp)
 40132d4:	00000c06 	br	4013308 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 40132d8:	e0ffee17 	ldw	r3,-72(fp)
 40132dc:	e0bffc17 	ldw	r2,-16(fp)
 40132e0:	10c5c83a 	sub	r2,r2,r3
 40132e4:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 40132e8:	e0ffef17 	ldw	r3,-68(fp)
 40132ec:	e0bfee17 	ldw	r2,-72(fp)
 40132f0:	1885883a 	add	r2,r3,r2
 40132f4:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 40132f8:	e0bffc17 	ldw	r2,-16(fp)
 40132fc:	1004c03a 	cmpne	r2,r2,zero
 4013300:	103fd11e 	bne	r2,zero,4013248 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 4013304:	e03ffd15 	stw	zero,-12(fp)
 4013308:	e0bffd17 	ldw	r2,-12(fp)
}
 401330c:	e037883a 	mov	sp,fp
 4013310:	dfc00117 	ldw	ra,4(sp)
 4013314:	df000017 	ldw	fp,0(sp)
 4013318:	dec00204 	addi	sp,sp,8
 401331c:	f800283a 	ret

04013320 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 4013320:	defff204 	addi	sp,sp,-56
 4013324:	dfc00d15 	stw	ra,52(sp)
 4013328:	df000c15 	stw	fp,48(sp)
 401332c:	df000c04 	addi	fp,sp,48
 4013330:	e13ffa15 	stw	r4,-24(fp)
 4013334:	e17ffb15 	stw	r5,-20(fp)
 4013338:	e1bffc15 	stw	r6,-16(fp)
 401333c:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 4013340:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 4013344:	e03ff815 	stw	zero,-32(fp)
 4013348:	00008b06 	br	4013578 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 401334c:	e0bff817 	ldw	r2,-32(fp)
 4013350:	e0fffa17 	ldw	r3,-24(fp)
 4013354:	1004913a 	slli	r2,r2,4
 4013358:	10c5883a 	add	r2,r2,r3
 401335c:	10800d04 	addi	r2,r2,52
 4013360:	10c00017 	ldw	r3,0(r2)
 4013364:	e0bffb17 	ldw	r2,-20(fp)
 4013368:	10c08016 	blt	r2,r3,401356c <alt_epcs_flash_write+0x24c>
 401336c:	e0bff817 	ldw	r2,-32(fp)
 4013370:	e0fffa17 	ldw	r3,-24(fp)
 4013374:	1004913a 	slli	r2,r2,4
 4013378:	10c5883a 	add	r2,r2,r3
 401337c:	10800d04 	addi	r2,r2,52
 4013380:	11000017 	ldw	r4,0(r2)
 4013384:	e0bff817 	ldw	r2,-32(fp)
 4013388:	e0fffa17 	ldw	r3,-24(fp)
 401338c:	1004913a 	slli	r2,r2,4
 4013390:	10c5883a 	add	r2,r2,r3
 4013394:	10800e04 	addi	r2,r2,56
 4013398:	10800017 	ldw	r2,0(r2)
 401339c:	2087883a 	add	r3,r4,r2
 40133a0:	e0bffb17 	ldw	r2,-20(fp)
 40133a4:	10c0710e 	bge	r2,r3,401356c <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 40133a8:	e0bff817 	ldw	r2,-32(fp)
 40133ac:	e0fffa17 	ldw	r3,-24(fp)
 40133b0:	1004913a 	slli	r2,r2,4
 40133b4:	10c5883a 	add	r2,r2,r3
 40133b8:	10800d04 	addi	r2,r2,52
 40133bc:	10800017 	ldw	r2,0(r2)
 40133c0:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 40133c4:	e03ff715 	stw	zero,-36(fp)
 40133c8:	00006006 	br	401354c <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 40133cc:	e0fffb17 	ldw	r3,-20(fp)
 40133d0:	e0bff517 	ldw	r2,-44(fp)
 40133d4:	18805116 	blt	r3,r2,401351c <alt_epcs_flash_write+0x1fc>
 40133d8:	e0bff817 	ldw	r2,-32(fp)
 40133dc:	e0fffa17 	ldw	r3,-24(fp)
 40133e0:	1004913a 	slli	r2,r2,4
 40133e4:	10c5883a 	add	r2,r2,r3
 40133e8:	10801004 	addi	r2,r2,64
 40133ec:	10c00017 	ldw	r3,0(r2)
 40133f0:	e0bff517 	ldw	r2,-44(fp)
 40133f4:	1887883a 	add	r3,r3,r2
 40133f8:	e0bffb17 	ldw	r2,-20(fp)
 40133fc:	10c0470e 	bge	r2,r3,401351c <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 4013400:	e0bff817 	ldw	r2,-32(fp)
 4013404:	e0fffa17 	ldw	r3,-24(fp)
 4013408:	1004913a 	slli	r2,r2,4
 401340c:	10c5883a 	add	r2,r2,r3
 4013410:	10801004 	addi	r2,r2,64
 4013414:	10c00017 	ldw	r3,0(r2)
 4013418:	e0bff517 	ldw	r2,-44(fp)
 401341c:	1887883a 	add	r3,r3,r2
 4013420:	e0bffb17 	ldw	r2,-20(fp)
 4013424:	1885c83a 	sub	r2,r3,r2
 4013428:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 401342c:	e0bff617 	ldw	r2,-40(fp)
 4013430:	e0bfff15 	stw	r2,-4(fp)
 4013434:	e0fffd17 	ldw	r3,-12(fp)
 4013438:	e0fffe15 	stw	r3,-8(fp)
 401343c:	e0bfff17 	ldw	r2,-4(fp)
 4013440:	e0fffe17 	ldw	r3,-8(fp)
 4013444:	10c0020e 	bge	r2,r3,4013450 <alt_epcs_flash_write+0x130>
 4013448:	e0bfff17 	ldw	r2,-4(fp)
 401344c:	e0bffe15 	stw	r2,-8(fp)
 4013450:	e0fffe17 	ldw	r3,-8(fp)
 4013454:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 4013458:	e1fff617 	ldw	r7,-40(fp)
 401345c:	e13ffa17 	ldw	r4,-24(fp)
 4013460:	e17ffc17 	ldw	r5,-16(fp)
 4013464:	e1bffb17 	ldw	r6,-20(fp)
 4013468:	40132180 	call	4013218 <alt_epcs_flash_memcmp>
 401346c:	1005003a 	cmpeq	r2,r2,zero
 4013470:	1000131e 	bne	r2,zero,40134c0 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 4013474:	e0bffa17 	ldw	r2,-24(fp)
 4013478:	10800817 	ldw	r2,32(r2)
 401347c:	e13ffa17 	ldw	r4,-24(fp)
 4013480:	e17ff517 	ldw	r5,-44(fp)
 4013484:	103ee83a 	callr	r2
 4013488:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 401348c:	e0bff917 	ldw	r2,-28(fp)
 4013490:	1004c03a 	cmpne	r2,r2,zero
 4013494:	10000a1e 	bne	r2,zero,40134c0 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 4013498:	e0bffa17 	ldw	r2,-24(fp)
 401349c:	10c00917 	ldw	r3,36(r2)
 40134a0:	e0bff617 	ldw	r2,-40(fp)
 40134a4:	d8800015 	stw	r2,0(sp)
 40134a8:	e13ffa17 	ldw	r4,-24(fp)
 40134ac:	e17ff517 	ldw	r5,-44(fp)
 40134b0:	e1bffb17 	ldw	r6,-20(fp)
 40134b4:	e1fffc17 	ldw	r7,-16(fp)
 40134b8:	183ee83a 	callr	r3
 40134bc:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 40134c0:	e0fffd17 	ldw	r3,-12(fp)
 40134c4:	e0bff617 	ldw	r2,-40(fp)
 40134c8:	18802f26 	beq	r3,r2,4013588 <alt_epcs_flash_write+0x268>
 40134cc:	e0bff917 	ldw	r2,-28(fp)
 40134d0:	1004c03a 	cmpne	r2,r2,zero
 40134d4:	10002c1e 	bne	r2,zero,4013588 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 40134d8:	e0fffd17 	ldw	r3,-12(fp)
 40134dc:	e0bff617 	ldw	r2,-40(fp)
 40134e0:	1885c83a 	sub	r2,r3,r2
 40134e4:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 40134e8:	e0bff817 	ldw	r2,-32(fp)
 40134ec:	e0fffa17 	ldw	r3,-24(fp)
 40134f0:	1004913a 	slli	r2,r2,4
 40134f4:	10c5883a 	add	r2,r2,r3
 40134f8:	10801004 	addi	r2,r2,64
 40134fc:	10c00017 	ldw	r3,0(r2)
 4013500:	e0bff517 	ldw	r2,-44(fp)
 4013504:	1885883a 	add	r2,r3,r2
 4013508:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 401350c:	e0fffc17 	ldw	r3,-16(fp)
 4013510:	e0bff617 	ldw	r2,-40(fp)
 4013514:	1885883a 	add	r2,r3,r2
 4013518:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 401351c:	e0bff817 	ldw	r2,-32(fp)
 4013520:	e0fffa17 	ldw	r3,-24(fp)
 4013524:	1004913a 	slli	r2,r2,4
 4013528:	10c5883a 	add	r2,r2,r3
 401352c:	10801004 	addi	r2,r2,64
 4013530:	10c00017 	ldw	r3,0(r2)
 4013534:	e0bff517 	ldw	r2,-44(fp)
 4013538:	10c5883a 	add	r2,r2,r3
 401353c:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 4013540:	e0bff717 	ldw	r2,-36(fp)
 4013544:	10800044 	addi	r2,r2,1
 4013548:	e0bff715 	stw	r2,-36(fp)
 401354c:	e0bff817 	ldw	r2,-32(fp)
 4013550:	e0fffa17 	ldw	r3,-24(fp)
 4013554:	1004913a 	slli	r2,r2,4
 4013558:	10c5883a 	add	r2,r2,r3
 401355c:	10800f04 	addi	r2,r2,60
 4013560:	10c00017 	ldw	r3,0(r2)
 4013564:	e0bff717 	ldw	r2,-36(fp)
 4013568:	10ff9816 	blt	r2,r3,40133cc <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 401356c:	e0bff817 	ldw	r2,-32(fp)
 4013570:	10800044 	addi	r2,r2,1
 4013574:	e0bff815 	stw	r2,-32(fp)
 4013578:	e0bffa17 	ldw	r2,-24(fp)
 401357c:	10c00c17 	ldw	r3,48(r2)
 4013580:	e0bff817 	ldw	r2,-32(fp)
 4013584:	10ff7116 	blt	r2,r3,401334c <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 4013588:	e0bff917 	ldw	r2,-28(fp)
}
 401358c:	e037883a 	mov	sp,fp
 4013590:	dfc00117 	ldw	ra,4(sp)
 4013594:	df000017 	ldw	fp,0(sp)
 4013598:	dec00204 	addi	sp,sp,8
 401359c:	f800283a 	ret

040135a0 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 40135a0:	defffa04 	addi	sp,sp,-24
 40135a4:	df000515 	stw	fp,20(sp)
 40135a8:	df000504 	addi	fp,sp,20
 40135ac:	e13ffd15 	stw	r4,-12(fp)
 40135b0:	e17ffe15 	stw	r5,-8(fp)
 40135b4:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 40135b8:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 40135bc:	e0bffd17 	ldw	r2,-12(fp)
 40135c0:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 40135c4:	e0bffb17 	ldw	r2,-20(fp)
 40135c8:	10c00c17 	ldw	r3,48(r2)
 40135cc:	e0bfff17 	ldw	r2,-4(fp)
 40135d0:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 40135d4:	e0bffb17 	ldw	r2,-20(fp)
 40135d8:	10800c17 	ldw	r2,48(r2)
 40135dc:	1004c03a 	cmpne	r2,r2,zero
 40135e0:	1000031e 	bne	r2,zero,40135f0 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 40135e4:	00bffec4 	movi	r2,-5
 40135e8:	e0bffc15 	stw	r2,-16(fp)
 40135ec:	00000b06 	br	401361c <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 40135f0:	e0bffb17 	ldw	r2,-20(fp)
 40135f4:	10800c17 	ldw	r2,48(r2)
 40135f8:	10800250 	cmplti	r2,r2,9
 40135fc:	1000031e 	bne	r2,zero,401360c <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 4013600:	00bffd04 	movi	r2,-12
 4013604:	e0bffc15 	stw	r2,-16(fp)
 4013608:	00000406 	br	401361c <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 401360c:	e0bffb17 	ldw	r2,-20(fp)
 4013610:	10c00d04 	addi	r3,r2,52
 4013614:	e0bffe17 	ldw	r2,-8(fp)
 4013618:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 401361c:	e0bffc17 	ldw	r2,-16(fp)
}
 4013620:	e037883a 	mov	sp,fp
 4013624:	df000017 	ldw	fp,0(sp)
 4013628:	dec00104 	addi	sp,sp,4
 401362c:	f800283a 	ret

04013630 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 4013630:	defffa04 	addi	sp,sp,-24
 4013634:	dfc00515 	stw	ra,20(sp)
 4013638:	df000415 	stw	fp,16(sp)
 401363c:	df000404 	addi	fp,sp,16
 4013640:	e13ffe15 	stw	r4,-8(fp)
 4013644:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 4013648:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401364c:	e0bffe17 	ldw	r2,-8(fp)
 4013650:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 4013654:	e13ffe17 	ldw	r4,-8(fp)
 4013658:	e17fff17 	ldw	r5,-4(fp)
 401365c:	40136a40 	call	40136a4 <alt_epcs_test_address>
 4013660:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 4013664:	e0bffd17 	ldw	r2,-12(fp)
 4013668:	1004803a 	cmplt	r2,r2,zero
 401366c:	1000071e 	bne	r2,zero,401368c <alt_epcs_flash_erase_block+0x5c>
  {
    /* Execute a WREN instruction */
    epcs_write_enable(f->register_base);
 4013670:	e0bffc17 	ldw	r2,-16(fp)
 4013674:	11002d17 	ldw	r4,180(r2)
 4013678:	40149300 	call	4014930 <epcs_write_enable>

    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset);
 401367c:	e0bffc17 	ldw	r2,-16(fp)
 4013680:	11002d17 	ldw	r4,180(r2)
 4013684:	e17fff17 	ldw	r5,-4(fp)
 4013688:	40147900 	call	4014790 <epcs_sector_erase>
  }
  return ret_code;
 401368c:	e0bffd17 	ldw	r2,-12(fp)
}
 4013690:	e037883a 	mov	sp,fp
 4013694:	dfc00117 	ldw	ra,4(sp)
 4013698:	df000017 	ldw	fp,0(sp)
 401369c:	dec00204 	addi	sp,sp,8
 40136a0:	f800283a 	ret

040136a4 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 40136a4:	defff904 	addi	sp,sp,-28
 40136a8:	df000615 	stw	fp,24(sp)
 40136ac:	df000604 	addi	fp,sp,24
 40136b0:	e13ffe15 	stw	r4,-8(fp)
 40136b4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 40136b8:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 40136bc:	e0bffe17 	ldw	r2,-8(fp)
 40136c0:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 40136c4:	e0bffc17 	ldw	r2,-16(fp)
 40136c8:	10800c17 	ldw	r2,48(r2)
 40136cc:	10bfffc4 	addi	r2,r2,-1
 40136d0:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 40136d4:	e0bffb17 	ldw	r2,-20(fp)
 40136d8:	e0fffc17 	ldw	r3,-16(fp)
 40136dc:	1004913a 	slli	r2,r2,4
 40136e0:	10c5883a 	add	r2,r2,r3
 40136e4:	10800d04 	addi	r2,r2,52
 40136e8:	11000017 	ldw	r4,0(r2)
 40136ec:	e0bffb17 	ldw	r2,-20(fp)
 40136f0:	e0fffc17 	ldw	r3,-16(fp)
 40136f4:	1004913a 	slli	r2,r2,4
 40136f8:	10c5883a 	add	r2,r2,r3
 40136fc:	10800e04 	addi	r2,r2,56
 4013700:	10800017 	ldw	r2,0(r2)
 4013704:	2085883a 	add	r2,r4,r2
 4013708:	10bfffc4 	addi	r2,r2,-1
 401370c:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 4013710:	e0ffff17 	ldw	r3,-4(fp)
 4013714:	e0bffa17 	ldw	r2,-24(fp)
 4013718:	10c0022e 	bgeu	r2,r3,4013724 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 401371c:	00bffec4 	movi	r2,-5
 4013720:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 4013724:	e0bffd17 	ldw	r2,-12(fp)
}
 4013728:	e037883a 	mov	sp,fp
 401372c:	df000017 	ldw	fp,0(sp)
 4013730:	dec00104 	addi	sp,sp,4
 4013734:	f800283a 	ret

04013738 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 4013738:	defff304 	addi	sp,sp,-52
 401373c:	dfc00c15 	stw	ra,48(sp)
 4013740:	df000b15 	stw	fp,44(sp)
 4013744:	df000b04 	addi	fp,sp,44
 4013748:	e13ffa15 	stw	r4,-24(fp)
 401374c:	e17ffb15 	stw	r5,-20(fp)
 4013750:	e1bffc15 	stw	r6,-16(fp)
 4013754:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4013758:	e0bffa17 	ldw	r2,-24(fp)
 401375c:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 4013760:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 4013764:	e13ffa17 	ldw	r4,-24(fp)
 4013768:	e17ffc17 	ldw	r5,-16(fp)
 401376c:	40136a40 	call	40136a4 <alt_epcs_test_address>
 4013770:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 4013774:	e0bff917 	ldw	r2,-28(fp)
 4013778:	1004803a 	cmplt	r2,r2,zero
 401377c:	10002c1e 	bne	r2,zero,4013830 <alt_epcs_flash_write_block+0xf8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 4013780:	00002806 	br	4013824 <alt_epcs_flash_write_block+0xec>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 4013784:	e0bff817 	ldw	r2,-32(fp)
 4013788:	10c03017 	ldw	r3,192(r2)
 401378c:	e0bffc17 	ldw	r2,-16(fp)
 4013790:	1887883a 	add	r3,r3,r2
 4013794:	e0bff817 	ldw	r2,-32(fp)
 4013798:	10803017 	ldw	r2,192(r2)
 401379c:	0085c83a 	sub	r2,zero,r2
 40137a0:	1884703a 	and	r2,r3,r2
 40137a4:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 40137a8:	e0fff517 	ldw	r3,-44(fp)
 40137ac:	e0bffc17 	ldw	r2,-16(fp)
 40137b0:	1885c83a 	sub	r2,r3,r2
 40137b4:	e0c00217 	ldw	r3,8(fp)
 40137b8:	e0ffff15 	stw	r3,-4(fp)
 40137bc:	e0bffe15 	stw	r2,-8(fp)
 40137c0:	e0bfff17 	ldw	r2,-4(fp)
 40137c4:	e0fffe17 	ldw	r3,-8(fp)
 40137c8:	10c0020e 	bge	r2,r3,40137d4 <alt_epcs_flash_write_block+0x9c>
 40137cc:	e0bfff17 	ldw	r2,-4(fp)
 40137d0:	e0bffe15 	stw	r2,-8(fp)
 40137d4:	e0fffe17 	ldw	r3,-8(fp)
 40137d8:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write);
 40137dc:	e0bff817 	ldw	r2,-32(fp)
 40137e0:	11002d17 	ldw	r4,180(r2)
 40137e4:	e0fffd17 	ldw	r3,-12(fp)
 40137e8:	e0bff717 	ldw	r2,-36(fp)
 40137ec:	188d883a 	add	r6,r3,r2
 40137f0:	e17ffc17 	ldw	r5,-16(fp)
 40137f4:	e1fff617 	ldw	r7,-40(fp)
 40137f8:	40149e40 	call	40149e4 <epcs_write_buffer>

      length -= length_of_current_write;
 40137fc:	e0c00217 	ldw	r3,8(fp)
 4013800:	e0bff617 	ldw	r2,-40(fp)
 4013804:	1885c83a 	sub	r2,r3,r2
 4013808:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 401380c:	e0fff717 	ldw	r3,-36(fp)
 4013810:	e0bff617 	ldw	r2,-40(fp)
 4013814:	1885883a 	add	r2,r3,r2
 4013818:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 401381c:	e0bff517 	ldw	r2,-44(fp)
 4013820:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 4013824:	e0800217 	ldw	r2,8(fp)
 4013828:	1004c03a 	cmpne	r2,r2,zero
 401382c:	103fd51e 	bne	r2,zero,4013784 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 4013830:	e0bff917 	ldw	r2,-28(fp)
}
 4013834:	e037883a 	mov	sp,fp
 4013838:	dfc00117 	ldw	ra,4(sp)
 401383c:	df000017 	ldw	fp,0(sp)
 4013840:	dec00204 	addi	sp,sp,8
 4013844:	f800283a 	ret

04013848 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 4013848:	defff804 	addi	sp,sp,-32
 401384c:	dfc00715 	stw	ra,28(sp)
 4013850:	df000615 	stw	fp,24(sp)
 4013854:	df000604 	addi	fp,sp,24
 4013858:	e13ffc15 	stw	r4,-16(fp)
 401385c:	e17ffd15 	stw	r5,-12(fp)
 4013860:	e1bffe15 	stw	r6,-8(fp)
 4013864:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 4013868:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401386c:	e0bffc17 	ldw	r2,-16(fp)
 4013870:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 4013874:	e13ffc17 	ldw	r4,-16(fp)
 4013878:	e17ffd17 	ldw	r5,-12(fp)
 401387c:	40136a40 	call	40136a4 <alt_epcs_test_address>
 4013880:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 4013884:	e0bffb17 	ldw	r2,-20(fp)
 4013888:	1004803a 	cmplt	r2,r2,zero
 401388c:	10000b1e 	bne	r2,zero,40138bc <alt_epcs_flash_read+0x74>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length);
 4013890:	e0bffa17 	ldw	r2,-24(fp)
 4013894:	11002d17 	ldw	r4,180(r2)
 4013898:	e1bffe17 	ldw	r6,-8(fp)
 401389c:	e17ffd17 	ldw	r5,-12(fp)
 40138a0:	e1ffff17 	ldw	r7,-4(fp)
 40138a4:	401487c0 	call	401487c <epcs_read_buffer>
 40138a8:	e0bffb15 	stw	r2,-20(fp)

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 40138ac:	e0fffb17 	ldw	r3,-20(fp)
 40138b0:	e0bfff17 	ldw	r2,-4(fp)
 40138b4:	1880011e 	bne	r3,r2,40138bc <alt_epcs_flash_read+0x74>
    {
      ret_code = 0;
 40138b8:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 40138bc:	e0bffb17 	ldw	r2,-20(fp)
}
 40138c0:	e037883a 	mov	sp,fp
 40138c4:	dfc00117 	ldw	ra,4(sp)
 40138c8:	df000017 	ldw	fp,0(sp)
 40138cc:	dec00204 	addi	sp,sp,8
 40138d0:	f800283a 	ret

040138d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40138d4:	defffa04 	addi	sp,sp,-24
 40138d8:	dfc00515 	stw	ra,20(sp)
 40138dc:	df000415 	stw	fp,16(sp)
 40138e0:	df000404 	addi	fp,sp,16
 40138e4:	e13ffd15 	stw	r4,-12(fp)
 40138e8:	e17ffe15 	stw	r5,-8(fp)
 40138ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40138f0:	e0bffd17 	ldw	r2,-12(fp)
 40138f4:	10800017 	ldw	r2,0(r2)
 40138f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40138fc:	e0bffc17 	ldw	r2,-16(fp)
 4013900:	11000a04 	addi	r4,r2,40
 4013904:	e0bffd17 	ldw	r2,-12(fp)
 4013908:	11c00217 	ldw	r7,8(r2)
 401390c:	e17ffe17 	ldw	r5,-8(fp)
 4013910:	e1bfff17 	ldw	r6,-4(fp)
 4013914:	40140940 	call	4014094 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4013918:	e037883a 	mov	sp,fp
 401391c:	dfc00117 	ldw	ra,4(sp)
 4013920:	df000017 	ldw	fp,0(sp)
 4013924:	dec00204 	addi	sp,sp,8
 4013928:	f800283a 	ret

0401392c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401392c:	defffa04 	addi	sp,sp,-24
 4013930:	dfc00515 	stw	ra,20(sp)
 4013934:	df000415 	stw	fp,16(sp)
 4013938:	df000404 	addi	fp,sp,16
 401393c:	e13ffd15 	stw	r4,-12(fp)
 4013940:	e17ffe15 	stw	r5,-8(fp)
 4013944:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4013948:	e0bffd17 	ldw	r2,-12(fp)
 401394c:	10800017 	ldw	r2,0(r2)
 4013950:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4013954:	e0bffc17 	ldw	r2,-16(fp)
 4013958:	11000a04 	addi	r4,r2,40
 401395c:	e0bffd17 	ldw	r2,-12(fp)
 4013960:	11c00217 	ldw	r7,8(r2)
 4013964:	e17ffe17 	ldw	r5,-8(fp)
 4013968:	e1bfff17 	ldw	r6,-4(fp)
 401396c:	40143540 	call	4014354 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4013970:	e037883a 	mov	sp,fp
 4013974:	dfc00117 	ldw	ra,4(sp)
 4013978:	df000017 	ldw	fp,0(sp)
 401397c:	dec00204 	addi	sp,sp,8
 4013980:	f800283a 	ret

04013984 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4013984:	defffc04 	addi	sp,sp,-16
 4013988:	dfc00315 	stw	ra,12(sp)
 401398c:	df000215 	stw	fp,8(sp)
 4013990:	df000204 	addi	fp,sp,8
 4013994:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4013998:	e0bfff17 	ldw	r2,-4(fp)
 401399c:	10800017 	ldw	r2,0(r2)
 40139a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40139a4:	e0bffe17 	ldw	r2,-8(fp)
 40139a8:	11000a04 	addi	r4,r2,40
 40139ac:	e0bfff17 	ldw	r2,-4(fp)
 40139b0:	11400217 	ldw	r5,8(r2)
 40139b4:	4013f2c0 	call	4013f2c <altera_avalon_jtag_uart_close>
}
 40139b8:	e037883a 	mov	sp,fp
 40139bc:	dfc00117 	ldw	ra,4(sp)
 40139c0:	df000017 	ldw	fp,0(sp)
 40139c4:	dec00204 	addi	sp,sp,8
 40139c8:	f800283a 	ret

040139cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 40139cc:	defffa04 	addi	sp,sp,-24
 40139d0:	dfc00515 	stw	ra,20(sp)
 40139d4:	df000415 	stw	fp,16(sp)
 40139d8:	df000404 	addi	fp,sp,16
 40139dc:	e13ffd15 	stw	r4,-12(fp)
 40139e0:	e17ffe15 	stw	r5,-8(fp)
 40139e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40139e8:	e0bffd17 	ldw	r2,-12(fp)
 40139ec:	10800017 	ldw	r2,0(r2)
 40139f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40139f4:	e0bffc17 	ldw	r2,-16(fp)
 40139f8:	11000a04 	addi	r4,r2,40
 40139fc:	e17ffe17 	ldw	r5,-8(fp)
 4013a00:	e1bfff17 	ldw	r6,-4(fp)
 4013a04:	4013fa00 	call	4013fa0 <altera_avalon_jtag_uart_ioctl>
}
 4013a08:	e037883a 	mov	sp,fp
 4013a0c:	dfc00117 	ldw	ra,4(sp)
 4013a10:	df000017 	ldw	fp,0(sp)
 4013a14:	dec00204 	addi	sp,sp,8
 4013a18:	f800283a 	ret

04013a1c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4013a1c:	defff404 	addi	sp,sp,-48
 4013a20:	dfc00b15 	stw	ra,44(sp)
 4013a24:	df000a15 	stw	fp,40(sp)
 4013a28:	df000a04 	addi	fp,sp,40
 4013a2c:	e13ffd15 	stw	r4,-12(fp)
 4013a30:	e17ffe15 	stw	r5,-8(fp)
 4013a34:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 4013a38:	e0bffd17 	ldw	r2,-12(fp)
 4013a3c:	10800c04 	addi	r2,r2,48
 4013a40:	e0bffb15 	stw	r2,-20(fp)
 4013a44:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 4013a48:	e13ffc0b 	ldhu	r4,-16(fp)
 4013a4c:	e17ffc84 	addi	r5,fp,-14
 4013a50:	400d2280 	call	400d228 <OSFlagCreate>
 4013a54:	1007883a 	mov	r3,r2
 4013a58:	e0bffb17 	ldw	r2,-20(fp)
 4013a5c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 4013a60:	e0bffd17 	ldw	r2,-12(fp)
 4013a64:	10800a04 	addi	r2,r2,40
 4013a68:	e0bff915 	stw	r2,-28(fp)
 4013a6c:	00800044 	movi	r2,1
 4013a70:	e0bffa0d 	sth	r2,-24(fp)
 4013a74:	e13ffa0b 	ldhu	r4,-24(fp)
 4013a78:	401042c0 	call	401042c <OSSemCreate>
 4013a7c:	1007883a 	mov	r3,r2
 4013a80:	e0bff917 	ldw	r2,-28(fp)
 4013a84:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 4013a88:	e0bffd17 	ldw	r2,-12(fp)
 4013a8c:	10800b04 	addi	r2,r2,44
 4013a90:	e0bff715 	stw	r2,-36(fp)
 4013a94:	00800044 	movi	r2,1
 4013a98:	e0bff80d 	sth	r2,-32(fp)
 4013a9c:	e13ff80b 	ldhu	r4,-32(fp)
 4013aa0:	401042c0 	call	401042c <OSSemCreate>
 4013aa4:	1007883a 	mov	r3,r2
 4013aa8:	e0bff717 	ldw	r2,-36(fp)
 4013aac:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4013ab0:	e0fffd17 	ldw	r3,-12(fp)
 4013ab4:	00800044 	movi	r2,1
 4013ab8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4013abc:	e0bffd17 	ldw	r2,-12(fp)
 4013ac0:	10800017 	ldw	r2,0(r2)
 4013ac4:	11000104 	addi	r4,r2,4
 4013ac8:	e0bffd17 	ldw	r2,-12(fp)
 4013acc:	10800817 	ldw	r2,32(r2)
 4013ad0:	1007883a 	mov	r3,r2
 4013ad4:	2005883a 	mov	r2,r4
 4013ad8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4013adc:	e13ffe17 	ldw	r4,-8(fp)
 4013ae0:	e17fff17 	ldw	r5,-4(fp)
 4013ae4:	d8000015 	stw	zero,0(sp)
 4013ae8:	01810074 	movhi	r6,1025
 4013aec:	318ed504 	addi	r6,r6,15188
 4013af0:	e1fffd17 	ldw	r7,-12(fp)
 4013af4:	4014f900 	call	4014f90 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4013af8:	e0bffd17 	ldw	r2,-12(fp)
 4013afc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4013b00:	e0bffd17 	ldw	r2,-12(fp)
 4013b04:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4013b08:	008100b4 	movhi	r2,1026
 4013b0c:	10a1f304 	addi	r2,r2,-30772
 4013b10:	10800017 	ldw	r2,0(r2)
 4013b14:	100b883a 	mov	r5,r2
 4013b18:	01810074 	movhi	r6,1025
 4013b1c:	318f8604 	addi	r6,r6,15896
 4013b20:	e1fffd17 	ldw	r7,-12(fp)
 4013b24:	4014b900 	call	4014b90 <alt_alarm_start>
 4013b28:	1004403a 	cmpge	r2,r2,zero
 4013b2c:	1000041e 	bne	r2,zero,4013b40 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4013b30:	e0fffd17 	ldw	r3,-12(fp)
 4013b34:	00a00034 	movhi	r2,32768
 4013b38:	10bfffc4 	addi	r2,r2,-1
 4013b3c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4013b40:	e037883a 	mov	sp,fp
 4013b44:	dfc00117 	ldw	ra,4(sp)
 4013b48:	df000017 	ldw	fp,0(sp)
 4013b4c:	dec00204 	addi	sp,sp,8
 4013b50:	f800283a 	ret

04013b54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4013b54:	defff204 	addi	sp,sp,-56
 4013b58:	dfc00d15 	stw	ra,52(sp)
 4013b5c:	df000c15 	stw	fp,48(sp)
 4013b60:	df000c04 	addi	fp,sp,48
 4013b64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4013b68:	e0bfff17 	ldw	r2,-4(fp)
 4013b6c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 4013b70:	e0bffd17 	ldw	r2,-12(fp)
 4013b74:	10800017 	ldw	r2,0(r2)
 4013b78:	e0bffc15 	stw	r2,-16(fp)
 4013b7c:	00000006 	br	4013b80 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4013b80:	e0bffc17 	ldw	r2,-16(fp)
 4013b84:	10800104 	addi	r2,r2,4
 4013b88:	10800037 	ldwio	r2,0(r2)
 4013b8c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4013b90:	e0bffb17 	ldw	r2,-20(fp)
 4013b94:	1080c00c 	andi	r2,r2,768
 4013b98:	1005003a 	cmpeq	r2,r2,zero
 4013b9c:	1000991e 	bne	r2,zero,4013e04 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4013ba0:	e0bffb17 	ldw	r2,-20(fp)
 4013ba4:	1080400c 	andi	r2,r2,256
 4013ba8:	1005003a 	cmpeq	r2,r2,zero
 4013bac:	1000481e 	bne	r2,zero,4013cd0 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4013bb0:	00800074 	movhi	r2,1
 4013bb4:	e0bffa15 	stw	r2,-24(fp)
 4013bb8:	00000006 	br	4013bbc <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013bbc:	e0bffd17 	ldw	r2,-12(fp)
 4013bc0:	10800d17 	ldw	r2,52(r2)
 4013bc4:	10800044 	addi	r2,r2,1
 4013bc8:	1081ffcc 	andi	r2,r2,2047
 4013bcc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 4013bd0:	e0bffd17 	ldw	r2,-12(fp)
 4013bd4:	10c00e17 	ldw	r3,56(r2)
 4013bd8:	e0bff917 	ldw	r2,-28(fp)
 4013bdc:	18802826 	beq	r3,r2,4013c80 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4013be0:	e0bffc17 	ldw	r2,-16(fp)
 4013be4:	10800037 	ldwio	r2,0(r2)
 4013be8:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4013bec:	e0bffa17 	ldw	r2,-24(fp)
 4013bf0:	10a0000c 	andi	r2,r2,32768
 4013bf4:	1005003a 	cmpeq	r2,r2,zero
 4013bf8:	1000211e 	bne	r2,zero,4013c80 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4013bfc:	e0bffd17 	ldw	r2,-12(fp)
 4013c00:	10c00d17 	ldw	r3,52(r2)
 4013c04:	e0bffa17 	ldw	r2,-24(fp)
 4013c08:	1009883a 	mov	r4,r2
 4013c0c:	e0bffd17 	ldw	r2,-12(fp)
 4013c10:	1885883a 	add	r2,r3,r2
 4013c14:	10801104 	addi	r2,r2,68
 4013c18:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013c1c:	e0bffd17 	ldw	r2,-12(fp)
 4013c20:	10800d17 	ldw	r2,52(r2)
 4013c24:	10800044 	addi	r2,r2,1
 4013c28:	10c1ffcc 	andi	r3,r2,2047
 4013c2c:	e0bffd17 	ldw	r2,-12(fp)
 4013c30:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 4013c34:	e0bffd17 	ldw	r2,-12(fp)
 4013c38:	10800c17 	ldw	r2,48(r2)
 4013c3c:	e0bff615 	stw	r2,-40(fp)
 4013c40:	00800044 	movi	r2,1
 4013c44:	e0bff70d 	sth	r2,-36(fp)
 4013c48:	00800044 	movi	r2,1
 4013c4c:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4013c50:	008100b4 	movhi	r2,1026
 4013c54:	10a1de44 	addi	r2,r2,-30855
 4013c58:	10800003 	ldbu	r2,0(r2)
 4013c5c:	10803fcc 	andi	r2,r2,255
 4013c60:	1005003a 	cmpeq	r2,r2,zero
 4013c64:	103fd51e 	bne	r2,zero,4013bbc <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
 4013c68:	e17ff70b 	ldhu	r5,-36(fp)
 4013c6c:	e1bff783 	ldbu	r6,-34(fp)
 4013c70:	e1fffe04 	addi	r7,fp,-8
 4013c74:	e13ff617 	ldw	r4,-40(fp)
 4013c78:	400df500 	call	400df50 <OSFlagPost>
    return err;
 4013c7c:	003fcf06 	br	4013bbc <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4013c80:	e0bffa17 	ldw	r2,-24(fp)
 4013c84:	10bfffec 	andhi	r2,r2,65535
 4013c88:	1005003a 	cmpeq	r2,r2,zero
 4013c8c:	1000101e 	bne	r2,zero,4013cd0 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4013c90:	e0bffd17 	ldw	r2,-12(fp)
 4013c94:	10c00817 	ldw	r3,32(r2)
 4013c98:	00bfff84 	movi	r2,-2
 4013c9c:	1886703a 	and	r3,r3,r2
 4013ca0:	e0bffd17 	ldw	r2,-12(fp)
 4013ca4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4013ca8:	e0bffc17 	ldw	r2,-16(fp)
 4013cac:	11000104 	addi	r4,r2,4
 4013cb0:	e0bffd17 	ldw	r2,-12(fp)
 4013cb4:	10800817 	ldw	r2,32(r2)
 4013cb8:	1007883a 	mov	r3,r2
 4013cbc:	2005883a 	mov	r2,r4
 4013cc0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4013cc4:	e0bffc17 	ldw	r2,-16(fp)
 4013cc8:	10800104 	addi	r2,r2,4
 4013ccc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4013cd0:	e0bffb17 	ldw	r2,-20(fp)
 4013cd4:	1080800c 	andi	r2,r2,512
 4013cd8:	1005003a 	cmpeq	r2,r2,zero
 4013cdc:	103fa81e 	bne	r2,zero,4013b80 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4013ce0:	e0bffb17 	ldw	r2,-20(fp)
 4013ce4:	10bfffec 	andhi	r2,r2,65535
 4013ce8:	1004d43a 	srli	r2,r2,16
 4013cec:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4013cf0:	00002706 	br	4013d90 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4013cf4:	e13ffc17 	ldw	r4,-16(fp)
 4013cf8:	e0bffd17 	ldw	r2,-12(fp)
 4013cfc:	10c01017 	ldw	r3,64(r2)
 4013d00:	e0bffd17 	ldw	r2,-12(fp)
 4013d04:	1885883a 	add	r2,r3,r2
 4013d08:	10821104 	addi	r2,r2,2116
 4013d0c:	10800003 	ldbu	r2,0(r2)
 4013d10:	10c03fcc 	andi	r3,r2,255
 4013d14:	18c0201c 	xori	r3,r3,128
 4013d18:	18ffe004 	addi	r3,r3,-128
 4013d1c:	2005883a 	mov	r2,r4
 4013d20:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013d24:	e0bffd17 	ldw	r2,-12(fp)
 4013d28:	10801017 	ldw	r2,64(r2)
 4013d2c:	10800044 	addi	r2,r2,1
 4013d30:	10c1ffcc 	andi	r3,r2,2047
 4013d34:	e0bffd17 	ldw	r2,-12(fp)
 4013d38:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 4013d3c:	e0bffd17 	ldw	r2,-12(fp)
 4013d40:	10800c17 	ldw	r2,48(r2)
 4013d44:	e0bff415 	stw	r2,-48(fp)
 4013d48:	00800084 	movi	r2,2
 4013d4c:	e0bff50d 	sth	r2,-44(fp)
 4013d50:	00800044 	movi	r2,1
 4013d54:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4013d58:	008100b4 	movhi	r2,1026
 4013d5c:	10a1de44 	addi	r2,r2,-30855
 4013d60:	10800003 	ldbu	r2,0(r2)
 4013d64:	10803fcc 	andi	r2,r2,255
 4013d68:	1005003a 	cmpeq	r2,r2,zero
 4013d6c:	1000051e 	bne	r2,zero,4013d84 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
 4013d70:	e17ff50b 	ldhu	r5,-44(fp)
 4013d74:	e1bff583 	ldbu	r6,-42(fp)
 4013d78:	e1fffe44 	addi	r7,fp,-7
 4013d7c:	e13ff417 	ldw	r4,-48(fp)
 4013d80:	400df500 	call	400df50 <OSFlagPost>

        space--;
 4013d84:	e0bff817 	ldw	r2,-32(fp)
 4013d88:	10bfffc4 	addi	r2,r2,-1
 4013d8c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4013d90:	e0bff817 	ldw	r2,-32(fp)
 4013d94:	1005003a 	cmpeq	r2,r2,zero
 4013d98:	1000051e 	bne	r2,zero,4013db0 <altera_avalon_jtag_uart_irq+0x25c>
 4013d9c:	e0bffd17 	ldw	r2,-12(fp)
 4013da0:	10c01017 	ldw	r3,64(r2)
 4013da4:	e0bffd17 	ldw	r2,-12(fp)
 4013da8:	10800f17 	ldw	r2,60(r2)
 4013dac:	18bfd11e 	bne	r3,r2,4013cf4 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4013db0:	e0bff817 	ldw	r2,-32(fp)
 4013db4:	1005003a 	cmpeq	r2,r2,zero
 4013db8:	103f711e 	bne	r2,zero,4013b80 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4013dbc:	e0bffd17 	ldw	r2,-12(fp)
 4013dc0:	10c00817 	ldw	r3,32(r2)
 4013dc4:	00bfff44 	movi	r2,-3
 4013dc8:	1886703a 	and	r3,r3,r2
 4013dcc:	e0bffd17 	ldw	r2,-12(fp)
 4013dd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013dd4:	e0bffd17 	ldw	r2,-12(fp)
 4013dd8:	10800017 	ldw	r2,0(r2)
 4013ddc:	11000104 	addi	r4,r2,4
 4013de0:	e0bffd17 	ldw	r2,-12(fp)
 4013de4:	10800817 	ldw	r2,32(r2)
 4013de8:	1007883a 	mov	r3,r2
 4013dec:	2005883a 	mov	r2,r4
 4013df0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4013df4:	e0bffc17 	ldw	r2,-16(fp)
 4013df8:	10800104 	addi	r2,r2,4
 4013dfc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4013e00:	003f5f06 	br	4013b80 <altera_avalon_jtag_uart_irq+0x2c>
}
 4013e04:	e037883a 	mov	sp,fp
 4013e08:	dfc00117 	ldw	ra,4(sp)
 4013e0c:	df000017 	ldw	fp,0(sp)
 4013e10:	dec00204 	addi	sp,sp,8
 4013e14:	f800283a 	ret

04013e18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4013e18:	defff804 	addi	sp,sp,-32
 4013e1c:	dfc00715 	stw	ra,28(sp)
 4013e20:	df000615 	stw	fp,24(sp)
 4013e24:	df000604 	addi	fp,sp,24
 4013e28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4013e2c:	e0bfff17 	ldw	r2,-4(fp)
 4013e30:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4013e34:	e0bffd17 	ldw	r2,-12(fp)
 4013e38:	10800017 	ldw	r2,0(r2)
 4013e3c:	10800104 	addi	r2,r2,4
 4013e40:	10800037 	ldwio	r2,0(r2)
 4013e44:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4013e48:	e0bffc17 	ldw	r2,-16(fp)
 4013e4c:	1081000c 	andi	r2,r2,1024
 4013e50:	1005003a 	cmpeq	r2,r2,zero
 4013e54:	10000c1e 	bne	r2,zero,4013e88 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4013e58:	e0bffd17 	ldw	r2,-12(fp)
 4013e5c:	10800017 	ldw	r2,0(r2)
 4013e60:	11000104 	addi	r4,r2,4
 4013e64:	e0bffd17 	ldw	r2,-12(fp)
 4013e68:	10800817 	ldw	r2,32(r2)
 4013e6c:	10810014 	ori	r2,r2,1024
 4013e70:	1007883a 	mov	r3,r2
 4013e74:	2005883a 	mov	r2,r4
 4013e78:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 4013e7c:	e0bffd17 	ldw	r2,-12(fp)
 4013e80:	10000915 	stw	zero,36(r2)
 4013e84:	00002106 	br	4013f0c <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4013e88:	e0bffd17 	ldw	r2,-12(fp)
 4013e8c:	10c00917 	ldw	r3,36(r2)
 4013e90:	00a00034 	movhi	r2,32768
 4013e94:	10bfff04 	addi	r2,r2,-4
 4013e98:	10c01c36 	bltu	r2,r3,4013f0c <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 4013e9c:	e0bffd17 	ldw	r2,-12(fp)
 4013ea0:	10800917 	ldw	r2,36(r2)
 4013ea4:	10c00044 	addi	r3,r2,1
 4013ea8:	e0bffd17 	ldw	r2,-12(fp)
 4013eac:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 4013eb0:	e0bffd17 	ldw	r2,-12(fp)
 4013eb4:	10c00917 	ldw	r3,36(r2)
 4013eb8:	e0bffd17 	ldw	r2,-12(fp)
 4013ebc:	10800117 	ldw	r2,4(r2)
 4013ec0:	18801236 	bltu	r3,r2,4013f0c <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 4013ec4:	e0bffd17 	ldw	r2,-12(fp)
 4013ec8:	10800c17 	ldw	r2,48(r2)
 4013ecc:	e0bffa15 	stw	r2,-24(fp)
 4013ed0:	00800104 	movi	r2,4
 4013ed4:	e0bffb0d 	sth	r2,-20(fp)
 4013ed8:	00800044 	movi	r2,1
 4013edc:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4013ee0:	008100b4 	movhi	r2,1026
 4013ee4:	10a1de44 	addi	r2,r2,-30855
 4013ee8:	10800003 	ldbu	r2,0(r2)
 4013eec:	10803fcc 	andi	r2,r2,255
 4013ef0:	1005003a 	cmpeq	r2,r2,zero
 4013ef4:	1000051e 	bne	r2,zero,4013f0c <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 4013ef8:	e17ffb0b 	ldhu	r5,-20(fp)
 4013efc:	e1bffb83 	ldbu	r6,-18(fp)
 4013f00:	e1fffe04 	addi	r7,fp,-8
 4013f04:	e13ffa17 	ldw	r4,-24(fp)
 4013f08:	400df500 	call	400df50 <OSFlagPost>
 4013f0c:	008100b4 	movhi	r2,1026
 4013f10:	10a1f304 	addi	r2,r2,-30772
 4013f14:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 4013f18:	e037883a 	mov	sp,fp
 4013f1c:	dfc00117 	ldw	ra,4(sp)
 4013f20:	df000017 	ldw	fp,0(sp)
 4013f24:	dec00204 	addi	sp,sp,8
 4013f28:	f800283a 	ret

04013f2c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4013f2c:	defffc04 	addi	sp,sp,-16
 4013f30:	df000315 	stw	fp,12(sp)
 4013f34:	df000304 	addi	fp,sp,12
 4013f38:	e13ffd15 	stw	r4,-12(fp)
 4013f3c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4013f40:	00000706 	br	4013f60 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 4013f44:	e0bffe17 	ldw	r2,-8(fp)
 4013f48:	1090000c 	andi	r2,r2,16384
 4013f4c:	1005003a 	cmpeq	r2,r2,zero
 4013f50:	1000031e 	bne	r2,zero,4013f60 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 4013f54:	00bffd44 	movi	r2,-11
 4013f58:	e0bfff15 	stw	r2,-4(fp)
 4013f5c:	00000b06 	br	4013f8c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4013f60:	e0bffd17 	ldw	r2,-12(fp)
 4013f64:	10c01017 	ldw	r3,64(r2)
 4013f68:	e0bffd17 	ldw	r2,-12(fp)
 4013f6c:	10800f17 	ldw	r2,60(r2)
 4013f70:	18800526 	beq	r3,r2,4013f88 <altera_avalon_jtag_uart_close+0x5c>
 4013f74:	e0bffd17 	ldw	r2,-12(fp)
 4013f78:	10c00917 	ldw	r3,36(r2)
 4013f7c:	e0bffd17 	ldw	r2,-12(fp)
 4013f80:	10800117 	ldw	r2,4(r2)
 4013f84:	18bfef36 	bltu	r3,r2,4013f44 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4013f88:	e03fff15 	stw	zero,-4(fp)
 4013f8c:	e0bfff17 	ldw	r2,-4(fp)
}
 4013f90:	e037883a 	mov	sp,fp
 4013f94:	df000017 	ldw	fp,0(sp)
 4013f98:	dec00104 	addi	sp,sp,4
 4013f9c:	f800283a 	ret

04013fa0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4013fa0:	defff804 	addi	sp,sp,-32
 4013fa4:	df000715 	stw	fp,28(sp)
 4013fa8:	df000704 	addi	fp,sp,28
 4013fac:	e13ffb15 	stw	r4,-20(fp)
 4013fb0:	e17ffc15 	stw	r5,-16(fp)
 4013fb4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 4013fb8:	00bff9c4 	movi	r2,-25
 4013fbc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 4013fc0:	e0bffc17 	ldw	r2,-16(fp)
 4013fc4:	e0bfff15 	stw	r2,-4(fp)
 4013fc8:	e0ffff17 	ldw	r3,-4(fp)
 4013fcc:	189a8060 	cmpeqi	r2,r3,27137
 4013fd0:	1000041e 	bne	r2,zero,4013fe4 <altera_avalon_jtag_uart_ioctl+0x44>
 4013fd4:	e0ffff17 	ldw	r3,-4(fp)
 4013fd8:	189a80a0 	cmpeqi	r2,r3,27138
 4013fdc:	10001b1e 	bne	r2,zero,401404c <altera_avalon_jtag_uart_ioctl+0xac>
 4013fe0:	00002706 	br	4014080 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4013fe4:	e0bffb17 	ldw	r2,-20(fp)
 4013fe8:	10c00117 	ldw	r3,4(r2)
 4013fec:	00a00034 	movhi	r2,32768
 4013ff0:	10bfffc4 	addi	r2,r2,-1
 4013ff4:	18802226 	beq	r3,r2,4014080 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 4013ff8:	e0bffd17 	ldw	r2,-12(fp)
 4013ffc:	10800017 	ldw	r2,0(r2)
 4014000:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4014004:	e0bff917 	ldw	r2,-28(fp)
 4014008:	10800090 	cmplti	r2,r2,2
 401400c:	1000071e 	bne	r2,zero,401402c <altera_avalon_jtag_uart_ioctl+0x8c>
 4014010:	e0fff917 	ldw	r3,-28(fp)
 4014014:	00a00034 	movhi	r2,32768
 4014018:	10bfffc4 	addi	r2,r2,-1
 401401c:	18800326 	beq	r3,r2,401402c <altera_avalon_jtag_uart_ioctl+0x8c>
 4014020:	e0bff917 	ldw	r2,-28(fp)
 4014024:	e0bffe15 	stw	r2,-8(fp)
 4014028:	00000306 	br	4014038 <altera_avalon_jtag_uart_ioctl+0x98>
 401402c:	00e00034 	movhi	r3,32768
 4014030:	18ffff84 	addi	r3,r3,-2
 4014034:	e0fffe15 	stw	r3,-8(fp)
 4014038:	e0bffb17 	ldw	r2,-20(fp)
 401403c:	e0fffe17 	ldw	r3,-8(fp)
 4014040:	10c00115 	stw	r3,4(r2)
      rc = 0;
 4014044:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 4014048:	00000d06 	br	4014080 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401404c:	e0bffb17 	ldw	r2,-20(fp)
 4014050:	10c00117 	ldw	r3,4(r2)
 4014054:	00a00034 	movhi	r2,32768
 4014058:	10bfffc4 	addi	r2,r2,-1
 401405c:	18800826 	beq	r3,r2,4014080 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4014060:	e13ffd17 	ldw	r4,-12(fp)
 4014064:	e0bffb17 	ldw	r2,-20(fp)
 4014068:	10c00917 	ldw	r3,36(r2)
 401406c:	e0bffb17 	ldw	r2,-20(fp)
 4014070:	10800117 	ldw	r2,4(r2)
 4014074:	1885803a 	cmpltu	r2,r3,r2
 4014078:	20800015 	stw	r2,0(r4)
      rc = 0;
 401407c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 4014080:	e0bffa17 	ldw	r2,-24(fp)
}
 4014084:	e037883a 	mov	sp,fp
 4014088:	df000017 	ldw	fp,0(sp)
 401408c:	dec00104 	addi	sp,sp,4
 4014090:	f800283a 	ret

04014094 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4014094:	deffeb04 	addi	sp,sp,-84
 4014098:	dfc01415 	stw	ra,80(sp)
 401409c:	df001315 	stw	fp,76(sp)
 40140a0:	df001304 	addi	fp,sp,76
 40140a4:	e13ffb15 	stw	r4,-20(fp)
 40140a8:	e17ffc15 	stw	r5,-16(fp)
 40140ac:	e1bffd15 	stw	r6,-12(fp)
 40140b0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 40140b4:	e0bffc17 	ldw	r2,-16(fp)
 40140b8:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 40140bc:	e0bffb17 	ldw	r2,-20(fp)
 40140c0:	10800a17 	ldw	r2,40(r2)
 40140c4:	e0bff315 	stw	r2,-52(fp)
 40140c8:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 40140cc:	e17ff40b 	ldhu	r5,-48(fp)
 40140d0:	e1bffa44 	addi	r6,fp,-23
 40140d4:	e13ff317 	ldw	r4,-52(fp)
 40140d8:	40107e00 	call	40107e0 <OSSemPend>

  while (space > 0)
 40140dc:	00006406 	br	4014270 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40140e0:	e0bffb17 	ldw	r2,-20(fp)
 40140e4:	10800d17 	ldw	r2,52(r2)
 40140e8:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 40140ec:	e0bffb17 	ldw	r2,-20(fp)
 40140f0:	10800e17 	ldw	r2,56(r2)
 40140f4:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 40140f8:	e0fff617 	ldw	r3,-40(fp)
 40140fc:	e0bff517 	ldw	r2,-44(fp)
 4014100:	18800536 	bltu	r3,r2,4014118 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 4014104:	e0bff617 	ldw	r2,-40(fp)
 4014108:	e0fff517 	ldw	r3,-44(fp)
 401410c:	10c5c83a 	sub	r2,r2,r3
 4014110:	e0bff715 	stw	r2,-36(fp)
 4014114:	00000406 	br	4014128 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4014118:	00820004 	movi	r2,2048
 401411c:	e0fff517 	ldw	r3,-44(fp)
 4014120:	10c5c83a 	sub	r2,r2,r3
 4014124:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 4014128:	e0bff717 	ldw	r2,-36(fp)
 401412c:	1005003a 	cmpeq	r2,r2,zero
 4014130:	10001f1e 	bne	r2,zero,40141b0 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 4014134:	e0fffd17 	ldw	r3,-12(fp)
 4014138:	e0bff717 	ldw	r2,-36(fp)
 401413c:	1880022e 	bgeu	r3,r2,4014148 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 4014140:	e0bffd17 	ldw	r2,-12(fp)
 4014144:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4014148:	e0bffb17 	ldw	r2,-20(fp)
 401414c:	10c01104 	addi	r3,r2,68
 4014150:	e0bff517 	ldw	r2,-44(fp)
 4014154:	1887883a 	add	r3,r3,r2
 4014158:	e0bff917 	ldw	r2,-28(fp)
 401415c:	1009883a 	mov	r4,r2
 4014160:	180b883a 	mov	r5,r3
 4014164:	e1bff717 	ldw	r6,-36(fp)
 4014168:	4005a200 	call	4005a20 <memcpy>
      ptr   += n;
 401416c:	e0fff717 	ldw	r3,-36(fp)
 4014170:	e0bff917 	ldw	r2,-28(fp)
 4014174:	10c5883a 	add	r2,r2,r3
 4014178:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 401417c:	e0fffd17 	ldw	r3,-12(fp)
 4014180:	e0bff717 	ldw	r2,-36(fp)
 4014184:	1885c83a 	sub	r2,r3,r2
 4014188:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401418c:	e0fff517 	ldw	r3,-44(fp)
 4014190:	e0bff717 	ldw	r2,-36(fp)
 4014194:	1885883a 	add	r2,r3,r2
 4014198:	10c1ffcc 	andi	r3,r2,2047
 401419c:	e0bffb17 	ldw	r2,-20(fp)
 40141a0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 40141a4:	e0bffd17 	ldw	r2,-12(fp)
 40141a8:	10800048 	cmpgei	r2,r2,1
 40141ac:	103fcc1e 	bne	r2,zero,40140e0 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 40141b0:	e0fff917 	ldw	r3,-28(fp)
 40141b4:	e0bffc17 	ldw	r2,-16(fp)
 40141b8:	1880301e 	bne	r3,r2,401427c <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40141bc:	e0bffe17 	ldw	r2,-8(fp)
 40141c0:	1090000c 	andi	r2,r2,16384
 40141c4:	1004c03a 	cmpne	r2,r2,zero
 40141c8:	10002c1e 	bne	r2,zero,401427c <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 40141cc:	008100b4 	movhi	r2,1026
 40141d0:	10a1de44 	addi	r2,r2,-30855
 40141d4:	10800003 	ldbu	r2,0(r2)
 40141d8:	10803fcc 	andi	r2,r2,255
 40141dc:	10800058 	cmpnei	r2,r2,1
 40141e0:	1000161e 	bne	r2,zero,401423c <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 40141e4:	e0bffb17 	ldw	r2,-20(fp)
 40141e8:	10800c17 	ldw	r2,48(r2)
 40141ec:	e0bff015 	stw	r2,-64(fp)
 40141f0:	00800144 	movi	r2,5
 40141f4:	e0bff10d 	sth	r2,-60(fp)
 40141f8:	00bfe0c4 	movi	r2,-125
 40141fc:	e0bff185 	stb	r2,-58(fp)
 4014200:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 4014204:	008100b4 	movhi	r2,1026
 4014208:	10a1de44 	addi	r2,r2,-30855
 401420c:	10800003 	ldbu	r2,0(r2)
 4014210:	10803fcc 	andi	r2,r2,255
 4014214:	1005003a 	cmpeq	r2,r2,zero
 4014218:	1000111e 	bne	r2,zero,4014260 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 401421c:	e17ff10b 	ldhu	r5,-60(fp)
 4014220:	e1bff183 	ldbu	r6,-58(fp)
 4014224:	e1fff20b 	ldhu	r7,-56(fp)
 4014228:	e0bffa04 	addi	r2,fp,-24
 401422c:	d8800015 	stw	r2,0(sp)
 4014230:	e13ff017 	ldw	r4,-64(fp)
 4014234:	400d8a40 	call	400d8a4 <OSFlagPend>
    return err;
 4014238:	00000906 	br	4014260 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401423c:	e0bffb17 	ldw	r2,-20(fp)
 4014240:	10c00d17 	ldw	r3,52(r2)
 4014244:	e0bff617 	ldw	r2,-40(fp)
 4014248:	1880051e 	bne	r3,r2,4014260 <altera_avalon_jtag_uart_read+0x1cc>
 401424c:	e0bffb17 	ldw	r2,-20(fp)
 4014250:	10c00917 	ldw	r3,36(r2)
 4014254:	e0bffb17 	ldw	r2,-20(fp)
 4014258:	10800117 	ldw	r2,4(r2)
 401425c:	18bff736 	bltu	r3,r2,401423c <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4014260:	e0bffb17 	ldw	r2,-20(fp)
 4014264:	10c00d17 	ldw	r3,52(r2)
 4014268:	e0bff617 	ldw	r2,-40(fp)
 401426c:	18800326 	beq	r3,r2,401427c <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4014270:	e0bffd17 	ldw	r2,-12(fp)
 4014274:	10800048 	cmpgei	r2,r2,1
 4014278:	103f991e 	bne	r2,zero,40140e0 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 401427c:	e0bffb17 	ldw	r2,-20(fp)
 4014280:	11000a17 	ldw	r4,40(r2)
 4014284:	4010bd80 	call	4010bd8 <OSSemPost>

  if (ptr != buffer)
 4014288:	e0fff917 	ldw	r3,-28(fp)
 401428c:	e0bffc17 	ldw	r2,-16(fp)
 4014290:	18801926 	beq	r3,r2,40142f8 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014294:	0005303a 	rdctl	r2,status
 4014298:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401429c:	e0ffef17 	ldw	r3,-68(fp)
 40142a0:	00bfff84 	movi	r2,-2
 40142a4:	1884703a 	and	r2,r3,r2
 40142a8:	1001703a 	wrctl	status,r2
  
  return context;
 40142ac:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40142b0:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40142b4:	e0bffb17 	ldw	r2,-20(fp)
 40142b8:	10800817 	ldw	r2,32(r2)
 40142bc:	10c00054 	ori	r3,r2,1
 40142c0:	e0bffb17 	ldw	r2,-20(fp)
 40142c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40142c8:	e0bffb17 	ldw	r2,-20(fp)
 40142cc:	10800017 	ldw	r2,0(r2)
 40142d0:	11000104 	addi	r4,r2,4
 40142d4:	e0bffb17 	ldw	r2,-20(fp)
 40142d8:	10800817 	ldw	r2,32(r2)
 40142dc:	1007883a 	mov	r3,r2
 40142e0:	2005883a 	mov	r2,r4
 40142e4:	10c00035 	stwio	r3,0(r2)
 40142e8:	e0bff817 	ldw	r2,-32(fp)
 40142ec:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40142f0:	e0bfee17 	ldw	r2,-72(fp)
 40142f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40142f8:	e0fff917 	ldw	r3,-28(fp)
 40142fc:	e0bffc17 	ldw	r2,-16(fp)
 4014300:	18800526 	beq	r3,r2,4014318 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 4014304:	e0fff917 	ldw	r3,-28(fp)
 4014308:	e0bffc17 	ldw	r2,-16(fp)
 401430c:	1887c83a 	sub	r3,r3,r2
 4014310:	e0ffff15 	stw	r3,-4(fp)
 4014314:	00000906 	br	401433c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 4014318:	e0bffe17 	ldw	r2,-8(fp)
 401431c:	1090000c 	andi	r2,r2,16384
 4014320:	1005003a 	cmpeq	r2,r2,zero
 4014324:	1000031e 	bne	r2,zero,4014334 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 4014328:	00bffd44 	movi	r2,-11
 401432c:	e0bfff15 	stw	r2,-4(fp)
 4014330:	00000206 	br	401433c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 4014334:	00bffec4 	movi	r2,-5
 4014338:	e0bfff15 	stw	r2,-4(fp)
 401433c:	e0bfff17 	ldw	r2,-4(fp)
}
 4014340:	e037883a 	mov	sp,fp
 4014344:	dfc00117 	ldw	ra,4(sp)
 4014348:	df000017 	ldw	fp,0(sp)
 401434c:	dec00204 	addi	sp,sp,8
 4014350:	f800283a 	ret

04014354 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4014354:	deffeb04 	addi	sp,sp,-84
 4014358:	dfc01415 	stw	ra,80(sp)
 401435c:	df001315 	stw	fp,76(sp)
 4014360:	df001304 	addi	fp,sp,76
 4014364:	e13ffb15 	stw	r4,-20(fp)
 4014368:	e17ffc15 	stw	r5,-16(fp)
 401436c:	e1bffd15 	stw	r6,-12(fp)
 4014370:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4014374:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4014378:	e0bffc17 	ldw	r2,-16(fp)
 401437c:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 4014380:	e0bffb17 	ldw	r2,-20(fp)
 4014384:	10800b17 	ldw	r2,44(r2)
 4014388:	e0bff315 	stw	r2,-52(fp)
 401438c:	e03ff40d 	sth	zero,-48(fp)
 4014390:	e17ff40b 	ldhu	r5,-48(fp)
 4014394:	e1bffa04 	addi	r6,fp,-24
 4014398:	e13ff317 	ldw	r4,-52(fp)
 401439c:	40107e00 	call	40107e0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40143a0:	00003a06 	br	401448c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40143a4:	e0bffb17 	ldw	r2,-20(fp)
 40143a8:	10800f17 	ldw	r2,60(r2)
 40143ac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40143b0:	e0bffb17 	ldw	r2,-20(fp)
 40143b4:	10801017 	ldw	r2,64(r2)
 40143b8:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 40143bc:	e0fff917 	ldw	r3,-28(fp)
 40143c0:	e0bff817 	ldw	r2,-32(fp)
 40143c4:	1880062e 	bgeu	r3,r2,40143e0 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 40143c8:	e0fff817 	ldw	r3,-32(fp)
 40143cc:	e0bff917 	ldw	r2,-28(fp)
 40143d0:	1885c83a 	sub	r2,r3,r2
 40143d4:	10bfffc4 	addi	r2,r2,-1
 40143d8:	e0bff715 	stw	r2,-36(fp)
 40143dc:	00000c06 	br	4014410 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 40143e0:	e0bff817 	ldw	r2,-32(fp)
 40143e4:	1005003a 	cmpeq	r2,r2,zero
 40143e8:	1000051e 	bne	r2,zero,4014400 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40143ec:	00820004 	movi	r2,2048
 40143f0:	e0fff917 	ldw	r3,-28(fp)
 40143f4:	10c5c83a 	sub	r2,r2,r3
 40143f8:	e0bff715 	stw	r2,-36(fp)
 40143fc:	00000406 	br	4014410 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4014400:	0081ffc4 	movi	r2,2047
 4014404:	e0fff917 	ldw	r3,-28(fp)
 4014408:	10c5c83a 	sub	r2,r2,r3
 401440c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 4014410:	e0bff717 	ldw	r2,-36(fp)
 4014414:	1005003a 	cmpeq	r2,r2,zero
 4014418:	10001f1e 	bne	r2,zero,4014498 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 401441c:	e0fffd17 	ldw	r3,-12(fp)
 4014420:	e0bff717 	ldw	r2,-36(fp)
 4014424:	1880022e 	bgeu	r3,r2,4014430 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 4014428:	e0bffd17 	ldw	r2,-12(fp)
 401442c:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4014430:	e0bffb17 	ldw	r2,-20(fp)
 4014434:	10c21104 	addi	r3,r2,2116
 4014438:	e0bff917 	ldw	r2,-28(fp)
 401443c:	1885883a 	add	r2,r3,r2
 4014440:	e0fffc17 	ldw	r3,-16(fp)
 4014444:	1009883a 	mov	r4,r2
 4014448:	180b883a 	mov	r5,r3
 401444c:	e1bff717 	ldw	r6,-36(fp)
 4014450:	4005a200 	call	4005a20 <memcpy>
      ptr   += n;
 4014454:	e0fff717 	ldw	r3,-36(fp)
 4014458:	e0bffc17 	ldw	r2,-16(fp)
 401445c:	10c5883a 	add	r2,r2,r3
 4014460:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 4014464:	e0fffd17 	ldw	r3,-12(fp)
 4014468:	e0bff717 	ldw	r2,-36(fp)
 401446c:	1885c83a 	sub	r2,r3,r2
 4014470:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4014474:	e0fff917 	ldw	r3,-28(fp)
 4014478:	e0bff717 	ldw	r2,-36(fp)
 401447c:	1885883a 	add	r2,r3,r2
 4014480:	10c1ffcc 	andi	r3,r2,2047
 4014484:	e0bffb17 	ldw	r2,-20(fp)
 4014488:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401448c:	e0bffd17 	ldw	r2,-12(fp)
 4014490:	10800048 	cmpgei	r2,r2,1
 4014494:	103fc31e 	bne	r2,zero,40143a4 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014498:	0005303a 	rdctl	r2,status
 401449c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40144a0:	e0fff217 	ldw	r3,-56(fp)
 40144a4:	00bfff84 	movi	r2,-2
 40144a8:	1884703a 	and	r2,r3,r2
 40144ac:	1001703a 	wrctl	status,r2
  
  return context;
 40144b0:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40144b4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40144b8:	e0bffb17 	ldw	r2,-20(fp)
 40144bc:	10800817 	ldw	r2,32(r2)
 40144c0:	10c00094 	ori	r3,r2,2
 40144c4:	e0bffb17 	ldw	r2,-20(fp)
 40144c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40144cc:	e0bffb17 	ldw	r2,-20(fp)
 40144d0:	10800017 	ldw	r2,0(r2)
 40144d4:	11000104 	addi	r4,r2,4
 40144d8:	e0bffb17 	ldw	r2,-20(fp)
 40144dc:	10800817 	ldw	r2,32(r2)
 40144e0:	1007883a 	mov	r3,r2
 40144e4:	2005883a 	mov	r2,r4
 40144e8:	10c00035 	stwio	r3,0(r2)
 40144ec:	e0bff617 	ldw	r2,-40(fp)
 40144f0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40144f4:	e0bff117 	ldw	r2,-60(fp)
 40144f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40144fc:	e0bffd17 	ldw	r2,-12(fp)
 4014500:	10800050 	cmplti	r2,r2,1
 4014504:	10002d1e 	bne	r2,zero,40145bc <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 4014508:	e0bffe17 	ldw	r2,-8(fp)
 401450c:	1090000c 	andi	r2,r2,16384
 4014510:	1004c03a 	cmpne	r2,r2,zero
 4014514:	10002c1e 	bne	r2,zero,40145c8 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 4014518:	008100b4 	movhi	r2,1026
 401451c:	10a1de44 	addi	r2,r2,-30855
 4014520:	10800003 	ldbu	r2,0(r2)
 4014524:	10803fcc 	andi	r2,r2,255
 4014528:	10800058 	cmpnei	r2,r2,1
 401452c:	1000161e 	bne	r2,zero,4014588 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 4014530:	e0bffb17 	ldw	r2,-20(fp)
 4014534:	10800c17 	ldw	r2,48(r2)
 4014538:	e0bfee15 	stw	r2,-72(fp)
 401453c:	00800184 	movi	r2,6
 4014540:	e0bfef0d 	sth	r2,-68(fp)
 4014544:	00bfe0c4 	movi	r2,-125
 4014548:	e0bfef85 	stb	r2,-66(fp)
 401454c:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 4014550:	008100b4 	movhi	r2,1026
 4014554:	10a1de44 	addi	r2,r2,-30855
 4014558:	10800003 	ldbu	r2,0(r2)
 401455c:	10803fcc 	andi	r2,r2,255
 4014560:	1005003a 	cmpeq	r2,r2,zero
 4014564:	1000111e 	bne	r2,zero,40145ac <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 4014568:	e17fef0b 	ldhu	r5,-68(fp)
 401456c:	e1bfef83 	ldbu	r6,-66(fp)
 4014570:	e1fff00b 	ldhu	r7,-64(fp)
 4014574:	e0bffa44 	addi	r2,fp,-23
 4014578:	d8800015 	stw	r2,0(sp)
 401457c:	e13fee17 	ldw	r4,-72(fp)
 4014580:	400d8a40 	call	400d8a4 <OSFlagPend>
    return err;
 4014584:	00000906 	br	40145ac <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4014588:	e0bffb17 	ldw	r2,-20(fp)
 401458c:	10c01017 	ldw	r3,64(r2)
 4014590:	e0bff817 	ldw	r2,-32(fp)
 4014594:	1880051e 	bne	r3,r2,40145ac <altera_avalon_jtag_uart_write+0x258>
 4014598:	e0bffb17 	ldw	r2,-20(fp)
 401459c:	10c00917 	ldw	r3,36(r2)
 40145a0:	e0bffb17 	ldw	r2,-20(fp)
 40145a4:	10800117 	ldw	r2,4(r2)
 40145a8:	18bff736 	bltu	r3,r2,4014588 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 40145ac:	e0bffb17 	ldw	r2,-20(fp)
 40145b0:	10c01017 	ldw	r3,64(r2)
 40145b4:	e0bff817 	ldw	r2,-32(fp)
 40145b8:	18800326 	beq	r3,r2,40145c8 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 40145bc:	e0bffd17 	ldw	r2,-12(fp)
 40145c0:	10800048 	cmpgei	r2,r2,1
 40145c4:	103fb11e 	bne	r2,zero,401448c <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 40145c8:	e0bffb17 	ldw	r2,-20(fp)
 40145cc:	11000b17 	ldw	r4,44(r2)
 40145d0:	4010bd80 	call	4010bd8 <OSSemPost>

  if (ptr != start)
 40145d4:	e0fffc17 	ldw	r3,-16(fp)
 40145d8:	e0bff517 	ldw	r2,-44(fp)
 40145dc:	18800526 	beq	r3,r2,40145f4 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 40145e0:	e0fffc17 	ldw	r3,-16(fp)
 40145e4:	e0bff517 	ldw	r2,-44(fp)
 40145e8:	1887c83a 	sub	r3,r3,r2
 40145ec:	e0ffff15 	stw	r3,-4(fp)
 40145f0:	00000906 	br	4014618 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 40145f4:	e0bffe17 	ldw	r2,-8(fp)
 40145f8:	1090000c 	andi	r2,r2,16384
 40145fc:	1005003a 	cmpeq	r2,r2,zero
 4014600:	1000031e 	bne	r2,zero,4014610 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 4014604:	00bffd44 	movi	r2,-11
 4014608:	e0bfff15 	stw	r2,-4(fp)
 401460c:	00000206 	br	4014618 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 4014610:	00bffec4 	movi	r2,-5
 4014614:	e0bfff15 	stw	r2,-4(fp)
 4014618:	e0bfff17 	ldw	r2,-4(fp)
}
 401461c:	e037883a 	mov	sp,fp
 4014620:	dfc00117 	ldw	ra,4(sp)
 4014624:	df000017 	ldw	fp,0(sp)
 4014628:	dec00204 	addi	sp,sp,8
 401462c:	f800283a 	ret

04014630 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4014630:	defffa04 	addi	sp,sp,-24
 4014634:	dfc00515 	stw	ra,20(sp)
 4014638:	df000415 	stw	fp,16(sp)
 401463c:	df000404 	addi	fp,sp,16
 4014640:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4014644:	e0bfff17 	ldw	r2,-4(fp)
 4014648:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401464c:	e0bfff17 	ldw	r2,-4(fp)
 4014650:	10800104 	addi	r2,r2,4
 4014654:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014658:	0005303a 	rdctl	r2,status
 401465c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014660:	e0fffd17 	ldw	r3,-12(fp)
 4014664:	00bfff84 	movi	r2,-2
 4014668:	1884703a 	and	r2,r3,r2
 401466c:	1001703a 	wrctl	status,r2
  
  return context;
 4014670:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4014674:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 4014678:	40156f40 	call	40156f4 <alt_tick>
 401467c:	e0bffe17 	ldw	r2,-8(fp)
 4014680:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014684:	e0bffc17 	ldw	r2,-16(fp)
 4014688:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401468c:	e037883a 	mov	sp,fp
 4014690:	dfc00117 	ldw	ra,4(sp)
 4014694:	df000017 	ldw	fp,0(sp)
 4014698:	dec00204 	addi	sp,sp,8
 401469c:	f800283a 	ret

040146a0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40146a0:	defff804 	addi	sp,sp,-32
 40146a4:	dfc00715 	stw	ra,28(sp)
 40146a8:	df000615 	stw	fp,24(sp)
 40146ac:	df000604 	addi	fp,sp,24
 40146b0:	e13ffc15 	stw	r4,-16(fp)
 40146b4:	e17ffd15 	stw	r5,-12(fp)
 40146b8:	e1bffe15 	stw	r6,-8(fp)
 40146bc:	e1ffff15 	stw	r7,-4(fp)
 40146c0:	e0bfff17 	ldw	r2,-4(fp)
 40146c4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 40146c8:	008100b4 	movhi	r2,1026
 40146cc:	10a1f304 	addi	r2,r2,-30772
 40146d0:	10800017 	ldw	r2,0(r2)
 40146d4:	1004c03a 	cmpne	r2,r2,zero
 40146d8:	1000041e 	bne	r2,zero,40146ec <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 40146dc:	00c100b4 	movhi	r3,1026
 40146e0:	18e1f304 	addi	r3,r3,-30772
 40146e4:	e0bffb17 	ldw	r2,-20(fp)
 40146e8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 40146ec:	e0bffc17 	ldw	r2,-16(fp)
 40146f0:	10800104 	addi	r2,r2,4
 40146f4:	1007883a 	mov	r3,r2
 40146f8:	008001c4 	movi	r2,7
 40146fc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4014700:	d8000015 	stw	zero,0(sp)
 4014704:	e13ffd17 	ldw	r4,-12(fp)
 4014708:	e17ffe17 	ldw	r5,-8(fp)
 401470c:	01810074 	movhi	r6,1025
 4014710:	31918c04 	addi	r6,r6,17968
 4014714:	e1fffc17 	ldw	r7,-16(fp)
 4014718:	4014f900 	call	4014f90 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401471c:	e037883a 	mov	sp,fp
 4014720:	dfc00117 	ldw	ra,4(sp)
 4014724:	df000017 	ldw	fp,0(sp)
 4014728:	dec00204 	addi	sp,sp,8
 401472c:	f800283a 	ret

04014730 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 4014730:	defff904 	addi	sp,sp,-28
 4014734:	dfc00615 	stw	ra,24(sp)
 4014738:	df000515 	stw	fp,20(sp)
 401473c:	df000504 	addi	fp,sp,20
 4014740:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 4014744:	00800144 	movi	r2,5
 4014748:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 401474c:	00800044 	movi	r2,1
 4014750:	d8800015 	stw	r2,0(sp)
 4014754:	e0bffe44 	addi	r2,fp,-7
 4014758:	d8800115 	stw	r2,4(sp)
 401475c:	d8000215 	stw	zero,8(sp)
 4014760:	e13fff17 	ldw	r4,-4(fp)
 4014764:	000b883a 	mov	r5,zero
 4014768:	01800044 	movi	r6,1
 401476c:	e1fffe04 	addi	r7,fp,-8
 4014770:	4015d0c0 	call	4015d0c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 4014774:	e0bffe43 	ldbu	r2,-7(fp)
 4014778:	10803fcc 	andi	r2,r2,255
}
 401477c:	e037883a 	mov	sp,fp
 4014780:	dfc00117 	ldw	ra,4(sp)
 4014784:	df000017 	ldw	fp,0(sp)
 4014788:	dec00204 	addi	sp,sp,8
 401478c:	f800283a 	ret

04014790 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset)
{
 4014790:	defff804 	addi	sp,sp,-32
 4014794:	dfc00715 	stw	ra,28(sp)
 4014798:	df000615 	stw	fp,24(sp)
 401479c:	df000604 	addi	fp,sp,24
 40147a0:	e13ffe15 	stw	r4,-8(fp)
 40147a4:	e17fff15 	stw	r5,-4(fp)
  alt_u8 se[4];
  
  se[0] = epcs_se;
 40147a8:	00bff604 	movi	r2,-40
 40147ac:	e0bffd05 	stb	r2,-12(fp)
  se[1] = (offset >> 16) & 0xFF;
 40147b0:	e0bfff17 	ldw	r2,-4(fp)
 40147b4:	1004d43a 	srli	r2,r2,16
 40147b8:	e0bffd45 	stb	r2,-11(fp)
  se[2] = (offset >> 8) & 0xFF;
 40147bc:	e0bfff17 	ldw	r2,-4(fp)
 40147c0:	1004d23a 	srli	r2,r2,8
 40147c4:	e0bffd85 	stb	r2,-10(fp)
  se[3] = offset & 0xFF;
 40147c8:	e0bfff17 	ldw	r2,-4(fp)
 40147cc:	e0bffdc5 	stb	r2,-9(fp)

  alt_avalon_spi_command(
 40147d0:	d8000015 	stw	zero,0(sp)
 40147d4:	d8000115 	stw	zero,4(sp)
 40147d8:	d8000215 	stw	zero,8(sp)
 40147dc:	e13ffe17 	ldw	r4,-8(fp)
 40147e0:	000b883a 	mov	r5,zero
 40147e4:	01800104 	movi	r6,4
 40147e8:	e1fffd04 	addi	r7,fp,-12
 40147ec:	4015d0c0 	call	4015d0c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 40147f0:	e13ffe17 	ldw	r4,-8(fp)
 40147f4:	401480c0 	call	401480c <epcs_await_wip_released>
}
 40147f8:	e037883a 	mov	sp,fp
 40147fc:	dfc00117 	ldw	ra,4(sp)
 4014800:	df000017 	ldw	fp,0(sp)
 4014804:	dec00204 	addi	sp,sp,8
 4014808:	f800283a 	ret

0401480c <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 401480c:	defffd04 	addi	sp,sp,-12
 4014810:	dfc00215 	stw	ra,8(sp)
 4014814:	df000115 	stw	fp,4(sp)
 4014818:	df000104 	addi	fp,sp,4
 401481c:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 4014820:	e13fff17 	ldw	r4,-4(fp)
 4014824:	40148440 	call	4014844 <epcs_test_wip>
 4014828:	1004c03a 	cmpne	r2,r2,zero
 401482c:	103ffc1e 	bne	r2,zero,4014820 <epcs_await_wip_released+0x14>
  {
  }
}
 4014830:	e037883a 	mov	sp,fp
 4014834:	dfc00117 	ldw	ra,4(sp)
 4014838:	df000017 	ldw	fp,0(sp)
 401483c:	dec00204 	addi	sp,sp,8
 4014840:	f800283a 	ret

04014844 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 4014844:	defffd04 	addi	sp,sp,-12
 4014848:	dfc00215 	stw	ra,8(sp)
 401484c:	df000115 	stw	fp,4(sp)
 4014850:	df000104 	addi	fp,sp,4
 4014854:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 4014858:	e13fff17 	ldw	r4,-4(fp)
 401485c:	40147300 	call	4014730 <epcs_read_status_register>
 4014860:	10803fcc 	andi	r2,r2,255
 4014864:	1080004c 	andi	r2,r2,1
}
 4014868:	e037883a 	mov	sp,fp
 401486c:	dfc00117 	ldw	ra,4(sp)
 4014870:	df000017 	ldw	fp,0(sp)
 4014874:	dec00204 	addi	sp,sp,8
 4014878:	f800283a 	ret

0401487c <epcs_read_buffer>:

  epcs_await_wip_released(base);
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length)
{
 401487c:	defff604 	addi	sp,sp,-40
 4014880:	dfc00915 	stw	ra,36(sp)
 4014884:	df000815 	stw	fp,32(sp)
 4014888:	df000804 	addi	fp,sp,32
 401488c:	e13ffc15 	stw	r4,-16(fp)
 4014890:	e17ffd15 	stw	r5,-12(fp)
 4014894:	e1bffe15 	stw	r6,-8(fp)
 4014898:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[4];
  
  read_command[0] = epcs_read;
 401489c:	008000c4 	movi	r2,3
 40148a0:	e0bffb05 	stb	r2,-20(fp)
  read_command[1] = (offset >> 16) & 0xFF;
 40148a4:	e0bffd17 	ldw	r2,-12(fp)
 40148a8:	1005d43a 	srai	r2,r2,16
 40148ac:	1007883a 	mov	r3,r2
 40148b0:	00bfffc4 	movi	r2,-1
 40148b4:	1884703a 	and	r2,r3,r2
 40148b8:	e0bffb45 	stb	r2,-19(fp)
  read_command[2] = (offset >> 8) & 0xFF;
 40148bc:	e0bffd17 	ldw	r2,-12(fp)
 40148c0:	1005d23a 	srai	r2,r2,8
 40148c4:	1007883a 	mov	r3,r2
 40148c8:	00bfffc4 	movi	r2,-1
 40148cc:	1884703a 	and	r2,r3,r2
 40148d0:	e0bffb85 	stb	r2,-18(fp)
  read_command[3] = offset & 0xFF;
 40148d4:	e0bffd17 	ldw	r2,-12(fp)
 40148d8:	1007883a 	mov	r3,r2
 40148dc:	00bfffc4 	movi	r2,-1
 40148e0:	1884703a 	and	r2,r3,r2
 40148e4:	e0bffbc5 	stb	r2,-17(fp)
    return 0;
#endif
  /* I don't know why this is necessary, since I call await-wip after
   * all writing commands.
  */
  epcs_await_wip_released(base);
 40148e8:	e13ffc17 	ldw	r4,-16(fp)
 40148ec:	401480c0 	call	401480c <epcs_await_wip_released>

  alt_avalon_spi_command(
 40148f0:	e0bfff17 	ldw	r2,-4(fp)
 40148f4:	d8800015 	stw	r2,0(sp)
 40148f8:	e0bffe17 	ldw	r2,-8(fp)
 40148fc:	d8800115 	stw	r2,4(sp)
 4014900:	d8000215 	stw	zero,8(sp)
 4014904:	e13ffc17 	ldw	r4,-16(fp)
 4014908:	000b883a 	mov	r5,zero
 401490c:	01800104 	movi	r6,4
 4014910:	e1fffb04 	addi	r7,fp,-20
 4014914:	4015d0c0 	call	4015d0c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  return length;
 4014918:	e0bfff17 	ldw	r2,-4(fp)
}
 401491c:	e037883a 	mov	sp,fp
 4014920:	dfc00117 	ldw	ra,4(sp)
 4014924:	df000017 	ldw	fp,0(sp)
 4014928:	dec00204 	addi	sp,sp,8
 401492c:	f800283a 	ret

04014930 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 4014930:	defff904 	addi	sp,sp,-28
 4014934:	dfc00615 	stw	ra,24(sp)
 4014938:	df000515 	stw	fp,20(sp)
 401493c:	df000504 	addi	fp,sp,20
 4014940:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 4014944:	00800184 	movi	r2,6
 4014948:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 401494c:	d8000015 	stw	zero,0(sp)
 4014950:	d8000115 	stw	zero,4(sp)
 4014954:	d8000215 	stw	zero,8(sp)
 4014958:	e13fff17 	ldw	r4,-4(fp)
 401495c:	000b883a 	mov	r5,zero
 4014960:	01800044 	movi	r6,1
 4014964:	e1fffe04 	addi	r7,fp,-8
 4014968:	4015d0c0 	call	4015d0c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 401496c:	e037883a 	mov	sp,fp
 4014970:	dfc00117 	ldw	ra,4(sp)
 4014974:	df000017 	ldw	fp,0(sp)
 4014978:	dec00204 	addi	sp,sp,8
 401497c:	f800283a 	ret

04014980 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 4014980:	defff804 	addi	sp,sp,-32
 4014984:	dfc00715 	stw	ra,28(sp)
 4014988:	df000615 	stw	fp,24(sp)
 401498c:	df000604 	addi	fp,sp,24
 4014990:	e13ffe15 	stw	r4,-8(fp)
 4014994:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 4014998:	00800044 	movi	r2,1
 401499c:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 40149a0:	e0bfff03 	ldbu	r2,-4(fp)
 40149a4:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 40149a8:	d8000015 	stw	zero,0(sp)
 40149ac:	d8000115 	stw	zero,4(sp)
 40149b0:	d8000215 	stw	zero,8(sp)
 40149b4:	e13ffe17 	ldw	r4,-8(fp)
 40149b8:	000b883a 	mov	r5,zero
 40149bc:	01800084 	movi	r6,2
 40149c0:	e1fffd04 	addi	r7,fp,-12
 40149c4:	4015d0c0 	call	4015d0c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 40149c8:	e13ffe17 	ldw	r4,-8(fp)
 40149cc:	401480c0 	call	401480c <epcs_await_wip_released>
}
 40149d0:	e037883a 	mov	sp,fp
 40149d4:	dfc00117 	ldw	ra,4(sp)
 40149d8:	df000017 	ldw	fp,0(sp)
 40149dc:	dec00204 	addi	sp,sp,8
 40149e0:	f800283a 	ret

040149e4 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, int length)
{
 40149e4:	defff604 	addi	sp,sp,-40
 40149e8:	dfc00915 	stw	ra,36(sp)
 40149ec:	df000815 	stw	fp,32(sp)
 40149f0:	df000804 	addi	fp,sp,32
 40149f4:	e13ffc15 	stw	r4,-16(fp)
 40149f8:	e17ffd15 	stw	r5,-12(fp)
 40149fc:	e1bffe15 	stw	r6,-8(fp)
 4014a00:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[4];
  
  pp[0] = epcs_pp;
 4014a04:	00800084 	movi	r2,2
 4014a08:	e0bffb05 	stb	r2,-20(fp)
  pp[1] = (offset >> 16) & 0xFF;
 4014a0c:	e0bffd17 	ldw	r2,-12(fp)
 4014a10:	1005d43a 	srai	r2,r2,16
 4014a14:	1007883a 	mov	r3,r2
 4014a18:	00bfffc4 	movi	r2,-1
 4014a1c:	1884703a 	and	r2,r3,r2
 4014a20:	e0bffb45 	stb	r2,-19(fp)
  pp[2] = (offset >> 8) & 0xFF;
 4014a24:	e0bffd17 	ldw	r2,-12(fp)
 4014a28:	1005d23a 	srai	r2,r2,8
 4014a2c:	1007883a 	mov	r3,r2
 4014a30:	00bfffc4 	movi	r2,-1
 4014a34:	1884703a 	and	r2,r3,r2
 4014a38:	e0bffb85 	stb	r2,-18(fp)
  pp[3] = offset & 0xFF;
 4014a3c:	e0bffd17 	ldw	r2,-12(fp)
 4014a40:	1007883a 	mov	r3,r2
 4014a44:	00bfffc4 	movi	r2,-1
 4014a48:	1884703a 	and	r2,r3,r2
 4014a4c:	e0bffbc5 	stb	r2,-17(fp)

  /* First, WREN */
  epcs_write_enable(base);
 4014a50:	e13ffc17 	ldw	r4,-16(fp)
 4014a54:	40149300 	call	4014930 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 4014a58:	d8000015 	stw	zero,0(sp)
 4014a5c:	d8000115 	stw	zero,4(sp)
 4014a60:	00800044 	movi	r2,1
 4014a64:	d8800215 	stw	r2,8(sp)
 4014a68:	e13ffc17 	ldw	r4,-16(fp)
 4014a6c:	000b883a 	mov	r5,zero
 4014a70:	01800104 	movi	r6,4
 4014a74:	e1fffb04 	addi	r7,fp,-20
 4014a78:	4015d0c0 	call	4015d0c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 4014a7c:	e1bfff17 	ldw	r6,-4(fp)
 4014a80:	d8000015 	stw	zero,0(sp)
 4014a84:	d8000115 	stw	zero,4(sp)
 4014a88:	d8000215 	stw	zero,8(sp)
 4014a8c:	e13ffc17 	ldw	r4,-16(fp)
 4014a90:	000b883a 	mov	r5,zero
 4014a94:	e1fffe17 	ldw	r7,-8(fp)
 4014a98:	4015d0c0 	call	4015d0c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 4014a9c:	e13ffc17 	ldw	r4,-16(fp)
 4014aa0:	401480c0 	call	401480c <epcs_await_wip_released>

  return length;
 4014aa4:	e0bfff17 	ldw	r2,-4(fp)
}
 4014aa8:	e037883a 	mov	sp,fp
 4014aac:	dfc00117 	ldw	ra,4(sp)
 4014ab0:	df000017 	ldw	fp,0(sp)
 4014ab4:	dec00204 	addi	sp,sp,8
 4014ab8:	f800283a 	ret

04014abc <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 4014abc:	defff804 	addi	sp,sp,-32
 4014ac0:	dfc00715 	stw	ra,28(sp)
 4014ac4:	df000615 	stw	fp,24(sp)
 4014ac8:	df000604 	addi	fp,sp,24
 4014acc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 4014ad0:	00bfeac4 	movi	r2,-85
 4014ad4:	e0bffd05 	stb	r2,-12(fp)
 4014ad8:	e03ffd45 	stb	zero,-11(fp)
 4014adc:	e03ffd85 	stb	zero,-10(fp)
 4014ae0:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 4014ae4:	00800044 	movi	r2,1
 4014ae8:	d8800015 	stw	r2,0(sp)
 4014aec:	e0bffe04 	addi	r2,fp,-8
 4014af0:	d8800115 	stw	r2,4(sp)
 4014af4:	d8000215 	stw	zero,8(sp)
 4014af8:	e13fff17 	ldw	r4,-4(fp)
 4014afc:	000b883a 	mov	r5,zero
 4014b00:	01800104 	movi	r6,4
 4014b04:	e1fffd04 	addi	r7,fp,-12
 4014b08:	4015d0c0 	call	4015d0c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 4014b0c:	e0bffe03 	ldbu	r2,-8(fp)
 4014b10:	10803fcc 	andi	r2,r2,255
}
 4014b14:	e037883a 	mov	sp,fp
 4014b18:	dfc00117 	ldw	ra,4(sp)
 4014b1c:	df000017 	ldw	fp,0(sp)
 4014b20:	dec00204 	addi	sp,sp,8
 4014b24:	f800283a 	ret

04014b28 <epcs_read_device_id>:

alt_u8 epcs_read_device_id(alt_u32 base)
{
 4014b28:	defff904 	addi	sp,sp,-28
 4014b2c:	dfc00615 	stw	ra,24(sp)
 4014b30:	df000515 	stw	fp,20(sp)
 4014b34:	df000504 	addi	fp,sp,20
 4014b38:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid, 0, 0};
 4014b3c:	00bfe7c4 	movi	r2,-97
 4014b40:	e0bffe05 	stb	r2,-8(fp)
 4014b44:	e03ffe45 	stb	zero,-7(fp)
 4014b48:	e03ffe85 	stb	zero,-6(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 4014b4c:	00800044 	movi	r2,1
 4014b50:	d8800015 	stw	r2,0(sp)
 4014b54:	e0bffec4 	addi	r2,fp,-5
 4014b58:	d8800115 	stw	r2,4(sp)
 4014b5c:	d8000215 	stw	zero,8(sp)
 4014b60:	e13fff17 	ldw	r4,-4(fp)
 4014b64:	000b883a 	mov	r5,zero
 4014b68:	018000c4 	movi	r6,3
 4014b6c:	e1fffe04 	addi	r7,fp,-8
 4014b70:	4015d0c0 	call	4015d0c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 4014b74:	e0bffec3 	ldbu	r2,-5(fp)
 4014b78:	10803fcc 	andi	r2,r2,255
}
 4014b7c:	e037883a 	mov	sp,fp
 4014b80:	dfc00117 	ldw	ra,4(sp)
 4014b84:	df000017 	ldw	fp,0(sp)
 4014b88:	dec00204 	addi	sp,sp,8
 4014b8c:	f800283a 	ret

04014b90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4014b90:	defff404 	addi	sp,sp,-48
 4014b94:	df000b15 	stw	fp,44(sp)
 4014b98:	df000b04 	addi	fp,sp,44
 4014b9c:	e13ffb15 	stw	r4,-20(fp)
 4014ba0:	e17ffc15 	stw	r5,-16(fp)
 4014ba4:	e1bffd15 	stw	r6,-12(fp)
 4014ba8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4014bac:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4014bb0:	008100b4 	movhi	r2,1026
 4014bb4:	10a1f304 	addi	r2,r2,-30772
 4014bb8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4014bbc:	1005003a 	cmpeq	r2,r2,zero
 4014bc0:	1000411e 	bne	r2,zero,4014cc8 <alt_alarm_start+0x138>
  {
    if (alarm)
 4014bc4:	e0bffb17 	ldw	r2,-20(fp)
 4014bc8:	1005003a 	cmpeq	r2,r2,zero
 4014bcc:	10003b1e 	bne	r2,zero,4014cbc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 4014bd0:	e0fffb17 	ldw	r3,-20(fp)
 4014bd4:	e0bffd17 	ldw	r2,-12(fp)
 4014bd8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 4014bdc:	e0fffb17 	ldw	r3,-20(fp)
 4014be0:	e0bffe17 	ldw	r2,-8(fp)
 4014be4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014be8:	0005303a 	rdctl	r2,status
 4014bec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014bf0:	e0fff817 	ldw	r3,-32(fp)
 4014bf4:	00bfff84 	movi	r2,-2
 4014bf8:	1884703a 	and	r2,r3,r2
 4014bfc:	1001703a 	wrctl	status,r2
  
  return context;
 4014c00:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 4014c04:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4014c08:	008100b4 	movhi	r2,1026
 4014c0c:	10a1f404 	addi	r2,r2,-30768
 4014c10:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4014c14:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4014c18:	e0fffc17 	ldw	r3,-16(fp)
 4014c1c:	e0bff917 	ldw	r2,-28(fp)
 4014c20:	1885883a 	add	r2,r3,r2
 4014c24:	10c00044 	addi	r3,r2,1
 4014c28:	e0bffb17 	ldw	r2,-20(fp)
 4014c2c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4014c30:	e0bffb17 	ldw	r2,-20(fp)
 4014c34:	10c00217 	ldw	r3,8(r2)
 4014c38:	e0bff917 	ldw	r2,-28(fp)
 4014c3c:	1880042e 	bgeu	r3,r2,4014c50 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 4014c40:	e0fffb17 	ldw	r3,-20(fp)
 4014c44:	00800044 	movi	r2,1
 4014c48:	18800405 	stb	r2,16(r3)
 4014c4c:	00000206 	br	4014c58 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 4014c50:	e0bffb17 	ldw	r2,-20(fp)
 4014c54:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4014c58:	e0fffb17 	ldw	r3,-20(fp)
 4014c5c:	008100b4 	movhi	r2,1026
 4014c60:	10a1ca04 	addi	r2,r2,-30936
 4014c64:	e0bff615 	stw	r2,-40(fp)
 4014c68:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4014c6c:	e0fff717 	ldw	r3,-36(fp)
 4014c70:	e0bff617 	ldw	r2,-40(fp)
 4014c74:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4014c78:	e0bff617 	ldw	r2,-40(fp)
 4014c7c:	10c00017 	ldw	r3,0(r2)
 4014c80:	e0bff717 	ldw	r2,-36(fp)
 4014c84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4014c88:	e0bff617 	ldw	r2,-40(fp)
 4014c8c:	10c00017 	ldw	r3,0(r2)
 4014c90:	e0bff717 	ldw	r2,-36(fp)
 4014c94:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4014c98:	e0fff617 	ldw	r3,-40(fp)
 4014c9c:	e0bff717 	ldw	r2,-36(fp)
 4014ca0:	18800015 	stw	r2,0(r3)
 4014ca4:	e0bffa17 	ldw	r2,-24(fp)
 4014ca8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014cac:	e0bff517 	ldw	r2,-44(fp)
 4014cb0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4014cb4:	e03fff15 	stw	zero,-4(fp)
 4014cb8:	00000506 	br	4014cd0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 4014cbc:	00bffa84 	movi	r2,-22
 4014cc0:	e0bfff15 	stw	r2,-4(fp)
 4014cc4:	00000206 	br	4014cd0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 4014cc8:	00bfde84 	movi	r2,-134
 4014ccc:	e0bfff15 	stw	r2,-4(fp)
 4014cd0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 4014cd4:	e037883a 	mov	sp,fp
 4014cd8:	df000017 	ldw	fp,0(sp)
 4014cdc:	dec00104 	addi	sp,sp,4
 4014ce0:	f800283a 	ret

04014ce4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4014ce4:	defff904 	addi	sp,sp,-28
 4014ce8:	dfc00615 	stw	ra,24(sp)
 4014cec:	df000515 	stw	fp,20(sp)
 4014cf0:	df000504 	addi	fp,sp,20
 4014cf4:	e13ffd15 	stw	r4,-12(fp)
 4014cf8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4014cfc:	e0bffd17 	ldw	r2,-12(fp)
 4014d00:	1005003a 	cmpeq	r2,r2,zero
 4014d04:	1000041e 	bne	r2,zero,4014d18 <alt_dev_llist_insert+0x34>
 4014d08:	e0bffd17 	ldw	r2,-12(fp)
 4014d0c:	10800217 	ldw	r2,8(r2)
 4014d10:	1004c03a 	cmpne	r2,r2,zero
 4014d14:	1000071e 	bne	r2,zero,4014d34 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 4014d18:	4014d980 	call	4014d98 <alt_get_errno>
 4014d1c:	1007883a 	mov	r3,r2
 4014d20:	00800584 	movi	r2,22
 4014d24:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4014d28:	00bffa84 	movi	r2,-22
 4014d2c:	e0bfff15 	stw	r2,-4(fp)
 4014d30:	00001306 	br	4014d80 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4014d34:	e0fffd17 	ldw	r3,-12(fp)
 4014d38:	e0bffe17 	ldw	r2,-8(fp)
 4014d3c:	e0bffb15 	stw	r2,-20(fp)
 4014d40:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4014d44:	e0fffc17 	ldw	r3,-16(fp)
 4014d48:	e0bffb17 	ldw	r2,-20(fp)
 4014d4c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4014d50:	e0bffb17 	ldw	r2,-20(fp)
 4014d54:	10c00017 	ldw	r3,0(r2)
 4014d58:	e0bffc17 	ldw	r2,-16(fp)
 4014d5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4014d60:	e0bffb17 	ldw	r2,-20(fp)
 4014d64:	10c00017 	ldw	r3,0(r2)
 4014d68:	e0bffc17 	ldw	r2,-16(fp)
 4014d6c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4014d70:	e0fffb17 	ldw	r3,-20(fp)
 4014d74:	e0bffc17 	ldw	r2,-16(fp)
 4014d78:	18800015 	stw	r2,0(r3)

  return 0;  
 4014d7c:	e03fff15 	stw	zero,-4(fp)
 4014d80:	e0bfff17 	ldw	r2,-4(fp)
}
 4014d84:	e037883a 	mov	sp,fp
 4014d88:	dfc00117 	ldw	ra,4(sp)
 4014d8c:	df000017 	ldw	fp,0(sp)
 4014d90:	dec00204 	addi	sp,sp,8
 4014d94:	f800283a 	ret

04014d98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014d98:	defffd04 	addi	sp,sp,-12
 4014d9c:	dfc00215 	stw	ra,8(sp)
 4014da0:	df000115 	stw	fp,4(sp)
 4014da4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4014da8:	008100b4 	movhi	r2,1026
 4014dac:	10a1a604 	addi	r2,r2,-31080
 4014db0:	10800017 	ldw	r2,0(r2)
 4014db4:	1005003a 	cmpeq	r2,r2,zero
 4014db8:	1000061e 	bne	r2,zero,4014dd4 <alt_get_errno+0x3c>
 4014dbc:	008100b4 	movhi	r2,1026
 4014dc0:	10a1a604 	addi	r2,r2,-31080
 4014dc4:	10800017 	ldw	r2,0(r2)
 4014dc8:	103ee83a 	callr	r2
 4014dcc:	e0bfff15 	stw	r2,-4(fp)
 4014dd0:	00000306 	br	4014de0 <alt_get_errno+0x48>
 4014dd4:	008100b4 	movhi	r2,1026
 4014dd8:	10a1d504 	addi	r2,r2,-30892
 4014ddc:	e0bfff15 	stw	r2,-4(fp)
 4014de0:	e0bfff17 	ldw	r2,-4(fp)
}
 4014de4:	e037883a 	mov	sp,fp
 4014de8:	dfc00117 	ldw	ra,4(sp)
 4014dec:	df000017 	ldw	fp,0(sp)
 4014df0:	dec00204 	addi	sp,sp,8
 4014df4:	f800283a 	ret

04014df8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4014df8:	defffd04 	addi	sp,sp,-12
 4014dfc:	dfc00215 	stw	ra,8(sp)
 4014e00:	df000115 	stw	fp,4(sp)
 4014e04:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4014e08:	00bfff04 	movi	r2,-4
 4014e0c:	00c10074 	movhi	r3,1025
 4014e10:	18d99c04 	addi	r3,r3,26224
 4014e14:	1885883a 	add	r2,r3,r2
 4014e18:	e0bfff15 	stw	r2,-4(fp)
 4014e1c:	00000606 	br	4014e38 <_do_ctors+0x40>
        (*ctor) (); 
 4014e20:	e0bfff17 	ldw	r2,-4(fp)
 4014e24:	10800017 	ldw	r2,0(r2)
 4014e28:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4014e2c:	e0bfff17 	ldw	r2,-4(fp)
 4014e30:	10bfff04 	addi	r2,r2,-4
 4014e34:	e0bfff15 	stw	r2,-4(fp)
 4014e38:	e0ffff17 	ldw	r3,-4(fp)
 4014e3c:	00810074 	movhi	r2,1025
 4014e40:	10999b04 	addi	r2,r2,26220
 4014e44:	18bff62e 	bgeu	r3,r2,4014e20 <_do_ctors+0x28>
        (*ctor) (); 
}
 4014e48:	e037883a 	mov	sp,fp
 4014e4c:	dfc00117 	ldw	ra,4(sp)
 4014e50:	df000017 	ldw	fp,0(sp)
 4014e54:	dec00204 	addi	sp,sp,8
 4014e58:	f800283a 	ret

04014e5c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4014e5c:	defffd04 	addi	sp,sp,-12
 4014e60:	dfc00215 	stw	ra,8(sp)
 4014e64:	df000115 	stw	fp,4(sp)
 4014e68:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4014e6c:	00bfff04 	movi	r2,-4
 4014e70:	00c10074 	movhi	r3,1025
 4014e74:	18d99c04 	addi	r3,r3,26224
 4014e78:	1885883a 	add	r2,r3,r2
 4014e7c:	e0bfff15 	stw	r2,-4(fp)
 4014e80:	00000606 	br	4014e9c <_do_dtors+0x40>
        (*dtor) (); 
 4014e84:	e0bfff17 	ldw	r2,-4(fp)
 4014e88:	10800017 	ldw	r2,0(r2)
 4014e8c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4014e90:	e0bfff17 	ldw	r2,-4(fp)
 4014e94:	10bfff04 	addi	r2,r2,-4
 4014e98:	e0bfff15 	stw	r2,-4(fp)
 4014e9c:	e0ffff17 	ldw	r3,-4(fp)
 4014ea0:	00810074 	movhi	r2,1025
 4014ea4:	10999c04 	addi	r2,r2,26224
 4014ea8:	18bff62e 	bgeu	r3,r2,4014e84 <_do_dtors+0x28>
        (*dtor) (); 
}
 4014eac:	e037883a 	mov	sp,fp
 4014eb0:	dfc00117 	ldw	ra,4(sp)
 4014eb4:	df000017 	ldw	fp,0(sp)
 4014eb8:	dec00204 	addi	sp,sp,8
 4014ebc:	f800283a 	ret

04014ec0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4014ec0:	defffb04 	addi	sp,sp,-20
 4014ec4:	dfc00415 	stw	ra,16(sp)
 4014ec8:	df000315 	stw	fp,12(sp)
 4014ecc:	df000304 	addi	fp,sp,12
 4014ed0:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 4014ed4:	e13ffe17 	ldw	r4,-8(fp)
 4014ed8:	d1602c04 	addi	r5,gp,-32592
 4014edc:	4015f440 	call	4015f44 <alt_find_dev>
 4014ee0:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 4014ee4:	e0bffd17 	ldw	r2,-12(fp)
 4014ee8:	1005003a 	cmpeq	r2,r2,zero
 4014eec:	10000b1e 	bne	r2,zero,4014f1c <alt_flash_open_dev+0x5c>
 4014ef0:	e0bffd17 	ldw	r2,-12(fp)
 4014ef4:	10800317 	ldw	r2,12(r2)
 4014ef8:	1005003a 	cmpeq	r2,r2,zero
 4014efc:	1000071e 	bne	r2,zero,4014f1c <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 4014f00:	e0bffd17 	ldw	r2,-12(fp)
 4014f04:	10800317 	ldw	r2,12(r2)
 4014f08:	e13ffd17 	ldw	r4,-12(fp)
 4014f0c:	e17ffe17 	ldw	r5,-8(fp)
 4014f10:	103ee83a 	callr	r2
 4014f14:	e0bfff15 	stw	r2,-4(fp)
 4014f18:	00000206 	br	4014f24 <alt_flash_open_dev+0x64>
  }

  return dev;
 4014f1c:	e0bffd17 	ldw	r2,-12(fp)
 4014f20:	e0bfff15 	stw	r2,-4(fp)
 4014f24:	e0bfff17 	ldw	r2,-4(fp)
}
 4014f28:	e037883a 	mov	sp,fp
 4014f2c:	dfc00117 	ldw	ra,4(sp)
 4014f30:	df000017 	ldw	fp,0(sp)
 4014f34:	dec00204 	addi	sp,sp,8
 4014f38:	f800283a 	ret

04014f3c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 4014f3c:	defffd04 	addi	sp,sp,-12
 4014f40:	dfc00215 	stw	ra,8(sp)
 4014f44:	df000115 	stw	fp,4(sp)
 4014f48:	df000104 	addi	fp,sp,4
 4014f4c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 4014f50:	e0bfff17 	ldw	r2,-4(fp)
 4014f54:	1005003a 	cmpeq	r2,r2,zero
 4014f58:	1000081e 	bne	r2,zero,4014f7c <alt_flash_close_dev+0x40>
 4014f5c:	e0bfff17 	ldw	r2,-4(fp)
 4014f60:	10800417 	ldw	r2,16(r2)
 4014f64:	1005003a 	cmpeq	r2,r2,zero
 4014f68:	1000041e 	bne	r2,zero,4014f7c <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 4014f6c:	e0bfff17 	ldw	r2,-4(fp)
 4014f70:	10800417 	ldw	r2,16(r2)
 4014f74:	e13fff17 	ldw	r4,-4(fp)
 4014f78:	103ee83a 	callr	r2
  }
  return;
}
 4014f7c:	e037883a 	mov	sp,fp
 4014f80:	dfc00117 	ldw	ra,4(sp)
 4014f84:	df000017 	ldw	fp,0(sp)
 4014f88:	dec00204 	addi	sp,sp,8
 4014f8c:	f800283a 	ret

04014f90 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4014f90:	defff904 	addi	sp,sp,-28
 4014f94:	dfc00615 	stw	ra,24(sp)
 4014f98:	df000515 	stw	fp,20(sp)
 4014f9c:	df000504 	addi	fp,sp,20
 4014fa0:	e13ffc15 	stw	r4,-16(fp)
 4014fa4:	e17ffd15 	stw	r5,-12(fp)
 4014fa8:	e1bffe15 	stw	r6,-8(fp)
 4014fac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4014fb0:	e0800217 	ldw	r2,8(fp)
 4014fb4:	d8800015 	stw	r2,0(sp)
 4014fb8:	e13ffc17 	ldw	r4,-16(fp)
 4014fbc:	e17ffd17 	ldw	r5,-12(fp)
 4014fc0:	e1bffe17 	ldw	r6,-8(fp)
 4014fc4:	e1ffff17 	ldw	r7,-4(fp)
 4014fc8:	40151640 	call	4015164 <alt_iic_isr_register>
}  
 4014fcc:	e037883a 	mov	sp,fp
 4014fd0:	dfc00117 	ldw	ra,4(sp)
 4014fd4:	df000017 	ldw	fp,0(sp)
 4014fd8:	dec00204 	addi	sp,sp,8
 4014fdc:	f800283a 	ret

04014fe0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4014fe0:	defff904 	addi	sp,sp,-28
 4014fe4:	df000615 	stw	fp,24(sp)
 4014fe8:	df000604 	addi	fp,sp,24
 4014fec:	e13ffe15 	stw	r4,-8(fp)
 4014ff0:	e17fff15 	stw	r5,-4(fp)
 4014ff4:	e0bfff17 	ldw	r2,-4(fp)
 4014ff8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014ffc:	0005303a 	rdctl	r2,status
 4015000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015004:	e0fffb17 	ldw	r3,-20(fp)
 4015008:	00bfff84 	movi	r2,-2
 401500c:	1884703a 	and	r2,r3,r2
 4015010:	1001703a 	wrctl	status,r2
  
  return context;
 4015014:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4015018:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 401501c:	e0fffc17 	ldw	r3,-16(fp)
 4015020:	00800044 	movi	r2,1
 4015024:	10c4983a 	sll	r2,r2,r3
 4015028:	1007883a 	mov	r3,r2
 401502c:	008100b4 	movhi	r2,1026
 4015030:	10a1f204 	addi	r2,r2,-30776
 4015034:	10800017 	ldw	r2,0(r2)
 4015038:	1886b03a 	or	r3,r3,r2
 401503c:	008100b4 	movhi	r2,1026
 4015040:	10a1f204 	addi	r2,r2,-30776
 4015044:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4015048:	008100b4 	movhi	r2,1026
 401504c:	10a1f204 	addi	r2,r2,-30776
 4015050:	10800017 	ldw	r2,0(r2)
 4015054:	100170fa 	wrctl	ienable,r2
 4015058:	e0bffd17 	ldw	r2,-12(fp)
 401505c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015060:	e0bffa17 	ldw	r2,-24(fp)
 4015064:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4015068:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 401506c:	e037883a 	mov	sp,fp
 4015070:	df000017 	ldw	fp,0(sp)
 4015074:	dec00104 	addi	sp,sp,4
 4015078:	f800283a 	ret

0401507c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401507c:	defff904 	addi	sp,sp,-28
 4015080:	df000615 	stw	fp,24(sp)
 4015084:	df000604 	addi	fp,sp,24
 4015088:	e13ffe15 	stw	r4,-8(fp)
 401508c:	e17fff15 	stw	r5,-4(fp)
 4015090:	e0bfff17 	ldw	r2,-4(fp)
 4015094:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015098:	0005303a 	rdctl	r2,status
 401509c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40150a0:	e0fffb17 	ldw	r3,-20(fp)
 40150a4:	00bfff84 	movi	r2,-2
 40150a8:	1884703a 	and	r2,r3,r2
 40150ac:	1001703a 	wrctl	status,r2
  
  return context;
 40150b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40150b4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 40150b8:	e0fffc17 	ldw	r3,-16(fp)
 40150bc:	00800044 	movi	r2,1
 40150c0:	10c4983a 	sll	r2,r2,r3
 40150c4:	0084303a 	nor	r2,zero,r2
 40150c8:	1007883a 	mov	r3,r2
 40150cc:	008100b4 	movhi	r2,1026
 40150d0:	10a1f204 	addi	r2,r2,-30776
 40150d4:	10800017 	ldw	r2,0(r2)
 40150d8:	1886703a 	and	r3,r3,r2
 40150dc:	008100b4 	movhi	r2,1026
 40150e0:	10a1f204 	addi	r2,r2,-30776
 40150e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40150e8:	008100b4 	movhi	r2,1026
 40150ec:	10a1f204 	addi	r2,r2,-30776
 40150f0:	10800017 	ldw	r2,0(r2)
 40150f4:	100170fa 	wrctl	ienable,r2
 40150f8:	e0bffd17 	ldw	r2,-12(fp)
 40150fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015100:	e0bffa17 	ldw	r2,-24(fp)
 4015104:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4015108:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 401510c:	e037883a 	mov	sp,fp
 4015110:	df000017 	ldw	fp,0(sp)
 4015114:	dec00104 	addi	sp,sp,4
 4015118:	f800283a 	ret

0401511c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401511c:	defffc04 	addi	sp,sp,-16
 4015120:	df000315 	stw	fp,12(sp)
 4015124:	df000304 	addi	fp,sp,12
 4015128:	e13ffe15 	stw	r4,-8(fp)
 401512c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4015130:	000530fa 	rdctl	r2,ienable
 4015134:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4015138:	e0ffff17 	ldw	r3,-4(fp)
 401513c:	00800044 	movi	r2,1
 4015140:	10c4983a 	sll	r2,r2,r3
 4015144:	1007883a 	mov	r3,r2
 4015148:	e0bffd17 	ldw	r2,-12(fp)
 401514c:	1884703a 	and	r2,r3,r2
 4015150:	1004c03a 	cmpne	r2,r2,zero
}
 4015154:	e037883a 	mov	sp,fp
 4015158:	df000017 	ldw	fp,0(sp)
 401515c:	dec00104 	addi	sp,sp,4
 4015160:	f800283a 	ret

04015164 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4015164:	defff404 	addi	sp,sp,-48
 4015168:	dfc00b15 	stw	ra,44(sp)
 401516c:	df000a15 	stw	fp,40(sp)
 4015170:	df000a04 	addi	fp,sp,40
 4015174:	e13ffb15 	stw	r4,-20(fp)
 4015178:	e17ffc15 	stw	r5,-16(fp)
 401517c:	e1bffd15 	stw	r6,-12(fp)
 4015180:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 4015184:	00bffa84 	movi	r2,-22
 4015188:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401518c:	e0bffc17 	ldw	r2,-16(fp)
 4015190:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4015194:	e0bff917 	ldw	r2,-28(fp)
 4015198:	10800808 	cmpgei	r2,r2,32
 401519c:	1000291e 	bne	r2,zero,4015244 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40151a0:	0005303a 	rdctl	r2,status
 40151a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40151a8:	e0fff717 	ldw	r3,-36(fp)
 40151ac:	00bfff84 	movi	r2,-2
 40151b0:	1884703a 	and	r2,r3,r2
 40151b4:	1001703a 	wrctl	status,r2
  
  return context;
 40151b8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40151bc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 40151c0:	e0bff917 	ldw	r2,-28(fp)
 40151c4:	00c100b4 	movhi	r3,1026
 40151c8:	18d3f004 	addi	r3,r3,20416
 40151cc:	100490fa 	slli	r2,r2,3
 40151d0:	10c7883a 	add	r3,r2,r3
 40151d4:	e0bffd17 	ldw	r2,-12(fp)
 40151d8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 40151dc:	e0bff917 	ldw	r2,-28(fp)
 40151e0:	00c100b4 	movhi	r3,1026
 40151e4:	18d3f004 	addi	r3,r3,20416
 40151e8:	100490fa 	slli	r2,r2,3
 40151ec:	10c5883a 	add	r2,r2,r3
 40151f0:	10c00104 	addi	r3,r2,4
 40151f4:	e0bffe17 	ldw	r2,-8(fp)
 40151f8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40151fc:	e0bffd17 	ldw	r2,-12(fp)
 4015200:	1005003a 	cmpeq	r2,r2,zero
 4015204:	1000051e 	bne	r2,zero,401521c <alt_iic_isr_register+0xb8>
 4015208:	e17ff917 	ldw	r5,-28(fp)
 401520c:	e13ffb17 	ldw	r4,-20(fp)
 4015210:	4014fe00 	call	4014fe0 <alt_ic_irq_enable>
 4015214:	e0bfff15 	stw	r2,-4(fp)
 4015218:	00000406 	br	401522c <alt_iic_isr_register+0xc8>
 401521c:	e17ff917 	ldw	r5,-28(fp)
 4015220:	e13ffb17 	ldw	r4,-20(fp)
 4015224:	401507c0 	call	401507c <alt_ic_irq_disable>
 4015228:	e0bfff15 	stw	r2,-4(fp)
 401522c:	e0bfff17 	ldw	r2,-4(fp)
 4015230:	e0bffa15 	stw	r2,-24(fp)
 4015234:	e0bff817 	ldw	r2,-32(fp)
 4015238:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401523c:	e0bff617 	ldw	r2,-40(fp)
 4015240:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4015244:	e0bffa17 	ldw	r2,-24(fp)
}
 4015248:	e037883a 	mov	sp,fp
 401524c:	dfc00117 	ldw	ra,4(sp)
 4015250:	df000017 	ldw	fp,0(sp)
 4015254:	dec00204 	addi	sp,sp,8
 4015258:	f800283a 	ret

0401525c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401525c:	defff904 	addi	sp,sp,-28
 4015260:	dfc00615 	stw	ra,24(sp)
 4015264:	df000515 	stw	fp,20(sp)
 4015268:	df000504 	addi	fp,sp,20
 401526c:	e13ffc15 	stw	r4,-16(fp)
 4015270:	e17ffd15 	stw	r5,-12(fp)
 4015274:	e1bffe15 	stw	r6,-8(fp)
 4015278:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 401527c:	e13ffd17 	ldw	r4,-12(fp)
 4015280:	e17ffe17 	ldw	r5,-8(fp)
 4015284:	e1bfff17 	ldw	r6,-4(fp)
 4015288:	40154740 	call	4015474 <open>
 401528c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4015290:	e0bffb17 	ldw	r2,-20(fp)
 4015294:	1004803a 	cmplt	r2,r2,zero
 4015298:	10001c1e 	bne	r2,zero,401530c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 401529c:	e0bffb17 	ldw	r2,-20(fp)
 40152a0:	00c10074 	movhi	r3,1025
 40152a4:	18dcef04 	addi	r3,r3,29628
 40152a8:	10800324 	muli	r2,r2,12
 40152ac:	10c5883a 	add	r2,r2,r3
 40152b0:	10c00017 	ldw	r3,0(r2)
 40152b4:	e0bffc17 	ldw	r2,-16(fp)
 40152b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40152bc:	e0bffb17 	ldw	r2,-20(fp)
 40152c0:	00c10074 	movhi	r3,1025
 40152c4:	18dcef04 	addi	r3,r3,29628
 40152c8:	10800324 	muli	r2,r2,12
 40152cc:	10c5883a 	add	r2,r2,r3
 40152d0:	10800104 	addi	r2,r2,4
 40152d4:	10c00017 	ldw	r3,0(r2)
 40152d8:	e0bffc17 	ldw	r2,-16(fp)
 40152dc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40152e0:	e0bffb17 	ldw	r2,-20(fp)
 40152e4:	00c10074 	movhi	r3,1025
 40152e8:	18dcef04 	addi	r3,r3,29628
 40152ec:	10800324 	muli	r2,r2,12
 40152f0:	10c5883a 	add	r2,r2,r3
 40152f4:	10800204 	addi	r2,r2,8
 40152f8:	10c00017 	ldw	r3,0(r2)
 40152fc:	e0bffc17 	ldw	r2,-16(fp)
 4015300:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4015304:	e13ffb17 	ldw	r4,-20(fp)
 4015308:	400a5400 	call	400a540 <alt_release_fd>
  }
} 
 401530c:	e037883a 	mov	sp,fp
 4015310:	dfc00117 	ldw	ra,4(sp)
 4015314:	df000017 	ldw	fp,0(sp)
 4015318:	dec00204 	addi	sp,sp,8
 401531c:	f800283a 	ret

04015320 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4015320:	defffb04 	addi	sp,sp,-20
 4015324:	dfc00415 	stw	ra,16(sp)
 4015328:	df000315 	stw	fp,12(sp)
 401532c:	df000304 	addi	fp,sp,12
 4015330:	e13ffd15 	stw	r4,-12(fp)
 4015334:	e17ffe15 	stw	r5,-8(fp)
 4015338:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401533c:	01010074 	movhi	r4,1025
 4015340:	211cf204 	addi	r4,r4,29640
 4015344:	e17ffd17 	ldw	r5,-12(fp)
 4015348:	01800044 	movi	r6,1
 401534c:	01c07fc4 	movi	r7,511
 4015350:	401525c0 	call	401525c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4015354:	01010074 	movhi	r4,1025
 4015358:	211cef04 	addi	r4,r4,29628
 401535c:	e17ffe17 	ldw	r5,-8(fp)
 4015360:	000d883a 	mov	r6,zero
 4015364:	01c07fc4 	movi	r7,511
 4015368:	401525c0 	call	401525c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401536c:	01010074 	movhi	r4,1025
 4015370:	211cf504 	addi	r4,r4,29652
 4015374:	e17fff17 	ldw	r5,-4(fp)
 4015378:	01800044 	movi	r6,1
 401537c:	01c07fc4 	movi	r7,511
 4015380:	401525c0 	call	401525c <alt_open_fd>
}  
 4015384:	e037883a 	mov	sp,fp
 4015388:	dfc00117 	ldw	ra,4(sp)
 401538c:	df000017 	ldw	fp,0(sp)
 4015390:	dec00204 	addi	sp,sp,8
 4015394:	f800283a 	ret

04015398 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4015398:	defffc04 	addi	sp,sp,-16
 401539c:	df000315 	stw	fp,12(sp)
 40153a0:	df000304 	addi	fp,sp,12
 40153a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40153a8:	e0bffe17 	ldw	r2,-8(fp)
 40153ac:	10800217 	ldw	r2,8(r2)
 40153b0:	10d00034 	orhi	r3,r2,16384
 40153b4:	e0bffe17 	ldw	r2,-8(fp)
 40153b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40153bc:	e03ffd15 	stw	zero,-12(fp)
 40153c0:	00002006 	br	4015444 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40153c4:	e0bffd17 	ldw	r2,-12(fp)
 40153c8:	00c10074 	movhi	r3,1025
 40153cc:	18dcef04 	addi	r3,r3,29628
 40153d0:	10800324 	muli	r2,r2,12
 40153d4:	10c5883a 	add	r2,r2,r3
 40153d8:	10c00017 	ldw	r3,0(r2)
 40153dc:	e0bffe17 	ldw	r2,-8(fp)
 40153e0:	10800017 	ldw	r2,0(r2)
 40153e4:	1880141e 	bne	r3,r2,4015438 <alt_file_locked+0xa0>
 40153e8:	e0bffd17 	ldw	r2,-12(fp)
 40153ec:	00c10074 	movhi	r3,1025
 40153f0:	18dcef04 	addi	r3,r3,29628
 40153f4:	10800324 	muli	r2,r2,12
 40153f8:	10c5883a 	add	r2,r2,r3
 40153fc:	10800204 	addi	r2,r2,8
 4015400:	10800017 	ldw	r2,0(r2)
 4015404:	1004403a 	cmpge	r2,r2,zero
 4015408:	10000b1e 	bne	r2,zero,4015438 <alt_file_locked+0xa0>
 401540c:	e0bffd17 	ldw	r2,-12(fp)
 4015410:	10800324 	muli	r2,r2,12
 4015414:	1007883a 	mov	r3,r2
 4015418:	00810074 	movhi	r2,1025
 401541c:	109cef04 	addi	r2,r2,29628
 4015420:	1887883a 	add	r3,r3,r2
 4015424:	e0bffe17 	ldw	r2,-8(fp)
 4015428:	18800326 	beq	r3,r2,4015438 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401542c:	00bffcc4 	movi	r2,-13
 4015430:	e0bfff15 	stw	r2,-4(fp)
 4015434:	00000a06 	br	4015460 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4015438:	e0bffd17 	ldw	r2,-12(fp)
 401543c:	10800044 	addi	r2,r2,1
 4015440:	e0bffd15 	stw	r2,-12(fp)
 4015444:	008100b4 	movhi	r2,1026
 4015448:	10a1a504 	addi	r2,r2,-31084
 401544c:	10800017 	ldw	r2,0(r2)
 4015450:	1007883a 	mov	r3,r2
 4015454:	e0bffd17 	ldw	r2,-12(fp)
 4015458:	18bfda2e 	bgeu	r3,r2,40153c4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401545c:	e03fff15 	stw	zero,-4(fp)
 4015460:	e0bfff17 	ldw	r2,-4(fp)
}
 4015464:	e037883a 	mov	sp,fp
 4015468:	df000017 	ldw	fp,0(sp)
 401546c:	dec00104 	addi	sp,sp,4
 4015470:	f800283a 	ret

04015474 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4015474:	defff404 	addi	sp,sp,-48
 4015478:	dfc00b15 	stw	ra,44(sp)
 401547c:	df000a15 	stw	fp,40(sp)
 4015480:	df000a04 	addi	fp,sp,40
 4015484:	e13ffb15 	stw	r4,-20(fp)
 4015488:	e17ffc15 	stw	r5,-16(fp)
 401548c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4015490:	00bfffc4 	movi	r2,-1
 4015494:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 4015498:	00bffb44 	movi	r2,-19
 401549c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 40154a0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40154a4:	e13ffb17 	ldw	r4,-20(fp)
 40154a8:	014100b4 	movhi	r5,1026
 40154ac:	2961a304 	addi	r5,r5,-31092
 40154b0:	4015f440 	call	4015f44 <alt_find_dev>
 40154b4:	e0bffa15 	stw	r2,-24(fp)
 40154b8:	e0bffa17 	ldw	r2,-24(fp)
 40154bc:	1004c03a 	cmpne	r2,r2,zero
 40154c0:	1000051e 	bne	r2,zero,40154d8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40154c4:	e13ffb17 	ldw	r4,-20(fp)
 40154c8:	4015fd80 	call	4015fd8 <alt_find_file>
 40154cc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 40154d0:	00800044 	movi	r2,1
 40154d4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40154d8:	e0bffa17 	ldw	r2,-24(fp)
 40154dc:	1005003a 	cmpeq	r2,r2,zero
 40154e0:	1000301e 	bne	r2,zero,40155a4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40154e4:	e13ffa17 	ldw	r4,-24(fp)
 40154e8:	40160f80 	call	40160f8 <alt_get_fd>
 40154ec:	e0bff815 	stw	r2,-32(fp)
 40154f0:	e0bff817 	ldw	r2,-32(fp)
 40154f4:	1004403a 	cmpge	r2,r2,zero
 40154f8:	1000031e 	bne	r2,zero,4015508 <open+0x94>
    {
      status = index;
 40154fc:	e0bff817 	ldw	r2,-32(fp)
 4015500:	e0bff715 	stw	r2,-36(fp)
 4015504:	00002906 	br	40155ac <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 4015508:	e0bff817 	ldw	r2,-32(fp)
 401550c:	10800324 	muli	r2,r2,12
 4015510:	1007883a 	mov	r3,r2
 4015514:	00810074 	movhi	r2,1025
 4015518:	109cef04 	addi	r2,r2,29628
 401551c:	1885883a 	add	r2,r3,r2
 4015520:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4015524:	e0fffc17 	ldw	r3,-16(fp)
 4015528:	00900034 	movhi	r2,16384
 401552c:	10bfffc4 	addi	r2,r2,-1
 4015530:	1886703a 	and	r3,r3,r2
 4015534:	e0bff917 	ldw	r2,-28(fp)
 4015538:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401553c:	e0bff617 	ldw	r2,-40(fp)
 4015540:	1004c03a 	cmpne	r2,r2,zero
 4015544:	1000061e 	bne	r2,zero,4015560 <open+0xec>
 4015548:	e13ff917 	ldw	r4,-28(fp)
 401554c:	40153980 	call	4015398 <alt_file_locked>
 4015550:	e0bff715 	stw	r2,-36(fp)
 4015554:	e0bff717 	ldw	r2,-36(fp)
 4015558:	1004803a 	cmplt	r2,r2,zero
 401555c:	1000131e 	bne	r2,zero,40155ac <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4015560:	e0bffa17 	ldw	r2,-24(fp)
 4015564:	10800317 	ldw	r2,12(r2)
 4015568:	1005003a 	cmpeq	r2,r2,zero
 401556c:	1000091e 	bne	r2,zero,4015594 <open+0x120>
 4015570:	e0bffa17 	ldw	r2,-24(fp)
 4015574:	10800317 	ldw	r2,12(r2)
 4015578:	e13ff917 	ldw	r4,-28(fp)
 401557c:	e17ffb17 	ldw	r5,-20(fp)
 4015580:	e1bffc17 	ldw	r6,-16(fp)
 4015584:	e1fffd17 	ldw	r7,-12(fp)
 4015588:	103ee83a 	callr	r2
 401558c:	e0bfff15 	stw	r2,-4(fp)
 4015590:	00000106 	br	4015598 <open+0x124>
 4015594:	e03fff15 	stw	zero,-4(fp)
 4015598:	e0bfff17 	ldw	r2,-4(fp)
 401559c:	e0bff715 	stw	r2,-36(fp)
 40155a0:	00000206 	br	40155ac <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40155a4:	00bffb44 	movi	r2,-19
 40155a8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40155ac:	e0bff717 	ldw	r2,-36(fp)
 40155b0:	1004403a 	cmpge	r2,r2,zero
 40155b4:	1000091e 	bne	r2,zero,40155dc <open+0x168>
  {
    alt_release_fd (index);  
 40155b8:	e13ff817 	ldw	r4,-32(fp)
 40155bc:	400a5400 	call	400a540 <alt_release_fd>
    ALT_ERRNO = -status;
 40155c0:	40155fc0 	call	40155fc <alt_get_errno>
 40155c4:	e0fff717 	ldw	r3,-36(fp)
 40155c8:	00c7c83a 	sub	r3,zero,r3
 40155cc:	10c00015 	stw	r3,0(r2)
    return -1;
 40155d0:	00bfffc4 	movi	r2,-1
 40155d4:	e0bffe15 	stw	r2,-8(fp)
 40155d8:	00000206 	br	40155e4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 40155dc:	e0bff817 	ldw	r2,-32(fp)
 40155e0:	e0bffe15 	stw	r2,-8(fp)
 40155e4:	e0bffe17 	ldw	r2,-8(fp)
}
 40155e8:	e037883a 	mov	sp,fp
 40155ec:	dfc00117 	ldw	ra,4(sp)
 40155f0:	df000017 	ldw	fp,0(sp)
 40155f4:	dec00204 	addi	sp,sp,8
 40155f8:	f800283a 	ret

040155fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40155fc:	defffd04 	addi	sp,sp,-12
 4015600:	dfc00215 	stw	ra,8(sp)
 4015604:	df000115 	stw	fp,4(sp)
 4015608:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 401560c:	008100b4 	movhi	r2,1026
 4015610:	10a1a604 	addi	r2,r2,-31080
 4015614:	10800017 	ldw	r2,0(r2)
 4015618:	1005003a 	cmpeq	r2,r2,zero
 401561c:	1000061e 	bne	r2,zero,4015638 <alt_get_errno+0x3c>
 4015620:	008100b4 	movhi	r2,1026
 4015624:	10a1a604 	addi	r2,r2,-31080
 4015628:	10800017 	ldw	r2,0(r2)
 401562c:	103ee83a 	callr	r2
 4015630:	e0bfff15 	stw	r2,-4(fp)
 4015634:	00000306 	br	4015644 <alt_get_errno+0x48>
 4015638:	008100b4 	movhi	r2,1026
 401563c:	10a1d504 	addi	r2,r2,-30892
 4015640:	e0bfff15 	stw	r2,-4(fp)
 4015644:	e0bfff17 	ldw	r2,-4(fp)
}
 4015648:	e037883a 	mov	sp,fp
 401564c:	dfc00117 	ldw	ra,4(sp)
 4015650:	df000017 	ldw	fp,0(sp)
 4015654:	dec00204 	addi	sp,sp,8
 4015658:	f800283a 	ret

0401565c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401565c:	defffa04 	addi	sp,sp,-24
 4015660:	df000515 	stw	fp,20(sp)
 4015664:	df000504 	addi	fp,sp,20
 4015668:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401566c:	0005303a 	rdctl	r2,status
 4015670:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015674:	e0fffd17 	ldw	r3,-12(fp)
 4015678:	00bfff84 	movi	r2,-2
 401567c:	1884703a 	and	r2,r3,r2
 4015680:	1001703a 	wrctl	status,r2
  
  return context;
 4015684:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4015688:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 401568c:	e0bfff17 	ldw	r2,-4(fp)
 4015690:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4015694:	e0bffc17 	ldw	r2,-16(fp)
 4015698:	10c00017 	ldw	r3,0(r2)
 401569c:	e0bffc17 	ldw	r2,-16(fp)
 40156a0:	10800117 	ldw	r2,4(r2)
 40156a4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 40156a8:	e0bffc17 	ldw	r2,-16(fp)
 40156ac:	10c00117 	ldw	r3,4(r2)
 40156b0:	e0bffc17 	ldw	r2,-16(fp)
 40156b4:	10800017 	ldw	r2,0(r2)
 40156b8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40156bc:	e0fffc17 	ldw	r3,-16(fp)
 40156c0:	e0bffc17 	ldw	r2,-16(fp)
 40156c4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 40156c8:	e0fffc17 	ldw	r3,-16(fp)
 40156cc:	e0bffc17 	ldw	r2,-16(fp)
 40156d0:	18800015 	stw	r2,0(r3)
 40156d4:	e0bffe17 	ldw	r2,-8(fp)
 40156d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40156dc:	e0bffb17 	ldw	r2,-20(fp)
 40156e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40156e4:	e037883a 	mov	sp,fp
 40156e8:	df000017 	ldw	fp,0(sp)
 40156ec:	dec00104 	addi	sp,sp,4
 40156f0:	f800283a 	ret

040156f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40156f4:	defffb04 	addi	sp,sp,-20
 40156f8:	dfc00415 	stw	ra,16(sp)
 40156fc:	df000315 	stw	fp,12(sp)
 4015700:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4015704:	d0a02f17 	ldw	r2,-32580(gp)
 4015708:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401570c:	d0a05917 	ldw	r2,-32412(gp)
 4015710:	10800044 	addi	r2,r2,1
 4015714:	d0a05915 	stw	r2,-32412(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4015718:	00003106 	br	40157e0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 401571c:	e0bffe17 	ldw	r2,-8(fp)
 4015720:	10800017 	ldw	r2,0(r2)
 4015724:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4015728:	e0bffe17 	ldw	r2,-8(fp)
 401572c:	10800403 	ldbu	r2,16(r2)
 4015730:	10803fcc 	andi	r2,r2,255
 4015734:	1005003a 	cmpeq	r2,r2,zero
 4015738:	1000051e 	bne	r2,zero,4015750 <alt_tick+0x5c>
 401573c:	d0a05917 	ldw	r2,-32412(gp)
 4015740:	1004c03a 	cmpne	r2,r2,zero
 4015744:	1000021e 	bne	r2,zero,4015750 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4015748:	e0bffe17 	ldw	r2,-8(fp)
 401574c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4015750:	e0bffe17 	ldw	r2,-8(fp)
 4015754:	10c00217 	ldw	r3,8(r2)
 4015758:	d0a05917 	ldw	r2,-32412(gp)
 401575c:	10c01e36 	bltu	r2,r3,40157d8 <alt_tick+0xe4>
 4015760:	e0bffe17 	ldw	r2,-8(fp)
 4015764:	10800403 	ldbu	r2,16(r2)
 4015768:	10803fcc 	andi	r2,r2,255
 401576c:	1004c03a 	cmpne	r2,r2,zero
 4015770:	1000191e 	bne	r2,zero,40157d8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4015774:	e0bffe17 	ldw	r2,-8(fp)
 4015778:	10c00317 	ldw	r3,12(r2)
 401577c:	e0bffe17 	ldw	r2,-8(fp)
 4015780:	11000517 	ldw	r4,20(r2)
 4015784:	183ee83a 	callr	r3
 4015788:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401578c:	e0bffd17 	ldw	r2,-12(fp)
 4015790:	1004c03a 	cmpne	r2,r2,zero
 4015794:	1000031e 	bne	r2,zero,40157a4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4015798:	e13ffe17 	ldw	r4,-8(fp)
 401579c:	401565c0 	call	401565c <alt_alarm_stop>
 40157a0:	00000d06 	br	40157d8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 40157a4:	e0bffe17 	ldw	r2,-8(fp)
 40157a8:	10c00217 	ldw	r3,8(r2)
 40157ac:	e0bffd17 	ldw	r2,-12(fp)
 40157b0:	1887883a 	add	r3,r3,r2
 40157b4:	e0bffe17 	ldw	r2,-8(fp)
 40157b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40157bc:	e0bffe17 	ldw	r2,-8(fp)
 40157c0:	10c00217 	ldw	r3,8(r2)
 40157c4:	d0a05917 	ldw	r2,-32412(gp)
 40157c8:	1880032e 	bgeu	r3,r2,40157d8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 40157cc:	e0fffe17 	ldw	r3,-8(fp)
 40157d0:	00800044 	movi	r2,1
 40157d4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 40157d8:	e0bfff17 	ldw	r2,-4(fp)
 40157dc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40157e0:	d0e02f04 	addi	r3,gp,-32580
 40157e4:	e0bffe17 	ldw	r2,-8(fp)
 40157e8:	10ffcc1e 	bne	r2,r3,401571c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40157ec:	400b95c0 	call	400b95c <OSTimeTick>
}
 40157f0:	e037883a 	mov	sp,fp
 40157f4:	dfc00117 	ldw	ra,4(sp)
 40157f8:	df000017 	ldw	fp,0(sp)
 40157fc:	dec00204 	addi	sp,sp,8
 4015800:	f800283a 	ret

04015804 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 4015804:	deffff04 	addi	sp,sp,-4
 4015808:	df000015 	stw	fp,0(sp)
 401580c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4015810:	000170fa 	wrctl	ienable,zero
}
 4015814:	e037883a 	mov	sp,fp
 4015818:	df000017 	ldw	fp,0(sp)
 401581c:	dec00104 	addi	sp,sp,4
 4015820:	f800283a 	ret

04015824 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 4015824:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 4015828:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 401582c:	d1205217 	ldw	r4,-32440(gp)

      stw ra,  0(sp)
 4015830:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 4015834:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 4015838:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 401583c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 4015840:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 4015844:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 4015848:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 401584c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 4015850:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 4015854:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 4015858:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 401585c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 4015860:	4015c440 	call	4015c44 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 4015864:	d1204d17 	ldw	r4,-32460(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 4015868:	d1604507 	ldb	r5,-32492(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 401586c:	d1205215 	stw	r4,-32440(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 4015870:	d1604545 	stb	r5,-32491(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 4015874:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 4015878:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 401587c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 4015880:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 4015884:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 4015888:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 401588c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 4015890:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 4015894:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 4015898:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 401589c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 40158a0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 40158a4:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 40158a8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 40158ac:	f800283a 	ret

040158b0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 40158b0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 40158b4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 40158b8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 40158bc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 40158c0:	4015c440 	call	4015c44 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 40158c4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 40158c8:	d4a04345 	stb	r18,-32499(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 40158cc:	003fe506 	br	4015864 <OSCtxSw+0x40>

040158d0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 40158d0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 40158d4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 40158d8:	10800054 	ori	r2,r2,1
      wrctl status, r2
 40158dc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 40158e0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 40158e4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 40158e8:	dec00204 	addi	sp,sp,8

      callr r2
 40158ec:	103ee83a 	callr	r2

      nop
 40158f0:	0001883a 	nop

040158f4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 40158f4:	defff704 	addi	sp,sp,-36
 40158f8:	dfc00815 	stw	ra,32(sp)
 40158fc:	df000715 	stw	fp,28(sp)
 4015900:	df000704 	addi	fp,sp,28
 4015904:	e13ffc15 	stw	r4,-16(fp)
 4015908:	e17ffd15 	stw	r5,-12(fp)
 401590c:	e1bffe15 	stw	r6,-8(fp)
 4015910:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 4015914:	e0bffe17 	ldw	r2,-8(fp)
 4015918:	1007883a 	mov	r3,r2
 401591c:	00bfff04 	movi	r2,-4
 4015920:	1884703a 	and	r2,r3,r2
 4015924:	10bf0004 	addi	r2,r2,-1024
 4015928:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 401592c:	e0bff917 	ldw	r2,-28(fp)
 4015930:	10000015 	stw	zero,0(r2)
 4015934:	e0bff917 	ldw	r2,-28(fp)
 4015938:	10c0bb04 	addi	r3,r2,748
 401593c:	e0bff917 	ldw	r2,-28(fp)
 4015940:	10c00115 	stw	r3,4(r2)
 4015944:	e0bff917 	ldw	r2,-28(fp)
 4015948:	1080bb04 	addi	r2,r2,748
 401594c:	10c01704 	addi	r3,r2,92
 4015950:	e0bff917 	ldw	r2,-28(fp)
 4015954:	10c00215 	stw	r3,8(r2)
 4015958:	e0bff917 	ldw	r2,-28(fp)
 401595c:	1080bb04 	addi	r2,r2,748
 4015960:	10c02e04 	addi	r3,r2,184
 4015964:	e0bff917 	ldw	r2,-28(fp)
 4015968:	10c00315 	stw	r3,12(r2)
 401596c:	e0bff917 	ldw	r2,-28(fp)
 4015970:	10000415 	stw	zero,16(r2)
 4015974:	e0bff917 	ldw	r2,-28(fp)
 4015978:	10800504 	addi	r2,r2,20
 401597c:	1009883a 	mov	r4,r2
 4015980:	01800644 	movi	r6,25
 4015984:	000b883a 	mov	r5,zero
 4015988:	4005ba00 	call	4005ba0 <memset>
 401598c:	e0bff917 	ldw	r2,-28(fp)
 4015990:	10000c15 	stw	zero,48(r2)
 4015994:	e0fff917 	ldw	r3,-28(fp)
 4015998:	00810074 	movhi	r2,1025
 401599c:	109adf04 	addi	r2,r2,27516
 40159a0:	18800d15 	stw	r2,52(r3)
 40159a4:	e0bff917 	ldw	r2,-28(fp)
 40159a8:	10000e15 	stw	zero,56(r2)
 40159ac:	e0bff917 	ldw	r2,-28(fp)
 40159b0:	10000f15 	stw	zero,60(r2)
 40159b4:	e0bff917 	ldw	r2,-28(fp)
 40159b8:	10001015 	stw	zero,64(r2)
 40159bc:	e0bff917 	ldw	r2,-28(fp)
 40159c0:	10001115 	stw	zero,68(r2)
 40159c4:	e0bff917 	ldw	r2,-28(fp)
 40159c8:	10001215 	stw	zero,72(r2)
 40159cc:	e0bff917 	ldw	r2,-28(fp)
 40159d0:	10001315 	stw	zero,76(r2)
 40159d4:	e0bff917 	ldw	r2,-28(fp)
 40159d8:	10001415 	stw	zero,80(r2)
 40159dc:	e0bff917 	ldw	r2,-28(fp)
 40159e0:	10001515 	stw	zero,84(r2)
 40159e4:	e0bff917 	ldw	r2,-28(fp)
 40159e8:	10001615 	stw	zero,88(r2)
 40159ec:	e0bff917 	ldw	r2,-28(fp)
 40159f0:	10001715 	stw	zero,92(r2)
 40159f4:	e0bff917 	ldw	r2,-28(fp)
 40159f8:	10001805 	stb	zero,96(r2)
 40159fc:	e0bff917 	ldw	r2,-28(fp)
 4015a00:	10801f04 	addi	r2,r2,124
 4015a04:	10000015 	stw	zero,0(r2)
 4015a08:	10000115 	stw	zero,4(r2)
 4015a0c:	10000215 	stw	zero,8(r2)
 4015a10:	10000315 	stw	zero,12(r2)
 4015a14:	10000415 	stw	zero,16(r2)
 4015a18:	10000515 	stw	zero,20(r2)
 4015a1c:	10000615 	stw	zero,24(r2)
 4015a20:	10000715 	stw	zero,28(r2)
 4015a24:	10000815 	stw	zero,32(r2)
 4015a28:	e0bff917 	ldw	r2,-28(fp)
 4015a2c:	10002815 	stw	zero,160(r2)
 4015a30:	e0fff917 	ldw	r3,-28(fp)
 4015a34:	00800044 	movi	r2,1
 4015a38:	18802915 	stw	r2,164(r3)
 4015a3c:	18002a15 	stw	zero,168(r3)
 4015a40:	e0fff917 	ldw	r3,-28(fp)
 4015a44:	008cc384 	movi	r2,13070
 4015a48:	18802b0d 	sth	r2,172(r3)
 4015a4c:	e0fff917 	ldw	r3,-28(fp)
 4015a50:	00aaf344 	movi	r2,-21555
 4015a54:	18802b8d 	sth	r2,174(r3)
 4015a58:	e0fff917 	ldw	r3,-28(fp)
 4015a5c:	00848d04 	movi	r2,4660
 4015a60:	18802c0d 	sth	r2,176(r3)
 4015a64:	e0fff917 	ldw	r3,-28(fp)
 4015a68:	00b99b44 	movi	r2,-6547
 4015a6c:	18802c8d 	sth	r2,178(r3)
 4015a70:	e0fff917 	ldw	r3,-28(fp)
 4015a74:	00b7bb04 	movi	r2,-8468
 4015a78:	18802d0d 	sth	r2,180(r3)
 4015a7c:	e0fff917 	ldw	r3,-28(fp)
 4015a80:	00800144 	movi	r2,5
 4015a84:	18802d8d 	sth	r2,182(r3)
 4015a88:	e0fff917 	ldw	r3,-28(fp)
 4015a8c:	008002c4 	movi	r2,11
 4015a90:	18802e0d 	sth	r2,184(r3)
 4015a94:	e0bff917 	ldw	r2,-28(fp)
 4015a98:	10002f15 	stw	zero,188(r2)
 4015a9c:	e0bff917 	ldw	r2,-28(fp)
 4015aa0:	10003015 	stw	zero,192(r2)
 4015aa4:	e0bff917 	ldw	r2,-28(fp)
 4015aa8:	10003115 	stw	zero,196(r2)
 4015aac:	e0bff917 	ldw	r2,-28(fp)
 4015ab0:	10003215 	stw	zero,200(r2)
 4015ab4:	e0bff917 	ldw	r2,-28(fp)
 4015ab8:	10003315 	stw	zero,204(r2)
 4015abc:	e0bff917 	ldw	r2,-28(fp)
 4015ac0:	10003415 	stw	zero,208(r2)
 4015ac4:	e0bff917 	ldw	r2,-28(fp)
 4015ac8:	10003e15 	stw	zero,248(r2)
 4015acc:	e0bff917 	ldw	r2,-28(fp)
 4015ad0:	10003f15 	stw	zero,252(r2)
 4015ad4:	e0bff917 	ldw	r2,-28(fp)
 4015ad8:	10004015 	stw	zero,256(r2)
 4015adc:	e0bff917 	ldw	r2,-28(fp)
 4015ae0:	10004115 	stw	zero,260(r2)
 4015ae4:	e0bff917 	ldw	r2,-28(fp)
 4015ae8:	10004215 	stw	zero,264(r2)
 4015aec:	e0bff917 	ldw	r2,-28(fp)
 4015af0:	10004315 	stw	zero,268(r2)
 4015af4:	e0bff917 	ldw	r2,-28(fp)
 4015af8:	10004415 	stw	zero,272(r2)
 4015afc:	e0bff917 	ldw	r2,-28(fp)
 4015b00:	10004515 	stw	zero,276(r2)
 4015b04:	e0bff917 	ldw	r2,-28(fp)
 4015b08:	10004615 	stw	zero,280(r2)
 4015b0c:	e0bff917 	ldw	r2,-28(fp)
 4015b10:	10004715 	stw	zero,284(r2)
 4015b14:	e0bff917 	ldw	r2,-28(fp)
 4015b18:	10003505 	stb	zero,212(r2)
 4015b1c:	e0bff917 	ldw	r2,-28(fp)
 4015b20:	10003705 	stb	zero,220(r2)
 4015b24:	e0bff917 	ldw	r2,-28(fp)
 4015b28:	10003d15 	stw	zero,244(r2)
 4015b2c:	e0bff917 	ldw	r2,-28(fp)
 4015b30:	10005215 	stw	zero,328(r2)
 4015b34:	e0bff917 	ldw	r2,-28(fp)
 4015b38:	10005315 	stw	zero,332(r2)
 4015b3c:	e0bff917 	ldw	r2,-28(fp)
 4015b40:	10005415 	stw	zero,336(r2)
 4015b44:	e0bff917 	ldw	r2,-28(fp)
 4015b48:	10005515 	stw	zero,340(r2)
 4015b4c:	e0bff917 	ldw	r2,-28(fp)
 4015b50:	1000b515 	stw	zero,724(r2)
 4015b54:	e0bff917 	ldw	r2,-28(fp)
 4015b58:	10007515 	stw	zero,468(r2)
 4015b5c:	e0bff917 	ldw	r2,-28(fp)
 4015b60:	1000b715 	stw	zero,732(r2)
 4015b64:	e0bff917 	ldw	r2,-28(fp)
 4015b68:	1000b815 	stw	zero,736(r2)
 4015b6c:	e0bff917 	ldw	r2,-28(fp)
 4015b70:	1000b915 	stw	zero,740(r2)
 4015b74:	e0bff917 	ldw	r2,-28(fp)
 4015b78:	1000ba15 	stw	zero,744(r2)
 4015b7c:	e0bff917 	ldw	r2,-28(fp)
 4015b80:	1080bb04 	addi	r2,r2,748
 4015b84:	1009883a 	mov	r4,r2
 4015b88:	01804504 	movi	r6,276
 4015b8c:	000b883a 	mov	r5,zero
 4015b90:	4005ba00 	call	4005ba0 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 4015b94:	e0bff917 	ldw	r2,-28(fp)
 4015b98:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 4015b9c:	e0bffb17 	ldw	r2,-20(fp)
 4015ba0:	10bff304 	addi	r2,r2,-52
 4015ba4:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 4015ba8:	e0bffa17 	ldw	r2,-24(fp)
 4015bac:	10c00c04 	addi	r3,r2,48
 4015bb0:	e0bffc17 	ldw	r2,-16(fp)
 4015bb4:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 4015bb8:	e0bffa17 	ldw	r2,-24(fp)
 4015bbc:	10c00b04 	addi	r3,r2,44
 4015bc0:	e0bffd17 	ldw	r2,-12(fp)
 4015bc4:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 4015bc8:	e0bffa17 	ldw	r2,-24(fp)
 4015bcc:	10c00a04 	addi	r3,r2,40
 4015bd0:	e0bff917 	ldw	r2,-28(fp)
 4015bd4:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 4015bd8:	00810074 	movhi	r2,1025
 4015bdc:	10963404 	addi	r2,r2,22736
 4015be0:	10c00104 	addi	r3,r2,4
 4015be4:	e0bffa17 	ldw	r2,-24(fp)
 4015be8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 4015bec:	e0bffa17 	ldw	r2,-24(fp)
}
 4015bf0:	e037883a 	mov	sp,fp
 4015bf4:	dfc00117 	ldw	ra,4(sp)
 4015bf8:	df000017 	ldw	fp,0(sp)
 4015bfc:	dec00204 	addi	sp,sp,8
 4015c00:	f800283a 	ret

04015c04 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 4015c04:	defffe04 	addi	sp,sp,-8
 4015c08:	df000115 	stw	fp,4(sp)
 4015c0c:	df000104 	addi	fp,sp,4
 4015c10:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 4015c14:	e037883a 	mov	sp,fp
 4015c18:	df000017 	ldw	fp,0(sp)
 4015c1c:	dec00104 	addi	sp,sp,4
 4015c20:	f800283a 	ret

04015c24 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 4015c24:	defffe04 	addi	sp,sp,-8
 4015c28:	df000115 	stw	fp,4(sp)
 4015c2c:	df000104 	addi	fp,sp,4
 4015c30:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 4015c34:	e037883a 	mov	sp,fp
 4015c38:	df000017 	ldw	fp,0(sp)
 4015c3c:	dec00104 	addi	sp,sp,4
 4015c40:	f800283a 	ret

04015c44 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 4015c44:	deffff04 	addi	sp,sp,-4
 4015c48:	df000015 	stw	fp,0(sp)
 4015c4c:	d839883a 	mov	fp,sp
}
 4015c50:	e037883a 	mov	sp,fp
 4015c54:	df000017 	ldw	fp,0(sp)
 4015c58:	dec00104 	addi	sp,sp,4
 4015c5c:	f800283a 	ret

04015c60 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 4015c60:	deffff04 	addi	sp,sp,-4
 4015c64:	df000015 	stw	fp,0(sp)
 4015c68:	d839883a 	mov	fp,sp
}
 4015c6c:	e037883a 	mov	sp,fp
 4015c70:	df000017 	ldw	fp,0(sp)
 4015c74:	dec00104 	addi	sp,sp,4
 4015c78:	f800283a 	ret

04015c7c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 4015c7c:	deffff04 	addi	sp,sp,-4
 4015c80:	df000015 	stw	fp,0(sp)
 4015c84:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 4015c88:	e037883a 	mov	sp,fp
 4015c8c:	df000017 	ldw	fp,0(sp)
 4015c90:	dec00104 	addi	sp,sp,4
 4015c94:	f800283a 	ret

04015c98 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 4015c98:	deffff04 	addi	sp,sp,-4
 4015c9c:	df000015 	stw	fp,0(sp)
 4015ca0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 4015ca4:	e037883a 	mov	sp,fp
 4015ca8:	df000017 	ldw	fp,0(sp)
 4015cac:	dec00104 	addi	sp,sp,4
 4015cb0:	f800283a 	ret

04015cb4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 4015cb4:	deffff04 	addi	sp,sp,-4
 4015cb8:	df000015 	stw	fp,0(sp)
 4015cbc:	d839883a 	mov	fp,sp
}
 4015cc0:	e037883a 	mov	sp,fp
 4015cc4:	df000017 	ldw	fp,0(sp)
 4015cc8:	dec00104 	addi	sp,sp,4
 4015ccc:	f800283a 	ret

04015cd0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 4015cd0:	deffff04 	addi	sp,sp,-4
 4015cd4:	df000015 	stw	fp,0(sp)
 4015cd8:	d839883a 	mov	fp,sp
}
 4015cdc:	e037883a 	mov	sp,fp
 4015ce0:	df000017 	ldw	fp,0(sp)
 4015ce4:	dec00104 	addi	sp,sp,4
 4015ce8:	f800283a 	ret

04015cec <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 4015cec:	defffe04 	addi	sp,sp,-8
 4015cf0:	df000115 	stw	fp,4(sp)
 4015cf4:	df000104 	addi	fp,sp,4
 4015cf8:	e13fff15 	stw	r4,-4(fp)
}
 4015cfc:	e037883a 	mov	sp,fp
 4015d00:	df000017 	ldw	fp,0(sp)
 4015d04:	dec00104 	addi	sp,sp,4
 4015d08:	f800283a 	ret

04015d0c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4015d0c:	defff404 	addi	sp,sp,-48
 4015d10:	df000b15 	stw	fp,44(sp)
 4015d14:	df000b04 	addi	fp,sp,44
 4015d18:	e13ffc15 	stw	r4,-16(fp)
 4015d1c:	e17ffd15 	stw	r5,-12(fp)
 4015d20:	e1bffe15 	stw	r6,-8(fp)
 4015d24:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 4015d28:	e0fffe17 	ldw	r3,-8(fp)
 4015d2c:	e0bfff17 	ldw	r2,-4(fp)
 4015d30:	10c5883a 	add	r2,r2,r3
 4015d34:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 4015d38:	e0c00117 	ldw	r3,4(fp)
 4015d3c:	e0800217 	ldw	r2,8(fp)
 4015d40:	10c5883a 	add	r2,r2,r3
 4015d44:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 4015d48:	e0800117 	ldw	r2,4(fp)
 4015d4c:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 4015d50:	e0bffe17 	ldw	r2,-8(fp)
 4015d54:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4015d58:	00800044 	movi	r2,1
 4015d5c:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4015d60:	e0bffc17 	ldw	r2,-16(fp)
 4015d64:	11000504 	addi	r4,r2,20
 4015d68:	e0fffd17 	ldw	r3,-12(fp)
 4015d6c:	00800044 	movi	r2,1
 4015d70:	10c6983a 	sll	r3,r2,r3
 4015d74:	2005883a 	mov	r2,r4
 4015d78:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4015d7c:	e0800317 	ldw	r2,12(fp)
 4015d80:	1080008c 	andi	r2,r2,2
 4015d84:	1004c03a 	cmpne	r2,r2,zero
 4015d88:	1000051e 	bne	r2,zero,4015da0 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4015d8c:	e0bffc17 	ldw	r2,-16(fp)
 4015d90:	10800304 	addi	r2,r2,12
 4015d94:	1007883a 	mov	r3,r2
 4015d98:	00810004 	movi	r2,1024
 4015d9c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4015da0:	e0bffc17 	ldw	r2,-16(fp)
 4015da4:	10800037 	ldwio	r2,0(r2)
 4015da8:	00000006 	br	4015dac <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4015dac:	e0bffc17 	ldw	r2,-16(fp)
 4015db0:	10800204 	addi	r2,r2,8
 4015db4:	10800037 	ldwio	r2,0(r2)
 4015db8:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4015dbc:	e0bff717 	ldw	r2,-36(fp)
 4015dc0:	1080100c 	andi	r2,r2,64
 4015dc4:	1005003a 	cmpeq	r2,r2,zero
 4015dc8:	1000031e 	bne	r2,zero,4015dd8 <alt_avalon_spi_command+0xcc>
 4015dcc:	e0bff617 	ldw	r2,-40(fp)
 4015dd0:	1004c03a 	cmpne	r2,r2,zero
 4015dd4:	1000041e 	bne	r2,zero,4015de8 <alt_avalon_spi_command+0xdc>
 4015dd8:	e0bff717 	ldw	r2,-36(fp)
 4015ddc:	1080200c 	andi	r2,r2,128
 4015de0:	1005003a 	cmpeq	r2,r2,zero
 4015de4:	103ff11e 	bne	r2,zero,4015dac <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4015de8:	e0bff717 	ldw	r2,-36(fp)
 4015dec:	1080100c 	andi	r2,r2,64
 4015df0:	1005003a 	cmpeq	r2,r2,zero
 4015df4:	1000201e 	bne	r2,zero,4015e78 <alt_avalon_spi_command+0x16c>
 4015df8:	e0bff617 	ldw	r2,-40(fp)
 4015dfc:	10800050 	cmplti	r2,r2,1
 4015e00:	10001d1e 	bne	r2,zero,4015e78 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 4015e04:	e0bff617 	ldw	r2,-40(fp)
 4015e08:	10bfffc4 	addi	r2,r2,-1
 4015e0c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 4015e10:	e0ffff17 	ldw	r3,-4(fp)
 4015e14:	e0bffb17 	ldw	r2,-20(fp)
 4015e18:	18800b2e 	bgeu	r3,r2,4015e48 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4015e1c:	e0bffc17 	ldw	r2,-16(fp)
 4015e20:	11000104 	addi	r4,r2,4
 4015e24:	e0bfff17 	ldw	r2,-4(fp)
 4015e28:	10800003 	ldbu	r2,0(r2)
 4015e2c:	10c03fcc 	andi	r3,r2,255
 4015e30:	e0bfff17 	ldw	r2,-4(fp)
 4015e34:	10800044 	addi	r2,r2,1
 4015e38:	e0bfff15 	stw	r2,-4(fp)
 4015e3c:	2005883a 	mov	r2,r4
 4015e40:	10c00035 	stwio	r3,0(r2)
 4015e44:	00000c06 	br	4015e78 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 4015e48:	e0bff917 	ldw	r2,-28(fp)
 4015e4c:	1005003a 	cmpeq	r2,r2,zero
 4015e50:	1000071e 	bne	r2,zero,4015e70 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 4015e54:	e0bff917 	ldw	r2,-28(fp)
 4015e58:	10bfffc4 	addi	r2,r2,-1
 4015e5c:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4015e60:	e0bffc17 	ldw	r2,-16(fp)
 4015e64:	10800104 	addi	r2,r2,4
 4015e68:	10000035 	stwio	zero,0(r2)
 4015e6c:	00000206 	br	4015e78 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 4015e70:	00bf0004 	movi	r2,-1024
 4015e74:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4015e78:	e0bff717 	ldw	r2,-36(fp)
 4015e7c:	1080200c 	andi	r2,r2,128
 4015e80:	1005003a 	cmpeq	r2,r2,zero
 4015e84:	103fc91e 	bne	r2,zero,4015dac <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4015e88:	e0bffc17 	ldw	r2,-16(fp)
 4015e8c:	10800037 	ldwio	r2,0(r2)
 4015e90:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 4015e94:	e0bff817 	ldw	r2,-32(fp)
 4015e98:	1005003a 	cmpeq	r2,r2,zero
 4015e9c:	1000041e 	bne	r2,zero,4015eb0 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 4015ea0:	e0bff817 	ldw	r2,-32(fp)
 4015ea4:	10bfffc4 	addi	r2,r2,-1
 4015ea8:	e0bff815 	stw	r2,-32(fp)
 4015eac:	00000706 	br	4015ecc <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 4015eb0:	e0bff517 	ldw	r2,-44(fp)
 4015eb4:	1007883a 	mov	r3,r2
 4015eb8:	e0800217 	ldw	r2,8(fp)
 4015ebc:	10c00005 	stb	r3,0(r2)
 4015ec0:	e0800217 	ldw	r2,8(fp)
 4015ec4:	10800044 	addi	r2,r2,1
 4015ec8:	e0800215 	stw	r2,8(fp)
      credits++;
 4015ecc:	e0bff617 	ldw	r2,-40(fp)
 4015ed0:	10800044 	addi	r2,r2,1
 4015ed4:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 4015ed8:	e0bff817 	ldw	r2,-32(fp)
 4015edc:	1004c03a 	cmpne	r2,r2,zero
 4015ee0:	103fb21e 	bne	r2,zero,4015dac <alt_avalon_spi_command+0xa0>
 4015ee4:	e0c00217 	ldw	r3,8(fp)
 4015ee8:	e0bffa17 	ldw	r2,-24(fp)
 4015eec:	18800126 	beq	r3,r2,4015ef4 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 4015ef0:	003fae06 	br	4015dac <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4015ef4:	e0bffc17 	ldw	r2,-16(fp)
 4015ef8:	10800204 	addi	r2,r2,8
 4015efc:	10800037 	ldwio	r2,0(r2)
 4015f00:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4015f04:	e0bff717 	ldw	r2,-36(fp)
 4015f08:	1080080c 	andi	r2,r2,32
 4015f0c:	1005003a 	cmpeq	r2,r2,zero
 4015f10:	103ff81e 	bne	r2,zero,4015ef4 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4015f14:	e0800317 	ldw	r2,12(fp)
 4015f18:	1080004c 	andi	r2,r2,1
 4015f1c:	1004c03a 	cmpne	r2,r2,zero
 4015f20:	1000031e 	bne	r2,zero,4015f30 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4015f24:	e0bffc17 	ldw	r2,-16(fp)
 4015f28:	10800304 	addi	r2,r2,12
 4015f2c:	10000035 	stwio	zero,0(r2)

  return read_length;
 4015f30:	e0800117 	ldw	r2,4(fp)
}
 4015f34:	e037883a 	mov	sp,fp
 4015f38:	df000017 	ldw	fp,0(sp)
 4015f3c:	dec00104 	addi	sp,sp,4
 4015f40:	f800283a 	ret

04015f44 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4015f44:	defff904 	addi	sp,sp,-28
 4015f48:	dfc00615 	stw	ra,24(sp)
 4015f4c:	df000515 	stw	fp,20(sp)
 4015f50:	df000504 	addi	fp,sp,20
 4015f54:	e13ffd15 	stw	r4,-12(fp)
 4015f58:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4015f5c:	e0bffe17 	ldw	r2,-8(fp)
 4015f60:	10800017 	ldw	r2,0(r2)
 4015f64:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4015f68:	e13ffd17 	ldw	r4,-12(fp)
 4015f6c:	40007b40 	call	40007b4 <strlen>
 4015f70:	10800044 	addi	r2,r2,1
 4015f74:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4015f78:	00000d06 	br	4015fb0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4015f7c:	e0bffc17 	ldw	r2,-16(fp)
 4015f80:	11000217 	ldw	r4,8(r2)
 4015f84:	e1bffb17 	ldw	r6,-20(fp)
 4015f88:	e17ffd17 	ldw	r5,-12(fp)
 4015f8c:	40162380 	call	4016238 <memcmp>
 4015f90:	1004c03a 	cmpne	r2,r2,zero
 4015f94:	1000031e 	bne	r2,zero,4015fa4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4015f98:	e0bffc17 	ldw	r2,-16(fp)
 4015f9c:	e0bfff15 	stw	r2,-4(fp)
 4015fa0:	00000706 	br	4015fc0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4015fa4:	e0bffc17 	ldw	r2,-16(fp)
 4015fa8:	10800017 	ldw	r2,0(r2)
 4015fac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4015fb0:	e0fffe17 	ldw	r3,-8(fp)
 4015fb4:	e0bffc17 	ldw	r2,-16(fp)
 4015fb8:	10fff01e 	bne	r2,r3,4015f7c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4015fbc:	e03fff15 	stw	zero,-4(fp)
 4015fc0:	e0bfff17 	ldw	r2,-4(fp)
}
 4015fc4:	e037883a 	mov	sp,fp
 4015fc8:	dfc00117 	ldw	ra,4(sp)
 4015fcc:	df000017 	ldw	fp,0(sp)
 4015fd0:	dec00204 	addi	sp,sp,8
 4015fd4:	f800283a 	ret

04015fd8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4015fd8:	defffa04 	addi	sp,sp,-24
 4015fdc:	dfc00515 	stw	ra,20(sp)
 4015fe0:	df000415 	stw	fp,16(sp)
 4015fe4:	df000404 	addi	fp,sp,16
 4015fe8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4015fec:	008100b4 	movhi	r2,1026
 4015ff0:	10a1a104 	addi	r2,r2,-31100
 4015ff4:	10800017 	ldw	r2,0(r2)
 4015ff8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4015ffc:	00003306 	br	40160cc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 4016000:	e0bffd17 	ldw	r2,-12(fp)
 4016004:	11000217 	ldw	r4,8(r2)
 4016008:	40007b40 	call	40007b4 <strlen>
 401600c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 4016010:	e0bffd17 	ldw	r2,-12(fp)
 4016014:	10c00217 	ldw	r3,8(r2)
 4016018:	e0bffc17 	ldw	r2,-16(fp)
 401601c:	1885883a 	add	r2,r3,r2
 4016020:	10bfffc4 	addi	r2,r2,-1
 4016024:	10800003 	ldbu	r2,0(r2)
 4016028:	10803fcc 	andi	r2,r2,255
 401602c:	1080201c 	xori	r2,r2,128
 4016030:	10bfe004 	addi	r2,r2,-128
 4016034:	10800bd8 	cmpnei	r2,r2,47
 4016038:	1000031e 	bne	r2,zero,4016048 <alt_find_file+0x70>
    {
      len -= 1;
 401603c:	e0bffc17 	ldw	r2,-16(fp)
 4016040:	10bfffc4 	addi	r2,r2,-1
 4016044:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4016048:	e0bffc17 	ldw	r2,-16(fp)
 401604c:	1007883a 	mov	r3,r2
 4016050:	e0bffe17 	ldw	r2,-8(fp)
 4016054:	1885883a 	add	r2,r3,r2
 4016058:	10800003 	ldbu	r2,0(r2)
 401605c:	10803fcc 	andi	r2,r2,255
 4016060:	1080201c 	xori	r2,r2,128
 4016064:	10bfe004 	addi	r2,r2,-128
 4016068:	10800be0 	cmpeqi	r2,r2,47
 401606c:	10000a1e 	bne	r2,zero,4016098 <alt_find_file+0xc0>
 4016070:	e0bffc17 	ldw	r2,-16(fp)
 4016074:	1007883a 	mov	r3,r2
 4016078:	e0bffe17 	ldw	r2,-8(fp)
 401607c:	1885883a 	add	r2,r3,r2
 4016080:	10800003 	ldbu	r2,0(r2)
 4016084:	10803fcc 	andi	r2,r2,255
 4016088:	1080201c 	xori	r2,r2,128
 401608c:	10bfe004 	addi	r2,r2,-128
 4016090:	1004c03a 	cmpne	r2,r2,zero
 4016094:	10000a1e 	bne	r2,zero,40160c0 <alt_find_file+0xe8>
 4016098:	e0bffd17 	ldw	r2,-12(fp)
 401609c:	11000217 	ldw	r4,8(r2)
 40160a0:	e1bffc17 	ldw	r6,-16(fp)
 40160a4:	e17ffe17 	ldw	r5,-8(fp)
 40160a8:	40162380 	call	4016238 <memcmp>
 40160ac:	1004c03a 	cmpne	r2,r2,zero
 40160b0:	1000031e 	bne	r2,zero,40160c0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40160b4:	e0bffd17 	ldw	r2,-12(fp)
 40160b8:	e0bfff15 	stw	r2,-4(fp)
 40160bc:	00000806 	br	40160e0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 40160c0:	e0bffd17 	ldw	r2,-12(fp)
 40160c4:	10800017 	ldw	r2,0(r2)
 40160c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40160cc:	00c100b4 	movhi	r3,1026
 40160d0:	18e1a104 	addi	r3,r3,-31100
 40160d4:	e0bffd17 	ldw	r2,-12(fp)
 40160d8:	10ffc91e 	bne	r2,r3,4016000 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40160dc:	e03fff15 	stw	zero,-4(fp)
 40160e0:	e0bfff17 	ldw	r2,-4(fp)
}
 40160e4:	e037883a 	mov	sp,fp
 40160e8:	dfc00117 	ldw	ra,4(sp)
 40160ec:	df000017 	ldw	fp,0(sp)
 40160f0:	dec00204 	addi	sp,sp,8
 40160f4:	f800283a 	ret

040160f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40160f8:	defff804 	addi	sp,sp,-32
 40160fc:	dfc00715 	stw	ra,28(sp)
 4016100:	df000615 	stw	fp,24(sp)
 4016104:	df000604 	addi	fp,sp,24
 4016108:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 401610c:	00bffa04 	movi	r2,-24
 4016110:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 4016114:	008100b4 	movhi	r2,1026
 4016118:	10a1d604 	addi	r2,r2,-30888
 401611c:	10800017 	ldw	r2,0(r2)
 4016120:	e0bffa15 	stw	r2,-24(fp)
 4016124:	e03ffb0d 	sth	zero,-20(fp)
 4016128:	e17ffb0b 	ldhu	r5,-20(fp)
 401612c:	e1bffe04 	addi	r6,fp,-8
 4016130:	e13ffa17 	ldw	r4,-24(fp)
 4016134:	40107e00 	call	40107e0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4016138:	e03ffd15 	stw	zero,-12(fp)
 401613c:	00001e06 	br	40161b8 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 4016140:	e0bffd17 	ldw	r2,-12(fp)
 4016144:	00c10074 	movhi	r3,1025
 4016148:	18dcef04 	addi	r3,r3,29628
 401614c:	10800324 	muli	r2,r2,12
 4016150:	10c5883a 	add	r2,r2,r3
 4016154:	10800017 	ldw	r2,0(r2)
 4016158:	1004c03a 	cmpne	r2,r2,zero
 401615c:	1000131e 	bne	r2,zero,40161ac <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 4016160:	e0bffd17 	ldw	r2,-12(fp)
 4016164:	00c10074 	movhi	r3,1025
 4016168:	18dcef04 	addi	r3,r3,29628
 401616c:	10800324 	muli	r2,r2,12
 4016170:	10c7883a 	add	r3,r2,r3
 4016174:	e0bfff17 	ldw	r2,-4(fp)
 4016178:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 401617c:	008100b4 	movhi	r2,1026
 4016180:	10a1a504 	addi	r2,r2,-31084
 4016184:	10c00017 	ldw	r3,0(r2)
 4016188:	e0bffd17 	ldw	r2,-12(fp)
 401618c:	1880040e 	bge	r3,r2,40161a0 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 4016190:	00c100b4 	movhi	r3,1026
 4016194:	18e1a504 	addi	r3,r3,-31084
 4016198:	e0bffd17 	ldw	r2,-12(fp)
 401619c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 40161a0:	e0bffd17 	ldw	r2,-12(fp)
 40161a4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 40161a8:	00000606 	br	40161c4 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40161ac:	e0bffd17 	ldw	r2,-12(fp)
 40161b0:	10800044 	addi	r2,r2,1
 40161b4:	e0bffd15 	stw	r2,-12(fp)
 40161b8:	e0bffd17 	ldw	r2,-12(fp)
 40161bc:	10800810 	cmplti	r2,r2,32
 40161c0:	103fdf1e 	bne	r2,zero,4016140 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 40161c4:	008100b4 	movhi	r2,1026
 40161c8:	10a1d604 	addi	r2,r2,-30888
 40161cc:	11000017 	ldw	r4,0(r2)
 40161d0:	4010bd80 	call	4010bd8 <OSSemPost>

  return rc;
 40161d4:	e0bffc17 	ldw	r2,-16(fp)
}
 40161d8:	e037883a 	mov	sp,fp
 40161dc:	dfc00117 	ldw	ra,4(sp)
 40161e0:	df000017 	ldw	fp,0(sp)
 40161e4:	dec00204 	addi	sp,sp,8
 40161e8:	f800283a 	ret

040161ec <atexit>:
 40161ec:	200b883a 	mov	r5,r4
 40161f0:	000d883a 	mov	r6,zero
 40161f4:	0009883a 	mov	r4,zero
 40161f8:	000f883a 	mov	r7,zero
 40161fc:	40162ac1 	jmpi	40162ac <__register_exitproc>

04016200 <exit>:
 4016200:	defffe04 	addi	sp,sp,-8
 4016204:	000b883a 	mov	r5,zero
 4016208:	dc000015 	stw	r16,0(sp)
 401620c:	dfc00115 	stw	ra,4(sp)
 4016210:	2021883a 	mov	r16,r4
 4016214:	40163e40 	call	40163e4 <__call_exitprocs>
 4016218:	008100b4 	movhi	r2,1026
 401621c:	10a19c04 	addi	r2,r2,-31120
 4016220:	11000017 	ldw	r4,0(r2)
 4016224:	20800f17 	ldw	r2,60(r4)
 4016228:	10000126 	beq	r2,zero,4016230 <exit+0x30>
 401622c:	103ee83a 	callr	r2
 4016230:	8009883a 	mov	r4,r16
 4016234:	40165d40 	call	40165d4 <_exit>

04016238 <memcmp>:
 4016238:	00c000c4 	movi	r3,3
 401623c:	1980032e 	bgeu	r3,r6,401624c <memcmp+0x14>
 4016240:	2144b03a 	or	r2,r4,r5
 4016244:	10c4703a 	and	r2,r2,r3
 4016248:	10000f26 	beq	r2,zero,4016288 <memcmp+0x50>
 401624c:	31ffffc4 	addi	r7,r6,-1
 4016250:	3000061e 	bne	r6,zero,401626c <memcmp+0x34>
 4016254:	00000a06 	br	4016280 <memcmp+0x48>
 4016258:	39ffffc4 	addi	r7,r7,-1
 401625c:	00bfffc4 	movi	r2,-1
 4016260:	21000044 	addi	r4,r4,1
 4016264:	29400044 	addi	r5,r5,1
 4016268:	38800526 	beq	r7,r2,4016280 <memcmp+0x48>
 401626c:	20c00003 	ldbu	r3,0(r4)
 4016270:	28800003 	ldbu	r2,0(r5)
 4016274:	18bff826 	beq	r3,r2,4016258 <memcmp+0x20>
 4016278:	1885c83a 	sub	r2,r3,r2
 401627c:	f800283a 	ret
 4016280:	0005883a 	mov	r2,zero
 4016284:	f800283a 	ret
 4016288:	180f883a 	mov	r7,r3
 401628c:	20c00017 	ldw	r3,0(r4)
 4016290:	28800017 	ldw	r2,0(r5)
 4016294:	18bfed1e 	bne	r3,r2,401624c <memcmp+0x14>
 4016298:	31bfff04 	addi	r6,r6,-4
 401629c:	21000104 	addi	r4,r4,4
 40162a0:	29400104 	addi	r5,r5,4
 40162a4:	39bff936 	bltu	r7,r6,401628c <memcmp+0x54>
 40162a8:	003fe806 	br	401624c <memcmp+0x14>

040162ac <__register_exitproc>:
 40162ac:	defffa04 	addi	sp,sp,-24
 40162b0:	008100b4 	movhi	r2,1026
 40162b4:	10a19c04 	addi	r2,r2,-31120
 40162b8:	dc000015 	stw	r16,0(sp)
 40162bc:	14000017 	ldw	r16,0(r2)
 40162c0:	dd000415 	stw	r20,16(sp)
 40162c4:	2829883a 	mov	r20,r5
 40162c8:	81405217 	ldw	r5,328(r16)
 40162cc:	dcc00315 	stw	r19,12(sp)
 40162d0:	dc800215 	stw	r18,8(sp)
 40162d4:	dc400115 	stw	r17,4(sp)
 40162d8:	dfc00515 	stw	ra,20(sp)
 40162dc:	2023883a 	mov	r17,r4
 40162e0:	3027883a 	mov	r19,r6
 40162e4:	3825883a 	mov	r18,r7
 40162e8:	28002526 	beq	r5,zero,4016380 <__register_exitproc+0xd4>
 40162ec:	29000117 	ldw	r4,4(r5)
 40162f0:	008007c4 	movi	r2,31
 40162f4:	11002716 	blt	r2,r4,4016394 <__register_exitproc+0xe8>
 40162f8:	8800101e 	bne	r17,zero,401633c <__register_exitproc+0x90>
 40162fc:	2105883a 	add	r2,r4,r4
 4016300:	1085883a 	add	r2,r2,r2
 4016304:	20c00044 	addi	r3,r4,1
 4016308:	1145883a 	add	r2,r2,r5
 401630c:	0009883a 	mov	r4,zero
 4016310:	15000215 	stw	r20,8(r2)
 4016314:	28c00115 	stw	r3,4(r5)
 4016318:	2005883a 	mov	r2,r4
 401631c:	dfc00517 	ldw	ra,20(sp)
 4016320:	dd000417 	ldw	r20,16(sp)
 4016324:	dcc00317 	ldw	r19,12(sp)
 4016328:	dc800217 	ldw	r18,8(sp)
 401632c:	dc400117 	ldw	r17,4(sp)
 4016330:	dc000017 	ldw	r16,0(sp)
 4016334:	dec00604 	addi	sp,sp,24
 4016338:	f800283a 	ret
 401633c:	29802204 	addi	r6,r5,136
 4016340:	00800044 	movi	r2,1
 4016344:	110e983a 	sll	r7,r2,r4
 4016348:	30c04017 	ldw	r3,256(r6)
 401634c:	2105883a 	add	r2,r4,r4
 4016350:	1085883a 	add	r2,r2,r2
 4016354:	1185883a 	add	r2,r2,r6
 4016358:	19c6b03a 	or	r3,r3,r7
 401635c:	14802015 	stw	r18,128(r2)
 4016360:	14c00015 	stw	r19,0(r2)
 4016364:	00800084 	movi	r2,2
 4016368:	30c04015 	stw	r3,256(r6)
 401636c:	88bfe31e 	bne	r17,r2,40162fc <__register_exitproc+0x50>
 4016370:	30804117 	ldw	r2,260(r6)
 4016374:	11c4b03a 	or	r2,r2,r7
 4016378:	30804115 	stw	r2,260(r6)
 401637c:	003fdf06 	br	40162fc <__register_exitproc+0x50>
 4016380:	008100b4 	movhi	r2,1026
 4016384:	10943004 	addi	r2,r2,20672
 4016388:	100b883a 	mov	r5,r2
 401638c:	80805215 	stw	r2,328(r16)
 4016390:	003fd606 	br	40162ec <__register_exitproc+0x40>
 4016394:	00800034 	movhi	r2,0
 4016398:	10800004 	addi	r2,r2,0
 401639c:	1000021e 	bne	r2,zero,40163a8 <__register_exitproc+0xfc>
 40163a0:	013fffc4 	movi	r4,-1
 40163a4:	003fdc06 	br	4016318 <__register_exitproc+0x6c>
 40163a8:	01006404 	movi	r4,400
 40163ac:	103ee83a 	callr	r2
 40163b0:	1007883a 	mov	r3,r2
 40163b4:	103ffa26 	beq	r2,zero,40163a0 <__register_exitproc+0xf4>
 40163b8:	80805217 	ldw	r2,328(r16)
 40163bc:	180b883a 	mov	r5,r3
 40163c0:	18000115 	stw	zero,4(r3)
 40163c4:	18800015 	stw	r2,0(r3)
 40163c8:	80c05215 	stw	r3,328(r16)
 40163cc:	18006215 	stw	zero,392(r3)
 40163d0:	18006315 	stw	zero,396(r3)
 40163d4:	0009883a 	mov	r4,zero
 40163d8:	883fc826 	beq	r17,zero,40162fc <__register_exitproc+0x50>
 40163dc:	003fd706 	br	401633c <__register_exitproc+0x90>

040163e0 <register_fini>:
 40163e0:	f800283a 	ret

040163e4 <__call_exitprocs>:
 40163e4:	008100b4 	movhi	r2,1026
 40163e8:	10a19c04 	addi	r2,r2,-31120
 40163ec:	10800017 	ldw	r2,0(r2)
 40163f0:	defff304 	addi	sp,sp,-52
 40163f4:	df000b15 	stw	fp,44(sp)
 40163f8:	d8800115 	stw	r2,4(sp)
 40163fc:	00800034 	movhi	r2,0
 4016400:	10800004 	addi	r2,r2,0
 4016404:	1005003a 	cmpeq	r2,r2,zero
 4016408:	d8800215 	stw	r2,8(sp)
 401640c:	d8800117 	ldw	r2,4(sp)
 4016410:	dd400815 	stw	r21,32(sp)
 4016414:	dd000715 	stw	r20,28(sp)
 4016418:	10805204 	addi	r2,r2,328
 401641c:	dfc00c15 	stw	ra,48(sp)
 4016420:	ddc00a15 	stw	r23,40(sp)
 4016424:	dd800915 	stw	r22,36(sp)
 4016428:	dcc00615 	stw	r19,24(sp)
 401642c:	dc800515 	stw	r18,20(sp)
 4016430:	dc400415 	stw	r17,16(sp)
 4016434:	dc000315 	stw	r16,12(sp)
 4016438:	282b883a 	mov	r21,r5
 401643c:	2039883a 	mov	fp,r4
 4016440:	d8800015 	stw	r2,0(sp)
 4016444:	2829003a 	cmpeq	r20,r5,zero
 4016448:	d8800117 	ldw	r2,4(sp)
 401644c:	14405217 	ldw	r17,328(r2)
 4016450:	88001026 	beq	r17,zero,4016494 <__call_exitprocs+0xb0>
 4016454:	ddc00017 	ldw	r23,0(sp)
 4016458:	88800117 	ldw	r2,4(r17)
 401645c:	8c802204 	addi	r18,r17,136
 4016460:	143fffc4 	addi	r16,r2,-1
 4016464:	80000916 	blt	r16,zero,401648c <__call_exitprocs+0xa8>
 4016468:	05bfffc4 	movi	r22,-1
 401646c:	a000151e 	bne	r20,zero,40164c4 <__call_exitprocs+0xe0>
 4016470:	8409883a 	add	r4,r16,r16
 4016474:	2105883a 	add	r2,r4,r4
 4016478:	1485883a 	add	r2,r2,r18
 401647c:	10c02017 	ldw	r3,128(r2)
 4016480:	a8c01126 	beq	r21,r3,40164c8 <__call_exitprocs+0xe4>
 4016484:	843fffc4 	addi	r16,r16,-1
 4016488:	85bff81e 	bne	r16,r22,401646c <__call_exitprocs+0x88>
 401648c:	d8800217 	ldw	r2,8(sp)
 4016490:	10003126 	beq	r2,zero,4016558 <__call_exitprocs+0x174>
 4016494:	dfc00c17 	ldw	ra,48(sp)
 4016498:	df000b17 	ldw	fp,44(sp)
 401649c:	ddc00a17 	ldw	r23,40(sp)
 40164a0:	dd800917 	ldw	r22,36(sp)
 40164a4:	dd400817 	ldw	r21,32(sp)
 40164a8:	dd000717 	ldw	r20,28(sp)
 40164ac:	dcc00617 	ldw	r19,24(sp)
 40164b0:	dc800517 	ldw	r18,20(sp)
 40164b4:	dc400417 	ldw	r17,16(sp)
 40164b8:	dc000317 	ldw	r16,12(sp)
 40164bc:	dec00d04 	addi	sp,sp,52
 40164c0:	f800283a 	ret
 40164c4:	8409883a 	add	r4,r16,r16
 40164c8:	88c00117 	ldw	r3,4(r17)
 40164cc:	2105883a 	add	r2,r4,r4
 40164d0:	1445883a 	add	r2,r2,r17
 40164d4:	18ffffc4 	addi	r3,r3,-1
 40164d8:	11800217 	ldw	r6,8(r2)
 40164dc:	1c001526 	beq	r3,r16,4016534 <__call_exitprocs+0x150>
 40164e0:	10000215 	stw	zero,8(r2)
 40164e4:	303fe726 	beq	r6,zero,4016484 <__call_exitprocs+0xa0>
 40164e8:	00c00044 	movi	r3,1
 40164ec:	1c06983a 	sll	r3,r3,r16
 40164f0:	90804017 	ldw	r2,256(r18)
 40164f4:	8cc00117 	ldw	r19,4(r17)
 40164f8:	1884703a 	and	r2,r3,r2
 40164fc:	10001426 	beq	r2,zero,4016550 <__call_exitprocs+0x16c>
 4016500:	90804117 	ldw	r2,260(r18)
 4016504:	1884703a 	and	r2,r3,r2
 4016508:	10000c1e 	bne	r2,zero,401653c <__call_exitprocs+0x158>
 401650c:	2105883a 	add	r2,r4,r4
 4016510:	1485883a 	add	r2,r2,r18
 4016514:	11400017 	ldw	r5,0(r2)
 4016518:	e009883a 	mov	r4,fp
 401651c:	303ee83a 	callr	r6
 4016520:	88800117 	ldw	r2,4(r17)
 4016524:	98bfc81e 	bne	r19,r2,4016448 <__call_exitprocs+0x64>
 4016528:	b8800017 	ldw	r2,0(r23)
 401652c:	147fd526 	beq	r2,r17,4016484 <__call_exitprocs+0xa0>
 4016530:	003fc506 	br	4016448 <__call_exitprocs+0x64>
 4016534:	8c000115 	stw	r16,4(r17)
 4016538:	003fea06 	br	40164e4 <__call_exitprocs+0x100>
 401653c:	2105883a 	add	r2,r4,r4
 4016540:	1485883a 	add	r2,r2,r18
 4016544:	11000017 	ldw	r4,0(r2)
 4016548:	303ee83a 	callr	r6
 401654c:	003ff406 	br	4016520 <__call_exitprocs+0x13c>
 4016550:	303ee83a 	callr	r6
 4016554:	003ff206 	br	4016520 <__call_exitprocs+0x13c>
 4016558:	88800117 	ldw	r2,4(r17)
 401655c:	1000081e 	bne	r2,zero,4016580 <__call_exitprocs+0x19c>
 4016560:	89000017 	ldw	r4,0(r17)
 4016564:	20000726 	beq	r4,zero,4016584 <__call_exitprocs+0x1a0>
 4016568:	b9000015 	stw	r4,0(r23)
 401656c:	8809883a 	mov	r4,r17
 4016570:	00000000 	call	0 <__alt_mem_epcs>
 4016574:	bc400017 	ldw	r17,0(r23)
 4016578:	883fb71e 	bne	r17,zero,4016458 <__call_exitprocs+0x74>
 401657c:	003fc506 	br	4016494 <__call_exitprocs+0xb0>
 4016580:	89000017 	ldw	r4,0(r17)
 4016584:	882f883a 	mov	r23,r17
 4016588:	2023883a 	mov	r17,r4
 401658c:	883fb21e 	bne	r17,zero,4016458 <__call_exitprocs+0x74>
 4016590:	003fc006 	br	4016494 <__call_exitprocs+0xb0>

04016594 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 4016594:	defffd04 	addi	sp,sp,-12
 4016598:	df000215 	stw	fp,8(sp)
 401659c:	df000204 	addi	fp,sp,8
 40165a0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 40165a4:	e0bfff17 	ldw	r2,-4(fp)
 40165a8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40165ac:	e0bffe17 	ldw	r2,-8(fp)
 40165b0:	1005003a 	cmpeq	r2,r2,zero
 40165b4:	1000021e 	bne	r2,zero,40165c0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 40165b8:	002af070 	cmpltui	zero,zero,43969
 40165bc:	00000106 	br	40165c4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 40165c0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 40165c4:	e037883a 	mov	sp,fp
 40165c8:	df000017 	ldw	fp,0(sp)
 40165cc:	dec00104 	addi	sp,sp,4
 40165d0:	f800283a 	ret

040165d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40165d4:	defffd04 	addi	sp,sp,-12
 40165d8:	dfc00215 	stw	ra,8(sp)
 40165dc:	df000115 	stw	fp,4(sp)
 40165e0:	df000104 	addi	fp,sp,4
 40165e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40165e8:	008100b4 	movhi	r2,1026
 40165ec:	10a1de44 	addi	r2,r2,-30855
 40165f0:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 40165f4:	e13fff17 	ldw	r4,-4(fp)
 40165f8:	40165940 	call	4016594 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40165fc:	003fff06 	br	40165fc <_exit+0x28>
 4016600:	00000010 	cmplti	zero,zero,0
 4016604:	00000000 	call	0 <__alt_mem_epcs>
 4016608:	00527a01 	jmpi	527a0 <OSCtxSw_SWITCH_PC+0x52760>
 401660c:	011f7c01 	jmpi	11f7c0 <OSCtxSw_SWITCH_PC+0x11f780>
 4016610:	001b0c0b 	ldhu	zero,27696(zero)
 4016614:	00000028 	cmpgeui	zero,zero,0
 4016618:	00000018 	cmpnei	zero,zero,0
 401661c:	0400799c 	xori	r16,zero,486
 4016620:	000005dc 	xori	zero,zero,23
 4016624:	400e4400 	call	400e440 <OS_FlagBlock+0x74>
 4016628:	92099170 	cmpltui	r8,r18,9797
 401662c:	95079308 	cmpgei	r20,r18,7756
 4016630:	97049605 	stb	fp,4696(r18)
 4016634:	90019f03 	ldbu	zero,1660(r18)
 4016638:	9c06940a 	0x9c06940a
 401663c:	00000002 	0x2
 4016640:	00000028 	cmpgeui	zero,zero,0
 4016644:	00000044 	movi	zero,1
 4016648:	04007f78 	rdprs	r16,zero,509
 401664c:	000005b0 	cmpltui	zero,zero,22
 4016650:	3c0e4400 	call	3c0e440 <OSCtxSw_SWITCH_PC+0x3c0e400>
 4016654:	92099168 	cmpgeui	r8,r18,9797
 4016658:	95079308 	cmpgei	r20,r18,7756
 401665c:	9c039705 	stb	r16,3676(r19)
 4016660:	90019f02 	0x90019f02
 4016664:	9606940a 	0x9606940a
 4016668:	00000004 	movi	zero,0
 401666c:	040163e0 	cmpeqi	r16,zero,1423
